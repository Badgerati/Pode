{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! \ud83d\udc9d A lot of my free time, evenings, and weekends goes into making Pode happen; please do consider sponsoring as it will really help! \ud83d\ude0a Pode is a Cross-Platform framework to create web servers that host REST APIs, Web Sites, and TCP/SMTP Servers. It also allows you to render dynamic files using .pode files, which is effectively embedded PowerShell, or other Third-Party template engines. Pode also has support for middleware, sessions, authentication, and logging; as well as access and rate limiting features. There's also Azure Functions and AWS Lambda support! \ud83d\ude80 Features Cross-platform using PowerShell Core (with support for PS5) Docker support, including images for ARM/Raspberry Pi Azure Functions, AWS Lambda, and IIS support OpenAPI, Swagger, and ReDoc support Listen on a single or multiple IP address/hostnames Cross-platform support for HTTP(S), SMTP(S), and TCP(S) Cross-platform support for WebSockets, including secure WebSockets Host REST APIs, Web Pages, and Static Content (with caching) Support for custom error pages Request and Response compression using GZip/Deflate Multi-thread support for incoming requests Inbuilt template engine, with support for third-parties Async timers for short-running repeatable processes Async scheduled tasks using cron expressions for short/long-running processes Supports logging to CLI, Files, and custom logic for other services like LogStash Cross-state variable access across multiple runspaces Restart the server via file monitoring, or defined periods/times Ability to allow/deny requests from certain IP addresses and subnets Basic rate limiting for IP addresses and subnets Middleware and Sessions on web servers, with Flash message and CSRF support Authentication on requests, such as Basic, Windows and Azure AD Support for dynamically building Routes from Functions and Modules Generate/bind self-signed certificates (Windows) Open the hosted server as a desktop application \ud83c\udfe2 Companies using Pode \ud83d\udd25 Quick Look! Below is a quick example of using Pode to create a single REST API endpoint to return a JSON response. It will listen on an endpoint, create the route, and respond with a JSON object when http://localhost:8080/ping is called: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/ping' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'value' = 'pong' } } }","title":"Welcome!"},{"location":"#welcome","text":"\ud83d\udc9d A lot of my free time, evenings, and weekends goes into making Pode happen; please do consider sponsoring as it will really help! \ud83d\ude0a Pode is a Cross-Platform framework to create web servers that host REST APIs, Web Sites, and TCP/SMTP Servers. It also allows you to render dynamic files using .pode files, which is effectively embedded PowerShell, or other Third-Party template engines. Pode also has support for middleware, sessions, authentication, and logging; as well as access and rate limiting features. There's also Azure Functions and AWS Lambda support!","title":"Welcome!"},{"location":"#features","text":"Cross-platform using PowerShell Core (with support for PS5) Docker support, including images for ARM/Raspberry Pi Azure Functions, AWS Lambda, and IIS support OpenAPI, Swagger, and ReDoc support Listen on a single or multiple IP address/hostnames Cross-platform support for HTTP(S), SMTP(S), and TCP(S) Cross-platform support for WebSockets, including secure WebSockets Host REST APIs, Web Pages, and Static Content (with caching) Support for custom error pages Request and Response compression using GZip/Deflate Multi-thread support for incoming requests Inbuilt template engine, with support for third-parties Async timers for short-running repeatable processes Async scheduled tasks using cron expressions for short/long-running processes Supports logging to CLI, Files, and custom logic for other services like LogStash Cross-state variable access across multiple runspaces Restart the server via file monitoring, or defined periods/times Ability to allow/deny requests from certain IP addresses and subnets Basic rate limiting for IP addresses and subnets Middleware and Sessions on web servers, with Flash message and CSRF support Authentication on requests, such as Basic, Windows and Azure AD Support for dynamically building Routes from Functions and Modules Generate/bind self-signed certificates (Windows) Open the hosted server as a desktop application","title":"\ud83d\ude80 Features"},{"location":"#companies-using-pode","text":"","title":"\ud83c\udfe2 Companies using Pode"},{"location":"#quick-look","text":"Below is a quick example of using Pode to create a single REST API endpoint to return a JSON response. It will listen on an endpoint, create the route, and respond with a JSON object when http://localhost:8080/ping is called: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/ping' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'value' = 'pong' } } }","title":"\ud83d\udd25 Quick Look!"},{"location":"release-notes/","text":"Release Notes v2.7.2 ### Enhancements * #1002: Adds a `-KeepCredential` switch for `Add-PodeAuthWindowsAd` (thanks @TheBakaBandit!) ### Bugs * #988: Add missing `-ListenerType` parameter description for `Start-PodeServer` * #1001: Fix no Verbs being defined from crashing the server on restart ### Documentation * #975: Update the code sample image in the README to an SVG (thanks @pcgeek86!) * #987: Adds the beginnings of a Roadmap and Project board * #993: Improves documentation for the WebEvent variable v2.7.1 ### Bugs * #990: Fix SMTP attachment name parsing, when the name contains a space ### Security * #997: Fix an XSS exploit on the default error pages v2.7.0 ### Features * #895: Add support for server to be able to connect to external WebSockets * #902: New TCP server, listener, and endpoints; plus Verbs support * #976: Add support for grouping Routes ### Enhancements * #901: Enable support for multiple SMTP endpoints, and certificates * #954: Add anonymous route access support, when authentication is enabled on a route * #960: Add RSET and NOOP SMTP commands * #981: Add switch for AccessControl to create global Options route * #982: Add * level for errors to enable everything ### Bugs * #956: Fix for importing functionss with inline parameters * #957: Fix for some OpenAPI properties being dropped * #958: Some SMTP attachment boundaries can include double quotes * #965: Fix for importing ps1 files * #974: Add Position=0 to most response write functions ### Documentation * #978: Icon and Donation link updates ### Packaging * #984: Bump Docker images to use PS7.2.4 v2.6.2 ### Bugs * #948: Hotfix to resolve issue with importing ActiveDirectory module into runspaces v2.6.1 ### Bugs * #915: Fix regex issue preventing Pode listening on IPv6 addresses * #934: Fix relative path issue when using `-FilePath` on `Start-PodeServer` ### Performance * #913: Add new `-DirectGroups`/`-ADModule` switch for WindowsAD authentication ### Documentation * #940: Add a list of available options for server.psd1 files to configuration docs page v2.6.0 ### Features * #893: Add async/sync Task support * #894: Add helper support and middleware for security HTTP headers ### Enhancements * #867: Add support for PKCE on OAuth2 authentication * #868: Add support for building OAuth2 schemes from OpenID Connect Discovery URLs * #869: Update support to also get the count of currently processing requests * #891: Add `-ArgumentList` to `Invoke-PodeTimer` and `Invoke-PodeSchedule` ### Bugs * #905: Fix for route creation and matching order * #917: Fix for OpenAPI definition not being generated correctly * #932: Dispose of completed Schedule runspaces/pipelines ### Performance * #896: Open and close RunspacePools in parallel - speeds server start-up and close * #910: Only create RunspacePools when they're needed ### Packaging * #871: Compile the PodeListener into netstandard2.0, and now net6.0 v2.5.2 ### Bugs * #892: Fixes a bug with importing modules, where the wrong file was being used v2.5.1 ### Bugs * #877: Fix for `ConvertFrom-PodeJwt` expecting string not byte[] * #879: Fix for retrieving Client Certificates from IIS * #883: Fix for view engine extensions not being ToLower'd ### Documentation * #805: Add announcement bar to docs, referencing official docs on GitHub ### Packaging * #873: Bump PowerShell to v7.2.1 in Docker images * #881: Bump mkdocs to v1.2.3, and Material theme to v8.1.2 v2.5.0 ### Enhancements * #771: Adds more `Use-PodeXYZ` functions for auto-loading scripts * #813: Adds new `Out-PodeVariable` to set variables on the Host when the server stops * #817: Adds LastTriggerTime property for Schedules and Timers * #825: Adds new Crash server event hook * #826: Add support for HTTP and WebSocket endpoints to listen on the same Address/Port * #827: Add `-Compress` switch to `Save-PodeState` * #828: Add `-Merge` switch to `Restore-PodeState`, to stop overwriting of state on restore * #830: Make `ConvertFrom-PodeJwt` public, and use `id_token` from the TokenUrl during OAuth2 for the user object * #836: If `-Object` on `Lock-PodeObject` isn't supplied, use the global Lockable by default * #837: Adds new Stop server event hook * #851: Enable signals to be sent directly back to the sending client via WebSockets * #852: Add new `$session:` and `$state:` variable scopes * #862: Use `-Threads` on `Start-PodeServer` for WebSockets as well, if endpoint supplied * #864: Add `-Force` to `Get-PodeSessionId` to allow the retrieval of unauthorised SessionIds * #865: Add support for hosting Pode servers as IIS website applications * #869: Add new metric functions for retrieving count of current active Requests/Signals ### Bugs * #808: Fix syntax errors in generated OpenAPI definitions * #829: Fix issue with Range header returning 200 instead of 404 for invalid URI * #845: Fix for single item arrays being converted to JSON * #860: Fix duplicate limits being added during IP/Route/Endpoint middleware checks ### Performance * #856: Replace occurrences of piping to `Out-Null` with `$null =` instead (thanks @RobinBeismann!) ### Documentation * #842: Adds additional documentation around IIS and Kerberos (thanks @ittchmh!) ### Packaging * #843: Split up the Core.ps1 file into separate files (thanks @mark05e!) * #872: Bumps PowerShell to v7.1.5 in Docker images v2.4.2 ### Bugs * #810: Fixes a Local/UTC datetime issue on Cookies, expiring sessions early * #811: Fixes the HTTPS parameter set on `Start-PodeStaticServer` * #814: Fixes a route ordering issue on Swagger pages ### Documentation * #816: Fixes a typo on LoginPage (thanks @phatmandrake!) ### Packaging * #818: Bumps PowerShell to v7.1.4 in Docker images v2.4.1 ### Enhancements * #801: Add new `-SearchBase` parameter to `Add-PodeAuthWindowsAD` for OpenLDAP * #802: Add PEM certificate/key pair support for HTTPS endpoints ### Bugs * #796: Fix text wrapping issue when using ldapsearch (thanks @phatmandrake!) * #797: When on MacOS, the default SSL protocol should only be TLS1.2 ### Documentation * #798: Update IIS hosting page to reference the minimum features required * #800: Add examples to Route creation for Functions/Modules (thanks @phatmandrake!) * #801: Update Windows AD authentication page to better reference Domain and OpenLDAP v2.4.0 ### Features * #766: Add support for server Event Hooks, to run scripts on events like terminating the server * #769: Add support for custom Lockable objects ### Enhancements * #763: Add support for SMTP attachments * #765: Use a random secure GUID for Session `-Secret` if not supplied * #767: Add new `Restart-PodeServer` to manually restart the server internally * #779: Replace uses of `Join-Path` with `[System.IO.Path]::Combine` * #786: Add new `Get-PodeStateNames` to get array of current Names with shared state ### Bugs * #768: Fix for a rare multithreading bug when serialising session data * #770: `-SuccessUseOrigin` should only work for GET requests * #776: Fix for the PodeResponse class and the handling of AggregateExceptions ### Documentation * #757: Add information about using `netsh interface portproxy` for external access as non-admin * #762: Update `Add-PodeMiddleware` function summary to reference returning a boolean value v2.3.0 ### Features * #723: Add support for logging to Windows Event Viewer * #749: Add support for API key authentication ### Enhancements * #731: New `Use-PodeRoutes` to auto-load routes from a `/routes` directory * #741: Add support for IIS to more gracefully close the site on recycle * #743: Add `-AsCredential` switch for Basic/Form authentication * #752: Add `-AsJWT` switch for Bearer/API key authentication ### Bugs * #738: Fix a bug where the body wasn't reset on new requests ### Documentation * #739: Flesh out the documentation on creating sites in IIS * #741: Add documentation on IIS application pool recycling * #751: Minor update to Bearer documentation to make header more visible v2.2.3 ### Bugs * #736: Fix issue with v2.2.2 PowerShell Gallery packaging v2.2.2 ### Enhancements * #727: Allow referencing an OpenAPI component schema from another component schema (thanks @glatzert!) * #732: Allow changing of Bearer and Digest Authorization header tags ### Packaging * #726: Bump docker images to v7.1.3, and also add a new Alpine image v2.2.1 ### Bugs * #716: Fix bug with `$TimerEvent` object within Timers * #717: Fix bug with looping services exiting immediately * #720: Fix bug with enabling termination in PS ISE v2.2.0 ### Features * #682: Add support for the HTTP Range request header ### Enhancements * #684: Add support for login pages to redirect to the originating page * #696: Fast processing of form data in requests * #696: Add support for Request Timeout and Request Body Size * #711: Add support for custom Signal Routes for WebSockets ### Bugs * #690: Fix bug with high CPU/Memory on IIS authentication with sessions, from WinIdentity * #702: Fix bug with loading manifest modules - such as the ActiveDirectory module * #709: Fix bug with `multipart/form-data` requests in Azure Functions ### Documentation * #704: Fix LoginPage docs so it matches the repository example (thanks @mark05e!) v2.1.1 ### Enhancements * #693: Add OperationId OpenAPI support on routes (thanks @glatzert) * #698: Add support for Certificate Store Name and Location on `Add-PodeEndoint` ### Bugs * #686: Add EndpointName support on `Set-PodeResponseAttachment` * #689: Fix bug with rate limiting preventing requests when no endpoint names ### Documentation * #661: Multiple additions to docs - error logging, cookies, headers, etc * #683: Bump version of mkdocs-material theme v2.1.0 ### Enhancements * #655: Update the Socket Listener to handle larger request payloads, and fix receiving SSL requests * #657: Adds `-ScriptBlock` parameters to inbuilt authentication methods * #667: Set the WinIdentity from IIS auth, and add documentation for Kerberos Constrained Delegation (thanks @RobinBeismann!) ### Bugs * #648: Fixes for using global authentcation in OpenAPI and Swagger * #650: Fix for redirecting HTTP to HTTPS on default 80/443 ports * #652: Fix for sessions not extending from AJAX requests, or when session data wasn't updated * #654: Fix for `-Title` and `-Version` in `Get-PodeOpenApiDefinition` being mandatory * #660: Fix for removing cookies in AJAX responses * #663: Fix for when an endpoint's `-Hostname` is localhost, and bound to a route * #669: Further fixes and improvements for more `-EndpointName` validation use-cases on routes * #670: Remove extra NewLine from form files (thanks @ili101!) * #673: Fix to make headers in request/response case-insensitive ### Documentation * #651: Update Azure AD authentication documentation to reference using Basic authentication as well (thanks @RobinBeismann) ### Packaging * #629: Update dockerfile to use Ubuntu 18.04 * #630: Update dockerfiles to use PowerShell 7.1.1 v2.0.3 ### Bugs * #641: Fix an issue with Invalid Request Lines being received when running via SSL and using a Proxy * #642: Fix certificate X509FindType enum ### Documentation * #639: Fix the docker example ports to match documentation (thanks @ArieHein!) v2.0.2 ### Bugs * #636: Fixes bug with OAuth2 RedirectUrl when behind IIS v2.0.1 ### Bugs * #631: Parse username during Windows AD authentication * #632: Fixes null reference exception during server restart v2.0.0 ### Features * #472: Adds support for client certificate authentication * #524: Adds support for rate limiting endpoints and routes * #551: Adds support for OAuth2 and Azure AD authentication * #585: Enables support for client-to-server web sockets * #612: Adds support for Kestrel as a listener - via a new Pode.Kestrel module * #625: Adds support for local Windows user authentication ### Enhancements * #572: Removes `-Endpoint` and `-Protocol` parameters in favur of `-EndpointName` * #575: Changes and improvements to Authentication on Routes and Middleware * #577: Massive improvements to alleviate of scoping with Modules, Snapins, Functions, and Variables * #590: Enable support for Chrome in `Show-PodeGui` * #618: The `$WebEvent` object is no longer passed to Routes, Middleware, etc., and should be accessed directly * #619: Improved support for hostnames on endpoints * #622: Allows support for a server to run endpoints of differing protocols ### Bugs * #600: Fixes public functions that weren't prefixed with \"Pode\" ### Internal Code * #573: Drop support for HttpListener, and rewrite Pode listener using .NET Core * #584: Alter SMTP server to use the new Pode listener ### Documentation * #592: Updates IIS example to allow PUT/DELETE in web.config v1.8.4 ### Bugs * #615: Fixes a bug with Azure Functions V3, where the sys property has now been removed v1.8.3 ### Enhancements * #602: Adds a new `Remove-PodeOAResponse` function to allow removing of default responses * #603: Adds a new `-Enum` parameter onto the OpenAPI property functions v1.8.2 ### Bugs * #594: Add `Import-PodeSnapIn` to FunctionsToExport list v1.8.1 ### Bugs * #578: Fixes OpenAPI functions with rogue \"=\" on returning a value * #581: Fixes large messages being sent via web sockets v1.8.0 ### Enhancements * #533: Support on states for inclusion/exlcusions when saving, and scopes on states * #538: Support to batch log items together before sending them off to be recorded * #540: Adds a Ctrl+B shortcutto open the server in the default browser * #542: Add new switch to help toggling of Status Page exception message * #548: Adds new `Get-PodeSchedule` and `Get-PodeTimer` functions * #549: Support for calculating a schedule's next trigger datetime ### Bugs * #532: Fixes a bug in `Get-PodeRoute` when a route is bound to multiple endpoints * #547: Fixes a bug where not all data was being read on SMTP messages * #558: Paths with URL encoded characters fail when trying to load static content ### Documentation * #381: Documentation on using Pode in Heroku (plus auto-detection support) ### Packaging * #546: Adds automated integration tests * #562: Remove AppVeyor and TravisCI in favour of GitHub Actions * #567: Bump Powershell version in Docker to 7.0.1 * #569: Bump version of MkDocs and Material Theme v1.7.3 ### Bugs * #554: Fixes an issue where HTML static files would be treated as dynamic files v1.7.2 ### Bugs * #543: Fixes an internal issue that was causing errors in the SMTP server v1.7.1 ### Bugs * #534: Fixes an issue with IIS Windows Authentication when using foreign trusted domains (thanks @RobinBeismann!) v1.7.0 ### Features * #504: Support for GZip and Deflate compression on Requests * #507: Support for GZip and Deflate compression on Responses * #510: New inbuilt authenticator to allow authenticating users from a file ### Enhancements * #511: Adds middleware support to `Add-PodeStaticRoute` * #518: New `Get-PodeEndpoint` function to retrieve and filter endpoints * #525: Support for Azure Web Apps, fixes DisableTermination, and adds Quiet switch ### Bugs * #509: Fixes a freezing bug caused by sessions - and improves performance of sessions ### Documentation * #517: Adds missing `-Sessionless` parameter in IIS docs (thanks @RobinBeismann!) ### Packaging * #503: Bump the Docker images to PowerShell v7.0 v1.6.1 ### Bugs * 495: Fix issue with parsing query strings when using the Pode server type ### Documentation * #496: When using IIS, install Pode using AllUsers scope * #497: Comments about using PowerShell classes in Pode, under Known Issues v1.6.0 ### Features * #464: Request metrics for routes for the number of requests * #473: Digest Authentication support (with added support for PostValidator scripts) * #478: Bearer Authentication support (with support for scope validation) ### Enhancements * #425: Adds functions to get routes: `Get-PodeRoute` and `Get-PodeStaticRoute` * #474: The inbuilt Windows AD authentication now works cross-platform! * #475: Adds support for hosting a Pode server via IIS ### Bugs * #477: Fix QueryString parsing on Pode server type ### Documentation * #484: Information about Web Events and their structure v1.5.0 ### Features * #218: Adds OpenAPI with Swagger and ReDoc support ### Enhancements * #458: Adds a Timestamp to the event object passed to Routes/Middleware * #459: Ability to get the Uptime and Restart Count of the server ### Bugs * #461: Fix the parsing of payloads in Azure Functions and AWS Lambdas * #465: Format fix in the OpenAPI examples (thanks @haidouks!) ### Packaging * #470: Bumps the version of the MkDocs Material theme to 4.6.0 v1.4.0 ### Enhancements * #447: Sessions can now be used via Headers for better CLI support * #448: `-EndpointName` on routes can now take an array of endpoint names * #454: New wrapper function, `Start-PodeStaticServer`, for simple static websites ### Bugs * #446: Fixes functions that were not in accordence with Coding Guidelines (thanks @jhainau!) ### Documentation * #445: Improved documentation on using CSRF middleware v1.3.0 ### Enhancements * #421: Adds a new `-FilePath` parameter to the `Add-PodeTimer` and `Add-PodeSchedule` functions * #422: Adds a new `-FilePath` parameter to the `Start-PodeServer` function * #423: New `Edit-PodeSchedule` and `Edit-PodeSchedule` functions * #431: Support for the `WWW-Authenticate` header on failed Authentication (401) responses * #433: Support in custom Authentication types to allow returning extra Headers on the response * #435: New `Set-PodeScheduleConcurrency` function to set the max number of concurrent schedules * #440: Adds support in the `package.json` for custom PowerShell Repositories ### Bugs * #429: Running `pode start` failed to invoke server script on some platforms * #441: Fixes an issue where local modules failed to resolve correct path v1.2.1 ### Enhancements * #415: New functions for invoking Timer and Schedules adhoc ### Bugs * #416: Fix for using `*/INT` in cron-expressions ### Documentation * #418: Docs and examples typo fixes v1.2.0 ### Features * #395: Built-in support for using Server-to-Client websockets * #389: Support for defining custom body/payload parsers for specific ContentTypes ### Enhancements * #401: Support for running a Schedule/Timer's logic when the server starts/restarts * #400: Helper wrapper method `Out-PodeHost` to output data to the main host terminal * #390: Support for setting a Status Code on all \"Write-Pode[Type]Response\" functions * #386: Support to set a fixed ContentType on `Set-PodeResponseAttachment` (thanks @Windos!) * #383: If a called route exists but for a different HTTP method, then return a 405 not a 404 * #382: Support on Unix environments to terminate/restart a server using Shift+C/R ### Documentation * #405: How to create a server that has endpoints accessible externally * #399: Reference to the literal parameter names on Schedules * #396: How to return a custom Status Code and/or message from an Authenticator v1.1.0 ### Features * #376: *Experimental* support for cross-platform HTTPS! ### Bugs * #372: Fixed an issue when getting the length of strings in `Get-PodeCount` (thanks @Fraham!) * #384: Fixed `Set-PodeResponseAttachment` not setting the ContentLength (plus support of literal paths) ### Packaging * #375: Update the Dockerfiles to PowerShell 6.2.3 * #253: Publish the Docker images on the GitHub Package Registry v1.0.1 ### Bugs * #367: If a \"server.psd1\" file is not present, Logging will not work * #368: Logging will attempt to mask everything if no mask patterns are supplied v1.0.0 ### Features * #228: Support for rendering Markdown as HTML (Fully supported in PowerShell 7+) * #334: New \"ConvertTo-PodeRoute\" function to automatically make Routes from Functions/Modules * #344: New \"Add-PodePage\" function to more easily make GET Routes for simple pages ### Enhancements * #328: New \"Get-PodeAuthADUser\" parameter -NoGroups, to skip retrieving groups from AD * #330: Allow for -ArgumentList on Routes, Handlers, Timers, Schedules, etc - now they can be more dynamic * #341: Allow Show-PodeGui to work under PowerShell 7 on Windows * #343: Ability to mask data in logs using Regex * #352: On \"Add-PodeEndpoint\", split the -Address parameter into -Address/-Port parameters * #354: Two new functions for Sessions to Save and Remove them * #355: Support on \"Add-PodeEndpoint\" for a -RedirectTo parameter, to automatically build a redirect Route ### Bugs * #312: On Static Routes, don't create a PSDrive when the Source is a File Share * #318: For Cron Expressions, split the DayOfWeek and DayOfMonth * #324: Setting Authentication middleware globally didn't save the Session object * #347: Route parameters fail if the value contains a dot, or other special characters * #351: Stop the \"Done\" message appearing when the server errors ### Packaging * #338: Update the version of MkDocs Material Theme to v4.4.0 * #349: Update the Dockerfiles to PowerShell 6.2.2 ### Internal Code * #279, #279, #287, #289, #290, #291, #292, #294, #295, #296, #297, #305, #306, #314, #315 - Convert all functions to PowerShell Syntax * #303: Change from using \"pode.<env>.json\" files to \"server.<env>.psd1\" files ### Documentation * #299: Rebuild Documentation's Functions section using PlatyPS * #316: Write a migration guide for going from v0.X to v1.0 * #321: Go through all documentation, ensuring it's up-to-date with new Syntax v0.32.0 ### Enhancements * #270: Support on `gui` to specify the width and height of the window * #280: Support when file monitoring to output the files that caused the server to restart * #282: New actions on `state` to save and restore to to/from a file ### Bugs * #271: Fix in `Convert-PodePathPatternsToRegex` when converting file names - thanks @Fraham! ### Documentation * #284: Notes in documention about referencing JSON payload data in PowerShell 4/5 v0.31.0 ### Features * #264: Support for Azure Functions and AWS Lambda * #264: New `header` function for adding/setting and getting header values from the Request/Response ### Enhancements * #264: Cookies are now done via the \"Set-Cookie\" header, meaning `cookie` now appropriately sets multiple cookies * #266: Have a `-Browse` flag on the `server` to auto-launch the website in a browser ### Bugs * #264: The `text` function now sets the content-type to \"text/plain\" by default v0.30.0 ### Enhancements * #245: Support for Windows AD group validation on the inbuilt 'windows-ad' authentication validator * #250: Support for bulk importing/loading scripts and modules * #251: Support on routes to supply a FilePath to a script that contains the route's scriptblock * #252: Support on the server function to supply a custom RootPath ### Performance * #258: Performance improvements to all aspects of a web request, reducing response times ### Packaging * #261: Docker images updated to PowerShell Core v6.2.1 v0.29.0 ### Enhancements * #216: Multi-content-type support on Error Pages * #232: Support for setting/forcing default content types on routes * #243: Support on Static Routes to flag them as \"Download Only\" * #248: Ability to alter the server's root path ### Packaging * #227: Docker images updated to PowerShell Core v6.2.0 * #233: New ARM32 docker image, enabling support for Raspberry Pi ### Build * #237, #238, #239: Updates to CI tools v0.28.1 ### Bugs * #226: Adds the \"gui\" function to export list v0.28.0 ### Features * #210: New \"cookie\" function added, to support setting/getting cookies - including signing them * #211: Support for CSRF via the new \"csrf\" function, which generates valid middleware and random tokens ### Enhancements * #204: Support on the \"import\" function to import PSSnapIns * #223: Support for using a Thumbprint on the \"listen\" function instead of Certificate name ### Bugs * #206: When disposing/restarting the SMTP server, send a \"QUIT\" message if still connected ### Clean-Up * #209: Rename of internal function to avoid collisions, and change \"Get-PodeConfiguration\" to \"config\" v0.27.3 ### Bugs * #217: Binding to hostname throws error v0.27.2 ### Bugs * #212: Incorrect variable name used in html, csv, xml and json functions when referencing files v0.27.1 ### Bugs * #199: Fix issues with relative paths when running server as a service * #200: Fix issue with file monitor, where folder patterns fail to match on new files v0.27.0 ### Features * #185: Support for Server Restarts either Periodically or at specific Times, with support for cron expressions * #188: Support for Custom Error pages, with inbuilt Pode error pages ### Enhancements * #189: SMTP server to parse data headers and have them set on the event object ### Performance * #196: Massive improvements to performance when loading static content ### Bugs * #181: Importing modules into the current scope should be done Globally, making them instantly accessible * #183: TCP Reads and Writes should be Async so they can be terminated more easily * #184: SMTP and TCP servers fail to Restart * #196: Default paths on Static Content fail when using nested directories ### General * #194: Update Dockerfile from using PSCore 6.1.0 to 6.1.3 v0.26.0 ### Features * #162: Basic support for local modules in \"package.json\" on \"pode install\" * #175: Support for flash messages on sessions, and in authentication ### Bugs * #72: RunspacePools aren't being recreated during a restart, and modules fail to import into other RunspacePools v0.25.0 ### Features * #170: Support for Static Content Caching, with ability to include/exclude routes/extensions ### Enhancements * #161: New method to return configuration from the pode.json file, plus improved docs and support for environment configs * #165: Support on the inbuilt SMTP server for Subject and decoded Body * #168: Ability to exclude/include paths/extensions when triggering an Internal Restart ### Documentation * #45: Add \"Known Issues\" pages to documentation ### Clean-Up * #160: Internally, rename occurrences of $PodeSession to $PodeContext v0.24.0 ### Features * #125: Helper support function for uploading files from a web form ### Enhancements * #149: Inbuilt support for Windows AD Authentication ### Bugs * #152: Fix the Choco install script so it installs the module for PowerShell Core as well * #155: After an Internal Restart, the View Engine is not set back to the default * #158: If views/public directories don't exist, the creation of PSDrive fails v0.23.0 ### Features * #77: Ability to run a web server, and view it through a Desktop Application (Windows only) ### Enhancements * #137: Don't require admin privileges when listening on Localhost * #140: Add a Custom switch to the Logger function - no need to use the \"custom_<name>\" format any more! * #142: Ability to listen on multiple endpoints - especially useful for hostnames against a single IP address * #143: Support on routes to allow them to be bound against specific hostnames/protocols * #146: Listen function to have Name parameter - so we can select which one to bind a Route/Gui to better v0.22.0 ### Enhancements * #123: Ability to remove a `route` * #124: Views, Public and custom static routes now use `New-PSDrive` to prevent directory tranversing * #128: Ability to `listen` using a host name * #130: `auth` now allows re-using inbuilt/custom parsers. Rather than `name` the type, the name is now any custom name you want to use and yuo specify the `-type` (like basic, etc). If no `-type` supplied, `name` is used as the type instead * #131: There's now a route parameter on `middleware`, so you can define global middleware that only run on requests for specific routes. v0.21.0 ### Enhancements * #110: Return a 401 for inaccessible files * #116: Support on custom static content, for returning `index.html` or `default.html` (plus others), if a directory is requested ### Bugs * #111: Separate out the `service` server type into own runspace * #112: Server should return a 500 if middleware/route fails unexpectedly, rather than a 200 ### Documentation * #120: Added examples of running scripts as Windows or Linux services [here](https://badgerati.github.io/Pode/Getting-Started/RunAsService/) ### Clean-Up * #118: Rename `$WebSession` to `$WebEvent` - internal references only v0.20.0 ### Documentation * Extended documentation for third-party template engines * \"Building your first app\" documentation ### Features * #103: Adds support for custom static routes ### Enhancements * #101: Adds a `-Limit` parameter to schedules * `import` function now supports installed modules ### Clean-Up * #102: Logging converted to internal `endware` script v0.19.1 ### Documentation * #91: This release contains far better documentation for Pode: https://badgerati.github.io/Pode ### Enhancements * #93: Updates PowerShell Docker image to 6.1.0, so internal restarts now work * #96: Chocolatey package now contains the module, rather than downloading from GitHub * Adds more aliases for parameters on core functions * Renames `script` function to `import` (the former is still supported) * New CI builder: Travis CI, used to test Pode on *nix and PowerShell Core * Minor miscellaneous stability fixes v0.19.0 ### Features * #84: Session cookie support, with in-mem/custom data storage * #86: Request authentication support. Currently implemented: Basic, Forms, Custom ### Enhancements * #88: Enabling Ctrl+R to be pressed on the CLI to trigger a server restart - similar to using `-FileMonitor`. v0.18.0 ### Features * #78: Middleware support for web servers, allowing custom logic and extension modules on web request/responses ### Enhancements * #81: Added aliases onto some of the `Server` parameters v0.17.0 ### Features * #43: Ability to generate self-signed certificates, and bind those certs - or pre-installed certs - when using HTTPS * #71: New `scripts` call to specify external modules that should be imported into each runspace ### Bugs * #71: Unable to access functions from external scripts * #73: Calling `pode start` fails to import Pode module into runspaces v0.16.0 ### Features * #66: Support for basic rate limiting of requests per x seconds from IPs * #68: Support for scheduled tasks using cron expressions ### Enhancements * #62: Helper function to ease URL redirection * #64: Have a '*' HTTP method so a route can be used on every method v0.15.0 ### Features * #31: Support for multithreaded responses on web, smtp and tcp servers using `-Threads` on your Server block ### Misc * #59: Removal of obsolete functions, such as the older `Write-JsonResponse` which is now just `Json` * #31: Addition of some minor performance tests using `k6` * Addition of new icon and logo for Pode v0.14.0 ### Features * #21: Ability for Pode to Internally Restart when a File Change is Detected * #52: Support for Allowing/Denying IP and Subnet Addresses ### Enhancements * #44: Setup Unit Tests with Pester and run on AppVeyor ### Bugs * #51: Set Dockerfile to use a fixed version of the PowerShell container, rather than latest * #55: Setup SMTP/TCP listeners to run in separate runspace like Web v0.13.0 ### Features * #40: Ability to add variables to a shared state, so you can re-use variables in timers, loggers, and routes v0.12.0 ### Features * #33: Support for logging to the terminal, files, and custom loggers for LogStash/Fluentd/etc * #35: New `Attach` function to help attach files from the public directory to the response for downloading ### Enhancements * #32: Ability to listen on a specific IP address using `-IP` on a `Server` * #36: Support for relative paths on views/public content, when running server script from non-root directory v0.11.3 ### Bugs and Enhancements * #22: Proper fix for high CPU usage, by using `Task.Wait` with `CancellationTokens`; A Runspace is setup to monitor for key presses, and on `Ctrl+C` will `Cancel()` the token and terminate Pode v0.11.2 ### Bugs * #22: Hot fix patch for reducing high CPU usage when idle v0.11.1 ### Bugs * #16: Status and Include functions were missing from module export list v0.11.0 ### Features * #5: Async timers to run tasks and processes in a separate thread (see timers sections in README) ### Enhancements * #7: New `status` function to easily alter the StatusCode of a Response * #8: New `json`, `xml`, `html`, `csv`, `view` and `tcp` functions to replace current \"Write-<Type>Response\" - now obsolete - functions (see ticket for explanation, and README for usage) ### Bugs * #12: Fixed an issue that caused image files (and others) to not render appropriately","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#v272","text":"### Enhancements * #1002: Adds a `-KeepCredential` switch for `Add-PodeAuthWindowsAd` (thanks @TheBakaBandit!) ### Bugs * #988: Add missing `-ListenerType` parameter description for `Start-PodeServer` * #1001: Fix no Verbs being defined from crashing the server on restart ### Documentation * #975: Update the code sample image in the README to an SVG (thanks @pcgeek86!) * #987: Adds the beginnings of a Roadmap and Project board * #993: Improves documentation for the WebEvent variable","title":"v2.7.2"},{"location":"release-notes/#v271","text":"### Bugs * #990: Fix SMTP attachment name parsing, when the name contains a space ### Security * #997: Fix an XSS exploit on the default error pages","title":"v2.7.1"},{"location":"release-notes/#v270","text":"### Features * #895: Add support for server to be able to connect to external WebSockets * #902: New TCP server, listener, and endpoints; plus Verbs support * #976: Add support for grouping Routes ### Enhancements * #901: Enable support for multiple SMTP endpoints, and certificates * #954: Add anonymous route access support, when authentication is enabled on a route * #960: Add RSET and NOOP SMTP commands * #981: Add switch for AccessControl to create global Options route * #982: Add * level for errors to enable everything ### Bugs * #956: Fix for importing functionss with inline parameters * #957: Fix for some OpenAPI properties being dropped * #958: Some SMTP attachment boundaries can include double quotes * #965: Fix for importing ps1 files * #974: Add Position=0 to most response write functions ### Documentation * #978: Icon and Donation link updates ### Packaging * #984: Bump Docker images to use PS7.2.4","title":"v2.7.0"},{"location":"release-notes/#v262","text":"### Bugs * #948: Hotfix to resolve issue with importing ActiveDirectory module into runspaces","title":"v2.6.2"},{"location":"release-notes/#v261","text":"### Bugs * #915: Fix regex issue preventing Pode listening on IPv6 addresses * #934: Fix relative path issue when using `-FilePath` on `Start-PodeServer` ### Performance * #913: Add new `-DirectGroups`/`-ADModule` switch for WindowsAD authentication ### Documentation * #940: Add a list of available options for server.psd1 files to configuration docs page","title":"v2.6.1"},{"location":"release-notes/#v260","text":"### Features * #893: Add async/sync Task support * #894: Add helper support and middleware for security HTTP headers ### Enhancements * #867: Add support for PKCE on OAuth2 authentication * #868: Add support for building OAuth2 schemes from OpenID Connect Discovery URLs * #869: Update support to also get the count of currently processing requests * #891: Add `-ArgumentList` to `Invoke-PodeTimer` and `Invoke-PodeSchedule` ### Bugs * #905: Fix for route creation and matching order * #917: Fix for OpenAPI definition not being generated correctly * #932: Dispose of completed Schedule runspaces/pipelines ### Performance * #896: Open and close RunspacePools in parallel - speeds server start-up and close * #910: Only create RunspacePools when they're needed ### Packaging * #871: Compile the PodeListener into netstandard2.0, and now net6.0","title":"v2.6.0"},{"location":"release-notes/#v252","text":"### Bugs * #892: Fixes a bug with importing modules, where the wrong file was being used","title":"v2.5.2"},{"location":"release-notes/#v251","text":"### Bugs * #877: Fix for `ConvertFrom-PodeJwt` expecting string not byte[] * #879: Fix for retrieving Client Certificates from IIS * #883: Fix for view engine extensions not being ToLower'd ### Documentation * #805: Add announcement bar to docs, referencing official docs on GitHub ### Packaging * #873: Bump PowerShell to v7.2.1 in Docker images * #881: Bump mkdocs to v1.2.3, and Material theme to v8.1.2","title":"v2.5.1"},{"location":"release-notes/#v250","text":"### Enhancements * #771: Adds more `Use-PodeXYZ` functions for auto-loading scripts * #813: Adds new `Out-PodeVariable` to set variables on the Host when the server stops * #817: Adds LastTriggerTime property for Schedules and Timers * #825: Adds new Crash server event hook * #826: Add support for HTTP and WebSocket endpoints to listen on the same Address/Port * #827: Add `-Compress` switch to `Save-PodeState` * #828: Add `-Merge` switch to `Restore-PodeState`, to stop overwriting of state on restore * #830: Make `ConvertFrom-PodeJwt` public, and use `id_token` from the TokenUrl during OAuth2 for the user object * #836: If `-Object` on `Lock-PodeObject` isn't supplied, use the global Lockable by default * #837: Adds new Stop server event hook * #851: Enable signals to be sent directly back to the sending client via WebSockets * #852: Add new `$session:` and `$state:` variable scopes * #862: Use `-Threads` on `Start-PodeServer` for WebSockets as well, if endpoint supplied * #864: Add `-Force` to `Get-PodeSessionId` to allow the retrieval of unauthorised SessionIds * #865: Add support for hosting Pode servers as IIS website applications * #869: Add new metric functions for retrieving count of current active Requests/Signals ### Bugs * #808: Fix syntax errors in generated OpenAPI definitions * #829: Fix issue with Range header returning 200 instead of 404 for invalid URI * #845: Fix for single item arrays being converted to JSON * #860: Fix duplicate limits being added during IP/Route/Endpoint middleware checks ### Performance * #856: Replace occurrences of piping to `Out-Null` with `$null =` instead (thanks @RobinBeismann!) ### Documentation * #842: Adds additional documentation around IIS and Kerberos (thanks @ittchmh!) ### Packaging * #843: Split up the Core.ps1 file into separate files (thanks @mark05e!) * #872: Bumps PowerShell to v7.1.5 in Docker images","title":"v2.5.0"},{"location":"release-notes/#v242","text":"### Bugs * #810: Fixes a Local/UTC datetime issue on Cookies, expiring sessions early * #811: Fixes the HTTPS parameter set on `Start-PodeStaticServer` * #814: Fixes a route ordering issue on Swagger pages ### Documentation * #816: Fixes a typo on LoginPage (thanks @phatmandrake!) ### Packaging * #818: Bumps PowerShell to v7.1.4 in Docker images","title":"v2.4.2"},{"location":"release-notes/#v241","text":"### Enhancements * #801: Add new `-SearchBase` parameter to `Add-PodeAuthWindowsAD` for OpenLDAP * #802: Add PEM certificate/key pair support for HTTPS endpoints ### Bugs * #796: Fix text wrapping issue when using ldapsearch (thanks @phatmandrake!) * #797: When on MacOS, the default SSL protocol should only be TLS1.2 ### Documentation * #798: Update IIS hosting page to reference the minimum features required * #800: Add examples to Route creation for Functions/Modules (thanks @phatmandrake!) * #801: Update Windows AD authentication page to better reference Domain and OpenLDAP","title":"v2.4.1"},{"location":"release-notes/#v240","text":"### Features * #766: Add support for server Event Hooks, to run scripts on events like terminating the server * #769: Add support for custom Lockable objects ### Enhancements * #763: Add support for SMTP attachments * #765: Use a random secure GUID for Session `-Secret` if not supplied * #767: Add new `Restart-PodeServer` to manually restart the server internally * #779: Replace uses of `Join-Path` with `[System.IO.Path]::Combine` * #786: Add new `Get-PodeStateNames` to get array of current Names with shared state ### Bugs * #768: Fix for a rare multithreading bug when serialising session data * #770: `-SuccessUseOrigin` should only work for GET requests * #776: Fix for the PodeResponse class and the handling of AggregateExceptions ### Documentation * #757: Add information about using `netsh interface portproxy` for external access as non-admin * #762: Update `Add-PodeMiddleware` function summary to reference returning a boolean value","title":"v2.4.0"},{"location":"release-notes/#v230","text":"### Features * #723: Add support for logging to Windows Event Viewer * #749: Add support for API key authentication ### Enhancements * #731: New `Use-PodeRoutes` to auto-load routes from a `/routes` directory * #741: Add support for IIS to more gracefully close the site on recycle * #743: Add `-AsCredential` switch for Basic/Form authentication * #752: Add `-AsJWT` switch for Bearer/API key authentication ### Bugs * #738: Fix a bug where the body wasn't reset on new requests ### Documentation * #739: Flesh out the documentation on creating sites in IIS * #741: Add documentation on IIS application pool recycling * #751: Minor update to Bearer documentation to make header more visible","title":"v2.3.0"},{"location":"release-notes/#v223","text":"### Bugs * #736: Fix issue with v2.2.2 PowerShell Gallery packaging","title":"v2.2.3"},{"location":"release-notes/#v222","text":"### Enhancements * #727: Allow referencing an OpenAPI component schema from another component schema (thanks @glatzert!) * #732: Allow changing of Bearer and Digest Authorization header tags ### Packaging * #726: Bump docker images to v7.1.3, and also add a new Alpine image","title":"v2.2.2"},{"location":"release-notes/#v221","text":"### Bugs * #716: Fix bug with `$TimerEvent` object within Timers * #717: Fix bug with looping services exiting immediately * #720: Fix bug with enabling termination in PS ISE","title":"v2.2.1"},{"location":"release-notes/#v220","text":"### Features * #682: Add support for the HTTP Range request header ### Enhancements * #684: Add support for login pages to redirect to the originating page * #696: Fast processing of form data in requests * #696: Add support for Request Timeout and Request Body Size * #711: Add support for custom Signal Routes for WebSockets ### Bugs * #690: Fix bug with high CPU/Memory on IIS authentication with sessions, from WinIdentity * #702: Fix bug with loading manifest modules - such as the ActiveDirectory module * #709: Fix bug with `multipart/form-data` requests in Azure Functions ### Documentation * #704: Fix LoginPage docs so it matches the repository example (thanks @mark05e!)","title":"v2.2.0"},{"location":"release-notes/#v211","text":"### Enhancements * #693: Add OperationId OpenAPI support on routes (thanks @glatzert) * #698: Add support for Certificate Store Name and Location on `Add-PodeEndoint` ### Bugs * #686: Add EndpointName support on `Set-PodeResponseAttachment` * #689: Fix bug with rate limiting preventing requests when no endpoint names ### Documentation * #661: Multiple additions to docs - error logging, cookies, headers, etc * #683: Bump version of mkdocs-material theme","title":"v2.1.1"},{"location":"release-notes/#v210","text":"### Enhancements * #655: Update the Socket Listener to handle larger request payloads, and fix receiving SSL requests * #657: Adds `-ScriptBlock` parameters to inbuilt authentication methods * #667: Set the WinIdentity from IIS auth, and add documentation for Kerberos Constrained Delegation (thanks @RobinBeismann!) ### Bugs * #648: Fixes for using global authentcation in OpenAPI and Swagger * #650: Fix for redirecting HTTP to HTTPS on default 80/443 ports * #652: Fix for sessions not extending from AJAX requests, or when session data wasn't updated * #654: Fix for `-Title` and `-Version` in `Get-PodeOpenApiDefinition` being mandatory * #660: Fix for removing cookies in AJAX responses * #663: Fix for when an endpoint's `-Hostname` is localhost, and bound to a route * #669: Further fixes and improvements for more `-EndpointName` validation use-cases on routes * #670: Remove extra NewLine from form files (thanks @ili101!) * #673: Fix to make headers in request/response case-insensitive ### Documentation * #651: Update Azure AD authentication documentation to reference using Basic authentication as well (thanks @RobinBeismann) ### Packaging * #629: Update dockerfile to use Ubuntu 18.04 * #630: Update dockerfiles to use PowerShell 7.1.1","title":"v2.1.0"},{"location":"release-notes/#v203","text":"### Bugs * #641: Fix an issue with Invalid Request Lines being received when running via SSL and using a Proxy * #642: Fix certificate X509FindType enum ### Documentation * #639: Fix the docker example ports to match documentation (thanks @ArieHein!)","title":"v2.0.3"},{"location":"release-notes/#v202","text":"### Bugs * #636: Fixes bug with OAuth2 RedirectUrl when behind IIS","title":"v2.0.2"},{"location":"release-notes/#v201","text":"### Bugs * #631: Parse username during Windows AD authentication * #632: Fixes null reference exception during server restart","title":"v2.0.1"},{"location":"release-notes/#v200","text":"### Features * #472: Adds support for client certificate authentication * #524: Adds support for rate limiting endpoints and routes * #551: Adds support for OAuth2 and Azure AD authentication * #585: Enables support for client-to-server web sockets * #612: Adds support for Kestrel as a listener - via a new Pode.Kestrel module * #625: Adds support for local Windows user authentication ### Enhancements * #572: Removes `-Endpoint` and `-Protocol` parameters in favur of `-EndpointName` * #575: Changes and improvements to Authentication on Routes and Middleware * #577: Massive improvements to alleviate of scoping with Modules, Snapins, Functions, and Variables * #590: Enable support for Chrome in `Show-PodeGui` * #618: The `$WebEvent` object is no longer passed to Routes, Middleware, etc., and should be accessed directly * #619: Improved support for hostnames on endpoints * #622: Allows support for a server to run endpoints of differing protocols ### Bugs * #600: Fixes public functions that weren't prefixed with \"Pode\" ### Internal Code * #573: Drop support for HttpListener, and rewrite Pode listener using .NET Core * #584: Alter SMTP server to use the new Pode listener ### Documentation * #592: Updates IIS example to allow PUT/DELETE in web.config","title":"v2.0.0"},{"location":"release-notes/#v184","text":"### Bugs * #615: Fixes a bug with Azure Functions V3, where the sys property has now been removed","title":"v1.8.4"},{"location":"release-notes/#v183","text":"### Enhancements * #602: Adds a new `Remove-PodeOAResponse` function to allow removing of default responses * #603: Adds a new `-Enum` parameter onto the OpenAPI property functions","title":"v1.8.3"},{"location":"release-notes/#v182","text":"### Bugs * #594: Add `Import-PodeSnapIn` to FunctionsToExport list","title":"v1.8.2"},{"location":"release-notes/#v181","text":"### Bugs * #578: Fixes OpenAPI functions with rogue \"=\" on returning a value * #581: Fixes large messages being sent via web sockets","title":"v1.8.1"},{"location":"release-notes/#v180","text":"### Enhancements * #533: Support on states for inclusion/exlcusions when saving, and scopes on states * #538: Support to batch log items together before sending them off to be recorded * #540: Adds a Ctrl+B shortcutto open the server in the default browser * #542: Add new switch to help toggling of Status Page exception message * #548: Adds new `Get-PodeSchedule` and `Get-PodeTimer` functions * #549: Support for calculating a schedule's next trigger datetime ### Bugs * #532: Fixes a bug in `Get-PodeRoute` when a route is bound to multiple endpoints * #547: Fixes a bug where not all data was being read on SMTP messages * #558: Paths with URL encoded characters fail when trying to load static content ### Documentation * #381: Documentation on using Pode in Heroku (plus auto-detection support) ### Packaging * #546: Adds automated integration tests * #562: Remove AppVeyor and TravisCI in favour of GitHub Actions * #567: Bump Powershell version in Docker to 7.0.1 * #569: Bump version of MkDocs and Material Theme","title":"v1.8.0"},{"location":"release-notes/#v173","text":"### Bugs * #554: Fixes an issue where HTML static files would be treated as dynamic files","title":"v1.7.3"},{"location":"release-notes/#v172","text":"### Bugs * #543: Fixes an internal issue that was causing errors in the SMTP server","title":"v1.7.2"},{"location":"release-notes/#v171","text":"### Bugs * #534: Fixes an issue with IIS Windows Authentication when using foreign trusted domains (thanks @RobinBeismann!)","title":"v1.7.1"},{"location":"release-notes/#v170","text":"### Features * #504: Support for GZip and Deflate compression on Requests * #507: Support for GZip and Deflate compression on Responses * #510: New inbuilt authenticator to allow authenticating users from a file ### Enhancements * #511: Adds middleware support to `Add-PodeStaticRoute` * #518: New `Get-PodeEndpoint` function to retrieve and filter endpoints * #525: Support for Azure Web Apps, fixes DisableTermination, and adds Quiet switch ### Bugs * #509: Fixes a freezing bug caused by sessions - and improves performance of sessions ### Documentation * #517: Adds missing `-Sessionless` parameter in IIS docs (thanks @RobinBeismann!) ### Packaging * #503: Bump the Docker images to PowerShell v7.0","title":"v1.7.0"},{"location":"release-notes/#v161","text":"### Bugs * 495: Fix issue with parsing query strings when using the Pode server type ### Documentation * #496: When using IIS, install Pode using AllUsers scope * #497: Comments about using PowerShell classes in Pode, under Known Issues","title":"v1.6.1"},{"location":"release-notes/#v160","text":"### Features * #464: Request metrics for routes for the number of requests * #473: Digest Authentication support (with added support for PostValidator scripts) * #478: Bearer Authentication support (with support for scope validation) ### Enhancements * #425: Adds functions to get routes: `Get-PodeRoute` and `Get-PodeStaticRoute` * #474: The inbuilt Windows AD authentication now works cross-platform! * #475: Adds support for hosting a Pode server via IIS ### Bugs * #477: Fix QueryString parsing on Pode server type ### Documentation * #484: Information about Web Events and their structure","title":"v1.6.0"},{"location":"release-notes/#v150","text":"### Features * #218: Adds OpenAPI with Swagger and ReDoc support ### Enhancements * #458: Adds a Timestamp to the event object passed to Routes/Middleware * #459: Ability to get the Uptime and Restart Count of the server ### Bugs * #461: Fix the parsing of payloads in Azure Functions and AWS Lambdas * #465: Format fix in the OpenAPI examples (thanks @haidouks!) ### Packaging * #470: Bumps the version of the MkDocs Material theme to 4.6.0","title":"v1.5.0"},{"location":"release-notes/#v140","text":"### Enhancements * #447: Sessions can now be used via Headers for better CLI support * #448: `-EndpointName` on routes can now take an array of endpoint names * #454: New wrapper function, `Start-PodeStaticServer`, for simple static websites ### Bugs * #446: Fixes functions that were not in accordence with Coding Guidelines (thanks @jhainau!) ### Documentation * #445: Improved documentation on using CSRF middleware","title":"v1.4.0"},{"location":"release-notes/#v130","text":"### Enhancements * #421: Adds a new `-FilePath` parameter to the `Add-PodeTimer` and `Add-PodeSchedule` functions * #422: Adds a new `-FilePath` parameter to the `Start-PodeServer` function * #423: New `Edit-PodeSchedule` and `Edit-PodeSchedule` functions * #431: Support for the `WWW-Authenticate` header on failed Authentication (401) responses * #433: Support in custom Authentication types to allow returning extra Headers on the response * #435: New `Set-PodeScheduleConcurrency` function to set the max number of concurrent schedules * #440: Adds support in the `package.json` for custom PowerShell Repositories ### Bugs * #429: Running `pode start` failed to invoke server script on some platforms * #441: Fixes an issue where local modules failed to resolve correct path","title":"v1.3.0"},{"location":"release-notes/#v121","text":"### Enhancements * #415: New functions for invoking Timer and Schedules adhoc ### Bugs * #416: Fix for using `*/INT` in cron-expressions ### Documentation * #418: Docs and examples typo fixes","title":"v1.2.1"},{"location":"release-notes/#v120","text":"### Features * #395: Built-in support for using Server-to-Client websockets * #389: Support for defining custom body/payload parsers for specific ContentTypes ### Enhancements * #401: Support for running a Schedule/Timer's logic when the server starts/restarts * #400: Helper wrapper method `Out-PodeHost` to output data to the main host terminal * #390: Support for setting a Status Code on all \"Write-Pode[Type]Response\" functions * #386: Support to set a fixed ContentType on `Set-PodeResponseAttachment` (thanks @Windos!) * #383: If a called route exists but for a different HTTP method, then return a 405 not a 404 * #382: Support on Unix environments to terminate/restart a server using Shift+C/R ### Documentation * #405: How to create a server that has endpoints accessible externally * #399: Reference to the literal parameter names on Schedules * #396: How to return a custom Status Code and/or message from an Authenticator","title":"v1.2.0"},{"location":"release-notes/#v110","text":"### Features * #376: *Experimental* support for cross-platform HTTPS! ### Bugs * #372: Fixed an issue when getting the length of strings in `Get-PodeCount` (thanks @Fraham!) * #384: Fixed `Set-PodeResponseAttachment` not setting the ContentLength (plus support of literal paths) ### Packaging * #375: Update the Dockerfiles to PowerShell 6.2.3 * #253: Publish the Docker images on the GitHub Package Registry","title":"v1.1.0"},{"location":"release-notes/#v101","text":"### Bugs * #367: If a \"server.psd1\" file is not present, Logging will not work * #368: Logging will attempt to mask everything if no mask patterns are supplied","title":"v1.0.1"},{"location":"release-notes/#v100","text":"### Features * #228: Support for rendering Markdown as HTML (Fully supported in PowerShell 7+) * #334: New \"ConvertTo-PodeRoute\" function to automatically make Routes from Functions/Modules * #344: New \"Add-PodePage\" function to more easily make GET Routes for simple pages ### Enhancements * #328: New \"Get-PodeAuthADUser\" parameter -NoGroups, to skip retrieving groups from AD * #330: Allow for -ArgumentList on Routes, Handlers, Timers, Schedules, etc - now they can be more dynamic * #341: Allow Show-PodeGui to work under PowerShell 7 on Windows * #343: Ability to mask data in logs using Regex * #352: On \"Add-PodeEndpoint\", split the -Address parameter into -Address/-Port parameters * #354: Two new functions for Sessions to Save and Remove them * #355: Support on \"Add-PodeEndpoint\" for a -RedirectTo parameter, to automatically build a redirect Route ### Bugs * #312: On Static Routes, don't create a PSDrive when the Source is a File Share * #318: For Cron Expressions, split the DayOfWeek and DayOfMonth * #324: Setting Authentication middleware globally didn't save the Session object * #347: Route parameters fail if the value contains a dot, or other special characters * #351: Stop the \"Done\" message appearing when the server errors ### Packaging * #338: Update the version of MkDocs Material Theme to v4.4.0 * #349: Update the Dockerfiles to PowerShell 6.2.2 ### Internal Code * #279, #279, #287, #289, #290, #291, #292, #294, #295, #296, #297, #305, #306, #314, #315 - Convert all functions to PowerShell Syntax * #303: Change from using \"pode.<env>.json\" files to \"server.<env>.psd1\" files ### Documentation * #299: Rebuild Documentation's Functions section using PlatyPS * #316: Write a migration guide for going from v0.X to v1.0 * #321: Go through all documentation, ensuring it's up-to-date with new Syntax","title":"v1.0.0"},{"location":"release-notes/#v0320","text":"### Enhancements * #270: Support on `gui` to specify the width and height of the window * #280: Support when file monitoring to output the files that caused the server to restart * #282: New actions on `state` to save and restore to to/from a file ### Bugs * #271: Fix in `Convert-PodePathPatternsToRegex` when converting file names - thanks @Fraham! ### Documentation * #284: Notes in documention about referencing JSON payload data in PowerShell 4/5","title":"v0.32.0"},{"location":"release-notes/#v0310","text":"### Features * #264: Support for Azure Functions and AWS Lambda * #264: New `header` function for adding/setting and getting header values from the Request/Response ### Enhancements * #264: Cookies are now done via the \"Set-Cookie\" header, meaning `cookie` now appropriately sets multiple cookies * #266: Have a `-Browse` flag on the `server` to auto-launch the website in a browser ### Bugs * #264: The `text` function now sets the content-type to \"text/plain\" by default","title":"v0.31.0"},{"location":"release-notes/#v0300","text":"### Enhancements * #245: Support for Windows AD group validation on the inbuilt 'windows-ad' authentication validator * #250: Support for bulk importing/loading scripts and modules * #251: Support on routes to supply a FilePath to a script that contains the route's scriptblock * #252: Support on the server function to supply a custom RootPath ### Performance * #258: Performance improvements to all aspects of a web request, reducing response times ### Packaging * #261: Docker images updated to PowerShell Core v6.2.1","title":"v0.30.0"},{"location":"release-notes/#v0290","text":"### Enhancements * #216: Multi-content-type support on Error Pages * #232: Support for setting/forcing default content types on routes * #243: Support on Static Routes to flag them as \"Download Only\" * #248: Ability to alter the server's root path ### Packaging * #227: Docker images updated to PowerShell Core v6.2.0 * #233: New ARM32 docker image, enabling support for Raspberry Pi ### Build * #237, #238, #239: Updates to CI tools","title":"v0.29.0"},{"location":"release-notes/#v0281","text":"### Bugs * #226: Adds the \"gui\" function to export list","title":"v0.28.1"},{"location":"release-notes/#v0280","text":"### Features * #210: New \"cookie\" function added, to support setting/getting cookies - including signing them * #211: Support for CSRF via the new \"csrf\" function, which generates valid middleware and random tokens ### Enhancements * #204: Support on the \"import\" function to import PSSnapIns * #223: Support for using a Thumbprint on the \"listen\" function instead of Certificate name ### Bugs * #206: When disposing/restarting the SMTP server, send a \"QUIT\" message if still connected ### Clean-Up * #209: Rename of internal function to avoid collisions, and change \"Get-PodeConfiguration\" to \"config\"","title":"v0.28.0"},{"location":"release-notes/#v0273","text":"### Bugs * #217: Binding to hostname throws error","title":"v0.27.3"},{"location":"release-notes/#v0272","text":"### Bugs * #212: Incorrect variable name used in html, csv, xml and json functions when referencing files","title":"v0.27.2"},{"location":"release-notes/#v0271","text":"### Bugs * #199: Fix issues with relative paths when running server as a service * #200: Fix issue with file monitor, where folder patterns fail to match on new files","title":"v0.27.1"},{"location":"release-notes/#v0270","text":"### Features * #185: Support for Server Restarts either Periodically or at specific Times, with support for cron expressions * #188: Support for Custom Error pages, with inbuilt Pode error pages ### Enhancements * #189: SMTP server to parse data headers and have them set on the event object ### Performance * #196: Massive improvements to performance when loading static content ### Bugs * #181: Importing modules into the current scope should be done Globally, making them instantly accessible * #183: TCP Reads and Writes should be Async so they can be terminated more easily * #184: SMTP and TCP servers fail to Restart * #196: Default paths on Static Content fail when using nested directories ### General * #194: Update Dockerfile from using PSCore 6.1.0 to 6.1.3","title":"v0.27.0"},{"location":"release-notes/#v0260","text":"### Features * #162: Basic support for local modules in \"package.json\" on \"pode install\" * #175: Support for flash messages on sessions, and in authentication ### Bugs * #72: RunspacePools aren't being recreated during a restart, and modules fail to import into other RunspacePools","title":"v0.26.0"},{"location":"release-notes/#v0250","text":"### Features * #170: Support for Static Content Caching, with ability to include/exclude routes/extensions ### Enhancements * #161: New method to return configuration from the pode.json file, plus improved docs and support for environment configs * #165: Support on the inbuilt SMTP server for Subject and decoded Body * #168: Ability to exclude/include paths/extensions when triggering an Internal Restart ### Documentation * #45: Add \"Known Issues\" pages to documentation ### Clean-Up * #160: Internally, rename occurrences of $PodeSession to $PodeContext","title":"v0.25.0"},{"location":"release-notes/#v0240","text":"### Features * #125: Helper support function for uploading files from a web form ### Enhancements * #149: Inbuilt support for Windows AD Authentication ### Bugs * #152: Fix the Choco install script so it installs the module for PowerShell Core as well * #155: After an Internal Restart, the View Engine is not set back to the default * #158: If views/public directories don't exist, the creation of PSDrive fails","title":"v0.24.0"},{"location":"release-notes/#v0230","text":"### Features * #77: Ability to run a web server, and view it through a Desktop Application (Windows only) ### Enhancements * #137: Don't require admin privileges when listening on Localhost * #140: Add a Custom switch to the Logger function - no need to use the \"custom_<name>\" format any more! * #142: Ability to listen on multiple endpoints - especially useful for hostnames against a single IP address * #143: Support on routes to allow them to be bound against specific hostnames/protocols * #146: Listen function to have Name parameter - so we can select which one to bind a Route/Gui to better","title":"v0.23.0"},{"location":"release-notes/#v0220","text":"### Enhancements * #123: Ability to remove a `route` * #124: Views, Public and custom static routes now use `New-PSDrive` to prevent directory tranversing * #128: Ability to `listen` using a host name * #130: `auth` now allows re-using inbuilt/custom parsers. Rather than `name` the type, the name is now any custom name you want to use and yuo specify the `-type` (like basic, etc). If no `-type` supplied, `name` is used as the type instead * #131: There's now a route parameter on `middleware`, so you can define global middleware that only run on requests for specific routes.","title":"v0.22.0"},{"location":"release-notes/#v0210","text":"### Enhancements * #110: Return a 401 for inaccessible files * #116: Support on custom static content, for returning `index.html` or `default.html` (plus others), if a directory is requested ### Bugs * #111: Separate out the `service` server type into own runspace * #112: Server should return a 500 if middleware/route fails unexpectedly, rather than a 200 ### Documentation * #120: Added examples of running scripts as Windows or Linux services [here](https://badgerati.github.io/Pode/Getting-Started/RunAsService/) ### Clean-Up * #118: Rename `$WebSession` to `$WebEvent` - internal references only","title":"v0.21.0"},{"location":"release-notes/#v0200","text":"### Documentation * Extended documentation for third-party template engines * \"Building your first app\" documentation ### Features * #103: Adds support for custom static routes ### Enhancements * #101: Adds a `-Limit` parameter to schedules * `import` function now supports installed modules ### Clean-Up * #102: Logging converted to internal `endware` script","title":"v0.20.0"},{"location":"release-notes/#v0191","text":"### Documentation * #91: This release contains far better documentation for Pode: https://badgerati.github.io/Pode ### Enhancements * #93: Updates PowerShell Docker image to 6.1.0, so internal restarts now work * #96: Chocolatey package now contains the module, rather than downloading from GitHub * Adds more aliases for parameters on core functions * Renames `script` function to `import` (the former is still supported) * New CI builder: Travis CI, used to test Pode on *nix and PowerShell Core * Minor miscellaneous stability fixes","title":"v0.19.1"},{"location":"release-notes/#v0190","text":"### Features * #84: Session cookie support, with in-mem/custom data storage * #86: Request authentication support. Currently implemented: Basic, Forms, Custom ### Enhancements * #88: Enabling Ctrl+R to be pressed on the CLI to trigger a server restart - similar to using `-FileMonitor`.","title":"v0.19.0"},{"location":"release-notes/#v0180","text":"### Features * #78: Middleware support for web servers, allowing custom logic and extension modules on web request/responses ### Enhancements * #81: Added aliases onto some of the `Server` parameters","title":"v0.18.0"},{"location":"release-notes/#v0170","text":"### Features * #43: Ability to generate self-signed certificates, and bind those certs - or pre-installed certs - when using HTTPS * #71: New `scripts` call to specify external modules that should be imported into each runspace ### Bugs * #71: Unable to access functions from external scripts * #73: Calling `pode start` fails to import Pode module into runspaces","title":"v0.17.0"},{"location":"release-notes/#v0160","text":"### Features * #66: Support for basic rate limiting of requests per x seconds from IPs * #68: Support for scheduled tasks using cron expressions ### Enhancements * #62: Helper function to ease URL redirection * #64: Have a '*' HTTP method so a route can be used on every method","title":"v0.16.0"},{"location":"release-notes/#v0150","text":"### Features * #31: Support for multithreaded responses on web, smtp and tcp servers using `-Threads` on your Server block ### Misc * #59: Removal of obsolete functions, such as the older `Write-JsonResponse` which is now just `Json` * #31: Addition of some minor performance tests using `k6` * Addition of new icon and logo for Pode","title":"v0.15.0"},{"location":"release-notes/#v0140","text":"### Features * #21: Ability for Pode to Internally Restart when a File Change is Detected * #52: Support for Allowing/Denying IP and Subnet Addresses ### Enhancements * #44: Setup Unit Tests with Pester and run on AppVeyor ### Bugs * #51: Set Dockerfile to use a fixed version of the PowerShell container, rather than latest * #55: Setup SMTP/TCP listeners to run in separate runspace like Web","title":"v0.14.0"},{"location":"release-notes/#v0130","text":"### Features * #40: Ability to add variables to a shared state, so you can re-use variables in timers, loggers, and routes","title":"v0.13.0"},{"location":"release-notes/#v0120","text":"### Features * #33: Support for logging to the terminal, files, and custom loggers for LogStash/Fluentd/etc * #35: New `Attach` function to help attach files from the public directory to the response for downloading ### Enhancements * #32: Ability to listen on a specific IP address using `-IP` on a `Server` * #36: Support for relative paths on views/public content, when running server script from non-root directory","title":"v0.12.0"},{"location":"release-notes/#v0113","text":"### Bugs and Enhancements * #22: Proper fix for high CPU usage, by using `Task.Wait` with `CancellationTokens`; A Runspace is setup to monitor for key presses, and on `Ctrl+C` will `Cancel()` the token and terminate Pode","title":"v0.11.3"},{"location":"release-notes/#v0112","text":"### Bugs * #22: Hot fix patch for reducing high CPU usage when idle","title":"v0.11.2"},{"location":"release-notes/#v0111","text":"### Bugs * #16: Status and Include functions were missing from module export list","title":"v0.11.1"},{"location":"release-notes/#v0110","text":"### Features * #5: Async timers to run tasks and processes in a separate thread (see timers sections in README) ### Enhancements * #7: New `status` function to easily alter the StatusCode of a Response * #8: New `json`, `xml`, `html`, `csv`, `view` and `tcp` functions to replace current \"Write-<Type>Response\" - now obsolete - functions (see ticket for explanation, and README for usage) ### Bugs * #12: Fixed an issue that caused image files (and others) to not render appropriately","title":"v0.11.0"},{"location":"roadmap/","text":"Roadmap This page lists the planned features and enhancements that will, hopefully, one day make it into Pode. There is no timeframe on when to expect them, some could be in-progress right now, and others in the future. Where possible items listed here will have a link to any relevant issues in GitHub. There is also a Project in the beginnings of being setup for Pode, with milestone progression and current roadmap issues. Plus, there is a Draft Board which contains a range of ideas for Pode features/enhancements which are either brilliant, ludicrous, or down right insane! Draft Issues are purely ideas, and any in the design stage might one day make it in! If you see a Draft Issue you which to discuss, or have an idea for one, please dicuss it over on Discord in the #ideas or #pode channel. \ud83c\udfaf Goal Pode at its heart, is mostly a web server, but overtime I've started to setup Pode to be much more: including the likes of Web Sockets, SMTP, and TCP servers. Below you'll even see on the roadmap is FTP. The eventual goal is to have Pode be a central PowerShell module for a number of different server types, even allowing you to host different types together and use them in combination - an FTP server with a web frontend for instance! This will be fleshed out more in Pode 3.0 - which plans for this have started! \ud83d\udea2 Releases Under normal circumstanes Pode releases approximately once every 2 months, where the following month is usually a Pode.Web release. Sometimes there could be more, if patch releases are needed. But sometimes there could be fewer if peronsal time constraints prevent releases. \ud83d\udcc3 Plan Features NTLM and/or Kerberos authentication - likely it's own module #402 More logging provider support - such as Azure, AWS, and Splunk. These could be baked into Pode or be standalone modules Better support for a more \"serverless\" Pode feel via Docker, such as auto-loading routes from a folder Starting Pode as a background job from CLI, instead of blocking #553 gRPC support HTTP/2.0 support HTTP/3.0 support Inbuilt authorization support, on top the current authentications support #992 Secret management support #980 Some way of being able to merge authentication types 588 Improved garbage collection in runspaces, to help free up memory A Session Pool that can be used to port/re-use PSSessions in Pode more easily Further improvements to OIDC, such as HMAC and refresh token support Implement an inbuilt FTP(S) server Is it possible to implement an inbuilt SFTP server? Inbuilt connectors for connecting to message brokers, like Kafka, RabbitMQ, etc. Would is be possible to create an inbuilt pub/sub server? An inbuilt FIM server, so we can fun logic on FIM events Misc Performance testing on PRs, and metrics in the documentation Further security testing, like DAST testing Is it possible to plug Pode into an APM, like Datadog? Blog posts and video tutorials \u23e9 Future Here and there notes get added to for ideas on Pode 3.0. With Pode supporting more server types, some functions like Add-PodeRoute might get renamed to Add-PodeWebRoute - to better indicate its usage, much like Add-PodeSignalRoute . Other ideas include: Syntax Rewrite For the longest time you've always had to place your logic into Start-PodeServer . This is just a thought/proposal, but one idea could be to make the syntax more PowerShell-y, something like: $pode = New-PodeServer $pode | Add-PodeEndpoint -Address 127 . 0 . 0 . 1 -Port 8080 -Protocol Http $basic = New-PodeAuthScheme -Basic $pode | Add-PodeAuth -Name 'SomeAuth' -Scheme $basic -ScriptBlock { return @{ User = @{} } } $pode | Add-PodeRoute -Method Get -Path '/' -Authentication SomeAuth -ScriptBlock { Write-PodeJsonResponse -Value @{ Message = 'Hello' } } $pode | Start-PodeServer -Threads 2 Potentially have New-PodeServer set a global variable instead, to prevent all of the $pode piping. But allow -PassThru and the piping to support multiple servers being created.","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"This page lists the planned features and enhancements that will, hopefully, one day make it into Pode. There is no timeframe on when to expect them, some could be in-progress right now, and others in the future. Where possible items listed here will have a link to any relevant issues in GitHub. There is also a Project in the beginnings of being setup for Pode, with milestone progression and current roadmap issues. Plus, there is a Draft Board which contains a range of ideas for Pode features/enhancements which are either brilliant, ludicrous, or down right insane! Draft Issues are purely ideas, and any in the design stage might one day make it in! If you see a Draft Issue you which to discuss, or have an idea for one, please dicuss it over on Discord in the #ideas or #pode channel.","title":"Roadmap"},{"location":"roadmap/#goal","text":"Pode at its heart, is mostly a web server, but overtime I've started to setup Pode to be much more: including the likes of Web Sockets, SMTP, and TCP servers. Below you'll even see on the roadmap is FTP. The eventual goal is to have Pode be a central PowerShell module for a number of different server types, even allowing you to host different types together and use them in combination - an FTP server with a web frontend for instance! This will be fleshed out more in Pode 3.0 - which plans for this have started!","title":"\ud83c\udfaf Goal"},{"location":"roadmap/#releases","text":"Under normal circumstanes Pode releases approximately once every 2 months, where the following month is usually a Pode.Web release. Sometimes there could be more, if patch releases are needed. But sometimes there could be fewer if peronsal time constraints prevent releases.","title":"\ud83d\udea2 Releases"},{"location":"roadmap/#plan","text":"","title":"\ud83d\udcc3 Plan"},{"location":"roadmap/#features","text":"NTLM and/or Kerberos authentication - likely it's own module #402 More logging provider support - such as Azure, AWS, and Splunk. These could be baked into Pode or be standalone modules Better support for a more \"serverless\" Pode feel via Docker, such as auto-loading routes from a folder Starting Pode as a background job from CLI, instead of blocking #553 gRPC support HTTP/2.0 support HTTP/3.0 support Inbuilt authorization support, on top the current authentications support #992 Secret management support #980 Some way of being able to merge authentication types 588 Improved garbage collection in runspaces, to help free up memory A Session Pool that can be used to port/re-use PSSessions in Pode more easily Further improvements to OIDC, such as HMAC and refresh token support Implement an inbuilt FTP(S) server Is it possible to implement an inbuilt SFTP server? Inbuilt connectors for connecting to message brokers, like Kafka, RabbitMQ, etc. Would is be possible to create an inbuilt pub/sub server? An inbuilt FIM server, so we can fun logic on FIM events","title":"Features"},{"location":"roadmap/#misc","text":"Performance testing on PRs, and metrics in the documentation Further security testing, like DAST testing Is it possible to plug Pode into an APM, like Datadog? Blog posts and video tutorials","title":"Misc"},{"location":"roadmap/#future","text":"Here and there notes get added to for ideas on Pode 3.0. With Pode supporting more server types, some functions like Add-PodeRoute might get renamed to Add-PodeWebRoute - to better indicate its usage, much like Add-PodeSignalRoute . Other ideas include:","title":"\u23e9 Future"},{"location":"roadmap/#syntax-rewrite","text":"For the longest time you've always had to place your logic into Start-PodeServer . This is just a thought/proposal, but one idea could be to make the syntax more PowerShell-y, something like: $pode = New-PodeServer $pode | Add-PodeEndpoint -Address 127 . 0 . 0 . 1 -Port 8080 -Protocol Http $basic = New-PodeAuthScheme -Basic $pode | Add-PodeAuth -Name 'SomeAuth' -Scheme $basic -ScriptBlock { return @{ User = @{} } } $pode | Add-PodeRoute -Method Get -Path '/' -Authentication SomeAuth -ScriptBlock { Write-PodeJsonResponse -Value @{ Message = 'Hello' } } $pode | Start-PodeServer -Threads 2 Potentially have New-PodeServer set a global variable instead, to prevent all of the $pode piping. But allow -PassThru and the piping to support multiple servers being created.","title":"Syntax Rewrite"},{"location":"Functions/Authentication/Add-PodeAuth/","text":"Add-PodeAuth SYNOPSIS Adds a custom Authentication method for verifying users. SYNTAX Add-PodeAuth [-Name] <String> [-Scheme] <Hashtable> [-ScriptBlock] <ScriptBlock> [[-ArgumentList] <Object[]>] [[-FailureUrl] <String>] [[-FailureMessage] <String>] [[-SuccessUrl] <String>] [-Sessionless] [-SuccessUseOrigin] [<CommonParameters>] DESCRIPTION Adds a custom Authentication method for verifying users. EXAMPLES EXAMPLE 1 New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Main' -ScriptBlock { /* logic */ } PARAMETERS -ArgumentList An array of arguments to supply to the Custom Authentication's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -FailureMessage An override Message to throw when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False -FailureUrl The URL to redirect to when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name A unique Name for the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Scheme The Scheme to use for retrieving credentials (From New-PodeAuthScheme). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -ScriptBlock The ScriptBlock defining logic that retrieves and verifys a user. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Sessionless If supplied, authenticated users will not be stored in sessions, and sessions will not be used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -SuccessUrl The URL to redirect to when authentication succeeds when logging in. Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False -SuccessUseOrigin If supplied, successful authentication from a login page will redirect back to the originating page instead of the FailureUrl. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeAuth"},{"location":"Functions/Authentication/Add-PodeAuth/#add-podeauth","text":"","title":"Add-PodeAuth"},{"location":"Functions/Authentication/Add-PodeAuth/#synopsis","text":"Adds a custom Authentication method for verifying users.","title":"SYNOPSIS"},{"location":"Functions/Authentication/Add-PodeAuth/#syntax","text":"Add-PodeAuth [-Name] <String> [-Scheme] <Hashtable> [-ScriptBlock] <ScriptBlock> [[-ArgumentList] <Object[]>] [[-FailureUrl] <String>] [[-FailureMessage] <String>] [[-SuccessUrl] <String>] [-Sessionless] [-SuccessUseOrigin] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/Add-PodeAuth/#description","text":"Adds a custom Authentication method for verifying users.","title":"DESCRIPTION"},{"location":"Functions/Authentication/Add-PodeAuth/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/Add-PodeAuth/#example-1","text":"New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Main' -ScriptBlock { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Authentication/Add-PodeAuth/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/Add-PodeAuth/#-argumentlist","text":"An array of arguments to supply to the Custom Authentication's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Authentication/Add-PodeAuth/#-failuremessage","text":"An override Message to throw when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FailureMessage"},{"location":"Functions/Authentication/Add-PodeAuth/#-failureurl","text":"The URL to redirect to when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FailureUrl"},{"location":"Functions/Authentication/Add-PodeAuth/#-name","text":"A unique Name for the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Authentication/Add-PodeAuth/#-scheme","text":"The Scheme to use for retrieving credentials (From New-PodeAuthScheme). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Scheme"},{"location":"Functions/Authentication/Add-PodeAuth/#-scriptblock","text":"The ScriptBlock defining logic that retrieves and verifys a user. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Authentication/Add-PodeAuth/#-sessionless","text":"If supplied, authenticated users will not be stored in sessions, and sessions will not be used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Sessionless"},{"location":"Functions/Authentication/Add-PodeAuth/#-successurl","text":"The URL to redirect to when authentication succeeds when logging in. Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-SuccessUrl"},{"location":"Functions/Authentication/Add-PodeAuth/#-successuseorigin","text":"If supplied, successful authentication from a login page will redirect back to the originating page instead of the FailureUrl. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-SuccessUseOrigin"},{"location":"Functions/Authentication/Add-PodeAuth/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/Add-PodeAuth/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/Add-PodeAuth/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/Add-PodeAuth/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/Add-PodeAuth/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/Add-PodeAuthIIS/","text":"Add-PodeAuthIIS SYNOPSIS Adds the inbuilt IIS Authentication method for verifying users passed to Pode from IIS. SYNTAX Groups (Default) Add-PodeAuthIIS -Name <String> [-Groups <String[]>] [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Middleware <Object[]>] [-Sessionless] [-DirectGroups] [-ADModule] [-NoLocalCheck] [-SuccessUseOrigin] [<CommonParameters>] NoGroups Add-PodeAuthIIS -Name <String> [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Middleware <Object[]>] [-Sessionless] [-NoGroups] [-ADModule] [-NoLocalCheck] [-SuccessUseOrigin] [<CommonParameters>] DESCRIPTION Adds the inbuilt IIS Authentication method for verifying users passed to Pode from IIS. EXAMPLES EXAMPLE 1 Add-PodeAuthIIS -Name 'IISAuth' EXAMPLE 2 Add-PodeAuthIIS -Name 'IISAuth' -Groups @('Developers') EXAMPLE 3 Add-PodeAuthIIS -Name 'IISAuth' -NoGroups PARAMETERS -ADModule If supplied, and on Windows, the ActiveDirectory module will be used instead. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -DirectGroups If supplied, only a user's direct groups will be retrieved rather than all groups recursively. Type : SwitchParameter Parameter Sets : Groups Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -FailureMessage An override Message to throw when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FailureUrl The URL to redirect to when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Groups An array of Group names to only allow access. Type : String[] Parameter Sets : Groups Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Middleware An array of ScriptBlocks for optional Middleware to run before the Scheme's scriptblock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Name A unique Name for the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -NoGroups If supplied, groups will not be retrieved for the user in AD. Type : SwitchParameter Parameter Sets : NoGroups Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -NoLocalCheck If supplied, Pode will not at attempt to retrieve local User/Group information for the authenticated user. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ScriptBlock Optional ScriptBlock that is passed the found user object for further validation. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Sessionless If supplied, authenticated users will not be stored in sessions, and sessions will not be used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -SuccessUrl The URL to redirect to when authentication succeeds when logging in. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -SuccessUseOrigin If supplied, successful authentication from a login page will redirect back to the originating page instead of the FailureUrl. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Users An array of Usernames to only allow access. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeAuthIIS"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#add-podeauthiis","text":"","title":"Add-PodeAuthIIS"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#synopsis","text":"Adds the inbuilt IIS Authentication method for verifying users passed to Pode from IIS.","title":"SYNOPSIS"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#groups-default","text":"Add-PodeAuthIIS -Name <String> [-Groups <String[]>] [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Middleware <Object[]>] [-Sessionless] [-DirectGroups] [-ADModule] [-NoLocalCheck] [-SuccessUseOrigin] [<CommonParameters>]","title":"Groups (Default)"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#nogroups","text":"Add-PodeAuthIIS -Name <String> [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Middleware <Object[]>] [-Sessionless] [-NoGroups] [-ADModule] [-NoLocalCheck] [-SuccessUseOrigin] [<CommonParameters>]","title":"NoGroups"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#description","text":"Adds the inbuilt IIS Authentication method for verifying users passed to Pode from IIS.","title":"DESCRIPTION"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#example-1","text":"Add-PodeAuthIIS -Name 'IISAuth'","title":"EXAMPLE 1"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#example-2","text":"Add-PodeAuthIIS -Name 'IISAuth' -Groups @('Developers')","title":"EXAMPLE 2"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#example-3","text":"Add-PodeAuthIIS -Name 'IISAuth' -NoGroups","title":"EXAMPLE 3"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-admodule","text":"If supplied, and on Windows, the ActiveDirectory module will be used instead. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-ADModule"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-directgroups","text":"If supplied, only a user's direct groups will be retrieved rather than all groups recursively. Type : SwitchParameter Parameter Sets : Groups Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-DirectGroups"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-failuremessage","text":"An override Message to throw when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FailureMessage"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-failureurl","text":"The URL to redirect to when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FailureUrl"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-groups","text":"An array of Group names to only allow access. Type : String[] Parameter Sets : Groups Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Groups"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-middleware","text":"An array of ScriptBlocks for optional Middleware to run before the Scheme's scriptblock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-name","text":"A unique Name for the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-nogroups","text":"If supplied, groups will not be retrieved for the user in AD. Type : SwitchParameter Parameter Sets : NoGroups Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoGroups"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-nolocalcheck","text":"If supplied, Pode will not at attempt to retrieve local User/Group information for the authenticated user. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoLocalCheck"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-scriptblock","text":"Optional ScriptBlock that is passed the found user object for further validation. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-sessionless","text":"If supplied, authenticated users will not be stored in sessions, and sessions will not be used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Sessionless"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-successurl","text":"The URL to redirect to when authentication succeeds when logging in. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-SuccessUrl"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-successuseorigin","text":"If supplied, successful authentication from a login page will redirect back to the originating page instead of the FailureUrl. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-SuccessUseOrigin"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#-users","text":"An array of Usernames to only allow access. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Users"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/Add-PodeAuthIIS/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/","text":"Add-PodeAuthMiddleware SYNOPSIS Adds an authentication method as global middleware. SYNTAX Add-PodeAuthMiddleware [-Name] <String> [-Authentication] <String> [[-Route] <String>] [<CommonParameters>] DESCRIPTION Adds an authentication method as global middleware. EXAMPLES EXAMPLE 1 Add-PodeAuthMiddleware -Name 'GlobalAuth' -Authentication AuthName EXAMPLE 2 Add-PodeAuthMiddleware -Name 'GlobalAuth' -Authentication AuthName -Route '/api/*' PARAMETERS -Authentication The Name of the Authentication method to use. Type : String Parameter Sets : (All) Aliases : Auth Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Middleware. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Route A Route path for which Routes this Middleware should only be invoked against. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeAuthMiddleware"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#add-podeauthmiddleware","text":"","title":"Add-PodeAuthMiddleware"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#synopsis","text":"Adds an authentication method as global middleware.","title":"SYNOPSIS"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#syntax","text":"Add-PodeAuthMiddleware [-Name] <String> [-Authentication] <String> [[-Route] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#description","text":"Adds an authentication method as global middleware.","title":"DESCRIPTION"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#example-1","text":"Add-PodeAuthMiddleware -Name 'GlobalAuth' -Authentication AuthName","title":"EXAMPLE 1"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#example-2","text":"Add-PodeAuthMiddleware -Name 'GlobalAuth' -Authentication AuthName -Route '/api/*'","title":"EXAMPLE 2"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#-authentication","text":"The Name of the Authentication method to use. Type : String Parameter Sets : (All) Aliases : Auth Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Authentication"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#-name","text":"The Name of the Middleware. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#-route","text":"A Route path for which Routes this Middleware should only be invoked against. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Route"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/Add-PodeAuthMiddleware/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/","text":"Add-PodeAuthUserFile SYNOPSIS Adds the inbuilt User File Authentication method for verifying users. SYNTAX Add-PodeAuthUserFile -Name <String> -Scheme <Hashtable> [-FilePath <String>] [-Groups <String[]>] [-Users <String[]>] [-HmacSecret <String>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Sessionless] [-SuccessUseOrigin] [<CommonParameters>] DESCRIPTION Adds the inbuilt User File Authentication method for verifying users. EXAMPLES EXAMPLE 1 New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' EXAMPLE 2 New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -FilePath './custom/path/users.json' PARAMETERS -FailureMessage An override Message to throw when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FailureUrl The URL to redirect to when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FilePath A path to a users JSON file (Default: ./users.json) Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Groups An array of Group names to only allow access. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -HmacSecret An optional secret if the passwords are HMAC SHA256 hashed. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Name A unique Name for the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Scheme The Scheme to use for retrieving credentials (From New-PodeAuthScheme). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -ScriptBlock Optional ScriptBlock that is passed the found user object for further validation. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Sessionless If supplied, authenticated users will not be stored in sessions, and sessions will not be used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -SuccessUrl The URL to redirect to when authentication succeeds when logging in. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -SuccessUseOrigin If supplied, successful authentication from a login page will redirect back to the originating page instead of the FailureUrl. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Users An array of Usernames to only allow access. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeAuthUserFile"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#add-podeauthuserfile","text":"","title":"Add-PodeAuthUserFile"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#synopsis","text":"Adds the inbuilt User File Authentication method for verifying users.","title":"SYNOPSIS"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#syntax","text":"Add-PodeAuthUserFile -Name <String> -Scheme <Hashtable> [-FilePath <String>] [-Groups <String[]>] [-Users <String[]>] [-HmacSecret <String>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Sessionless] [-SuccessUseOrigin] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#description","text":"Adds the inbuilt User File Authentication method for verifying users.","title":"DESCRIPTION"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#example-1","text":"New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login'","title":"EXAMPLE 1"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#example-2","text":"New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -FilePath './custom/path/users.json'","title":"EXAMPLE 2"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-failuremessage","text":"An override Message to throw when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FailureMessage"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-failureurl","text":"The URL to redirect to when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FailureUrl"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-filepath","text":"A path to a users JSON file (Default: ./users.json) Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-groups","text":"An array of Group names to only allow access. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Groups"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-hmacsecret","text":"An optional secret if the passwords are HMAC SHA256 hashed. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-HmacSecret"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-name","text":"A unique Name for the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-scheme","text":"The Scheme to use for retrieving credentials (From New-PodeAuthScheme). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Scheme"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-scriptblock","text":"Optional ScriptBlock that is passed the found user object for further validation. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-sessionless","text":"If supplied, authenticated users will not be stored in sessions, and sessions will not be used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Sessionless"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-successurl","text":"The URL to redirect to when authentication succeeds when logging in. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-SuccessUrl"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-successuseorigin","text":"If supplied, successful authentication from a login page will redirect back to the originating page instead of the FailureUrl. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-SuccessUseOrigin"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#-users","text":"An array of Usernames to only allow access. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Users"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/Add-PodeAuthUserFile/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/","text":"Add-PodeAuthWindowsAd SYNOPSIS Adds the inbuilt Windows AD Authentication method for verifying users. SYNTAX Groups (Default) Add-PodeAuthWindowsAd -Name <String> -Scheme <Hashtable> [-Fqdn <String>] [-Domain <String>] [-SearchBase <String>] [-Groups <String[]>] [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Sessionless] [-DirectGroups] [-OpenLDAP] [-ADModule] [-SuccessUseOrigin] [-KeepCredential] [<CommonParameters>] NoGroups Add-PodeAuthWindowsAd -Name <String> -Scheme <Hashtable> [-Fqdn <String>] [-Domain <String>] [-SearchBase <String>] [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Sessionless] [-NoGroups] [-OpenLDAP] [-ADModule] [-SuccessUseOrigin] [-KeepCredential] [<CommonParameters>] DESCRIPTION Adds the inbuilt Windows AD Authentication method for verifying users. EXAMPLES EXAMPLE 1 New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'WinAuth' EXAMPLE 2 New-PodeAuthScheme -Basic | Add-PodeAuthWindowsAd -Name 'WinAuth' -Groups @('Developers') EXAMPLE 3 New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'WinAuth' -NoGroups EXAMPLE 4 New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'UnixAuth' -Server 'testdomain.company.com' -Domain 'testdomain' PARAMETERS -ADModule If supplied, and on Windows, the ActiveDirectory module will be used instead. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -DirectGroups If supplied, only a user's direct groups will be retrieved rather than all groups recursively. Type : SwitchParameter Parameter Sets : Groups Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Domain (Unix Only) A custom NetBIOS domain name that is prepended onto usernames that are missing it (\\<Domain>\\\\<Username>). Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FailureMessage An override Message to throw when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FailureUrl The URL to redirect to when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Fqdn A custom FQDN for the DNS of the AD you wish to authenticate against. (Alias: Server) Type : String Parameter Sets : (All) Aliases : Server Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Groups An array of Group names to only allow access. Type : String[] Parameter Sets : Groups Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -KeepCredential If suplied pode will save the AD credential as a PSCredential object in $WebEvent.Auth.User.Credential Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Name A unique Name for the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -NoGroups If supplied, groups will not be retrieved for the user in AD. Type : SwitchParameter Parameter Sets : NoGroups Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -OpenLDAP If supplied, and on Windows, OpenLDAP will be used instead (this is the default for Linux/MacOS). Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Scheme The Scheme to use for retrieving credentials (From New-PodeAuthScheme). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -ScriptBlock Optional ScriptBlock that is passed the found user object for further validation. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -SearchBase (Unix Only) An optional searchbase to refine the LDAP query. This should be the full distinguished name. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Sessionless If supplied, authenticated users will not be stored in sessions, and sessions will not be used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -SuccessUrl The URL to redirect to when authentication succeeds when logging in. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -SuccessUseOrigin If supplied, successful authentication from a login page will redirect back to the originating page instead of the FailureUrl. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Users An array of Usernames to only allow access. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeAuthWindowsAd"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#add-podeauthwindowsad","text":"","title":"Add-PodeAuthWindowsAd"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#synopsis","text":"Adds the inbuilt Windows AD Authentication method for verifying users.","title":"SYNOPSIS"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#groups-default","text":"Add-PodeAuthWindowsAd -Name <String> -Scheme <Hashtable> [-Fqdn <String>] [-Domain <String>] [-SearchBase <String>] [-Groups <String[]>] [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Sessionless] [-DirectGroups] [-OpenLDAP] [-ADModule] [-SuccessUseOrigin] [-KeepCredential] [<CommonParameters>]","title":"Groups (Default)"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#nogroups","text":"Add-PodeAuthWindowsAd -Name <String> -Scheme <Hashtable> [-Fqdn <String>] [-Domain <String>] [-SearchBase <String>] [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Sessionless] [-NoGroups] [-OpenLDAP] [-ADModule] [-SuccessUseOrigin] [-KeepCredential] [<CommonParameters>]","title":"NoGroups"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#description","text":"Adds the inbuilt Windows AD Authentication method for verifying users.","title":"DESCRIPTION"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#example-1","text":"New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'WinAuth'","title":"EXAMPLE 1"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#example-2","text":"New-PodeAuthScheme -Basic | Add-PodeAuthWindowsAd -Name 'WinAuth' -Groups @('Developers')","title":"EXAMPLE 2"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#example-3","text":"New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'WinAuth' -NoGroups","title":"EXAMPLE 3"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#example-4","text":"New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'UnixAuth' -Server 'testdomain.company.com' -Domain 'testdomain'","title":"EXAMPLE 4"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-admodule","text":"If supplied, and on Windows, the ActiveDirectory module will be used instead. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-ADModule"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-directgroups","text":"If supplied, only a user's direct groups will be retrieved rather than all groups recursively. Type : SwitchParameter Parameter Sets : Groups Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-DirectGroups"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-domain","text":"(Unix Only) A custom NetBIOS domain name that is prepended onto usernames that are missing it (\\<Domain>\\\\<Username>). Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Domain"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-failuremessage","text":"An override Message to throw when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FailureMessage"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-failureurl","text":"The URL to redirect to when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FailureUrl"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-fqdn","text":"A custom FQDN for the DNS of the AD you wish to authenticate against. (Alias: Server) Type : String Parameter Sets : (All) Aliases : Server Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Fqdn"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-groups","text":"An array of Group names to only allow access. Type : String[] Parameter Sets : Groups Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Groups"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-keepcredential","text":"If suplied pode will save the AD credential as a PSCredential object in $WebEvent.Auth.User.Credential Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-KeepCredential"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-name","text":"A unique Name for the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-nogroups","text":"If supplied, groups will not be retrieved for the user in AD. Type : SwitchParameter Parameter Sets : NoGroups Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoGroups"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-openldap","text":"If supplied, and on Windows, OpenLDAP will be used instead (this is the default for Linux/MacOS). Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-OpenLDAP"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-scheme","text":"The Scheme to use for retrieving credentials (From New-PodeAuthScheme). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Scheme"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-scriptblock","text":"Optional ScriptBlock that is passed the found user object for further validation. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-searchbase","text":"(Unix Only) An optional searchbase to refine the LDAP query. This should be the full distinguished name. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-SearchBase"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-sessionless","text":"If supplied, authenticated users will not be stored in sessions, and sessions will not be used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Sessionless"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-successurl","text":"The URL to redirect to when authentication succeeds when logging in. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-SuccessUrl"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-successuseorigin","text":"If supplied, successful authentication from a login page will redirect back to the originating page instead of the FailureUrl. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-SuccessUseOrigin"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#-users","text":"An array of Usernames to only allow access. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Users"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/Add-PodeAuthWindowsAd/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/","text":"Add-PodeAuthWindowsLocal SYNOPSIS Adds the inbuilt Windows Local User Authentication method for verifying users. SYNTAX Groups (Default) Add-PodeAuthWindowsLocal -Name <String> -Scheme <Hashtable> [-Groups <String[]>] [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Sessionless] [-SuccessUseOrigin] [<CommonParameters>] NoGroups Add-PodeAuthWindowsLocal -Name <String> -Scheme <Hashtable> [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Sessionless] [-NoGroups] [-SuccessUseOrigin] [<CommonParameters>] DESCRIPTION Adds the inbuilt Windows Local User Authentication method for verifying users. EXAMPLES EXAMPLE 1 New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'WinAuth' EXAMPLE 2 New-PodeAuthScheme -Basic | Add-PodeAuthWindowsLocal -Name 'WinAuth' -Groups @('Developers') EXAMPLE 3 New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'WinAuth' -NoGroups PARAMETERS -FailureMessage An override Message to throw when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FailureUrl The URL to redirect to when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Groups An array of Group names to only allow access. Type : String[] Parameter Sets : Groups Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Name A unique Name for the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -NoGroups If supplied, groups will not be retrieved for the user. Type : SwitchParameter Parameter Sets : NoGroups Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Scheme The Scheme to use for retrieving credentials (From New-PodeAuthScheme). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -ScriptBlock Optional ScriptBlock that is passed the found user object for further validation. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Sessionless If supplied, authenticated users will not be stored in sessions, and sessions will not be used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -SuccessUrl The URL to redirect to when authentication succeeds when logging in. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -SuccessUseOrigin If supplied, successful authentication from a login page will redirect back to the originating page instead of the FailureUrl. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Users An array of Usernames to only allow access. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeAuthWindowsLocal"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#add-podeauthwindowslocal","text":"","title":"Add-PodeAuthWindowsLocal"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#synopsis","text":"Adds the inbuilt Windows Local User Authentication method for verifying users.","title":"SYNOPSIS"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#groups-default","text":"Add-PodeAuthWindowsLocal -Name <String> -Scheme <Hashtable> [-Groups <String[]>] [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Sessionless] [-SuccessUseOrigin] [<CommonParameters>]","title":"Groups (Default)"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#nogroups","text":"Add-PodeAuthWindowsLocal -Name <String> -Scheme <Hashtable> [-Users <String[]>] [-FailureUrl <String>] [-FailureMessage <String>] [-SuccessUrl <String>] [-ScriptBlock <ScriptBlock>] [-Sessionless] [-NoGroups] [-SuccessUseOrigin] [<CommonParameters>]","title":"NoGroups"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#description","text":"Adds the inbuilt Windows Local User Authentication method for verifying users.","title":"DESCRIPTION"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#example-1","text":"New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'WinAuth'","title":"EXAMPLE 1"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#example-2","text":"New-PodeAuthScheme -Basic | Add-PodeAuthWindowsLocal -Name 'WinAuth' -Groups @('Developers')","title":"EXAMPLE 2"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#example-3","text":"New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'WinAuth' -NoGroups","title":"EXAMPLE 3"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#-failuremessage","text":"An override Message to throw when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FailureMessage"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#-failureurl","text":"The URL to redirect to when authentication fails. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FailureUrl"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#-groups","text":"An array of Group names to only allow access. Type : String[] Parameter Sets : Groups Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Groups"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#-name","text":"A unique Name for the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#-nogroups","text":"If supplied, groups will not be retrieved for the user. Type : SwitchParameter Parameter Sets : NoGroups Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoGroups"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#-scheme","text":"The Scheme to use for retrieving credentials (From New-PodeAuthScheme). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Scheme"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#-scriptblock","text":"Optional ScriptBlock that is passed the found user object for further validation. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#-sessionless","text":"If supplied, authenticated users will not be stored in sessions, and sessions will not be used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Sessionless"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#-successurl","text":"The URL to redirect to when authentication succeeds when logging in. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-SuccessUrl"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#-successuseorigin","text":"If supplied, successful authentication from a login page will redirect back to the originating page instead of the FailureUrl. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-SuccessUseOrigin"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#-users","text":"An array of Usernames to only allow access. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Users"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/Add-PodeAuthWindowsLocal/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/Clear-PodeAuth/","text":"Clear-PodeAuth SYNOPSIS Clear all defined Authentication methods. SYNTAX Clear-PodeAuth [<CommonParameters>] DESCRIPTION Clear all defined Authentication methods. EXAMPLES EXAMPLE 1 Clear-PodeAuth PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeAuth"},{"location":"Functions/Authentication/Clear-PodeAuth/#clear-podeauth","text":"","title":"Clear-PodeAuth"},{"location":"Functions/Authentication/Clear-PodeAuth/#synopsis","text":"Clear all defined Authentication methods.","title":"SYNOPSIS"},{"location":"Functions/Authentication/Clear-PodeAuth/#syntax","text":"Clear-PodeAuth [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/Clear-PodeAuth/#description","text":"Clear all defined Authentication methods.","title":"DESCRIPTION"},{"location":"Functions/Authentication/Clear-PodeAuth/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/Clear-PodeAuth/#example-1","text":"Clear-PodeAuth","title":"EXAMPLE 1"},{"location":"Functions/Authentication/Clear-PodeAuth/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/Clear-PodeAuth/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/Clear-PodeAuth/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/Clear-PodeAuth/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/Clear-PodeAuth/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/Clear-PodeAuth/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/","text":"ConvertFrom-PodeJwt SYNOPSIS Convert and return the payload of a JWT token. SYNTAX Secret (Default) ConvertFrom-PodeJwt -Token <String> [<CommonParameters>] Signed ConvertFrom-PodeJwt -Token <String> [-Secret <Object>] [<CommonParameters>] Ignore ConvertFrom-PodeJwt -Token <String> [-IgnoreSignature] [<CommonParameters>] DESCRIPTION Convert and return the payload of a JWT token, verifying the signature by default with support to ignore the signature. EXAMPLES EXAMPLE 1 ConvertFrom-PodeJwt -Token \"eyJ0eXAiOiJKV1QiLCJhbGciOiJoczI1NiJ9.eyJleHAiOjE2MjI1NTMyMTQsIm5hbWUiOiJKb2huIERvZSIsInN1YiI6IjEyMyJ9.LP-O8OKwix91a-SZwVK35gEClLZQmsORbW0un2Z4RkY\" PARAMETERS -IgnoreSignature Skip signature verification, and return the decoded payload. Type : SwitchParameter Parameter Sets : Ignore Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Secret The Secret, as a string or byte[], to verify the token's signature. Type : Object Parameter Sets : Signed Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Token The JWT token. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"ConvertFrom-PodeJwt"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#convertfrom-podejwt","text":"","title":"ConvertFrom-PodeJwt"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#synopsis","text":"Convert and return the payload of a JWT token.","title":"SYNOPSIS"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#secret-default","text":"ConvertFrom-PodeJwt -Token <String> [<CommonParameters>]","title":"Secret (Default)"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#signed","text":"ConvertFrom-PodeJwt -Token <String> [-Secret <Object>] [<CommonParameters>]","title":"Signed"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#ignore","text":"ConvertFrom-PodeJwt -Token <String> [-IgnoreSignature] [<CommonParameters>]","title":"Ignore"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#description","text":"Convert and return the payload of a JWT token, verifying the signature by default with support to ignore the signature.","title":"DESCRIPTION"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#example-1","text":"ConvertFrom-PodeJwt -Token \"eyJ0eXAiOiJKV1QiLCJhbGciOiJoczI1NiJ9.eyJleHAiOjE2MjI1NTMyMTQsIm5hbWUiOiJKb2huIERvZSIsInN1YiI6IjEyMyJ9.LP-O8OKwix91a-SZwVK35gEClLZQmsORbW0un2Z4RkY\"","title":"EXAMPLE 1"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#-ignoresignature","text":"Skip signature verification, and return the decoded payload. Type : SwitchParameter Parameter Sets : Ignore Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-IgnoreSignature"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#-secret","text":"The Secret, as a string or byte[], to verify the token's signature. Type : Object Parameter Sets : Signed Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#-token","text":"The JWT token. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Token"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/ConvertFrom-PodeJwt/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/","text":"ConvertFrom-PodeOIDCDiscovery SYNOPSIS Builds an OAuth2 scheme using an OpenID Connect Discovery URL. SYNTAX ConvertFrom-PodeOIDCDiscovery [-Url] <String> [[-Scope] <String[]>] [-ClientId] <String> [[-ClientSecret] <String>] [[-RedirectUrl] <String>] [[-InnerScheme] <Hashtable>] [[-Middleware] <Object[]>] [-UsePKCE] [<CommonParameters>] DESCRIPTION Builds an OAuth2 scheme using an OpenID Connect Discovery URL. EXAMPLES EXAMPLE 1 ConvertFrom-PodeOIDCDiscovery -Url 'https://accounts.google.com/.well-known/openid-configuration' -ClientId some_id -UsePKCE EXAMPLE 2 ConvertFrom-PodeOIDCDiscovery -Url 'https://accounts.google.com' -ClientId some_id -UsePKCE PARAMETERS -ClientId The Client ID from registering a new app. Type : String Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -ClientSecret The Client Secret from registering a new app (this is optional when using PKCE). Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -InnerScheme An optional authentication Scheme (from New-PodeAuthScheme) that will be called prior to this Scheme. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Middleware An array of ScriptBlocks for optional Middleware to run before the Scheme's scriptblock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False -RedirectUrl An optional OAuth2 Redirect URL (Default: \\<host>/oauth2/callback) Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -Scope A list of optional Scopes to use during the OAuth2 request. (Default: the supported list returned) Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Url The OpenID Connect Discovery URL, this must end with '/.well-known/openid-configuration' (if missing, it will be automatically appended). Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -UsePKCE If supplied, OAuth2 authentication will use PKCE code verifiers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"ConvertFrom-PodeOIDCDiscovery"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#convertfrom-podeoidcdiscovery","text":"","title":"ConvertFrom-PodeOIDCDiscovery"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#synopsis","text":"Builds an OAuth2 scheme using an OpenID Connect Discovery URL.","title":"SYNOPSIS"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#syntax","text":"ConvertFrom-PodeOIDCDiscovery [-Url] <String> [[-Scope] <String[]>] [-ClientId] <String> [[-ClientSecret] <String>] [[-RedirectUrl] <String>] [[-InnerScheme] <Hashtable>] [[-Middleware] <Object[]>] [-UsePKCE] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#description","text":"Builds an OAuth2 scheme using an OpenID Connect Discovery URL.","title":"DESCRIPTION"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#example-1","text":"ConvertFrom-PodeOIDCDiscovery -Url 'https://accounts.google.com/.well-known/openid-configuration' -ClientId some_id -UsePKCE","title":"EXAMPLE 1"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#example-2","text":"ConvertFrom-PodeOIDCDiscovery -Url 'https://accounts.google.com' -ClientId some_id -UsePKCE","title":"EXAMPLE 2"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#-clientid","text":"The Client ID from registering a new app. Type : String Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ClientId"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#-clientsecret","text":"The Client Secret from registering a new app (this is optional when using PKCE). Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ClientSecret"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#-innerscheme","text":"An optional authentication Scheme (from New-PodeAuthScheme) that will be called prior to this Scheme. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-InnerScheme"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#-middleware","text":"An array of ScriptBlocks for optional Middleware to run before the Scheme's scriptblock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#-redirecturl","text":"An optional OAuth2 Redirect URL (Default: \\<host>/oauth2/callback) Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-RedirectUrl"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#-scope","text":"A list of optional Scopes to use during the OAuth2 request. (Default: the supported list returned) Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Scope"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#-url","text":"The OpenID Connect Discovery URL, this must end with '/.well-known/openid-configuration' (if missing, it will be automatically appended). Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Url"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#-usepkce","text":"If supplied, OAuth2 authentication will use PKCE code verifiers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UsePKCE"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/ConvertFrom-PodeOIDCDiscovery/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/","text":"ConvertTo-PodeJwt SYNOPSIS Convert a Header/Payload into a JWT. SYNTAX ConvertTo-PodeJwt [-Header] <Hashtable> [-Payload] <Hashtable> [[-Secret] <Object>] [<CommonParameters>] DESCRIPTION Convert a Header/Payload hashtable into a JWT, with the option to sign it. EXAMPLES EXAMPLE 1 ConvertTo-PodeJwt -Header @{ alg = 'none' } -Payload @{ sub = '123'; name = 'John' } EXAMPLE 2 ConvertTo-PodeJwt -Header @{ alg = 'hs256' } -Payload @{ sub = '123'; name = 'John' } -Secret 'abc' PARAMETERS -Header A Hashtable containing the Header information for the JWT. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Payload A Hashtable containing the Payload information for the JWT. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Secret An Optional Secret for signing the JWT, should be a string or byte[]. This is mandatory if the Header algorithm isn't \"none\". Type : Object Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"ConvertTo-PodeJwt"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#convertto-podejwt","text":"","title":"ConvertTo-PodeJwt"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#synopsis","text":"Convert a Header/Payload into a JWT.","title":"SYNOPSIS"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#syntax","text":"ConvertTo-PodeJwt [-Header] <Hashtable> [-Payload] <Hashtable> [[-Secret] <Object>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#description","text":"Convert a Header/Payload hashtable into a JWT, with the option to sign it.","title":"DESCRIPTION"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#example-1","text":"ConvertTo-PodeJwt -Header @{ alg = 'none' } -Payload @{ sub = '123'; name = 'John' }","title":"EXAMPLE 1"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#example-2","text":"ConvertTo-PodeJwt -Header @{ alg = 'hs256' } -Payload @{ sub = '123'; name = 'John' } -Secret 'abc'","title":"EXAMPLE 2"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#-header","text":"A Hashtable containing the Header information for the JWT. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Header"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#-payload","text":"A Hashtable containing the Payload information for the JWT. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Payload"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#-secret","text":"An Optional Secret for signing the JWT, should be a string or byte[]. This is mandatory if the Header algorithm isn't \"none\". Type : Object Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/ConvertTo-PodeJwt/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/Get-PodeAuth/","text":"Get-PodeAuth SYNOPSIS Gets an Authentication method. SYNTAX Get-PodeAuth [-Name] <String> [<CommonParameters>] DESCRIPTION Gets an Authentication method. EXAMPLES EXAMPLE 1 Get-PodeAuth -Name 'Main' PARAMETERS -Name The Name of an Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeAuth"},{"location":"Functions/Authentication/Get-PodeAuth/#get-podeauth","text":"","title":"Get-PodeAuth"},{"location":"Functions/Authentication/Get-PodeAuth/#synopsis","text":"Gets an Authentication method.","title":"SYNOPSIS"},{"location":"Functions/Authentication/Get-PodeAuth/#syntax","text":"Get-PodeAuth [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/Get-PodeAuth/#description","text":"Gets an Authentication method.","title":"DESCRIPTION"},{"location":"Functions/Authentication/Get-PodeAuth/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/Get-PodeAuth/#example-1","text":"Get-PodeAuth -Name 'Main'","title":"EXAMPLE 1"},{"location":"Functions/Authentication/Get-PodeAuth/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/Get-PodeAuth/#-name","text":"The Name of an Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Authentication/Get-PodeAuth/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/Get-PodeAuth/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/Get-PodeAuth/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/Get-PodeAuth/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/Get-PodeAuth/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/","text":"New-PodeAuthAzureADScheme SYNOPSIS Create an OAuth2 auth scheme for Azure AD. SYNTAX New-PodeAuthAzureADScheme [[-Tenant] <String>] [-ClientId] <String> [[-ClientSecret] <String>] [[-RedirectUrl] <String>] [[-InnerScheme] <Hashtable>] [[-Middleware] <Object[]>] [-UsePKCE] [<CommonParameters>] DESCRIPTION A wrapper for New-PodeAuthScheme and OAuth2, which builds an OAuth2 scheme for Azure AD. EXAMPLES EXAMPLE 1 New-PodeAuthAzureADScheme -Tenant 123-456-678 -ClientId some_id -ClientSecret 1234.abc EXAMPLE 2 New-PodeAuthAzureADScheme -Tenant 123-456-678 -ClientId some_id -UsePKCE PARAMETERS -ClientId The Client ID from registering a new app. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -ClientSecret The Client Secret from registering a new app (this is optional when using PKCE). Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -InnerScheme An optional authentication Scheme (from New-PodeAuthScheme) that will be called prior to this Scheme. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Middleware An array of ScriptBlocks for optional Middleware to run before the Scheme's scriptblock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False -RedirectUrl An optional OAuth2 Redirect URL (default: \\<host>/oauth2/callback) Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Tenant The Directory/Tenant ID from registering a new app (default: common). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : Common Accept pipeline input : False Accept wildcard characters : False -UsePKCE If supplied, OAuth2 authentication will use PKCE code verifiers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"New-PodeAuthAzureADScheme"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#new-podeauthazureadscheme","text":"","title":"New-PodeAuthAzureADScheme"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#synopsis","text":"Create an OAuth2 auth scheme for Azure AD.","title":"SYNOPSIS"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#syntax","text":"New-PodeAuthAzureADScheme [[-Tenant] <String>] [-ClientId] <String> [[-ClientSecret] <String>] [[-RedirectUrl] <String>] [[-InnerScheme] <Hashtable>] [[-Middleware] <Object[]>] [-UsePKCE] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#description","text":"A wrapper for New-PodeAuthScheme and OAuth2, which builds an OAuth2 scheme for Azure AD.","title":"DESCRIPTION"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#example-1","text":"New-PodeAuthAzureADScheme -Tenant 123-456-678 -ClientId some_id -ClientSecret 1234.abc","title":"EXAMPLE 1"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#example-2","text":"New-PodeAuthAzureADScheme -Tenant 123-456-678 -ClientId some_id -UsePKCE","title":"EXAMPLE 2"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#-clientid","text":"The Client ID from registering a new app. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ClientId"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#-clientsecret","text":"The Client Secret from registering a new app (this is optional when using PKCE). Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ClientSecret"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#-innerscheme","text":"An optional authentication Scheme (from New-PodeAuthScheme) that will be called prior to this Scheme. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-InnerScheme"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#-middleware","text":"An array of ScriptBlocks for optional Middleware to run before the Scheme's scriptblock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#-redirecturl","text":"An optional OAuth2 Redirect URL (default: \\<host>/oauth2/callback) Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-RedirectUrl"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#-tenant","text":"The Directory/Tenant ID from registering a new app (default: common). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : Common Accept pipeline input : False Accept wildcard characters : False","title":"-Tenant"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#-usepkce","text":"If supplied, OAuth2 authentication will use PKCE code verifiers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UsePKCE"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/New-PodeAuthAzureADScheme/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/New-PodeAuthScheme/","text":"New-PodeAuthScheme SYNOPSIS Create a new type of Authentication. SYNTAX Basic (Default) New-PodeAuthScheme [-Basic] [-Encoding <String>] [-HeaderTag <String>] [-Realm <String>] [-Middleware <Object[]>] [-InnerScheme <Hashtable>] [-AsCredential] [<CommonParameters>] Digest New-PodeAuthScheme [-HeaderTag <String>] [-Realm <String>] [-Middleware <Object[]>] [-Digest] [-InnerScheme <Hashtable>] [<CommonParameters>] Bearer New-PodeAuthScheme [-HeaderTag <String>] [-Realm <String>] [-Middleware <Object[]>] [-Bearer] [-Scope <String[]>] [-InnerScheme <Hashtable>] [-AsJWT] [-Secret <String>] [<CommonParameters>] Form New-PodeAuthScheme [-Form] [-UsernameField <String>] [-PasswordField <String>] [-Realm <String>] [-Middleware <Object[]>] [-InnerScheme <Hashtable>] [-AsCredential] [<CommonParameters>] Custom New-PodeAuthScheme [-Custom] -ScriptBlock <ScriptBlock> [-ArgumentList <Hashtable>] [-Name <String>] [-Realm <String>] [-Type <String>] [-Middleware <Object[]>] [-PostValidator <ScriptBlock>] [-InnerScheme <Hashtable>] [<CommonParameters>] ClientCertificate New-PodeAuthScheme [-Realm <String>] [-Middleware <Object[]>] [-ClientCertificate] [-InnerScheme <Hashtable>] [<CommonParameters>] OAuth2 New-PodeAuthScheme [-Realm <String>] [-Middleware <Object[]>] -ClientId <String> [-ClientSecret <String>] [-RedirectUrl <String>] [-AuthoriseUrl <String>] -TokenUrl <String> [-UserUrl <String>] [-UserUrlMethod <String>] [-CodeChallengeMethod <String>] [-UsePKCE] [-OAuth2] [-Scope <String[]>] [-InnerScheme <Hashtable>] [<CommonParameters>] ApiKey New-PodeAuthScheme [-Realm <String>] [-Middleware <Object[]>] [-ApiKey] [-Location <String>] [-LocationName <String>] [-InnerScheme <Hashtable>] [-AsJWT] [-Secret <String>] [<CommonParameters>] DESCRIPTION Create a new type of Authentication, which is used to parse the Request for user credentials for validating. EXAMPLES EXAMPLE 1 $basic_auth = New-PodeAuthScheme -Basic EXAMPLE 2 $form_auth = New-PodeAuthScheme -Form -UsernameField 'Email' EXAMPLE 3 $custom_auth = New-PodeAuthScheme -Custom -ScriptBlock { /* logic */ } PARAMETERS -ApiKey If supplied, will use the inbuilt API key Authentication scheme. Type : SwitchParameter Parameter Sets : ApiKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ArgumentList An array of arguments to supply to the Custom Authentication type's ScriptBlock. Type : Hashtable Parameter Sets : Custom Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -AsCredential If supplied, username/password credentials for Basic/Form authentication will instead be supplied as a pscredential object. Type : SwitchParameter Parameter Sets : Basic, Form Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -AsJWT If supplied, the token/key supplied for Bearer/API key authentication will be parsed as a JWT, and the payload supplied instead. Type : SwitchParameter Parameter Sets : Bearer, ApiKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -AuthoriseUrl The OAuth2 Authorisation URL to authenticate a User. This is optional if you're using an InnerScheme like Basic/Form. Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Basic If supplied, will use the inbuilt Basic Authentication credentials retriever. Type : SwitchParameter Parameter Sets : Basic Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Bearer If supplied, will use the inbuilt Bearer Authentication token retriever. Type : SwitchParameter Parameter Sets : Bearer Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ClientCertificate If supplied, will use the inbuilt Client Certificate Authentication scheme. Type : SwitchParameter Parameter Sets : ClientCertificate Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ClientId The Application ID generated when registering a new app for OAuth2. Type : String Parameter Sets : OAuth2 Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ClientSecret The Application Secret generated when registering a new app for OAuth2 (this is optional when using PKCE). Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -CodeChallengeMethod An optional method for sending a PKCE code challenge when calling the Authorise URL - for OAuth2 (Default: S256) Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : S256 Accept pipeline input : False Accept wildcard characters : False -Custom If supplied, will allow you to create a Custom Authentication credentials retriever. Type : SwitchParameter Parameter Sets : Custom Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Digest If supplied, will use the inbuilt Digest Authentication credentials retriever. Type : SwitchParameter Parameter Sets : Digest Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Encoding The Encoding to use when decoding the Basic Authorization header. Type : String Parameter Sets : Basic Aliases : Required : False Position : Named Default value : ISO-8859-1 Accept pipeline input : False Accept wildcard characters : False -Form If supplied, will use the inbuilt Form Authentication credentials retriever. Type : SwitchParameter Parameter Sets : Form Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -HeaderTag The Tag name used in the Authorization header, ie: Basic, Bearer, Digest. Type : String Parameter Sets : Basic, Digest, Bearer Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -InnerScheme An optional authentication Scheme (from New-PodeAuthScheme) that will be called prior to this Scheme. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Location The Location to find an API key: Header, Query, or Cookie. (Default: Header) Type : String Parameter Sets : ApiKey Aliases : Required : False Position : Named Default value : Header Accept pipeline input : False Accept wildcard characters : False -LocationName The Name of the Header, Query, or Cookie to find an API key. (Default depends on Location. Header/Cookie: X-API-KEY, Query: api_key) Type : String Parameter Sets : ApiKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Middleware An array of ScriptBlocks for optional Middleware to run before the Scheme's scriptblock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of an Authentication type - such as Basic or NTLM. Type : String Parameter Sets : Custom Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -OAuth2 If supplied, will use the inbuilt OAuth2 Authentication scheme. Type : SwitchParameter Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -PasswordField The name of the Password Field in the payload to retrieve the password. Type : String Parameter Sets : Form Aliases : Required : False Position : Named Default value : Password Accept pipeline input : False Accept wildcard characters : False -PostValidator The PostValidator is a scriptblock that is invoked after user validation. Type : ScriptBlock Parameter Sets : Custom Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Realm The name of scope of the protected area. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -RedirectUrl An optional OAuth2 Redirect URL (default: \\<host>/oauth2/callback) Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Scope An optional array of Scopes for Bearer/OAuth2 Authentication. (These are case-sensitive) Type : String[] Parameter Sets : Bearer, OAuth2 Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The ScriptBlock is used to parse the request and retieve user credentials and other information. Type : ScriptBlock Parameter Sets : Custom Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Secret An optional Secret, used to sign/verify JWT signatures. Type : String Parameter Sets : Bearer, ApiKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -TokenUrl The OAuth2 Token URL to acquire an access token. Type : String Parameter Sets : OAuth2 Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Type The scheme type for custom Authentication types. Default is HTTP. Type : String Parameter Sets : Custom Aliases : Required : False Position : Named Default value : Http Accept pipeline input : False Accept wildcard characters : False -UsePKCE If supplied, OAuth2 authentication will use PKCE code verifiers - for OAuth2 Type : SwitchParameter Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -UsernameField The name of the Username Field in the payload to retrieve the username. Type : String Parameter Sets : Form Aliases : Required : False Position : Named Default value : Username Accept pipeline input : False Accept wildcard characters : False -UserUrl An optional User profile URL to retrieve a user's details - for OAuth2 Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -UserUrlMethod An optional HTTP method to use when calling the User profile URL - for OAuth2 (Default: Post) Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : Post Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Collections.Hashtable NOTES RELATED LINKS","title":"New-PodeAuthScheme"},{"location":"Functions/Authentication/New-PodeAuthScheme/#new-podeauthscheme","text":"","title":"New-PodeAuthScheme"},{"location":"Functions/Authentication/New-PodeAuthScheme/#synopsis","text":"Create a new type of Authentication.","title":"SYNOPSIS"},{"location":"Functions/Authentication/New-PodeAuthScheme/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Authentication/New-PodeAuthScheme/#basic-default","text":"New-PodeAuthScheme [-Basic] [-Encoding <String>] [-HeaderTag <String>] [-Realm <String>] [-Middleware <Object[]>] [-InnerScheme <Hashtable>] [-AsCredential] [<CommonParameters>]","title":"Basic (Default)"},{"location":"Functions/Authentication/New-PodeAuthScheme/#digest","text":"New-PodeAuthScheme [-HeaderTag <String>] [-Realm <String>] [-Middleware <Object[]>] [-Digest] [-InnerScheme <Hashtable>] [<CommonParameters>]","title":"Digest"},{"location":"Functions/Authentication/New-PodeAuthScheme/#bearer","text":"New-PodeAuthScheme [-HeaderTag <String>] [-Realm <String>] [-Middleware <Object[]>] [-Bearer] [-Scope <String[]>] [-InnerScheme <Hashtable>] [-AsJWT] [-Secret <String>] [<CommonParameters>]","title":"Bearer"},{"location":"Functions/Authentication/New-PodeAuthScheme/#form","text":"New-PodeAuthScheme [-Form] [-UsernameField <String>] [-PasswordField <String>] [-Realm <String>] [-Middleware <Object[]>] [-InnerScheme <Hashtable>] [-AsCredential] [<CommonParameters>]","title":"Form"},{"location":"Functions/Authentication/New-PodeAuthScheme/#custom","text":"New-PodeAuthScheme [-Custom] -ScriptBlock <ScriptBlock> [-ArgumentList <Hashtable>] [-Name <String>] [-Realm <String>] [-Type <String>] [-Middleware <Object[]>] [-PostValidator <ScriptBlock>] [-InnerScheme <Hashtable>] [<CommonParameters>]","title":"Custom"},{"location":"Functions/Authentication/New-PodeAuthScheme/#clientcertificate","text":"New-PodeAuthScheme [-Realm <String>] [-Middleware <Object[]>] [-ClientCertificate] [-InnerScheme <Hashtable>] [<CommonParameters>]","title":"ClientCertificate"},{"location":"Functions/Authentication/New-PodeAuthScheme/#oauth2","text":"New-PodeAuthScheme [-Realm <String>] [-Middleware <Object[]>] -ClientId <String> [-ClientSecret <String>] [-RedirectUrl <String>] [-AuthoriseUrl <String>] -TokenUrl <String> [-UserUrl <String>] [-UserUrlMethod <String>] [-CodeChallengeMethod <String>] [-UsePKCE] [-OAuth2] [-Scope <String[]>] [-InnerScheme <Hashtable>] [<CommonParameters>]","title":"OAuth2"},{"location":"Functions/Authentication/New-PodeAuthScheme/#apikey","text":"New-PodeAuthScheme [-Realm <String>] [-Middleware <Object[]>] [-ApiKey] [-Location <String>] [-LocationName <String>] [-InnerScheme <Hashtable>] [-AsJWT] [-Secret <String>] [<CommonParameters>]","title":"ApiKey"},{"location":"Functions/Authentication/New-PodeAuthScheme/#description","text":"Create a new type of Authentication, which is used to parse the Request for user credentials for validating.","title":"DESCRIPTION"},{"location":"Functions/Authentication/New-PodeAuthScheme/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/New-PodeAuthScheme/#example-1","text":"$basic_auth = New-PodeAuthScheme -Basic","title":"EXAMPLE 1"},{"location":"Functions/Authentication/New-PodeAuthScheme/#example-2","text":"$form_auth = New-PodeAuthScheme -Form -UsernameField 'Email'","title":"EXAMPLE 2"},{"location":"Functions/Authentication/New-PodeAuthScheme/#example-3","text":"$custom_auth = New-PodeAuthScheme -Custom -ScriptBlock { /* logic */ }","title":"EXAMPLE 3"},{"location":"Functions/Authentication/New-PodeAuthScheme/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-apikey","text":"If supplied, will use the inbuilt API key Authentication scheme. Type : SwitchParameter Parameter Sets : ApiKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-ApiKey"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-argumentlist","text":"An array of arguments to supply to the Custom Authentication type's ScriptBlock. Type : Hashtable Parameter Sets : Custom Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-ascredential","text":"If supplied, username/password credentials for Basic/Form authentication will instead be supplied as a pscredential object. Type : SwitchParameter Parameter Sets : Basic, Form Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AsCredential"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-asjwt","text":"If supplied, the token/key supplied for Bearer/API key authentication will be parsed as a JWT, and the payload supplied instead. Type : SwitchParameter Parameter Sets : Bearer, ApiKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AsJWT"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-authoriseurl","text":"The OAuth2 Authorisation URL to authenticate a User. This is optional if you're using an InnerScheme like Basic/Form. Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-AuthoriseUrl"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-basic","text":"If supplied, will use the inbuilt Basic Authentication credentials retriever. Type : SwitchParameter Parameter Sets : Basic Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Basic"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-bearer","text":"If supplied, will use the inbuilt Bearer Authentication token retriever. Type : SwitchParameter Parameter Sets : Bearer Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Bearer"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-clientcertificate","text":"If supplied, will use the inbuilt Client Certificate Authentication scheme. Type : SwitchParameter Parameter Sets : ClientCertificate Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-ClientCertificate"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-clientid","text":"The Application ID generated when registering a new app for OAuth2. Type : String Parameter Sets : OAuth2 Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ClientId"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-clientsecret","text":"The Application Secret generated when registering a new app for OAuth2 (this is optional when using PKCE). Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ClientSecret"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-codechallengemethod","text":"An optional method for sending a PKCE code challenge when calling the Authorise URL - for OAuth2 (Default: S256) Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : S256 Accept pipeline input : False Accept wildcard characters : False","title":"-CodeChallengeMethod"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-custom","text":"If supplied, will allow you to create a Custom Authentication credentials retriever. Type : SwitchParameter Parameter Sets : Custom Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Custom"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-digest","text":"If supplied, will use the inbuilt Digest Authentication credentials retriever. Type : SwitchParameter Parameter Sets : Digest Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Digest"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-encoding","text":"The Encoding to use when decoding the Basic Authorization header. Type : String Parameter Sets : Basic Aliases : Required : False Position : Named Default value : ISO-8859-1 Accept pipeline input : False Accept wildcard characters : False","title":"-Encoding"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-form","text":"If supplied, will use the inbuilt Form Authentication credentials retriever. Type : SwitchParameter Parameter Sets : Form Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Form"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-headertag","text":"The Tag name used in the Authorization header, ie: Basic, Bearer, Digest. Type : String Parameter Sets : Basic, Digest, Bearer Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-HeaderTag"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-innerscheme","text":"An optional authentication Scheme (from New-PodeAuthScheme) that will be called prior to this Scheme. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-InnerScheme"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-location","text":"The Location to find an API key: Header, Query, or Cookie. (Default: Header) Type : String Parameter Sets : ApiKey Aliases : Required : False Position : Named Default value : Header Accept pipeline input : False Accept wildcard characters : False","title":"-Location"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-locationname","text":"The Name of the Header, Query, or Cookie to find an API key. (Default depends on Location. Header/Cookie: X-API-KEY, Query: api_key) Type : String Parameter Sets : ApiKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-LocationName"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-middleware","text":"An array of ScriptBlocks for optional Middleware to run before the Scheme's scriptblock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-name","text":"The Name of an Authentication type - such as Basic or NTLM. Type : String Parameter Sets : Custom Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-oauth2","text":"If supplied, will use the inbuilt OAuth2 Authentication scheme. Type : SwitchParameter Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-OAuth2"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-passwordfield","text":"The name of the Password Field in the payload to retrieve the password. Type : String Parameter Sets : Form Aliases : Required : False Position : Named Default value : Password Accept pipeline input : False Accept wildcard characters : False","title":"-PasswordField"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-postvalidator","text":"The PostValidator is a scriptblock that is invoked after user validation. Type : ScriptBlock Parameter Sets : Custom Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PostValidator"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-realm","text":"The name of scope of the protected area. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Realm"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-redirecturl","text":"An optional OAuth2 Redirect URL (default: \\<host>/oauth2/callback) Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-RedirectUrl"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-scope","text":"An optional array of Scopes for Bearer/OAuth2 Authentication. (These are case-sensitive) Type : String[] Parameter Sets : Bearer, OAuth2 Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Scope"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-scriptblock","text":"The ScriptBlock is used to parse the request and retieve user credentials and other information. Type : ScriptBlock Parameter Sets : Custom Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-secret","text":"An optional Secret, used to sign/verify JWT signatures. Type : String Parameter Sets : Bearer, ApiKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-tokenurl","text":"The OAuth2 Token URL to acquire an access token. Type : String Parameter Sets : OAuth2 Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-TokenUrl"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-type","text":"The scheme type for custom Authentication types. Default is HTTP. Type : String Parameter Sets : Custom Aliases : Required : False Position : Named Default value : Http Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-usepkce","text":"If supplied, OAuth2 authentication will use PKCE code verifiers - for OAuth2 Type : SwitchParameter Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UsePKCE"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-usernamefield","text":"The name of the Username Field in the payload to retrieve the username. Type : String Parameter Sets : Form Aliases : Required : False Position : Named Default value : Username Accept pipeline input : False Accept wildcard characters : False","title":"-UsernameField"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-userurl","text":"An optional User profile URL to retrieve a user's details - for OAuth2 Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-UserUrl"},{"location":"Functions/Authentication/New-PodeAuthScheme/#-userurlmethod","text":"An optional HTTP method to use when calling the User profile URL - for OAuth2 (Default: Post) Type : String Parameter Sets : OAuth2 Aliases : Required : False Position : Named Default value : Post Accept pipeline input : False Accept wildcard characters : False","title":"-UserUrlMethod"},{"location":"Functions/Authentication/New-PodeAuthScheme/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/New-PodeAuthScheme/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/New-PodeAuthScheme/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/New-PodeAuthScheme/#systemcollectionshashtable","text":"","title":"System.Collections.Hashtable"},{"location":"Functions/Authentication/New-PodeAuthScheme/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/New-PodeAuthScheme/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/","text":"New-PodeAuthTwitterScheme SYNOPSIS Create an OAuth2 auth scheme for Twitter. SYNTAX New-PodeAuthTwitterScheme [-ClientId] <String> [[-ClientSecret] <String>] [[-RedirectUrl] <String>] [[-Middleware] <Object[]>] [-UsePKCE] [<CommonParameters>] DESCRIPTION A wrapper for New-PodeAuthScheme and OAuth2, which builds an OAuth2 scheme for Twitter apps. EXAMPLES EXAMPLE 1 New-PodeAuthTwitterScheme -ClientId some_id -ClientSecret 1234.abc EXAMPLE 2 New-PodeAuthTwitterScheme -ClientId some_id -UsePKCE PARAMETERS -ClientId The Client ID from registering a new app. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -ClientSecret The Client Secret from registering a new app (this is optional when using PKCE). Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Middleware An array of ScriptBlocks for optional Middleware to run before the Scheme's scriptblock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -RedirectUrl An optional OAuth2 Redirect URL (default: \\<host>/oauth2/callback) Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -UsePKCE If supplied, OAuth2 authentication will use PKCE code verifiers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"New-PodeAuthTwitterScheme"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#new-podeauthtwitterscheme","text":"","title":"New-PodeAuthTwitterScheme"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#synopsis","text":"Create an OAuth2 auth scheme for Twitter.","title":"SYNOPSIS"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#syntax","text":"New-PodeAuthTwitterScheme [-ClientId] <String> [[-ClientSecret] <String>] [[-RedirectUrl] <String>] [[-Middleware] <Object[]>] [-UsePKCE] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#description","text":"A wrapper for New-PodeAuthScheme and OAuth2, which builds an OAuth2 scheme for Twitter apps.","title":"DESCRIPTION"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#example-1","text":"New-PodeAuthTwitterScheme -ClientId some_id -ClientSecret 1234.abc","title":"EXAMPLE 1"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#example-2","text":"New-PodeAuthTwitterScheme -ClientId some_id -UsePKCE","title":"EXAMPLE 2"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#-clientid","text":"The Client ID from registering a new app. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ClientId"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#-clientsecret","text":"The Client Secret from registering a new app (this is optional when using PKCE). Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ClientSecret"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#-middleware","text":"An array of ScriptBlocks for optional Middleware to run before the Scheme's scriptblock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#-redirecturl","text":"An optional OAuth2 Redirect URL (default: \\<host>/oauth2/callback) Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-RedirectUrl"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#-usepkce","text":"If supplied, OAuth2 authentication will use PKCE code verifiers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UsePKCE"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/New-PodeAuthTwitterScheme/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/Remove-PodeAuth/","text":"Remove-PodeAuth SYNOPSIS Remove a specific Authentication method. SYNTAX Remove-PodeAuth [-Name] <String> [<CommonParameters>] DESCRIPTION Remove a specific Authentication method. EXAMPLES EXAMPLE 1 Remove-PodeAuth -Name 'Login' PARAMETERS -Name The Name of the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeAuth"},{"location":"Functions/Authentication/Remove-PodeAuth/#remove-podeauth","text":"","title":"Remove-PodeAuth"},{"location":"Functions/Authentication/Remove-PodeAuth/#synopsis","text":"Remove a specific Authentication method.","title":"SYNOPSIS"},{"location":"Functions/Authentication/Remove-PodeAuth/#syntax","text":"Remove-PodeAuth [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/Remove-PodeAuth/#description","text":"Remove a specific Authentication method.","title":"DESCRIPTION"},{"location":"Functions/Authentication/Remove-PodeAuth/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/Remove-PodeAuth/#example-1","text":"Remove-PodeAuth -Name 'Login'","title":"EXAMPLE 1"},{"location":"Functions/Authentication/Remove-PodeAuth/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/Remove-PodeAuth/#-name","text":"The Name of the Authentication method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Authentication/Remove-PodeAuth/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/Remove-PodeAuth/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/Remove-PodeAuth/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/Remove-PodeAuth/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/Remove-PodeAuth/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/Test-PodeAuthUser/","text":"Test-PodeAuthUser SYNOPSIS Test whether the current WebEvent or Session has an authenticated user. SYNTAX Test-PodeAuthUser [<CommonParameters>] DESCRIPTION Test whether the current WebEvent or Session has an authenticated user. Returns true if there is an authenticated user. EXAMPLES EXAMPLE 1 if (Test-PodeAuthUser) { ... } PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Test-PodeAuthUser"},{"location":"Functions/Authentication/Test-PodeAuthUser/#test-podeauthuser","text":"","title":"Test-PodeAuthUser"},{"location":"Functions/Authentication/Test-PodeAuthUser/#synopsis","text":"Test whether the current WebEvent or Session has an authenticated user.","title":"SYNOPSIS"},{"location":"Functions/Authentication/Test-PodeAuthUser/#syntax","text":"Test-PodeAuthUser [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/Test-PodeAuthUser/#description","text":"Test whether the current WebEvent or Session has an authenticated user. Returns true if there is an authenticated user.","title":"DESCRIPTION"},{"location":"Functions/Authentication/Test-PodeAuthUser/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/Test-PodeAuthUser/#example-1","text":"if (Test-PodeAuthUser) { ... }","title":"EXAMPLE 1"},{"location":"Functions/Authentication/Test-PodeAuthUser/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/Test-PodeAuthUser/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/Test-PodeAuthUser/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/Test-PodeAuthUser/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/Test-PodeAuthUser/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/Test-PodeAuthUser/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Authentication/Use-PodeAuth/","text":"Use-PodeAuth SYNOPSIS Automatically loads auth ps1 files SYNTAX Use-PodeAuth [[-Path] <String>] [<CommonParameters>] DESCRIPTION Automatically loads auth ps1 files from either a /auth folder, or a custom folder. Saves space dot-sourcing them all one-by-one. EXAMPLES EXAMPLE 1 Use-PodeAuth EXAMPLE 2 Use-PodeAuth -Path './my-auth' PARAMETERS -Path Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeAuth"},{"location":"Functions/Authentication/Use-PodeAuth/#use-podeauth","text":"","title":"Use-PodeAuth"},{"location":"Functions/Authentication/Use-PodeAuth/#synopsis","text":"Automatically loads auth ps1 files","title":"SYNOPSIS"},{"location":"Functions/Authentication/Use-PodeAuth/#syntax","text":"Use-PodeAuth [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Authentication/Use-PodeAuth/#description","text":"Automatically loads auth ps1 files from either a /auth folder, or a custom folder. Saves space dot-sourcing them all one-by-one.","title":"DESCRIPTION"},{"location":"Functions/Authentication/Use-PodeAuth/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Authentication/Use-PodeAuth/#example-1","text":"Use-PodeAuth","title":"EXAMPLE 1"},{"location":"Functions/Authentication/Use-PodeAuth/#example-2","text":"Use-PodeAuth -Path './my-auth'","title":"EXAMPLE 2"},{"location":"Functions/Authentication/Use-PodeAuth/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Authentication/Use-PodeAuth/#-path","text":"Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Authentication/Use-PodeAuth/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Authentication/Use-PodeAuth/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Authentication/Use-PodeAuth/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Authentication/Use-PodeAuth/#notes","text":"","title":"NOTES"},{"location":"Functions/Authentication/Use-PodeAuth/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/AutoImport/Export-PodeFunction/","text":"Export-PodeFunction SYNOPSIS Exports functions that can be auto-imported by Pode, and into its runspaces. SYNTAX Export-PodeFunction [-Name] <String[]> [<CommonParameters>] DESCRIPTION Exports functions that can be auto-imported by Pode, and into its runspaces. EXAMPLES EXAMPLE 1 Export-PodeFunction -Name Mod1, Mod2 PARAMETERS -Name The Name(s) of functions to export. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Export-PodeFunction"},{"location":"Functions/AutoImport/Export-PodeFunction/#export-podefunction","text":"","title":"Export-PodeFunction"},{"location":"Functions/AutoImport/Export-PodeFunction/#synopsis","text":"Exports functions that can be auto-imported by Pode, and into its runspaces.","title":"SYNOPSIS"},{"location":"Functions/AutoImport/Export-PodeFunction/#syntax","text":"Export-PodeFunction [-Name] <String[]> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/AutoImport/Export-PodeFunction/#description","text":"Exports functions that can be auto-imported by Pode, and into its runspaces.","title":"DESCRIPTION"},{"location":"Functions/AutoImport/Export-PodeFunction/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/AutoImport/Export-PodeFunction/#example-1","text":"Export-PodeFunction -Name Mod1, Mod2","title":"EXAMPLE 1"},{"location":"Functions/AutoImport/Export-PodeFunction/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/AutoImport/Export-PodeFunction/#-name","text":"The Name(s) of functions to export. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/AutoImport/Export-PodeFunction/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/AutoImport/Export-PodeFunction/#inputs","text":"","title":"INPUTS"},{"location":"Functions/AutoImport/Export-PodeFunction/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/AutoImport/Export-PodeFunction/#notes","text":"","title":"NOTES"},{"location":"Functions/AutoImport/Export-PodeFunction/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/AutoImport/Export-PodeModule/","text":"Export-PodeModule SYNOPSIS Exports modules that can be auto-imported by Pode, and into its runspaces. SYNTAX Export-PodeModule [-Name] <String[]> [<CommonParameters>] DESCRIPTION Exports modules that can be auto-imported by Pode, and into its runspaces. EXAMPLES EXAMPLE 1 Export-PodeModule -Name Mod1, Mod2 PARAMETERS -Name The Name(s) of modules to export. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Export-PodeModule"},{"location":"Functions/AutoImport/Export-PodeModule/#export-podemodule","text":"","title":"Export-PodeModule"},{"location":"Functions/AutoImport/Export-PodeModule/#synopsis","text":"Exports modules that can be auto-imported by Pode, and into its runspaces.","title":"SYNOPSIS"},{"location":"Functions/AutoImport/Export-PodeModule/#syntax","text":"Export-PodeModule [-Name] <String[]> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/AutoImport/Export-PodeModule/#description","text":"Exports modules that can be auto-imported by Pode, and into its runspaces.","title":"DESCRIPTION"},{"location":"Functions/AutoImport/Export-PodeModule/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/AutoImport/Export-PodeModule/#example-1","text":"Export-PodeModule -Name Mod1, Mod2","title":"EXAMPLE 1"},{"location":"Functions/AutoImport/Export-PodeModule/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/AutoImport/Export-PodeModule/#-name","text":"The Name(s) of modules to export. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/AutoImport/Export-PodeModule/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/AutoImport/Export-PodeModule/#inputs","text":"","title":"INPUTS"},{"location":"Functions/AutoImport/Export-PodeModule/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/AutoImport/Export-PodeModule/#notes","text":"","title":"NOTES"},{"location":"Functions/AutoImport/Export-PodeModule/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/AutoImport/Export-PodeSnapin/","text":"Export-PodeSnapin SYNOPSIS Exports snapins that can be auto-imported by Pode, and into its runspaces. SYNTAX Export-PodeSnapin [-Name] <String[]> [<CommonParameters>] DESCRIPTION Exports snapins that can be auto-imported by Pode, and into its runspaces. EXAMPLES EXAMPLE 1 Export-PodeSnapin -Name Mod1, Mod2 PARAMETERS -Name The Name(s) of snapins to export. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Export-PodeSnapin"},{"location":"Functions/AutoImport/Export-PodeSnapin/#export-podesnapin","text":"","title":"Export-PodeSnapin"},{"location":"Functions/AutoImport/Export-PodeSnapin/#synopsis","text":"Exports snapins that can be auto-imported by Pode, and into its runspaces.","title":"SYNOPSIS"},{"location":"Functions/AutoImport/Export-PodeSnapin/#syntax","text":"Export-PodeSnapin [-Name] <String[]> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/AutoImport/Export-PodeSnapin/#description","text":"Exports snapins that can be auto-imported by Pode, and into its runspaces.","title":"DESCRIPTION"},{"location":"Functions/AutoImport/Export-PodeSnapin/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/AutoImport/Export-PodeSnapin/#example-1","text":"Export-PodeSnapin -Name Mod1, Mod2","title":"EXAMPLE 1"},{"location":"Functions/AutoImport/Export-PodeSnapin/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/AutoImport/Export-PodeSnapin/#-name","text":"The Name(s) of snapins to export. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/AutoImport/Export-PodeSnapin/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/AutoImport/Export-PodeSnapin/#inputs","text":"","title":"INPUTS"},{"location":"Functions/AutoImport/Export-PodeSnapin/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/AutoImport/Export-PodeSnapin/#notes","text":"","title":"NOTES"},{"location":"Functions/AutoImport/Export-PodeSnapin/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Cookies/Get-PodeCookie/","text":"Get-PodeCookie SYNOPSIS Retrieves a cookie from the Request. SYNTAX Get-PodeCookie [-Name] <String> [[-Secret] <String>] [-Raw] [<CommonParameters>] DESCRIPTION Retrieves a cookie from the Request, with the option to supply a secret to unsign the cookie's value. EXAMPLES EXAMPLE 1 Get-PodeCookie -Name 'Views' EXAMPLE 2 Get-PodeCookie -Name 'Views' -Secret 'hunter2' PARAMETERS -Name The name of the cookie to retrieve. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Raw If supplied, the cookie returned will be the raw .NET Cookie object for manipulation. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Secret The secret used to unsign the cookie's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Collections.Hashtable NOTES RELATED LINKS","title":"Get-PodeCookie"},{"location":"Functions/Cookies/Get-PodeCookie/#get-podecookie","text":"","title":"Get-PodeCookie"},{"location":"Functions/Cookies/Get-PodeCookie/#synopsis","text":"Retrieves a cookie from the Request.","title":"SYNOPSIS"},{"location":"Functions/Cookies/Get-PodeCookie/#syntax","text":"Get-PodeCookie [-Name] <String> [[-Secret] <String>] [-Raw] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Cookies/Get-PodeCookie/#description","text":"Retrieves a cookie from the Request, with the option to supply a secret to unsign the cookie's value.","title":"DESCRIPTION"},{"location":"Functions/Cookies/Get-PodeCookie/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Cookies/Get-PodeCookie/#example-1","text":"Get-PodeCookie -Name 'Views'","title":"EXAMPLE 1"},{"location":"Functions/Cookies/Get-PodeCookie/#example-2","text":"Get-PodeCookie -Name 'Views' -Secret 'hunter2'","title":"EXAMPLE 2"},{"location":"Functions/Cookies/Get-PodeCookie/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Cookies/Get-PodeCookie/#-name","text":"The name of the cookie to retrieve. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Cookies/Get-PodeCookie/#-raw","text":"If supplied, the cookie returned will be the raw .NET Cookie object for manipulation. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Raw"},{"location":"Functions/Cookies/Get-PodeCookie/#-secret","text":"The secret used to unsign the cookie's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Cookies/Get-PodeCookie/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Cookies/Get-PodeCookie/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Cookies/Get-PodeCookie/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Cookies/Get-PodeCookie/#systemcollectionshashtable","text":"","title":"System.Collections.Hashtable"},{"location":"Functions/Cookies/Get-PodeCookie/#notes","text":"","title":"NOTES"},{"location":"Functions/Cookies/Get-PodeCookie/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Cookies/Get-PodeCookieSecret/","text":"Get-PodeCookieSecret SYNOPSIS Retrieves a stored secret value. SYNTAX General Get-PodeCookieSecret -Name <String> [<CommonParameters>] Global Get-PodeCookieSecret [-Global] [<CommonParameters>] DESCRIPTION Retrieves a stored secret value. EXAMPLES EXAMPLE 1 Get-PodeCookieSecret -Name 'my-secret' EXAMPLE 2 Get-PodeCookieSecret -Global PARAMETERS -Global If flagged, will return the current global secret value. Type : SwitchParameter Parameter Sets : Global Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Name The name of the secret to retrieve. Type : String Parameter Sets : General Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.String NOTES RELATED LINKS","title":"Get-PodeCookieSecret"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#get-podecookiesecret","text":"","title":"Get-PodeCookieSecret"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#synopsis","text":"Retrieves a stored secret value.","title":"SYNOPSIS"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#general","text":"Get-PodeCookieSecret -Name <String> [<CommonParameters>]","title":"General"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#global","text":"Get-PodeCookieSecret [-Global] [<CommonParameters>]","title":"Global"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#description","text":"Retrieves a stored secret value.","title":"DESCRIPTION"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#example-1","text":"Get-PodeCookieSecret -Name 'my-secret'","title":"EXAMPLE 1"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#example-2","text":"Get-PodeCookieSecret -Global","title":"EXAMPLE 2"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#-global","text":"If flagged, will return the current global secret value. Type : SwitchParameter Parameter Sets : Global Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Global"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#-name","text":"The name of the secret to retrieve. Type : String Parameter Sets : General Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#systemstring","text":"","title":"System.String"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#notes","text":"","title":"NOTES"},{"location":"Functions/Cookies/Get-PodeCookieSecret/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Cookies/Get-PodeCookieValue/","text":"Get-PodeCookieValue SYNOPSIS Retrieves the value of a cookie from the Request. SYNTAX Get-PodeCookieValue [-Name] <String> [[-Secret] <String>] [<CommonParameters>] DESCRIPTION Retrieves the value of a cookie from the Request, with the option to supply a secret to unsign the cookie's value. EXAMPLES EXAMPLE 1 Get-PodeCookieValue -Name 'Views' EXAMPLE 2 Get-PodeCookieValue -Name 'Views' -Secret 'hunter2' PARAMETERS -Name The name of the cookie to retrieve. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Secret The secret used to unsign the cookie's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeCookieValue"},{"location":"Functions/Cookies/Get-PodeCookieValue/#get-podecookievalue","text":"","title":"Get-PodeCookieValue"},{"location":"Functions/Cookies/Get-PodeCookieValue/#synopsis","text":"Retrieves the value of a cookie from the Request.","title":"SYNOPSIS"},{"location":"Functions/Cookies/Get-PodeCookieValue/#syntax","text":"Get-PodeCookieValue [-Name] <String> [[-Secret] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Cookies/Get-PodeCookieValue/#description","text":"Retrieves the value of a cookie from the Request, with the option to supply a secret to unsign the cookie's value.","title":"DESCRIPTION"},{"location":"Functions/Cookies/Get-PodeCookieValue/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Cookies/Get-PodeCookieValue/#example-1","text":"Get-PodeCookieValue -Name 'Views'","title":"EXAMPLE 1"},{"location":"Functions/Cookies/Get-PodeCookieValue/#example-2","text":"Get-PodeCookieValue -Name 'Views' -Secret 'hunter2'","title":"EXAMPLE 2"},{"location":"Functions/Cookies/Get-PodeCookieValue/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Cookies/Get-PodeCookieValue/#-name","text":"The name of the cookie to retrieve. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Cookies/Get-PodeCookieValue/#-secret","text":"The secret used to unsign the cookie's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Cookies/Get-PodeCookieValue/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Cookies/Get-PodeCookieValue/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Cookies/Get-PodeCookieValue/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Cookies/Get-PodeCookieValue/#notes","text":"","title":"NOTES"},{"location":"Functions/Cookies/Get-PodeCookieValue/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Cookies/Remove-PodeCookie/","text":"Remove-PodeCookie SYNOPSIS Removes a cookie from the Response. SYNTAX Remove-PodeCookie [-Name] <String> [<CommonParameters>] DESCRIPTION Removes a cookie from the Response, this is done by immediately expiring the cookie and flagging it for discard. EXAMPLES EXAMPLE 1 Remove-PodeCookie -Name 'Views' PARAMETERS -Name The name of the cookie to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeCookie"},{"location":"Functions/Cookies/Remove-PodeCookie/#remove-podecookie","text":"","title":"Remove-PodeCookie"},{"location":"Functions/Cookies/Remove-PodeCookie/#synopsis","text":"Removes a cookie from the Response.","title":"SYNOPSIS"},{"location":"Functions/Cookies/Remove-PodeCookie/#syntax","text":"Remove-PodeCookie [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Cookies/Remove-PodeCookie/#description","text":"Removes a cookie from the Response, this is done by immediately expiring the cookie and flagging it for discard.","title":"DESCRIPTION"},{"location":"Functions/Cookies/Remove-PodeCookie/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Cookies/Remove-PodeCookie/#example-1","text":"Remove-PodeCookie -Name 'Views'","title":"EXAMPLE 1"},{"location":"Functions/Cookies/Remove-PodeCookie/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Cookies/Remove-PodeCookie/#-name","text":"The name of the cookie to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Cookies/Remove-PodeCookie/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Cookies/Remove-PodeCookie/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Cookies/Remove-PodeCookie/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Cookies/Remove-PodeCookie/#notes","text":"","title":"NOTES"},{"location":"Functions/Cookies/Remove-PodeCookie/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Cookies/Set-PodeCookie/","text":"Set-PodeCookie SYNOPSIS Sets a cookie on the Response. SYNTAX Duration (Default) Set-PodeCookie -Name <String> [-Value <String>] [-Secret <String>] [-Duration <Int32>] [-HttpOnly] [-Discard] [-Secure] [<CommonParameters>] ExpiryDate Set-PodeCookie -Name <String> [-Value <String>] [-Secret <String>] [-ExpiryDate <DateTime>] [-HttpOnly] [-Discard] [-Secure] [<CommonParameters>] DESCRIPTION Sets a cookie on the Response using the \"Set-Cookie\" header. You can also set cookies to expire, or being signed. EXAMPLES EXAMPLE 1 Set-PodeCookie -Name 'Views' -Value 2 EXAMPLE 2 Set-PodeCookie -Name 'Views' -Value 2 -Secret 'hunter2' EXAMPLE 3 Set-PodeCookie -Name 'Views' -Value 2 -Duration 3600 PARAMETERS -Discard Inform browsers to remove the cookie. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Duration The duration, in seconds, before the cookie is expired. Type : Int32 Parameter Sets : Duration Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -ExpiryDate An explicit expiry date for the cookie. Type : DateTime Parameter Sets : ExpiryDate Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -HttpOnly Only allow the cookie to be used in browsers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Name The name of the cookie. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Secret If supplied, the secret with which to sign the cookie. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Secure Only allow the cookie on secure (HTTPS) connections. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Value The value of the cookie. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Collections.Hashtable NOTES RELATED LINKS","title":"Set-PodeCookie"},{"location":"Functions/Cookies/Set-PodeCookie/#set-podecookie","text":"","title":"Set-PodeCookie"},{"location":"Functions/Cookies/Set-PodeCookie/#synopsis","text":"Sets a cookie on the Response.","title":"SYNOPSIS"},{"location":"Functions/Cookies/Set-PodeCookie/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Cookies/Set-PodeCookie/#duration-default","text":"Set-PodeCookie -Name <String> [-Value <String>] [-Secret <String>] [-Duration <Int32>] [-HttpOnly] [-Discard] [-Secure] [<CommonParameters>]","title":"Duration (Default)"},{"location":"Functions/Cookies/Set-PodeCookie/#expirydate","text":"Set-PodeCookie -Name <String> [-Value <String>] [-Secret <String>] [-ExpiryDate <DateTime>] [-HttpOnly] [-Discard] [-Secure] [<CommonParameters>]","title":"ExpiryDate"},{"location":"Functions/Cookies/Set-PodeCookie/#description","text":"Sets a cookie on the Response using the \"Set-Cookie\" header. You can also set cookies to expire, or being signed.","title":"DESCRIPTION"},{"location":"Functions/Cookies/Set-PodeCookie/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Cookies/Set-PodeCookie/#example-1","text":"Set-PodeCookie -Name 'Views' -Value 2","title":"EXAMPLE 1"},{"location":"Functions/Cookies/Set-PodeCookie/#example-2","text":"Set-PodeCookie -Name 'Views' -Value 2 -Secret 'hunter2'","title":"EXAMPLE 2"},{"location":"Functions/Cookies/Set-PodeCookie/#example-3","text":"Set-PodeCookie -Name 'Views' -Value 2 -Duration 3600","title":"EXAMPLE 3"},{"location":"Functions/Cookies/Set-PodeCookie/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Cookies/Set-PodeCookie/#-discard","text":"Inform browsers to remove the cookie. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Discard"},{"location":"Functions/Cookies/Set-PodeCookie/#-duration","text":"The duration, in seconds, before the cookie is expired. Type : Int32 Parameter Sets : Duration Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Duration"},{"location":"Functions/Cookies/Set-PodeCookie/#-expirydate","text":"An explicit expiry date for the cookie. Type : DateTime Parameter Sets : ExpiryDate Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ExpiryDate"},{"location":"Functions/Cookies/Set-PodeCookie/#-httponly","text":"Only allow the cookie to be used in browsers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-HttpOnly"},{"location":"Functions/Cookies/Set-PodeCookie/#-name","text":"The name of the cookie. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Cookies/Set-PodeCookie/#-secret","text":"If supplied, the secret with which to sign the cookie. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Cookies/Set-PodeCookie/#-secure","text":"Only allow the cookie on secure (HTTPS) connections. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Secure"},{"location":"Functions/Cookies/Set-PodeCookie/#-value","text":"The value of the cookie. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Cookies/Set-PodeCookie/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Cookies/Set-PodeCookie/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Cookies/Set-PodeCookie/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Cookies/Set-PodeCookie/#systemcollectionshashtable","text":"","title":"System.Collections.Hashtable"},{"location":"Functions/Cookies/Set-PodeCookie/#notes","text":"","title":"NOTES"},{"location":"Functions/Cookies/Set-PodeCookie/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Cookies/Set-PodeCookieSecret/","text":"Set-PodeCookieSecret SYNOPSIS Stores secrets that can be used to sign cookies. SYNTAX General Set-PodeCookieSecret -Name <String> -Value <String> [<CommonParameters>] Global Set-PodeCookieSecret -Value <String> [-Global] [<CommonParameters>] DESCRIPTION Stores secrets that can be used to sign cookies. A global secret can be set for easier retrieval. EXAMPLES EXAMPLE 1 Set-PodeCookieSecret -Name 'my-secret' -Value 'shhhh!' EXAMPLE 2 Set-PodeCookieSecret -Value 'hunter2' -Global PARAMETERS -Global If flagged, the secret being stored will be set as the global secret. Type : SwitchParameter Parameter Sets : Global Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Name The name of the secret to store. Type : String Parameter Sets : General Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Value The value of the secret to store. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeCookieSecret"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#set-podecookiesecret","text":"","title":"Set-PodeCookieSecret"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#synopsis","text":"Stores secrets that can be used to sign cookies.","title":"SYNOPSIS"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#general","text":"Set-PodeCookieSecret -Name <String> -Value <String> [<CommonParameters>]","title":"General"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#global","text":"Set-PodeCookieSecret -Value <String> [-Global] [<CommonParameters>]","title":"Global"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#description","text":"Stores secrets that can be used to sign cookies. A global secret can be set for easier retrieval.","title":"DESCRIPTION"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#example-1","text":"Set-PodeCookieSecret -Name 'my-secret' -Value 'shhhh!'","title":"EXAMPLE 1"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#example-2","text":"Set-PodeCookieSecret -Value 'hunter2' -Global","title":"EXAMPLE 2"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#-global","text":"If flagged, the secret being stored will be set as the global secret. Type : SwitchParameter Parameter Sets : Global Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Global"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#-name","text":"The name of the secret to store. Type : String Parameter Sets : General Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#-value","text":"The value of the secret to store. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#notes","text":"","title":"NOTES"},{"location":"Functions/Cookies/Set-PodeCookieSecret/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Cookies/Test-PodeCookie/","text":"Test-PodeCookie SYNOPSIS Tests if a cookie exists on the Request. SYNTAX Test-PodeCookie [-Name] <String> [<CommonParameters>] DESCRIPTION Tests if a cookie exists on the Request. EXAMPLES EXAMPLE 1 Test-PodeCookie -Name 'Views' PARAMETERS -Name The name of the cookie to test for on the Request. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Boolean NOTES RELATED LINKS","title":"Test-PodeCookie"},{"location":"Functions/Cookies/Test-PodeCookie/#test-podecookie","text":"","title":"Test-PodeCookie"},{"location":"Functions/Cookies/Test-PodeCookie/#synopsis","text":"Tests if a cookie exists on the Request.","title":"SYNOPSIS"},{"location":"Functions/Cookies/Test-PodeCookie/#syntax","text":"Test-PodeCookie [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Cookies/Test-PodeCookie/#description","text":"Tests if a cookie exists on the Request.","title":"DESCRIPTION"},{"location":"Functions/Cookies/Test-PodeCookie/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Cookies/Test-PodeCookie/#example-1","text":"Test-PodeCookie -Name 'Views'","title":"EXAMPLE 1"},{"location":"Functions/Cookies/Test-PodeCookie/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Cookies/Test-PodeCookie/#-name","text":"The name of the cookie to test for on the Request. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Cookies/Test-PodeCookie/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Cookies/Test-PodeCookie/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Cookies/Test-PodeCookie/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Cookies/Test-PodeCookie/#systemboolean","text":"","title":"System.Boolean"},{"location":"Functions/Cookies/Test-PodeCookie/#notes","text":"","title":"NOTES"},{"location":"Functions/Cookies/Test-PodeCookie/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Cookies/Test-PodeCookieSigned/","text":"Test-PodeCookieSigned SYNOPSIS Tests if a cookie on the Request is validly signed. SYNTAX Test-PodeCookieSigned [-Name] <String> [[-Secret] <String>] [<CommonParameters>] DESCRIPTION Tests if a cookie on the Request is validly signed, by attempting to unsign it using some secret. EXAMPLES EXAMPLE 1 Test-PodeCookieSigned -Name 'Views' -Secret 'hunter2' PARAMETERS -Name The name of the cookie to test. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Secret A secret to use for attempting to unsign the cookie's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Boolean NOTES RELATED LINKS","title":"Test-PodeCookieSigned"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#test-podecookiesigned","text":"","title":"Test-PodeCookieSigned"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#synopsis","text":"Tests if a cookie on the Request is validly signed.","title":"SYNOPSIS"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#syntax","text":"Test-PodeCookieSigned [-Name] <String> [[-Secret] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#description","text":"Tests if a cookie on the Request is validly signed, by attempting to unsign it using some secret.","title":"DESCRIPTION"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#example-1","text":"Test-PodeCookieSigned -Name 'Views' -Secret 'hunter2'","title":"EXAMPLE 1"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#-name","text":"The name of the cookie to test. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#-secret","text":"A secret to use for attempting to unsign the cookie's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#systemboolean","text":"","title":"System.Boolean"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#notes","text":"","title":"NOTES"},{"location":"Functions/Cookies/Test-PodeCookieSigned/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/","text":"Update-PodeCookieExpiry SYNOPSIS Updates the exipry date of a cookie on the Response. SYNTAX Duration (Default) Update-PodeCookieExpiry -Name <String> [-Duration <Int32>] [<CommonParameters>] ExpiryDate Update-PodeCookieExpiry -Name <String> [-ExpiryDate <DateTime>] [<CommonParameters>] DESCRIPTION Updates the exipry date of a cookie on the Response. This can either be done by suppling a duration, or and explicit expiry date. EXAMPLES EXAMPLE 1 Update-PodeCookieExpiry -Name 'Views' -Duration 1800 EXAMPLE 2 Update-PodeCookieExpiry -Name 'Views' -ExpiryDate ([datetime]::UtcNow.AddSeconds(1800)) PARAMETERS -Duration The duration, in seconds, to extend the cookie's expiry. Type : Int32 Parameter Sets : Duration Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -ExpiryDate An explicit expiry date for the cookie. Type : DateTime Parameter Sets : ExpiryDate Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The name of the cookie to extend. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Collections.Hashtable NOTES RELATED LINKS","title":"Update-PodeCookieExpiry"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#update-podecookieexpiry","text":"","title":"Update-PodeCookieExpiry"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#synopsis","text":"Updates the exipry date of a cookie on the Response.","title":"SYNOPSIS"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#duration-default","text":"Update-PodeCookieExpiry -Name <String> [-Duration <Int32>] [<CommonParameters>]","title":"Duration (Default)"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#expirydate","text":"Update-PodeCookieExpiry -Name <String> [-ExpiryDate <DateTime>] [<CommonParameters>]","title":"ExpiryDate"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#description","text":"Updates the exipry date of a cookie on the Response. This can either be done by suppling a duration, or and explicit expiry date.","title":"DESCRIPTION"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#example-1","text":"Update-PodeCookieExpiry -Name 'Views' -Duration 1800","title":"EXAMPLE 1"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#example-2","text":"Update-PodeCookieExpiry -Name 'Views' -ExpiryDate ([datetime]::UtcNow.AddSeconds(1800))","title":"EXAMPLE 2"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#-duration","text":"The duration, in seconds, to extend the cookie's expiry. Type : Int32 Parameter Sets : Duration Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Duration"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#-expirydate","text":"An explicit expiry date for the cookie. Type : DateTime Parameter Sets : ExpiryDate Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ExpiryDate"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#-name","text":"The name of the cookie to extend. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#systemcollectionshashtable","text":"","title":"System.Collections.Hashtable"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#notes","text":"","title":"NOTES"},{"location":"Functions/Cookies/Update-PodeCookieExpiry/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Core/Add-PodeEndpoint/","text":"Add-PodeEndpoint SYNOPSIS Bind an endpoint to listen for incoming Requests. SYNTAX Default (Default) Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>] CertFile Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] -Certificate <String> [-CertificatePassword <String>] [-CertificateKey <String>] [-TlsMode <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>] CertThumb Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] -CertificateThumbprint <String> [-CertificateStoreName <StoreName>] [-CertificateStoreLocation <StoreLocation>] [-TlsMode <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>] CertName Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] -CertificateName <String> [-CertificateStoreName <StoreName>] [-CertificateStoreLocation <StoreLocation>] [-TlsMode <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>] CertRaw Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] -X509Certificate <X509Certificate> [-TlsMode <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>] CertSelf Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] [-TlsMode <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-SelfSigned] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>] DESCRIPTION Bind an endpoint to listen for incoming Requests. The endpoints can be HTTP, HTTPS, TCP or SMTP, with the option to bind certificates. EXAMPLES EXAMPLE 1 Add-PodeEndpoint -Address localhost -Port 8090 -Protocol Http EXAMPLE 2 Add-PodeEndpoint -Address localhost -Protocol Smtp EXAMPLE 3 Add-PodeEndpoint -Address dev.pode.com -Port 8443 -Protocol Https -SelfSigned EXAMPLE 4 Add-PodeEndpoint -Address 127.0.0.2 -Hostname dev.pode.com -Port 8443 -Protocol Https -SelfSigned EXAMPLE 5 Add-PodeEndpoint -Address live.pode.com -Protocol Https -CertificateThumbprint '2A9467F7D3940243D6C07DE61E7FCCE292' PARAMETERS -Acknowledge An optional Acknowledge message to send to clients when they first connect, for TCP and SMTP endpoints only. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Address The IP/Hostname of the endpoint (Default: localhost). Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Localhost Accept pipeline input : False Accept wildcard characters : False -AllowClientCertificate Allow for client certificates to be sent on requests. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Certificate The path to a certificate that can be use to enable HTTPS Type : String Parameter Sets : CertFile Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -CertificateKey A key file to be paired with a PEM certificate file referenced in Certificate Type : String Parameter Sets : CertFile Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -CertificateName A certificate subject name to bind onto HTTPS endpoints (Windows). Type : String Parameter Sets : CertName Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -CertificatePassword The password for the certificate file referenced in Certificate Type : String Parameter Sets : CertFile Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -CertificateStoreLocation The location of a certifcate store where a certificate can be found (Default: CurrentUser) (Windows). Type : StoreLocation Parameter Sets : CertThumb, CertName Aliases : Accepted values : CurrentUser, LocalMachine Required : False Position : Named Default value : CurrentUser Accept pipeline input : False Accept wildcard characters : False -CertificateStoreName The name of a certifcate store where a certificate can be found (Default: My) (Windows). Type : StoreName Parameter Sets : CertThumb, CertName Aliases : Accepted values : AddressBook, AuthRoot, CertificateAuthority, Disallowed, My, Root, TrustedPeople, TrustedPublisher Required : False Position : Named Default value : My Accept pipeline input : False Accept wildcard characters : False -CertificateThumbprint A certificate thumbprint to bind onto HTTPS endpoints (Windows). Type : String Parameter Sets : CertThumb Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -CRLFMessageEnd If supplied, TCP endpoints will expect incoming data to end with CRLF. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Default If supplied, this endpoint will be the default one used for internally generating URLs. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Description A quick description of the Endpoint - normally used in OpenAPI. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Force Ignore Adminstrator checks for non-localhost endpoints. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Hostname An optional hostname for the endpoint, specifying a hostname restricts access to just the hostname. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -LookupHostname If supplied, a supplied Hostname will have its IP Address looked up from host file or DNS. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Name An optional name for the endpoint, that can be used with other functions (Default: GUID). Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -PassThru If supplied, the endpoint created will be returned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Port The Port number of the endpoint. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Protocol The protocol of the supplied endpoint. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -RedirectTo The Name of another Endpoint to automatically generate a redirect route for all traffic. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -SelfSigned Create and bind a self-signed certifcate for HTTPS endpoints. Type : SwitchParameter Parameter Sets : CertSelf Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -TlsMode The TLS mode to use on secure connections, options are Implicit or Explicit (SMTP only) (Default: Implicit). Type : String Parameter Sets : CertFile, CertThumb, CertName, CertRaw, CertSelf Aliases : Required : False Position : Named Default value : Implicit Accept pipeline input : False Accept wildcard characters : False -X509Certificate The raw X509 certificate that can be use to enable HTTPS Type : X509Certificate Parameter Sets : CertRaw Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeEndpoint"},{"location":"Functions/Core/Add-PodeEndpoint/#add-podeendpoint","text":"","title":"Add-PodeEndpoint"},{"location":"Functions/Core/Add-PodeEndpoint/#synopsis","text":"Bind an endpoint to listen for incoming Requests.","title":"SYNOPSIS"},{"location":"Functions/Core/Add-PodeEndpoint/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Core/Add-PodeEndpoint/#default-default","text":"Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>]","title":"Default (Default)"},{"location":"Functions/Core/Add-PodeEndpoint/#certfile","text":"Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] -Certificate <String> [-CertificatePassword <String>] [-CertificateKey <String>] [-TlsMode <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>]","title":"CertFile"},{"location":"Functions/Core/Add-PodeEndpoint/#certthumb","text":"Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] -CertificateThumbprint <String> [-CertificateStoreName <StoreName>] [-CertificateStoreLocation <StoreLocation>] [-TlsMode <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>]","title":"CertThumb"},{"location":"Functions/Core/Add-PodeEndpoint/#certname","text":"Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] -CertificateName <String> [-CertificateStoreName <StoreName>] [-CertificateStoreLocation <StoreLocation>] [-TlsMode <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>]","title":"CertName"},{"location":"Functions/Core/Add-PodeEndpoint/#certraw","text":"Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] -X509Certificate <X509Certificate> [-TlsMode <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>]","title":"CertRaw"},{"location":"Functions/Core/Add-PodeEndpoint/#certself","text":"Add-PodeEndpoint [-Address <String>] [-Port <Int32>] [-Hostname <String>] [-Protocol <String>] [-TlsMode <String>] [-Name <String>] [-RedirectTo <String>] [-Description <String>] [-Acknowledge <String>] [-CRLFMessageEnd] [-Force] [-SelfSigned] [-AllowClientCertificate] [-PassThru] [-LookupHostname] [-Default] [<CommonParameters>]","title":"CertSelf"},{"location":"Functions/Core/Add-PodeEndpoint/#description","text":"Bind an endpoint to listen for incoming Requests. The endpoints can be HTTP, HTTPS, TCP or SMTP, with the option to bind certificates.","title":"DESCRIPTION"},{"location":"Functions/Core/Add-PodeEndpoint/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Core/Add-PodeEndpoint/#example-1","text":"Add-PodeEndpoint -Address localhost -Port 8090 -Protocol Http","title":"EXAMPLE 1"},{"location":"Functions/Core/Add-PodeEndpoint/#example-2","text":"Add-PodeEndpoint -Address localhost -Protocol Smtp","title":"EXAMPLE 2"},{"location":"Functions/Core/Add-PodeEndpoint/#example-3","text":"Add-PodeEndpoint -Address dev.pode.com -Port 8443 -Protocol Https -SelfSigned","title":"EXAMPLE 3"},{"location":"Functions/Core/Add-PodeEndpoint/#example-4","text":"Add-PodeEndpoint -Address 127.0.0.2 -Hostname dev.pode.com -Port 8443 -Protocol Https -SelfSigned","title":"EXAMPLE 4"},{"location":"Functions/Core/Add-PodeEndpoint/#example-5","text":"Add-PodeEndpoint -Address live.pode.com -Protocol Https -CertificateThumbprint '2A9467F7D3940243D6C07DE61E7FCCE292'","title":"EXAMPLE 5"},{"location":"Functions/Core/Add-PodeEndpoint/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Core/Add-PodeEndpoint/#-acknowledge","text":"An optional Acknowledge message to send to clients when they first connect, for TCP and SMTP endpoints only. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Acknowledge"},{"location":"Functions/Core/Add-PodeEndpoint/#-address","text":"The IP/Hostname of the endpoint (Default: localhost). Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Localhost Accept pipeline input : False Accept wildcard characters : False","title":"-Address"},{"location":"Functions/Core/Add-PodeEndpoint/#-allowclientcertificate","text":"Allow for client certificates to be sent on requests. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AllowClientCertificate"},{"location":"Functions/Core/Add-PodeEndpoint/#-certificate","text":"The path to a certificate that can be use to enable HTTPS Type : String Parameter Sets : CertFile Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Certificate"},{"location":"Functions/Core/Add-PodeEndpoint/#-certificatekey","text":"A key file to be paired with a PEM certificate file referenced in Certificate Type : String Parameter Sets : CertFile Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-CertificateKey"},{"location":"Functions/Core/Add-PodeEndpoint/#-certificatename","text":"A certificate subject name to bind onto HTTPS endpoints (Windows). Type : String Parameter Sets : CertName Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-CertificateName"},{"location":"Functions/Core/Add-PodeEndpoint/#-certificatepassword","text":"The password for the certificate file referenced in Certificate Type : String Parameter Sets : CertFile Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-CertificatePassword"},{"location":"Functions/Core/Add-PodeEndpoint/#-certificatestorelocation","text":"The location of a certifcate store where a certificate can be found (Default: CurrentUser) (Windows). Type : StoreLocation Parameter Sets : CertThumb, CertName Aliases : Accepted values : CurrentUser, LocalMachine Required : False Position : Named Default value : CurrentUser Accept pipeline input : False Accept wildcard characters : False","title":"-CertificateStoreLocation"},{"location":"Functions/Core/Add-PodeEndpoint/#-certificatestorename","text":"The name of a certifcate store where a certificate can be found (Default: My) (Windows). Type : StoreName Parameter Sets : CertThumb, CertName Aliases : Accepted values : AddressBook, AuthRoot, CertificateAuthority, Disallowed, My, Root, TrustedPeople, TrustedPublisher Required : False Position : Named Default value : My Accept pipeline input : False Accept wildcard characters : False","title":"-CertificateStoreName"},{"location":"Functions/Core/Add-PodeEndpoint/#-certificatethumbprint","text":"A certificate thumbprint to bind onto HTTPS endpoints (Windows). Type : String Parameter Sets : CertThumb Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-CertificateThumbprint"},{"location":"Functions/Core/Add-PodeEndpoint/#-crlfmessageend","text":"If supplied, TCP endpoints will expect incoming data to end with CRLF. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-CRLFMessageEnd"},{"location":"Functions/Core/Add-PodeEndpoint/#-default","text":"If supplied, this endpoint will be the default one used for internally generating URLs. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Default"},{"location":"Functions/Core/Add-PodeEndpoint/#-description","text":"A quick description of the Endpoint - normally used in OpenAPI. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/Core/Add-PodeEndpoint/#-force","text":"Ignore Adminstrator checks for non-localhost endpoints. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Core/Add-PodeEndpoint/#-hostname","text":"An optional hostname for the endpoint, specifying a hostname restricts access to just the hostname. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Hostname"},{"location":"Functions/Core/Add-PodeEndpoint/#-lookuphostname","text":"If supplied, a supplied Hostname will have its IP Address looked up from host file or DNS. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-LookupHostname"},{"location":"Functions/Core/Add-PodeEndpoint/#-name","text":"An optional name for the endpoint, that can be used with other functions (Default: GUID). Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Core/Add-PodeEndpoint/#-passthru","text":"If supplied, the endpoint created will be returned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-PassThru"},{"location":"Functions/Core/Add-PodeEndpoint/#-port","text":"The Port number of the endpoint. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Port"},{"location":"Functions/Core/Add-PodeEndpoint/#-protocol","text":"The protocol of the supplied endpoint. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Protocol"},{"location":"Functions/Core/Add-PodeEndpoint/#-redirectto","text":"The Name of another Endpoint to automatically generate a redirect route for all traffic. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-RedirectTo"},{"location":"Functions/Core/Add-PodeEndpoint/#-selfsigned","text":"Create and bind a self-signed certifcate for HTTPS endpoints. Type : SwitchParameter Parameter Sets : CertSelf Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-SelfSigned"},{"location":"Functions/Core/Add-PodeEndpoint/#-tlsmode","text":"The TLS mode to use on secure connections, options are Implicit or Explicit (SMTP only) (Default: Implicit). Type : String Parameter Sets : CertFile, CertThumb, CertName, CertRaw, CertSelf Aliases : Required : False Position : Named Default value : Implicit Accept pipeline input : False Accept wildcard characters : False","title":"-TlsMode"},{"location":"Functions/Core/Add-PodeEndpoint/#-x509certificate","text":"The raw X509 certificate that can be use to enable HTTPS Type : X509Certificate Parameter Sets : CertRaw Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-X509Certificate"},{"location":"Functions/Core/Add-PodeEndpoint/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Core/Add-PodeEndpoint/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Core/Add-PodeEndpoint/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Core/Add-PodeEndpoint/#notes","text":"","title":"NOTES"},{"location":"Functions/Core/Add-PodeEndpoint/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Core/Close-PodeServer/","text":"Close-PodeServer SYNOPSIS Closes the Pode server. SYNTAX Close-PodeServer [<CommonParameters>] DESCRIPTION Closes the Pode server. EXAMPLES EXAMPLE 1 Close-PodeServer PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Close-PodeServer"},{"location":"Functions/Core/Close-PodeServer/#close-podeserver","text":"","title":"Close-PodeServer"},{"location":"Functions/Core/Close-PodeServer/#synopsis","text":"Closes the Pode server.","title":"SYNOPSIS"},{"location":"Functions/Core/Close-PodeServer/#syntax","text":"Close-PodeServer [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Core/Close-PodeServer/#description","text":"Closes the Pode server.","title":"DESCRIPTION"},{"location":"Functions/Core/Close-PodeServer/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Core/Close-PodeServer/#example-1","text":"Close-PodeServer","title":"EXAMPLE 1"},{"location":"Functions/Core/Close-PodeServer/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Core/Close-PodeServer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Core/Close-PodeServer/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Core/Close-PodeServer/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Core/Close-PodeServer/#notes","text":"","title":"NOTES"},{"location":"Functions/Core/Close-PodeServer/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Core/Get-PodeEndpoint/","text":"Get-PodeEndpoint SYNOPSIS Get an Endpoint(s). SYNTAX Get-PodeEndpoint [[-Address] <String>] [[-Port] <Int32>] [[-Hostname] <String>] [[-Protocol] <String>] [[-Name] <String[]>] [<CommonParameters>] DESCRIPTION Get an Endpoint(s). EXAMPLES EXAMPLE 1 Get-PodeEndpoint -Address 127.0.0.1 EXAMPLE 2 Get-PodeEndpoint -Protocol Http EXAMPLE 3 Get-PodeEndpoint -Name Admin, User PARAMETERS -Address An Address to filter the endpoints. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Hostname A Hostname to filter the endpoints. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name Any endpoints Names to filter endpoints. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -Port A Port to filter the endpoints. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Protocol A Protocol to filter the endpoints. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeEndpoint"},{"location":"Functions/Core/Get-PodeEndpoint/#get-podeendpoint","text":"","title":"Get-PodeEndpoint"},{"location":"Functions/Core/Get-PodeEndpoint/#synopsis","text":"Get an Endpoint(s).","title":"SYNOPSIS"},{"location":"Functions/Core/Get-PodeEndpoint/#syntax","text":"Get-PodeEndpoint [[-Address] <String>] [[-Port] <Int32>] [[-Hostname] <String>] [[-Protocol] <String>] [[-Name] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Core/Get-PodeEndpoint/#description","text":"Get an Endpoint(s).","title":"DESCRIPTION"},{"location":"Functions/Core/Get-PodeEndpoint/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Core/Get-PodeEndpoint/#example-1","text":"Get-PodeEndpoint -Address 127.0.0.1","title":"EXAMPLE 1"},{"location":"Functions/Core/Get-PodeEndpoint/#example-2","text":"Get-PodeEndpoint -Protocol Http","title":"EXAMPLE 2"},{"location":"Functions/Core/Get-PodeEndpoint/#example-3","text":"Get-PodeEndpoint -Name Admin, User","title":"EXAMPLE 3"},{"location":"Functions/Core/Get-PodeEndpoint/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Core/Get-PodeEndpoint/#-address","text":"An Address to filter the endpoints. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Address"},{"location":"Functions/Core/Get-PodeEndpoint/#-hostname","text":"A Hostname to filter the endpoints. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Hostname"},{"location":"Functions/Core/Get-PodeEndpoint/#-name","text":"Any endpoints Names to filter endpoints. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Core/Get-PodeEndpoint/#-port","text":"A Port to filter the endpoints. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Port"},{"location":"Functions/Core/Get-PodeEndpoint/#-protocol","text":"A Protocol to filter the endpoints. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Protocol"},{"location":"Functions/Core/Get-PodeEndpoint/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Core/Get-PodeEndpoint/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Core/Get-PodeEndpoint/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Core/Get-PodeEndpoint/#notes","text":"","title":"NOTES"},{"location":"Functions/Core/Get-PodeEndpoint/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Core/Pode/","text":"Pode SYNOPSIS The CLI for Pode, to initialise, build and start your Server. SYNTAX Pode [-Action] <String> [-Dev] [<CommonParameters>] DESCRIPTION The CLI for Pode, to initialise, build and start your Server. EXAMPLES EXAMPLE 1 pode install -dev EXAMPLE 2 pode build EXAMPLE 3 pode start PARAMETERS -Action The action to invoke on your Server. Type : String Parameter Sets : (All) Aliases : a Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Dev Supply when running \"pode install\", this will install any dev packages defined in your package.json. Type : SwitchParameter Parameter Sets : (All) Aliases : d Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Pode"},{"location":"Functions/Core/Pode/#pode","text":"","title":"Pode"},{"location":"Functions/Core/Pode/#synopsis","text":"The CLI for Pode, to initialise, build and start your Server.","title":"SYNOPSIS"},{"location":"Functions/Core/Pode/#syntax","text":"Pode [-Action] <String> [-Dev] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Core/Pode/#description","text":"The CLI for Pode, to initialise, build and start your Server.","title":"DESCRIPTION"},{"location":"Functions/Core/Pode/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Core/Pode/#example-1","text":"pode install -dev","title":"EXAMPLE 1"},{"location":"Functions/Core/Pode/#example-2","text":"pode build","title":"EXAMPLE 2"},{"location":"Functions/Core/Pode/#example-3","text":"pode start","title":"EXAMPLE 3"},{"location":"Functions/Core/Pode/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Core/Pode/#-action","text":"The action to invoke on your Server. Type : String Parameter Sets : (All) Aliases : a Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Action"},{"location":"Functions/Core/Pode/#-dev","text":"Supply when running \"pode install\", this will install any dev packages defined in your package.json. Type : SwitchParameter Parameter Sets : (All) Aliases : d Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Dev"},{"location":"Functions/Core/Pode/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Core/Pode/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Core/Pode/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Core/Pode/#notes","text":"","title":"NOTES"},{"location":"Functions/Core/Pode/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Core/Restart-PodeServer/","text":"Restart-PodeServer SYNOPSIS Restarts the Pode server. SYNTAX Restart-PodeServer [<CommonParameters>] DESCRIPTION Restarts the Pode server. EXAMPLES EXAMPLE 1 Restart-PodeServer PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Restart-PodeServer"},{"location":"Functions/Core/Restart-PodeServer/#restart-podeserver","text":"","title":"Restart-PodeServer"},{"location":"Functions/Core/Restart-PodeServer/#synopsis","text":"Restarts the Pode server.","title":"SYNOPSIS"},{"location":"Functions/Core/Restart-PodeServer/#syntax","text":"Restart-PodeServer [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Core/Restart-PodeServer/#description","text":"Restarts the Pode server.","title":"DESCRIPTION"},{"location":"Functions/Core/Restart-PodeServer/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Core/Restart-PodeServer/#example-1","text":"Restart-PodeServer","title":"EXAMPLE 1"},{"location":"Functions/Core/Restart-PodeServer/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Core/Restart-PodeServer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Core/Restart-PodeServer/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Core/Restart-PodeServer/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Core/Restart-PodeServer/#notes","text":"","title":"NOTES"},{"location":"Functions/Core/Restart-PodeServer/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Core/Show-PodeGui/","text":"Show-PodeGui SYNOPSIS Opens a Web Server up as a Desktop Application. SYNTAX Show-PodeGui [-Title] <String> [[-Icon] <String>] [[-WindowState] <String>] [[-WindowStyle] <String>] [[-ResizeMode] <String>] [[-Height] <Int32>] [[-Width] <Int32>] [[-EndpointName] <String>] [-HideFromTaskbar] [<CommonParameters>] DESCRIPTION Opens a Web Server up as a Desktop Application. EXAMPLES EXAMPLE 1 Show-PodeGui -Title 'MyApplication' -WindowState 'Maximized' PARAMETERS -EndpointName The specific endpoint name to use, if you are listening on multiple endpoints. Type : String Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False -Height The height of the window. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -HideFromTaskbar Stops the Application from appearing on the taskbar. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Icon A path to an icon image for the Application. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -ResizeMode Specifies if the Application's window is resizable. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : CanResize Accept pipeline input : False Accept wildcard characters : False -Title The title of the Application's window. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Width The width of the window. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -WindowState The state the Application's window starts, such as Minimized. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : Normal Accept pipeline input : False Accept wildcard characters : False -WindowStyle The border style of the Application's window. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : SingleBorderWindow Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Show-PodeGui"},{"location":"Functions/Core/Show-PodeGui/#show-podegui","text":"","title":"Show-PodeGui"},{"location":"Functions/Core/Show-PodeGui/#synopsis","text":"Opens a Web Server up as a Desktop Application.","title":"SYNOPSIS"},{"location":"Functions/Core/Show-PodeGui/#syntax","text":"Show-PodeGui [-Title] <String> [[-Icon] <String>] [[-WindowState] <String>] [[-WindowStyle] <String>] [[-ResizeMode] <String>] [[-Height] <Int32>] [[-Width] <Int32>] [[-EndpointName] <String>] [-HideFromTaskbar] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Core/Show-PodeGui/#description","text":"Opens a Web Server up as a Desktop Application.","title":"DESCRIPTION"},{"location":"Functions/Core/Show-PodeGui/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Core/Show-PodeGui/#example-1","text":"Show-PodeGui -Title 'MyApplication' -WindowState 'Maximized'","title":"EXAMPLE 1"},{"location":"Functions/Core/Show-PodeGui/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Core/Show-PodeGui/#-endpointname","text":"The specific endpoint name to use, if you are listening on multiple endpoints. Type : String Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Core/Show-PodeGui/#-height","text":"The height of the window. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Height"},{"location":"Functions/Core/Show-PodeGui/#-hidefromtaskbar","text":"Stops the Application from appearing on the taskbar. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-HideFromTaskbar"},{"location":"Functions/Core/Show-PodeGui/#-icon","text":"A path to an icon image for the Application. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Icon"},{"location":"Functions/Core/Show-PodeGui/#-resizemode","text":"Specifies if the Application's window is resizable. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : CanResize Accept pipeline input : False Accept wildcard characters : False","title":"-ResizeMode"},{"location":"Functions/Core/Show-PodeGui/#-title","text":"The title of the Application's window. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Title"},{"location":"Functions/Core/Show-PodeGui/#-width","text":"The width of the window. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Width"},{"location":"Functions/Core/Show-PodeGui/#-windowstate","text":"The state the Application's window starts, such as Minimized. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : Normal Accept pipeline input : False Accept wildcard characters : False","title":"-WindowState"},{"location":"Functions/Core/Show-PodeGui/#-windowstyle","text":"The border style of the Application's window. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : SingleBorderWindow Accept pipeline input : False Accept wildcard characters : False","title":"-WindowStyle"},{"location":"Functions/Core/Show-PodeGui/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Core/Show-PodeGui/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Core/Show-PodeGui/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Core/Show-PodeGui/#notes","text":"","title":"NOTES"},{"location":"Functions/Core/Show-PodeGui/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Core/Start-PodeServer/","text":"Start-PodeServer SYNOPSIS Starts a Pode Server with the supplied ScriptBlock. SYNTAX Script (Default) Start-PodeServer [-ScriptBlock] <ScriptBlock> [-Interval <Int32>] [-Name <String>] [-Threads <Int32>] [-RootPath <String>] [-Request <Object>] [-ServerlessType <String>] [-StatusPageExceptions <String>] [-ListenerType <String>] [-EnablePool <String[]>] [-DisableTermination] [-Quiet] [-Browse] [<CommonParameters>] File Start-PodeServer -FilePath <String> [-Interval <Int32>] [-Name <String>] [-Threads <Int32>] [-RootPath <String>] [-Request <Object>] [-ServerlessType <String>] [-StatusPageExceptions <String>] [-ListenerType <String>] [-EnablePool <String[]>] [-DisableTermination] [-Quiet] [-Browse] [-CurrentPath] [<CommonParameters>] DESCRIPTION Starts a Pode Server with the supplied ScriptBlock. EXAMPLES EXAMPLE 1 Start-PodeServer { /* logic */ } EXAMPLE 2 Start-PodeServer -Interval 10 { /* logic */ } EXAMPLE 3 Start-PodeServer -Request $LambdaInput -ServerlessType AwsLambda { /* logic */ } PARAMETERS -Browse Open the web Server's default endpoint in your default browser. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -CurrentPath Sets the Server's root path to be the current working path - for -FilePath only. Type : SwitchParameter Parameter Sets : File Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -DisableTermination Disables the ability to terminate the Server. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -EnablePool Tells Pode to configure certain RunspacePools when they're being used adhoc, such as Timers or Schedules. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FilePath A literal, or relative, path to a file containing a ScriptBlock for the Server's logic. The directory of this file will be used as the Server's root path - unless a specific -RootPath is supplied. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Interval For 'Service' type Servers, will invoke the ScriptBlock every X seconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -ListenerType An optional value to use a custom Socket Listener. The default is Pode's inbuilt listener. There's the Pode.Kestrel module, so the value here should be \"Kestrel\" if using that. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : [ string ] ::Empty Accept pipeline input : False Accept wildcard characters : False -Name An optional name for the Server (intended for future ideas). Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Quiet Disables any output from the Server. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Request Intended for Serverless environments, this is Requests details that Pode can parse and use. Type : Object Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -RootPath An override for the Server's root path. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The main logic for the Server. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -ServerlessType Optional, this is the serverless type, to define how Pode should run and deal with incoming Requests. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : [ string ] ::Empty Accept pipeline input : False Accept wildcard characters : False -StatusPageExceptions An optional value of Show/Hide to control where Stacktraces are shown in the Status Pages. If supplied this value will override the ShowExceptions setting in the server.psd1 file. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : [ string ] ::Empty Accept pipeline input : False Accept wildcard characters : False -Threads The numbers of threads to use for Web, SMTP, and TCP servers. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 1 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Start-PodeServer"},{"location":"Functions/Core/Start-PodeServer/#start-podeserver","text":"","title":"Start-PodeServer"},{"location":"Functions/Core/Start-PodeServer/#synopsis","text":"Starts a Pode Server with the supplied ScriptBlock.","title":"SYNOPSIS"},{"location":"Functions/Core/Start-PodeServer/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Core/Start-PodeServer/#script-default","text":"Start-PodeServer [-ScriptBlock] <ScriptBlock> [-Interval <Int32>] [-Name <String>] [-Threads <Int32>] [-RootPath <String>] [-Request <Object>] [-ServerlessType <String>] [-StatusPageExceptions <String>] [-ListenerType <String>] [-EnablePool <String[]>] [-DisableTermination] [-Quiet] [-Browse] [<CommonParameters>]","title":"Script (Default)"},{"location":"Functions/Core/Start-PodeServer/#file","text":"Start-PodeServer -FilePath <String> [-Interval <Int32>] [-Name <String>] [-Threads <Int32>] [-RootPath <String>] [-Request <Object>] [-ServerlessType <String>] [-StatusPageExceptions <String>] [-ListenerType <String>] [-EnablePool <String[]>] [-DisableTermination] [-Quiet] [-Browse] [-CurrentPath] [<CommonParameters>]","title":"File"},{"location":"Functions/Core/Start-PodeServer/#description","text":"Starts a Pode Server with the supplied ScriptBlock.","title":"DESCRIPTION"},{"location":"Functions/Core/Start-PodeServer/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Core/Start-PodeServer/#example-1","text":"Start-PodeServer { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Core/Start-PodeServer/#example-2","text":"Start-PodeServer -Interval 10 { /* logic */ }","title":"EXAMPLE 2"},{"location":"Functions/Core/Start-PodeServer/#example-3","text":"Start-PodeServer -Request $LambdaInput -ServerlessType AwsLambda { /* logic */ }","title":"EXAMPLE 3"},{"location":"Functions/Core/Start-PodeServer/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Core/Start-PodeServer/#-browse","text":"Open the web Server's default endpoint in your default browser. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Browse"},{"location":"Functions/Core/Start-PodeServer/#-currentpath","text":"Sets the Server's root path to be the current working path - for -FilePath only. Type : SwitchParameter Parameter Sets : File Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-CurrentPath"},{"location":"Functions/Core/Start-PodeServer/#-disabletermination","text":"Disables the ability to terminate the Server. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-DisableTermination"},{"location":"Functions/Core/Start-PodeServer/#-enablepool","text":"Tells Pode to configure certain RunspacePools when they're being used adhoc, such as Timers or Schedules. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EnablePool"},{"location":"Functions/Core/Start-PodeServer/#-filepath","text":"A literal, or relative, path to a file containing a ScriptBlock for the Server's logic. The directory of this file will be used as the Server's root path - unless a specific -RootPath is supplied. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"Functions/Core/Start-PodeServer/#-interval","text":"For 'Service' type Servers, will invoke the ScriptBlock every X seconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Interval"},{"location":"Functions/Core/Start-PodeServer/#-listenertype","text":"An optional value to use a custom Socket Listener. The default is Pode's inbuilt listener. There's the Pode.Kestrel module, so the value here should be \"Kestrel\" if using that. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : [ string ] ::Empty Accept pipeline input : False Accept wildcard characters : False","title":"-ListenerType"},{"location":"Functions/Core/Start-PodeServer/#-name","text":"An optional name for the Server (intended for future ideas). Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Core/Start-PodeServer/#-quiet","text":"Disables any output from the Server. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Quiet"},{"location":"Functions/Core/Start-PodeServer/#-request","text":"Intended for Serverless environments, this is Requests details that Pode can parse and use. Type : Object Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Request"},{"location":"Functions/Core/Start-PodeServer/#-rootpath","text":"An override for the Server's root path. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-RootPath"},{"location":"Functions/Core/Start-PodeServer/#-scriptblock","text":"The main logic for the Server. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Core/Start-PodeServer/#-serverlesstype","text":"Optional, this is the serverless type, to define how Pode should run and deal with incoming Requests. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : [ string ] ::Empty Accept pipeline input : False Accept wildcard characters : False","title":"-ServerlessType"},{"location":"Functions/Core/Start-PodeServer/#-statuspageexceptions","text":"An optional value of Show/Hide to control where Stacktraces are shown in the Status Pages. If supplied this value will override the ShowExceptions setting in the server.psd1 file. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : [ string ] ::Empty Accept pipeline input : False Accept wildcard characters : False","title":"-StatusPageExceptions"},{"location":"Functions/Core/Start-PodeServer/#-threads","text":"The numbers of threads to use for Web, SMTP, and TCP servers. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 1 Accept pipeline input : False Accept wildcard characters : False","title":"-Threads"},{"location":"Functions/Core/Start-PodeServer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Core/Start-PodeServer/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Core/Start-PodeServer/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Core/Start-PodeServer/#notes","text":"","title":"NOTES"},{"location":"Functions/Core/Start-PodeServer/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Core/Start-PodeStaticServer/","text":"Start-PodeStaticServer SYNOPSIS Helper wrapper function to start a Pode web server for a static website at the current directory. SYNTAX Start-PodeStaticServer [[-Threads] <Int32>] [[-RootPath] <String>] [[-Address] <String>] [[-Port] <Int32>] [-Https] [[-Certificate] <String>] [[-CertificatePassword] <String>] [[-CertificateKey] <String>] [[-X509Certificate] <X509Certificate>] [[-Path] <String>] [[-Defaults] <String[]>] [-DownloadOnly] [-Browse] [<CommonParameters>] DESCRIPTION Helper wrapper function to start a Pode web server for a static website at the current directory. EXAMPLES EXAMPLE 1 Start-PodeStaticServer EXAMPLE 2 Start-PodeStaticServer -Address '127.0.0.3' -Port 8000 EXAMPLE 3 Start-PodeStaticServer -Path '/installers' -DownloadOnly PARAMETERS -Address The IP/Hostname of the endpoint. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : Localhost Accept pipeline input : False Accept wildcard characters : False -Browse Open the web server's default endpoint in your default browser. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Certificate The path to a certificate that can be use to enable HTTPS. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -CertificateKey A key file to be paired with a PEM certificate referenced in CertificateFile Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False -CertificatePassword The password for the certificate referenced in CertificateFile. Type : String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False -Defaults An array of default pages to display, such as 'index.html'. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False -DownloadOnly When supplied, all static content on this Route will be attached as downloads - rather than rendered. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Https Start the server using HTTPS, if no certificate details are supplied a self-signed certificate will be generated. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Path The URI path for the static Route. Type : String Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : / Accept pipeline input : False Accept wildcard characters : False -Port The Port number of the endpoint. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -RootPath An override for the Server's root path. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : $PWD Accept pipeline input : False Accept wildcard characters : False -Threads The numbers of threads to use for requests. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : 3 Accept pipeline input : False Accept wildcard characters : False -X509Certificate The raw X509 certificate that can be use to enable HTTPS. Type : X509Certificate Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Start-PodeStaticServer"},{"location":"Functions/Core/Start-PodeStaticServer/#start-podestaticserver","text":"","title":"Start-PodeStaticServer"},{"location":"Functions/Core/Start-PodeStaticServer/#synopsis","text":"Helper wrapper function to start a Pode web server for a static website at the current directory.","title":"SYNOPSIS"},{"location":"Functions/Core/Start-PodeStaticServer/#syntax","text":"Start-PodeStaticServer [[-Threads] <Int32>] [[-RootPath] <String>] [[-Address] <String>] [[-Port] <Int32>] [-Https] [[-Certificate] <String>] [[-CertificatePassword] <String>] [[-CertificateKey] <String>] [[-X509Certificate] <X509Certificate>] [[-Path] <String>] [[-Defaults] <String[]>] [-DownloadOnly] [-Browse] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Core/Start-PodeStaticServer/#description","text":"Helper wrapper function to start a Pode web server for a static website at the current directory.","title":"DESCRIPTION"},{"location":"Functions/Core/Start-PodeStaticServer/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Core/Start-PodeStaticServer/#example-1","text":"Start-PodeStaticServer","title":"EXAMPLE 1"},{"location":"Functions/Core/Start-PodeStaticServer/#example-2","text":"Start-PodeStaticServer -Address '127.0.0.3' -Port 8000","title":"EXAMPLE 2"},{"location":"Functions/Core/Start-PodeStaticServer/#example-3","text":"Start-PodeStaticServer -Path '/installers' -DownloadOnly","title":"EXAMPLE 3"},{"location":"Functions/Core/Start-PodeStaticServer/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Core/Start-PodeStaticServer/#-address","text":"The IP/Hostname of the endpoint. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : Localhost Accept pipeline input : False Accept wildcard characters : False","title":"-Address"},{"location":"Functions/Core/Start-PodeStaticServer/#-browse","text":"Open the web server's default endpoint in your default browser. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Browse"},{"location":"Functions/Core/Start-PodeStaticServer/#-certificate","text":"The path to a certificate that can be use to enable HTTPS. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Certificate"},{"location":"Functions/Core/Start-PodeStaticServer/#-certificatekey","text":"A key file to be paired with a PEM certificate referenced in CertificateFile Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-CertificateKey"},{"location":"Functions/Core/Start-PodeStaticServer/#-certificatepassword","text":"The password for the certificate referenced in CertificateFile. Type : String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-CertificatePassword"},{"location":"Functions/Core/Start-PodeStaticServer/#-defaults","text":"An array of default pages to display, such as 'index.html'. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Defaults"},{"location":"Functions/Core/Start-PodeStaticServer/#-downloadonly","text":"When supplied, all static content on this Route will be attached as downloads - rather than rendered. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-DownloadOnly"},{"location":"Functions/Core/Start-PodeStaticServer/#-https","text":"Start the server using HTTPS, if no certificate details are supplied a self-signed certificate will be generated. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Https"},{"location":"Functions/Core/Start-PodeStaticServer/#-path","text":"The URI path for the static Route. Type : String Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : / Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Core/Start-PodeStaticServer/#-port","text":"The Port number of the endpoint. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Port"},{"location":"Functions/Core/Start-PodeStaticServer/#-rootpath","text":"An override for the Server's root path. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : $PWD Accept pipeline input : False Accept wildcard characters : False","title":"-RootPath"},{"location":"Functions/Core/Start-PodeStaticServer/#-threads","text":"The numbers of threads to use for requests. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : 3 Accept pipeline input : False Accept wildcard characters : False","title":"-Threads"},{"location":"Functions/Core/Start-PodeStaticServer/#-x509certificate","text":"The raw X509 certificate that can be use to enable HTTPS. Type : X509Certificate Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-X509Certificate"},{"location":"Functions/Core/Start-PodeStaticServer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Core/Start-PodeStaticServer/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Core/Start-PodeStaticServer/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Core/Start-PodeStaticServer/#notes","text":"","title":"NOTES"},{"location":"Functions/Core/Start-PodeStaticServer/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Events/Clear-PodeEvent/","text":"Clear-PodeEvent SYNOPSIS Clears an event of all registered scripts. SYNTAX Clear-PodeEvent [-Type] <String> [<CommonParameters>] DESCRIPTION Clears an event of all registered scripts. EXAMPLES EXAMPLE 1 Clear-PodeEvent -Type Start PARAMETERS -Type The Type of event to clear. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeEvent"},{"location":"Functions/Events/Clear-PodeEvent/#clear-podeevent","text":"","title":"Clear-PodeEvent"},{"location":"Functions/Events/Clear-PodeEvent/#synopsis","text":"Clears an event of all registered scripts.","title":"SYNOPSIS"},{"location":"Functions/Events/Clear-PodeEvent/#syntax","text":"Clear-PodeEvent [-Type] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Events/Clear-PodeEvent/#description","text":"Clears an event of all registered scripts.","title":"DESCRIPTION"},{"location":"Functions/Events/Clear-PodeEvent/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Events/Clear-PodeEvent/#example-1","text":"Clear-PodeEvent -Type Start","title":"EXAMPLE 1"},{"location":"Functions/Events/Clear-PodeEvent/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Events/Clear-PodeEvent/#-type","text":"The Type of event to clear. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Events/Clear-PodeEvent/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Events/Clear-PodeEvent/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Events/Clear-PodeEvent/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Events/Clear-PodeEvent/#notes","text":"","title":"NOTES"},{"location":"Functions/Events/Clear-PodeEvent/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Events/Get-PodeEvent/","text":"Get-PodeEvent SYNOPSIS Retrieves an event. SYNTAX Get-PodeEvent [-Type] <String> [-Name] <String> [<CommonParameters>] DESCRIPTION Retrieves an event. EXAMPLES EXAMPLE 1 Get-PodeEvent -Type Start -Name 'Event1' PARAMETERS -Name The Name of the event to retrieve. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Type The Type of event to retrieve. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeEvent"},{"location":"Functions/Events/Get-PodeEvent/#get-podeevent","text":"","title":"Get-PodeEvent"},{"location":"Functions/Events/Get-PodeEvent/#synopsis","text":"Retrieves an event.","title":"SYNOPSIS"},{"location":"Functions/Events/Get-PodeEvent/#syntax","text":"Get-PodeEvent [-Type] <String> [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Events/Get-PodeEvent/#description","text":"Retrieves an event.","title":"DESCRIPTION"},{"location":"Functions/Events/Get-PodeEvent/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Events/Get-PodeEvent/#example-1","text":"Get-PodeEvent -Type Start -Name 'Event1'","title":"EXAMPLE 1"},{"location":"Functions/Events/Get-PodeEvent/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Events/Get-PodeEvent/#-name","text":"The Name of the event to retrieve. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Events/Get-PodeEvent/#-type","text":"The Type of event to retrieve. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Events/Get-PodeEvent/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Events/Get-PodeEvent/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Events/Get-PodeEvent/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Events/Get-PodeEvent/#notes","text":"","title":"NOTES"},{"location":"Functions/Events/Get-PodeEvent/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Events/Register-PodeEvent/","text":"Register-PodeEvent SYNOPSIS Registers a script to be run when a certain server event occurs within Pode SYNTAX Register-PodeEvent [-Type] <String> [-Name] <String> [-ScriptBlock] <ScriptBlock> [[-ArgumentList] <Object[]>] [<CommonParameters>] DESCRIPTION Registers a script to be run when a certain server event occurs within Pode, such as Start, Terminate, and Restart. EXAMPLES EXAMPLE 1 Register-PodeEvent -Type Start -Name 'Event1' -ScriptBlock { } PARAMETERS -ArgumentList An array of arguments to supply to the ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name A unique Name for the registered event. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock A ScriptBlock to invoke when the event is triggered. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Type The Type of event to be registered. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Register-PodeEvent"},{"location":"Functions/Events/Register-PodeEvent/#register-podeevent","text":"","title":"Register-PodeEvent"},{"location":"Functions/Events/Register-PodeEvent/#synopsis","text":"Registers a script to be run when a certain server event occurs within Pode","title":"SYNOPSIS"},{"location":"Functions/Events/Register-PodeEvent/#syntax","text":"Register-PodeEvent [-Type] <String> [-Name] <String> [-ScriptBlock] <ScriptBlock> [[-ArgumentList] <Object[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Events/Register-PodeEvent/#description","text":"Registers a script to be run when a certain server event occurs within Pode, such as Start, Terminate, and Restart.","title":"DESCRIPTION"},{"location":"Functions/Events/Register-PodeEvent/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Events/Register-PodeEvent/#example-1","text":"Register-PodeEvent -Type Start -Name 'Event1' -ScriptBlock { }","title":"EXAMPLE 1"},{"location":"Functions/Events/Register-PodeEvent/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Events/Register-PodeEvent/#-argumentlist","text":"An array of arguments to supply to the ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Events/Register-PodeEvent/#-name","text":"A unique Name for the registered event. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Events/Register-PodeEvent/#-scriptblock","text":"A ScriptBlock to invoke when the event is triggered. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Events/Register-PodeEvent/#-type","text":"The Type of event to be registered. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Events/Register-PodeEvent/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Events/Register-PodeEvent/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Events/Register-PodeEvent/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Events/Register-PodeEvent/#notes","text":"","title":"NOTES"},{"location":"Functions/Events/Register-PodeEvent/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Events/Test-PodeEvent/","text":"Test-PodeEvent SYNOPSIS Tests if an event has been registered with the specified Name. SYNTAX Test-PodeEvent [-Type] <String> [-Name] <String> [<CommonParameters>] DESCRIPTION Tests if an event has been registered with the specified Name. EXAMPLES EXAMPLE 1 Test-PodeEvent -Type Start -Name 'Event1' PARAMETERS -Name The Name of the event to test. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Type The Type of the event to test. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Test-PodeEvent"},{"location":"Functions/Events/Test-PodeEvent/#test-podeevent","text":"","title":"Test-PodeEvent"},{"location":"Functions/Events/Test-PodeEvent/#synopsis","text":"Tests if an event has been registered with the specified Name.","title":"SYNOPSIS"},{"location":"Functions/Events/Test-PodeEvent/#syntax","text":"Test-PodeEvent [-Type] <String> [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Events/Test-PodeEvent/#description","text":"Tests if an event has been registered with the specified Name.","title":"DESCRIPTION"},{"location":"Functions/Events/Test-PodeEvent/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Events/Test-PodeEvent/#example-1","text":"Test-PodeEvent -Type Start -Name 'Event1'","title":"EXAMPLE 1"},{"location":"Functions/Events/Test-PodeEvent/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Events/Test-PodeEvent/#-name","text":"The Name of the event to test. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Events/Test-PodeEvent/#-type","text":"The Type of the event to test. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Events/Test-PodeEvent/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Events/Test-PodeEvent/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Events/Test-PodeEvent/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Events/Test-PodeEvent/#notes","text":"","title":"NOTES"},{"location":"Functions/Events/Test-PodeEvent/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Events/Unregister-PodeEvent/","text":"Unregister-PodeEvent SYNOPSIS Unregisters an event that has been registered with the specified Name. SYNTAX Unregister-PodeEvent [-Type] <String> [-Name] <String> [<CommonParameters>] DESCRIPTION Unregisters an event that has been registered with the specified Name. EXAMPLES EXAMPLE 1 Unregister-PodeEvent -Type Start -Name 'Event1' PARAMETERS -Name The Name of the event to unregister. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Type The Type of the event to unregister. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Unregister-PodeEvent"},{"location":"Functions/Events/Unregister-PodeEvent/#unregister-podeevent","text":"","title":"Unregister-PodeEvent"},{"location":"Functions/Events/Unregister-PodeEvent/#synopsis","text":"Unregisters an event that has been registered with the specified Name.","title":"SYNOPSIS"},{"location":"Functions/Events/Unregister-PodeEvent/#syntax","text":"Unregister-PodeEvent [-Type] <String> [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Events/Unregister-PodeEvent/#description","text":"Unregisters an event that has been registered with the specified Name.","title":"DESCRIPTION"},{"location":"Functions/Events/Unregister-PodeEvent/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Events/Unregister-PodeEvent/#example-1","text":"Unregister-PodeEvent -Type Start -Name 'Event1'","title":"EXAMPLE 1"},{"location":"Functions/Events/Unregister-PodeEvent/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Events/Unregister-PodeEvent/#-name","text":"The Name of the event to unregister. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Events/Unregister-PodeEvent/#-type","text":"The Type of the event to unregister. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Events/Unregister-PodeEvent/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Events/Unregister-PodeEvent/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Events/Unregister-PodeEvent/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Events/Unregister-PodeEvent/#notes","text":"","title":"NOTES"},{"location":"Functions/Events/Unregister-PodeEvent/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Events/Use-PodeEvents/","text":"Use-PodeEvents SYNOPSIS Automatically loads event ps1 files SYNTAX Use-PodeEvents [[-Path] <String>] [<CommonParameters>] DESCRIPTION Automatically loads event ps1 files from either a /events folder, or a custom folder. Saves space dot-sourcing them all one-by-one. EXAMPLES EXAMPLE 1 Use-PodeEvents EXAMPLE 2 Use-PodeEvents -Path './my-events' PARAMETERS -Path Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeEvents"},{"location":"Functions/Events/Use-PodeEvents/#use-podeevents","text":"","title":"Use-PodeEvents"},{"location":"Functions/Events/Use-PodeEvents/#synopsis","text":"Automatically loads event ps1 files","title":"SYNOPSIS"},{"location":"Functions/Events/Use-PodeEvents/#syntax","text":"Use-PodeEvents [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Events/Use-PodeEvents/#description","text":"Automatically loads event ps1 files from either a /events folder, or a custom folder. Saves space dot-sourcing them all one-by-one.","title":"DESCRIPTION"},{"location":"Functions/Events/Use-PodeEvents/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Events/Use-PodeEvents/#example-1","text":"Use-PodeEvents","title":"EXAMPLE 1"},{"location":"Functions/Events/Use-PodeEvents/#example-2","text":"Use-PodeEvents -Path './my-events'","title":"EXAMPLE 2"},{"location":"Functions/Events/Use-PodeEvents/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Events/Use-PodeEvents/#-path","text":"Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Events/Use-PodeEvents/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Events/Use-PodeEvents/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Events/Use-PodeEvents/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Events/Use-PodeEvents/#notes","text":"","title":"NOTES"},{"location":"Functions/Events/Use-PodeEvents/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Flash/Add-PodeFlashMessage/","text":"Add-PodeFlashMessage SYNOPSIS Appends a message to the current flash messages stored in the session. SYNTAX Add-PodeFlashMessage [-Name] <String> [-Message] <String> [<CommonParameters>] DESCRIPTION Appends a message to the current flash messages stored in the session for the supplied name. The messages per name are stored as an array. EXAMPLES EXAMPLE 1 Add-PodeFlashMessage -Name 'error' -Message 'There was an error' PARAMETERS -Message The message to append. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The name of the flash message to be appended. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeFlashMessage"},{"location":"Functions/Flash/Add-PodeFlashMessage/#add-podeflashmessage","text":"","title":"Add-PodeFlashMessage"},{"location":"Functions/Flash/Add-PodeFlashMessage/#synopsis","text":"Appends a message to the current flash messages stored in the session.","title":"SYNOPSIS"},{"location":"Functions/Flash/Add-PodeFlashMessage/#syntax","text":"Add-PodeFlashMessage [-Name] <String> [-Message] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Flash/Add-PodeFlashMessage/#description","text":"Appends a message to the current flash messages stored in the session for the supplied name. The messages per name are stored as an array.","title":"DESCRIPTION"},{"location":"Functions/Flash/Add-PodeFlashMessage/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Flash/Add-PodeFlashMessage/#example-1","text":"Add-PodeFlashMessage -Name 'error' -Message 'There was an error'","title":"EXAMPLE 1"},{"location":"Functions/Flash/Add-PodeFlashMessage/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Flash/Add-PodeFlashMessage/#-message","text":"The message to append. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Message"},{"location":"Functions/Flash/Add-PodeFlashMessage/#-name","text":"The name of the flash message to be appended. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Flash/Add-PodeFlashMessage/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Flash/Add-PodeFlashMessage/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Flash/Add-PodeFlashMessage/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Flash/Add-PodeFlashMessage/#notes","text":"","title":"NOTES"},{"location":"Functions/Flash/Add-PodeFlashMessage/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Flash/Clear-PodeFlashMessages/","text":"Clear-PodeFlashMessages SYNOPSIS Clears all flash messages. SYNTAX Clear-PodeFlashMessages [<CommonParameters>] DESCRIPTION Clears all of the flash messages currently stored in the session. EXAMPLES EXAMPLE 1 Clear-PodeFlashMessages PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeFlashMessages"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#clear-podeflashmessages","text":"","title":"Clear-PodeFlashMessages"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#synopsis","text":"Clears all flash messages.","title":"SYNOPSIS"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#syntax","text":"Clear-PodeFlashMessages [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#description","text":"Clears all of the flash messages currently stored in the session.","title":"DESCRIPTION"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#example-1","text":"Clear-PodeFlashMessages","title":"EXAMPLE 1"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#notes","text":"","title":"NOTES"},{"location":"Functions/Flash/Clear-PodeFlashMessages/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Flash/Get-PodeFlashMessage/","text":"Get-PodeFlashMessage SYNOPSIS Returns all flash messages stored against a name, and the clears the messages. SYNTAX Get-PodeFlashMessage [-Name] <String> [<CommonParameters>] DESCRIPTION Returns all of the flash messages, as an array, currently stored for the name within the session. Once retrieved, the messages are removed from storage. EXAMPLES EXAMPLE 1 Get-PodeFlashMessage -Name 'error' PARAMETERS -Name The name of the flash messages to return. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.String[] NOTES RELATED LINKS","title":"Get-PodeFlashMessage"},{"location":"Functions/Flash/Get-PodeFlashMessage/#get-podeflashmessage","text":"","title":"Get-PodeFlashMessage"},{"location":"Functions/Flash/Get-PodeFlashMessage/#synopsis","text":"Returns all flash messages stored against a name, and the clears the messages.","title":"SYNOPSIS"},{"location":"Functions/Flash/Get-PodeFlashMessage/#syntax","text":"Get-PodeFlashMessage [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Flash/Get-PodeFlashMessage/#description","text":"Returns all of the flash messages, as an array, currently stored for the name within the session. Once retrieved, the messages are removed from storage.","title":"DESCRIPTION"},{"location":"Functions/Flash/Get-PodeFlashMessage/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Flash/Get-PodeFlashMessage/#example-1","text":"Get-PodeFlashMessage -Name 'error'","title":"EXAMPLE 1"},{"location":"Functions/Flash/Get-PodeFlashMessage/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Flash/Get-PodeFlashMessage/#-name","text":"The name of the flash messages to return. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Flash/Get-PodeFlashMessage/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Flash/Get-PodeFlashMessage/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Flash/Get-PodeFlashMessage/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Flash/Get-PodeFlashMessage/#systemstring","text":"","title":"System.String[]"},{"location":"Functions/Flash/Get-PodeFlashMessage/#notes","text":"","title":"NOTES"},{"location":"Functions/Flash/Get-PodeFlashMessage/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/","text":"Get-PodeFlashMessageNames SYNOPSIS Returns all of the names for each of the messages currently being stored. SYNTAX Get-PodeFlashMessageNames [<CommonParameters>] DESCRIPTION Returns all of the names for each of the messages currently being stored. This does not clear the messages. EXAMPLES EXAMPLE 1 Get-PodeFlashMessageNames PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.String[] NOTES RELATED LINKS","title":"Get-PodeFlashMessageNames"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#get-podeflashmessagenames","text":"","title":"Get-PodeFlashMessageNames"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#synopsis","text":"Returns all of the names for each of the messages currently being stored.","title":"SYNOPSIS"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#syntax","text":"Get-PodeFlashMessageNames [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#description","text":"Returns all of the names for each of the messages currently being stored. This does not clear the messages.","title":"DESCRIPTION"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#example-1","text":"Get-PodeFlashMessageNames","title":"EXAMPLE 1"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#systemstring","text":"","title":"System.String[]"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#notes","text":"","title":"NOTES"},{"location":"Functions/Flash/Get-PodeFlashMessageNames/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Flash/Remove-PodeFlashMessage/","text":"Remove-PodeFlashMessage SYNOPSIS Removes flash messages for the supplied name currently being stored. SYNTAX Remove-PodeFlashMessage [-Name] <String> [<CommonParameters>] DESCRIPTION Removes flash messages for the supplied name currently being stored. EXAMPLES EXAMPLE 1 Remove-PodeFlashMessage -Name 'error' PARAMETERS -Name The name of the flash messages to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeFlashMessage"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#remove-podeflashmessage","text":"","title":"Remove-PodeFlashMessage"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#synopsis","text":"Removes flash messages for the supplied name currently being stored.","title":"SYNOPSIS"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#syntax","text":"Remove-PodeFlashMessage [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#description","text":"Removes flash messages for the supplied name currently being stored.","title":"DESCRIPTION"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#example-1","text":"Remove-PodeFlashMessage -Name 'error'","title":"EXAMPLE 1"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#-name","text":"The name of the flash messages to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#notes","text":"","title":"NOTES"},{"location":"Functions/Flash/Remove-PodeFlashMessage/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Flash/Test-PodeFlashMessage/","text":"Test-PodeFlashMessage SYNOPSIS Tests if there are any flash messages currently being stored for a supplied name. SYNTAX Test-PodeFlashMessage [-Name] <String> [<CommonParameters>] DESCRIPTION Tests if there are any flash messages currently being stored for a supplied name. EXAMPLES EXAMPLE 1 Test-PodeFlashMessage -Name 'error' PARAMETERS -Name The name of the flash message to check. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Boolean NOTES RELATED LINKS","title":"Test-PodeFlashMessage"},{"location":"Functions/Flash/Test-PodeFlashMessage/#test-podeflashmessage","text":"","title":"Test-PodeFlashMessage"},{"location":"Functions/Flash/Test-PodeFlashMessage/#synopsis","text":"Tests if there are any flash messages currently being stored for a supplied name.","title":"SYNOPSIS"},{"location":"Functions/Flash/Test-PodeFlashMessage/#syntax","text":"Test-PodeFlashMessage [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Flash/Test-PodeFlashMessage/#description","text":"Tests if there are any flash messages currently being stored for a supplied name.","title":"DESCRIPTION"},{"location":"Functions/Flash/Test-PodeFlashMessage/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Flash/Test-PodeFlashMessage/#example-1","text":"Test-PodeFlashMessage -Name 'error'","title":"EXAMPLE 1"},{"location":"Functions/Flash/Test-PodeFlashMessage/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Flash/Test-PodeFlashMessage/#-name","text":"The name of the flash message to check. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Flash/Test-PodeFlashMessage/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Flash/Test-PodeFlashMessage/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Flash/Test-PodeFlashMessage/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Flash/Test-PodeFlashMessage/#systemboolean","text":"","title":"System.Boolean"},{"location":"Functions/Flash/Test-PodeFlashMessage/#notes","text":"","title":"NOTES"},{"location":"Functions/Flash/Test-PodeFlashMessage/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Handlers/Add-PodeHandler/","text":"Add-PodeHandler SYNOPSIS Adds a Handler of a specific Type. SYNTAX Script (Default) Add-PodeHandler -Type <String> -Name <String> -ScriptBlock <ScriptBlock> [-ArgumentList <Object[]>] [<CommonParameters>] File Add-PodeHandler -Type <String> -Name <String> -FilePath <String> [-ArgumentList <Object[]>] [<CommonParameters>] DESCRIPTION Adds a Handler of a specific Type. EXAMPLES EXAMPLE 1 Add-PodeHandler -Type Smtp -Name 'Main' -ScriptBlock { /* logic */ } EXAMPLE 2 Add-PodeHandler -Type Service -Name 'Looper' -ScriptBlock { /* logic */ } EXAMPLE 3 Add-PodeHandler -Type Smtp -Name 'Main' -ScriptBlock { /* logic */ } -ArgumentList 'arg1', 'arg2' PARAMETERS -ArgumentList An array of arguments to supply to the Handler's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FilePath A literal, or relative, path to a file containing a ScriptBlock for the Handler's main logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Handler. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The ScriptBlock for the Handler's main logic. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Type The Type of the Handler. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeHandler"},{"location":"Functions/Handlers/Add-PodeHandler/#add-podehandler","text":"","title":"Add-PodeHandler"},{"location":"Functions/Handlers/Add-PodeHandler/#synopsis","text":"Adds a Handler of a specific Type.","title":"SYNOPSIS"},{"location":"Functions/Handlers/Add-PodeHandler/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Handlers/Add-PodeHandler/#script-default","text":"Add-PodeHandler -Type <String> -Name <String> -ScriptBlock <ScriptBlock> [-ArgumentList <Object[]>] [<CommonParameters>]","title":"Script (Default)"},{"location":"Functions/Handlers/Add-PodeHandler/#file","text":"Add-PodeHandler -Type <String> -Name <String> -FilePath <String> [-ArgumentList <Object[]>] [<CommonParameters>]","title":"File"},{"location":"Functions/Handlers/Add-PodeHandler/#description","text":"Adds a Handler of a specific Type.","title":"DESCRIPTION"},{"location":"Functions/Handlers/Add-PodeHandler/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Handlers/Add-PodeHandler/#example-1","text":"Add-PodeHandler -Type Smtp -Name 'Main' -ScriptBlock { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Handlers/Add-PodeHandler/#example-2","text":"Add-PodeHandler -Type Service -Name 'Looper' -ScriptBlock { /* logic */ }","title":"EXAMPLE 2"},{"location":"Functions/Handlers/Add-PodeHandler/#example-3","text":"Add-PodeHandler -Type Smtp -Name 'Main' -ScriptBlock { /* logic */ } -ArgumentList 'arg1', 'arg2'","title":"EXAMPLE 3"},{"location":"Functions/Handlers/Add-PodeHandler/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Handlers/Add-PodeHandler/#-argumentlist","text":"An array of arguments to supply to the Handler's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Handlers/Add-PodeHandler/#-filepath","text":"A literal, or relative, path to a file containing a ScriptBlock for the Handler's main logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"Functions/Handlers/Add-PodeHandler/#-name","text":"The Name of the Handler. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Handlers/Add-PodeHandler/#-scriptblock","text":"The ScriptBlock for the Handler's main logic. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Handlers/Add-PodeHandler/#-type","text":"The Type of the Handler. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Handlers/Add-PodeHandler/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Handlers/Add-PodeHandler/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Handlers/Add-PodeHandler/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Handlers/Add-PodeHandler/#notes","text":"","title":"NOTES"},{"location":"Functions/Handlers/Add-PodeHandler/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Handlers/Clear-PodeHandlers/","text":"Clear-PodeHandlers SYNOPSIS Removes all added Handlers, or Handlers of a specific Type. SYNTAX Clear-PodeHandlers [[-Type] <String>] [<CommonParameters>] DESCRIPTION Removes all added Handlers, or Handlers of a specific Type. EXAMPLES EXAMPLE 1 Clear-PodeHandlers -Type Smtp PARAMETERS -Type The Type of Handlers to remove. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeHandlers"},{"location":"Functions/Handlers/Clear-PodeHandlers/#clear-podehandlers","text":"","title":"Clear-PodeHandlers"},{"location":"Functions/Handlers/Clear-PodeHandlers/#synopsis","text":"Removes all added Handlers, or Handlers of a specific Type.","title":"SYNOPSIS"},{"location":"Functions/Handlers/Clear-PodeHandlers/#syntax","text":"Clear-PodeHandlers [[-Type] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Handlers/Clear-PodeHandlers/#description","text":"Removes all added Handlers, or Handlers of a specific Type.","title":"DESCRIPTION"},{"location":"Functions/Handlers/Clear-PodeHandlers/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Handlers/Clear-PodeHandlers/#example-1","text":"Clear-PodeHandlers -Type Smtp","title":"EXAMPLE 1"},{"location":"Functions/Handlers/Clear-PodeHandlers/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Handlers/Clear-PodeHandlers/#-type","text":"The Type of Handlers to remove. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Handlers/Clear-PodeHandlers/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Handlers/Clear-PodeHandlers/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Handlers/Clear-PodeHandlers/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Handlers/Clear-PodeHandlers/#notes","text":"","title":"NOTES"},{"location":"Functions/Handlers/Clear-PodeHandlers/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Handlers/Remove-PodeHandler/","text":"Remove-PodeHandler SYNOPSIS Remove a specific Handler. SYNTAX Remove-PodeHandler [-Type] <String> [-Name] <String> [<CommonParameters>] DESCRIPTION Remove a specific Handler. EXAMPLES EXAMPLE 1 Remove-PodeHandler -Type Smtp -Name 'Main' PARAMETERS -Name The name of the Handler to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Type The type of the Handler to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeHandler"},{"location":"Functions/Handlers/Remove-PodeHandler/#remove-podehandler","text":"","title":"Remove-PodeHandler"},{"location":"Functions/Handlers/Remove-PodeHandler/#synopsis","text":"Remove a specific Handler.","title":"SYNOPSIS"},{"location":"Functions/Handlers/Remove-PodeHandler/#syntax","text":"Remove-PodeHandler [-Type] <String> [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Handlers/Remove-PodeHandler/#description","text":"Remove a specific Handler.","title":"DESCRIPTION"},{"location":"Functions/Handlers/Remove-PodeHandler/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Handlers/Remove-PodeHandler/#example-1","text":"Remove-PodeHandler -Type Smtp -Name 'Main'","title":"EXAMPLE 1"},{"location":"Functions/Handlers/Remove-PodeHandler/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Handlers/Remove-PodeHandler/#-name","text":"The name of the Handler to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Handlers/Remove-PodeHandler/#-type","text":"The type of the Handler to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Handlers/Remove-PodeHandler/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Handlers/Remove-PodeHandler/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Handlers/Remove-PodeHandler/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Handlers/Remove-PodeHandler/#notes","text":"","title":"NOTES"},{"location":"Functions/Handlers/Remove-PodeHandler/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Handlers/Use-PodeHandlers/","text":"Use-PodeHandlers SYNOPSIS Automatically loads handler ps1 files SYNTAX Use-PodeHandlers [[-Path] <String>] [<CommonParameters>] DESCRIPTION Automatically loads handler ps1 files from either a /handler folder, or a custom folder. Saves space dot-sourcing them all one-by-one. EXAMPLES EXAMPLE 1 Use-PodeHandlers EXAMPLE 2 Use-PodeHandlers -Path './my-handlers' PARAMETERS -Path Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeHandlers"},{"location":"Functions/Handlers/Use-PodeHandlers/#use-podehandlers","text":"","title":"Use-PodeHandlers"},{"location":"Functions/Handlers/Use-PodeHandlers/#synopsis","text":"Automatically loads handler ps1 files","title":"SYNOPSIS"},{"location":"Functions/Handlers/Use-PodeHandlers/#syntax","text":"Use-PodeHandlers [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Handlers/Use-PodeHandlers/#description","text":"Automatically loads handler ps1 files from either a /handler folder, or a custom folder. Saves space dot-sourcing them all one-by-one.","title":"DESCRIPTION"},{"location":"Functions/Handlers/Use-PodeHandlers/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Handlers/Use-PodeHandlers/#example-1","text":"Use-PodeHandlers","title":"EXAMPLE 1"},{"location":"Functions/Handlers/Use-PodeHandlers/#example-2","text":"Use-PodeHandlers -Path './my-handlers'","title":"EXAMPLE 2"},{"location":"Functions/Handlers/Use-PodeHandlers/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Handlers/Use-PodeHandlers/#-path","text":"Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Handlers/Use-PodeHandlers/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Handlers/Use-PodeHandlers/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Handlers/Use-PodeHandlers/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Handlers/Use-PodeHandlers/#notes","text":"","title":"NOTES"},{"location":"Functions/Handlers/Use-PodeHandlers/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Headers/Add-PodeHeader/","text":"Add-PodeHeader SYNOPSIS Appends a header against the Response. SYNTAX Add-PodeHeader [-Name] <String> [-Value] <String> [[-Secret] <String>] [<CommonParameters>] DESCRIPTION Appends a header against the Response. If the current context is serverless, then this function acts like Set-PodeHeader. EXAMPLES EXAMPLE 1 Add-PodeHeader -Name 'X-AuthToken' -Value 'AA-BB-CC-33' PARAMETERS -Name The name of the header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Secret If supplied, the secret with which to sign the header's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Value The value to set against the header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeHeader"},{"location":"Functions/Headers/Add-PodeHeader/#add-podeheader","text":"","title":"Add-PodeHeader"},{"location":"Functions/Headers/Add-PodeHeader/#synopsis","text":"Appends a header against the Response.","title":"SYNOPSIS"},{"location":"Functions/Headers/Add-PodeHeader/#syntax","text":"Add-PodeHeader [-Name] <String> [-Value] <String> [[-Secret] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Headers/Add-PodeHeader/#description","text":"Appends a header against the Response. If the current context is serverless, then this function acts like Set-PodeHeader.","title":"DESCRIPTION"},{"location":"Functions/Headers/Add-PodeHeader/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Headers/Add-PodeHeader/#example-1","text":"Add-PodeHeader -Name 'X-AuthToken' -Value 'AA-BB-CC-33'","title":"EXAMPLE 1"},{"location":"Functions/Headers/Add-PodeHeader/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Headers/Add-PodeHeader/#-name","text":"The name of the header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Headers/Add-PodeHeader/#-secret","text":"If supplied, the secret with which to sign the header's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Headers/Add-PodeHeader/#-value","text":"The value to set against the header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Headers/Add-PodeHeader/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Headers/Add-PodeHeader/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Headers/Add-PodeHeader/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Headers/Add-PodeHeader/#notes","text":"","title":"NOTES"},{"location":"Functions/Headers/Add-PodeHeader/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Headers/Add-PodeHeaderBulk/","text":"Add-PodeHeaderBulk SYNOPSIS Appends multiple headers against the Response. SYNTAX Add-PodeHeaderBulk [-Values] <Hashtable> [[-Secret] <String>] [<CommonParameters>] DESCRIPTION Appends multiple headers against the Response. If the current context is serverless, then this function acts like Set-PodeHeaderBulk. EXAMPLES EXAMPLE 1 Add-PodeHeaderBulk -Values @{ Name1 = 'Value1'; Name2 = 'Value2' } PARAMETERS -Secret If supplied, the secret with which to sign the header values. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Values A hashtable of headers to be appended. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeHeaderBulk"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#add-podeheaderbulk","text":"","title":"Add-PodeHeaderBulk"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#synopsis","text":"Appends multiple headers against the Response.","title":"SYNOPSIS"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#syntax","text":"Add-PodeHeaderBulk [-Values] <Hashtable> [[-Secret] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#description","text":"Appends multiple headers against the Response. If the current context is serverless, then this function acts like Set-PodeHeaderBulk.","title":"DESCRIPTION"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#example-1","text":"Add-PodeHeaderBulk -Values @{ Name1 = 'Value1'; Name2 = 'Value2' }","title":"EXAMPLE 1"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#-secret","text":"If supplied, the secret with which to sign the header values. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#-values","text":"A hashtable of headers to be appended. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Values"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#notes","text":"","title":"NOTES"},{"location":"Functions/Headers/Add-PodeHeaderBulk/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Headers/Get-PodeHeader/","text":"Get-PodeHeader SYNOPSIS Retrieves the value of a header from the Request. SYNTAX Get-PodeHeader [-Name] <String> [[-Secret] <String>] [<CommonParameters>] DESCRIPTION Retrieves the value of a header from the Request. EXAMPLES EXAMPLE 1 Get-PodeHeader -Name 'X-AuthToken' PARAMETERS -Name The name of the header to retrieve. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Secret The secret used to unsign the header's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.String NOTES RELATED LINKS","title":"Get-PodeHeader"},{"location":"Functions/Headers/Get-PodeHeader/#get-podeheader","text":"","title":"Get-PodeHeader"},{"location":"Functions/Headers/Get-PodeHeader/#synopsis","text":"Retrieves the value of a header from the Request.","title":"SYNOPSIS"},{"location":"Functions/Headers/Get-PodeHeader/#syntax","text":"Get-PodeHeader [-Name] <String> [[-Secret] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Headers/Get-PodeHeader/#description","text":"Retrieves the value of a header from the Request.","title":"DESCRIPTION"},{"location":"Functions/Headers/Get-PodeHeader/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Headers/Get-PodeHeader/#example-1","text":"Get-PodeHeader -Name 'X-AuthToken'","title":"EXAMPLE 1"},{"location":"Functions/Headers/Get-PodeHeader/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Headers/Get-PodeHeader/#-name","text":"The name of the header to retrieve. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Headers/Get-PodeHeader/#-secret","text":"The secret used to unsign the header's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Headers/Get-PodeHeader/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Headers/Get-PodeHeader/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Headers/Get-PodeHeader/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Headers/Get-PodeHeader/#systemstring","text":"","title":"System.String"},{"location":"Functions/Headers/Get-PodeHeader/#notes","text":"","title":"NOTES"},{"location":"Functions/Headers/Get-PodeHeader/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Headers/Set-PodeHeader/","text":"Set-PodeHeader SYNOPSIS Sets a header on the Response, clearing all current values for the header. SYNTAX Set-PodeHeader [-Name] <String> [-Value] <String> [[-Secret] <String>] [<CommonParameters>] DESCRIPTION Sets a header on the Response, clearing all current values for the header. EXAMPLES EXAMPLE 1 Set-PodeHeader -Name 'X-AuthToken' -Value 'AA-BB-CC-33' PARAMETERS -Name The name of the header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Secret If supplied, the secret with which to sign the header's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Value The value to set against the header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeHeader"},{"location":"Functions/Headers/Set-PodeHeader/#set-podeheader","text":"","title":"Set-PodeHeader"},{"location":"Functions/Headers/Set-PodeHeader/#synopsis","text":"Sets a header on the Response, clearing all current values for the header.","title":"SYNOPSIS"},{"location":"Functions/Headers/Set-PodeHeader/#syntax","text":"Set-PodeHeader [-Name] <String> [-Value] <String> [[-Secret] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Headers/Set-PodeHeader/#description","text":"Sets a header on the Response, clearing all current values for the header.","title":"DESCRIPTION"},{"location":"Functions/Headers/Set-PodeHeader/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Headers/Set-PodeHeader/#example-1","text":"Set-PodeHeader -Name 'X-AuthToken' -Value 'AA-BB-CC-33'","title":"EXAMPLE 1"},{"location":"Functions/Headers/Set-PodeHeader/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Headers/Set-PodeHeader/#-name","text":"The name of the header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Headers/Set-PodeHeader/#-secret","text":"If supplied, the secret with which to sign the header's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Headers/Set-PodeHeader/#-value","text":"The value to set against the header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Headers/Set-PodeHeader/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Headers/Set-PodeHeader/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Headers/Set-PodeHeader/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Headers/Set-PodeHeader/#notes","text":"","title":"NOTES"},{"location":"Functions/Headers/Set-PodeHeader/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Headers/Set-PodeHeaderBulk/","text":"Set-PodeHeaderBulk SYNOPSIS Sets multiple headers on the Response, clearing all current values for the header. SYNTAX Set-PodeHeaderBulk [-Values] <Hashtable> [[-Secret] <String>] [<CommonParameters>] DESCRIPTION Sets multiple headers on the Response, clearing all current values for the header. EXAMPLES EXAMPLE 1 Set-PodeHeaderBulk -Values @{ Name1 = 'Value1'; Name2 = 'Value2' } PARAMETERS -Secret If supplied, the secret with which to sign the header values. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Values A hashtable of headers to be set. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeHeaderBulk"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#set-podeheaderbulk","text":"","title":"Set-PodeHeaderBulk"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#synopsis","text":"Sets multiple headers on the Response, clearing all current values for the header.","title":"SYNOPSIS"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#syntax","text":"Set-PodeHeaderBulk [-Values] <Hashtable> [[-Secret] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#description","text":"Sets multiple headers on the Response, clearing all current values for the header.","title":"DESCRIPTION"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#example-1","text":"Set-PodeHeaderBulk -Values @{ Name1 = 'Value1'; Name2 = 'Value2' }","title":"EXAMPLE 1"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#-secret","text":"If supplied, the secret with which to sign the header values. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#-values","text":"A hashtable of headers to be set. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Values"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#notes","text":"","title":"NOTES"},{"location":"Functions/Headers/Set-PodeHeaderBulk/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Headers/Test-PodeHeader/","text":"Test-PodeHeader SYNOPSIS Tests if a header is present on the Request. SYNTAX Test-PodeHeader [-Name] <String> [<CommonParameters>] DESCRIPTION Tests if a header is present on the Request. EXAMPLES EXAMPLE 1 Test-PodeHeader -Name 'X-AuthToken' PARAMETERS -Name The name of the header to test. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Boolean NOTES RELATED LINKS","title":"Test-PodeHeader"},{"location":"Functions/Headers/Test-PodeHeader/#test-podeheader","text":"","title":"Test-PodeHeader"},{"location":"Functions/Headers/Test-PodeHeader/#synopsis","text":"Tests if a header is present on the Request.","title":"SYNOPSIS"},{"location":"Functions/Headers/Test-PodeHeader/#syntax","text":"Test-PodeHeader [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Headers/Test-PodeHeader/#description","text":"Tests if a header is present on the Request.","title":"DESCRIPTION"},{"location":"Functions/Headers/Test-PodeHeader/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Headers/Test-PodeHeader/#example-1","text":"Test-PodeHeader -Name 'X-AuthToken'","title":"EXAMPLE 1"},{"location":"Functions/Headers/Test-PodeHeader/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Headers/Test-PodeHeader/#-name","text":"The name of the header to test. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Headers/Test-PodeHeader/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Headers/Test-PodeHeader/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Headers/Test-PodeHeader/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Headers/Test-PodeHeader/#systemboolean","text":"","title":"System.Boolean"},{"location":"Functions/Headers/Test-PodeHeader/#notes","text":"","title":"NOTES"},{"location":"Functions/Headers/Test-PodeHeader/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Headers/Test-PodeHeaderSigned/","text":"Test-PodeHeaderSigned SYNOPSIS Tests if a header on the Request is validly signed. SYNTAX Test-PodeHeaderSigned [-Name] <String> [[-Secret] <String>] [<CommonParameters>] DESCRIPTION Tests if a header on the Request is validly signed, by attempting to unsign it using some secret. EXAMPLES EXAMPLE 1 Test-PodeHeaderSigned -Name 'X-Header-Name' -Secret 'hunter2' PARAMETERS -Name The name of the header to test. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Secret A secret to use for attempting to unsign the header's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Boolean NOTES RELATED LINKS","title":"Test-PodeHeaderSigned"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#test-podeheadersigned","text":"","title":"Test-PodeHeaderSigned"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#synopsis","text":"Tests if a header on the Request is validly signed.","title":"SYNOPSIS"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#syntax","text":"Test-PodeHeaderSigned [-Name] <String> [[-Secret] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#description","text":"Tests if a header on the Request is validly signed, by attempting to unsign it using some secret.","title":"DESCRIPTION"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#example-1","text":"Test-PodeHeaderSigned -Name 'X-Header-Name' -Secret 'hunter2'","title":"EXAMPLE 1"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#-name","text":"The name of the header to test. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#-secret","text":"A secret to use for attempting to unsign the header's value. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#systemboolean","text":"","title":"System.Boolean"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#notes","text":"","title":"NOTES"},{"location":"Functions/Headers/Test-PodeHeaderSigned/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/Add-PodeLogger/","text":"Add-PodeLogger SYNOPSIS Adds a custom Logging method for parsing custom log items. SYNTAX Add-PodeLogger [-Name] <String> [-Method] <Hashtable> [-ScriptBlock] <ScriptBlock> [[-ArgumentList] <Object[]>] [<CommonParameters>] DESCRIPTION Adds a custom Logging method for parsing custom log items. EXAMPLES EXAMPLE 1 New-PodeLoggingMethod -Terminal | Add-PodeLogger -Name 'Main' -ScriptBlock { /* logic */ } PARAMETERS -ArgumentList An array of arguments to supply to the Custom Logger's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Method The Method to use for output the log entry (From New-PodeLoggingMethod). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Name A unique Name for the Logging method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The ScriptBlock defining logic that transforms an item, and returns it for outputting. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeLogger"},{"location":"Functions/Logging/Add-PodeLogger/#add-podelogger","text":"","title":"Add-PodeLogger"},{"location":"Functions/Logging/Add-PodeLogger/#synopsis","text":"Adds a custom Logging method for parsing custom log items.","title":"SYNOPSIS"},{"location":"Functions/Logging/Add-PodeLogger/#syntax","text":"Add-PodeLogger [-Name] <String> [-Method] <Hashtable> [-ScriptBlock] <ScriptBlock> [[-ArgumentList] <Object[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Logging/Add-PodeLogger/#description","text":"Adds a custom Logging method for parsing custom log items.","title":"DESCRIPTION"},{"location":"Functions/Logging/Add-PodeLogger/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/Add-PodeLogger/#example-1","text":"New-PodeLoggingMethod -Terminal | Add-PodeLogger -Name 'Main' -ScriptBlock { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Logging/Add-PodeLogger/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/Add-PodeLogger/#-argumentlist","text":"An array of arguments to supply to the Custom Logger's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Logging/Add-PodeLogger/#-method","text":"The Method to use for output the log entry (From New-PodeLoggingMethod). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Method"},{"location":"Functions/Logging/Add-PodeLogger/#-name","text":"A unique Name for the Logging method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Logging/Add-PodeLogger/#-scriptblock","text":"The ScriptBlock defining logic that transforms an item, and returns it for outputting. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Logging/Add-PodeLogger/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/Add-PodeLogger/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/Add-PodeLogger/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/Add-PodeLogger/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/Add-PodeLogger/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/Clear-PodeLoggers/","text":"Clear-PodeLoggers SYNOPSIS Clears all Logging methods that have been configured. SYNTAX Clear-PodeLoggers [<CommonParameters>] DESCRIPTION Clears all Logging methods that have been configured. EXAMPLES EXAMPLE 1 Clear-PodeLoggers PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeLoggers"},{"location":"Functions/Logging/Clear-PodeLoggers/#clear-podeloggers","text":"","title":"Clear-PodeLoggers"},{"location":"Functions/Logging/Clear-PodeLoggers/#synopsis","text":"Clears all Logging methods that have been configured.","title":"SYNOPSIS"},{"location":"Functions/Logging/Clear-PodeLoggers/#syntax","text":"Clear-PodeLoggers [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Logging/Clear-PodeLoggers/#description","text":"Clears all Logging methods that have been configured.","title":"DESCRIPTION"},{"location":"Functions/Logging/Clear-PodeLoggers/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/Clear-PodeLoggers/#example-1","text":"Clear-PodeLoggers","title":"EXAMPLE 1"},{"location":"Functions/Logging/Clear-PodeLoggers/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/Clear-PodeLoggers/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/Clear-PodeLoggers/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/Clear-PodeLoggers/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/Clear-PodeLoggers/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/Clear-PodeLoggers/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/Disable-PodeErrorLogging/","text":"Disable-PodeErrorLogging SYNOPSIS Disables Error Logging. SYNTAX Disable-PodeErrorLogging [<CommonParameters>] DESCRIPTION Disables Error Logging. EXAMPLES EXAMPLE 1 Disable-PodeErrorLogging PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Disable-PodeErrorLogging"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#disable-podeerrorlogging","text":"","title":"Disable-PodeErrorLogging"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#synopsis","text":"Disables Error Logging.","title":"SYNOPSIS"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#syntax","text":"Disable-PodeErrorLogging [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#description","text":"Disables Error Logging.","title":"DESCRIPTION"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#example-1","text":"Disable-PodeErrorLogging","title":"EXAMPLE 1"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/Disable-PodeErrorLogging/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/Disable-PodeRequestLogging/","text":"Disable-PodeRequestLogging SYNOPSIS Disables Request Logging. SYNTAX Disable-PodeRequestLogging [<CommonParameters>] DESCRIPTION Disables Request Logging. EXAMPLES EXAMPLE 1 Disable-PodeRequestLogging PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Disable-PodeRequestLogging"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#disable-poderequestlogging","text":"","title":"Disable-PodeRequestLogging"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#synopsis","text":"Disables Request Logging.","title":"SYNOPSIS"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#syntax","text":"Disable-PodeRequestLogging [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#description","text":"Disables Request Logging.","title":"DESCRIPTION"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#example-1","text":"Disable-PodeRequestLogging","title":"EXAMPLE 1"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/Disable-PodeRequestLogging/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/Enable-PodeErrorLogging/","text":"Enable-PodeErrorLogging SYNOPSIS Enables Error Logging using a supplied output method. SYNTAX Enable-PodeErrorLogging [-Method] <Hashtable> [[-Levels] <String[]>] [-Raw] [<CommonParameters>] DESCRIPTION Enables Error Logging using a supplied output method. EXAMPLES EXAMPLE 1 New-PodeLoggingMethod -Terminal | Enable-PodeErrorLogging PARAMETERS -Levels The Levels of errors that should be logged (default is Error). Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : @ ('Error') Accept pipeline input : False Accept wildcard characters : False -Method The Method to use for output the log entry (From New-PodeLoggingMethod). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Raw If supplied, the log item returned will be the raw Error item as a hashtable and not a string (for Custom methods). Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Enable-PodeErrorLogging"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#enable-podeerrorlogging","text":"","title":"Enable-PodeErrorLogging"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#synopsis","text":"Enables Error Logging using a supplied output method.","title":"SYNOPSIS"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#syntax","text":"Enable-PodeErrorLogging [-Method] <Hashtable> [[-Levels] <String[]>] [-Raw] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#description","text":"Enables Error Logging using a supplied output method.","title":"DESCRIPTION"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#example-1","text":"New-PodeLoggingMethod -Terminal | Enable-PodeErrorLogging","title":"EXAMPLE 1"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#-levels","text":"The Levels of errors that should be logged (default is Error). Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : @ ('Error') Accept pipeline input : False Accept wildcard characters : False","title":"-Levels"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#-method","text":"The Method to use for output the log entry (From New-PodeLoggingMethod). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Method"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#-raw","text":"If supplied, the log item returned will be the raw Error item as a hashtable and not a string (for Custom methods). Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Raw"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/Enable-PodeErrorLogging/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/Enable-PodeRequestLogging/","text":"Enable-PodeRequestLogging SYNOPSIS Enables Request Logging using a supplied output method. SYNTAX Enable-PodeRequestLogging [-Method] <Hashtable> [-Raw] [<CommonParameters>] DESCRIPTION Enables Request Logging using a supplied output method. EXAMPLES EXAMPLE 1 New-PodeLoggingMethod -Terminal | Enable-PodeRequestLogging PARAMETERS -Method The Method to use for output the log entry (From New-PodeLoggingMethod). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Raw If supplied, the log item returned will be the raw Request item as a hashtable and not a string (for Custom methods). Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Enable-PodeRequestLogging"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#enable-poderequestlogging","text":"","title":"Enable-PodeRequestLogging"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#synopsis","text":"Enables Request Logging using a supplied output method.","title":"SYNOPSIS"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#syntax","text":"Enable-PodeRequestLogging [-Method] <Hashtable> [-Raw] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#description","text":"Enables Request Logging using a supplied output method.","title":"DESCRIPTION"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#example-1","text":"New-PodeLoggingMethod -Terminal | Enable-PodeRequestLogging","title":"EXAMPLE 1"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#-method","text":"The Method to use for output the log entry (From New-PodeLoggingMethod). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Method"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#-raw","text":"If supplied, the log item returned will be the raw Request item as a hashtable and not a string (for Custom methods). Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Raw"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/Enable-PodeRequestLogging/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/New-PodeLoggingMethod/","text":"New-PodeLoggingMethod SYNOPSIS Create a new method of outputting logs. SYNTAX Terminal (Default) New-PodeLoggingMethod [-Terminal] [-Batch <Int32>] [-BatchTimeout <Int32>] [<CommonParameters>] File New-PodeLoggingMethod [-File] [-Path <String>] -Name <String> [-Batch <Int32>] [-BatchTimeout <Int32>] [-MaxDays <Int32>] [-MaxSize <Int32>] [<CommonParameters>] EventViewer New-PodeLoggingMethod [-EventViewer] [-EventLogName <String>] [-Source <String>] [-EventID <Int32>] [-Batch <Int32>] [-BatchTimeout <Int32>] [<CommonParameters>] Custom New-PodeLoggingMethod [-Batch <Int32>] [-BatchTimeout <Int32>] [-Custom] -ScriptBlock <ScriptBlock> [-ArgumentList <Object[]>] [<CommonParameters>] DESCRIPTION Create a new method of outputting logs. EXAMPLES EXAMPLE 1 $term_logging = New-PodeLoggingMethod -Terminal EXAMPLE 2 $file_logging = New-PodeLoggingMethod -File -Path ./logs -Name 'requests' EXAMPLE 3 $custom_logging = New-PodeLoggingMethod -Custom -ScriptBlock { /* logic */ } PARAMETERS -ArgumentList An array of arguments to supply to the Custom Logging output method's ScriptBlock. Type : Object[] Parameter Sets : Custom Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Batch An optional batch size to write log items in bulk (Default: 1) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 1 Accept pipeline input : False Accept wildcard characters : False -BatchTimeout An optional batch timeout, in seconds, to send items off for writing if a log item isn't received (Default: 0) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Custom If supplied, will allow you to create a Custom Logging output method. Type : SwitchParameter Parameter Sets : Custom Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -EventID Optional EventID for the Event Viewer (Default: 0) Type : Int32 Parameter Sets : EventViewer Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -EventLogName Optional Log Name for the Event Viewer (Default: Application) Type : String Parameter Sets : EventViewer Aliases : Required : False Position : Named Default value : Application Accept pipeline input : False Accept wildcard characters : False -EventViewer If supplied, will use the inbuilt Event Viewer logging output method. Type : SwitchParameter Parameter Sets : EventViewer Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -File If supplied, will use the inbuilt File logging output method. Type : SwitchParameter Parameter Sets : File Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -MaxDays The maximum number of days to keep logs, before Pode automatically removes them. Type : Int32 Parameter Sets : File Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -MaxSize The maximum size of a log file, before Pode starts writing to a new log file. Type : Int32 Parameter Sets : File Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Name The File Name to prepend new log files using. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The File Path of where to store the logs. Type : String Parameter Sets : File Aliases : Required : False Position : Named Default value : ./logs Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The ScriptBlock that defines how to output a log item. Type : ScriptBlock Parameter Sets : Custom Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Source Optional Source for the Event Viewer (Default: Pode) Type : String Parameter Sets : EventViewer Aliases : Required : False Position : Named Default value : Pode Accept pipeline input : False Accept wildcard characters : False -Terminal If supplied, will use the inbuilt Terminal logging output method. Type : SwitchParameter Parameter Sets : Terminal Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Collections.Hashtable NOTES RELATED LINKS","title":"New-PodeLoggingMethod"},{"location":"Functions/Logging/New-PodeLoggingMethod/#new-podeloggingmethod","text":"","title":"New-PodeLoggingMethod"},{"location":"Functions/Logging/New-PodeLoggingMethod/#synopsis","text":"Create a new method of outputting logs.","title":"SYNOPSIS"},{"location":"Functions/Logging/New-PodeLoggingMethod/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Logging/New-PodeLoggingMethod/#terminal-default","text":"New-PodeLoggingMethod [-Terminal] [-Batch <Int32>] [-BatchTimeout <Int32>] [<CommonParameters>]","title":"Terminal (Default)"},{"location":"Functions/Logging/New-PodeLoggingMethod/#file","text":"New-PodeLoggingMethod [-File] [-Path <String>] -Name <String> [-Batch <Int32>] [-BatchTimeout <Int32>] [-MaxDays <Int32>] [-MaxSize <Int32>] [<CommonParameters>]","title":"File"},{"location":"Functions/Logging/New-PodeLoggingMethod/#eventviewer","text":"New-PodeLoggingMethod [-EventViewer] [-EventLogName <String>] [-Source <String>] [-EventID <Int32>] [-Batch <Int32>] [-BatchTimeout <Int32>] [<CommonParameters>]","title":"EventViewer"},{"location":"Functions/Logging/New-PodeLoggingMethod/#custom","text":"New-PodeLoggingMethod [-Batch <Int32>] [-BatchTimeout <Int32>] [-Custom] -ScriptBlock <ScriptBlock> [-ArgumentList <Object[]>] [<CommonParameters>]","title":"Custom"},{"location":"Functions/Logging/New-PodeLoggingMethod/#description","text":"Create a new method of outputting logs.","title":"DESCRIPTION"},{"location":"Functions/Logging/New-PodeLoggingMethod/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/New-PodeLoggingMethod/#example-1","text":"$term_logging = New-PodeLoggingMethod -Terminal","title":"EXAMPLE 1"},{"location":"Functions/Logging/New-PodeLoggingMethod/#example-2","text":"$file_logging = New-PodeLoggingMethod -File -Path ./logs -Name 'requests'","title":"EXAMPLE 2"},{"location":"Functions/Logging/New-PodeLoggingMethod/#example-3","text":"$custom_logging = New-PodeLoggingMethod -Custom -ScriptBlock { /* logic */ }","title":"EXAMPLE 3"},{"location":"Functions/Logging/New-PodeLoggingMethod/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-argumentlist","text":"An array of arguments to supply to the Custom Logging output method's ScriptBlock. Type : Object[] Parameter Sets : Custom Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-batch","text":"An optional batch size to write log items in bulk (Default: 1) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 1 Accept pipeline input : False Accept wildcard characters : False","title":"-Batch"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-batchtimeout","text":"An optional batch timeout, in seconds, to send items off for writing if a log item isn't received (Default: 0) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-BatchTimeout"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-custom","text":"If supplied, will allow you to create a Custom Logging output method. Type : SwitchParameter Parameter Sets : Custom Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Custom"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-eventid","text":"Optional EventID for the Event Viewer (Default: 0) Type : Int32 Parameter Sets : EventViewer Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-EventID"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-eventlogname","text":"Optional Log Name for the Event Viewer (Default: Application) Type : String Parameter Sets : EventViewer Aliases : Required : False Position : Named Default value : Application Accept pipeline input : False Accept wildcard characters : False","title":"-EventLogName"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-eventviewer","text":"If supplied, will use the inbuilt Event Viewer logging output method. Type : SwitchParameter Parameter Sets : EventViewer Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-EventViewer"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-file","text":"If supplied, will use the inbuilt File logging output method. Type : SwitchParameter Parameter Sets : File Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-File"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-maxdays","text":"The maximum number of days to keep logs, before Pode automatically removes them. Type : Int32 Parameter Sets : File Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-MaxDays"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-maxsize","text":"The maximum size of a log file, before Pode starts writing to a new log file. Type : Int32 Parameter Sets : File Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-MaxSize"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-name","text":"The File Name to prepend new log files using. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-path","text":"The File Path of where to store the logs. Type : String Parameter Sets : File Aliases : Required : False Position : Named Default value : ./logs Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-scriptblock","text":"The ScriptBlock that defines how to output a log item. Type : ScriptBlock Parameter Sets : Custom Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-source","text":"Optional Source for the Event Viewer (Default: Pode) Type : String Parameter Sets : EventViewer Aliases : Required : False Position : Named Default value : Pode Accept pipeline input : False Accept wildcard characters : False","title":"-Source"},{"location":"Functions/Logging/New-PodeLoggingMethod/#-terminal","text":"If supplied, will use the inbuilt Terminal logging output method. Type : SwitchParameter Parameter Sets : Terminal Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Terminal"},{"location":"Functions/Logging/New-PodeLoggingMethod/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/New-PodeLoggingMethod/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/New-PodeLoggingMethod/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/New-PodeLoggingMethod/#systemcollectionshashtable","text":"","title":"System.Collections.Hashtable"},{"location":"Functions/Logging/New-PodeLoggingMethod/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/New-PodeLoggingMethod/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/Protect-PodeLogItem/","text":"Protect-PodeLogItem SYNOPSIS Masks values within a log item to protect sensitive information. SYNTAX Protect-PodeLogItem [[-Item] <String>] [<CommonParameters>] DESCRIPTION Masks values within a log item, or any string, to protect sensitive information. Patterns, and the Mask, can be configured via the server.psd1 configuration file. EXAMPLES EXAMPLE 1 $value = Protect-PodeLogItem -Item 'Username=Morty, Password=Hunter2' PARAMETERS -Item The string Item to mask values. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Protect-PodeLogItem"},{"location":"Functions/Logging/Protect-PodeLogItem/#protect-podelogitem","text":"","title":"Protect-PodeLogItem"},{"location":"Functions/Logging/Protect-PodeLogItem/#synopsis","text":"Masks values within a log item to protect sensitive information.","title":"SYNOPSIS"},{"location":"Functions/Logging/Protect-PodeLogItem/#syntax","text":"Protect-PodeLogItem [[-Item] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Logging/Protect-PodeLogItem/#description","text":"Masks values within a log item, or any string, to protect sensitive information. Patterns, and the Mask, can be configured via the server.psd1 configuration file.","title":"DESCRIPTION"},{"location":"Functions/Logging/Protect-PodeLogItem/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/Protect-PodeLogItem/#example-1","text":"$value = Protect-PodeLogItem -Item 'Username=Morty, Password=Hunter2'","title":"EXAMPLE 1"},{"location":"Functions/Logging/Protect-PodeLogItem/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/Protect-PodeLogItem/#-item","text":"The string Item to mask values. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Item"},{"location":"Functions/Logging/Protect-PodeLogItem/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/Protect-PodeLogItem/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/Protect-PodeLogItem/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/Protect-PodeLogItem/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/Protect-PodeLogItem/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/Remove-PodeLogger/","text":"Remove-PodeLogger SYNOPSIS Removes a configured Logging method. SYNTAX Remove-PodeLogger [-Name] <String> [<CommonParameters>] DESCRIPTION Removes a configured Logging method. EXAMPLES EXAMPLE 1 Remove-PodeLogger -Name 'LogName' PARAMETERS -Name The Name of the Logging method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeLogger"},{"location":"Functions/Logging/Remove-PodeLogger/#remove-podelogger","text":"","title":"Remove-PodeLogger"},{"location":"Functions/Logging/Remove-PodeLogger/#synopsis","text":"Removes a configured Logging method.","title":"SYNOPSIS"},{"location":"Functions/Logging/Remove-PodeLogger/#syntax","text":"Remove-PodeLogger [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Logging/Remove-PodeLogger/#description","text":"Removes a configured Logging method.","title":"DESCRIPTION"},{"location":"Functions/Logging/Remove-PodeLogger/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/Remove-PodeLogger/#example-1","text":"Remove-PodeLogger -Name 'LogName'","title":"EXAMPLE 1"},{"location":"Functions/Logging/Remove-PodeLogger/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/Remove-PodeLogger/#-name","text":"The Name of the Logging method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Logging/Remove-PodeLogger/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/Remove-PodeLogger/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/Remove-PodeLogger/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/Remove-PodeLogger/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/Remove-PodeLogger/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/Use-PodeLogging/","text":"Use-PodeLogging SYNOPSIS Automatically loads logging ps1 files SYNTAX Use-PodeLogging [[-Path] <String>] [<CommonParameters>] DESCRIPTION Automatically loads logging ps1 files from either a /logging folder, or a custom folder. Saves space dot-sourcing them all one-by-one. EXAMPLES EXAMPLE 1 Use-PodeLogging EXAMPLE 2 Use-PodeLogging -Path './my-logging' PARAMETERS -Path Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeLogging"},{"location":"Functions/Logging/Use-PodeLogging/#use-podelogging","text":"","title":"Use-PodeLogging"},{"location":"Functions/Logging/Use-PodeLogging/#synopsis","text":"Automatically loads logging ps1 files","title":"SYNOPSIS"},{"location":"Functions/Logging/Use-PodeLogging/#syntax","text":"Use-PodeLogging [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Logging/Use-PodeLogging/#description","text":"Automatically loads logging ps1 files from either a /logging folder, or a custom folder. Saves space dot-sourcing them all one-by-one.","title":"DESCRIPTION"},{"location":"Functions/Logging/Use-PodeLogging/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/Use-PodeLogging/#example-1","text":"Use-PodeLogging","title":"EXAMPLE 1"},{"location":"Functions/Logging/Use-PodeLogging/#example-2","text":"Use-PodeLogging -Path './my-logging'","title":"EXAMPLE 2"},{"location":"Functions/Logging/Use-PodeLogging/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/Use-PodeLogging/#-path","text":"Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Logging/Use-PodeLogging/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/Use-PodeLogging/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/Use-PodeLogging/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/Use-PodeLogging/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/Use-PodeLogging/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/Write-PodeErrorLog/","text":"Write-PodeErrorLog SYNOPSIS Writes and Exception or ErrorRecord using the inbuilt error logging. SYNTAX Exception Write-PodeErrorLog -Exception <Exception> [-Level <String>] [-CheckInnerException] [<CommonParameters>] Error Write-PodeErrorLog -ErrorRecord <ErrorRecord> [-Level <String>] [<CommonParameters>] DESCRIPTION Writes and Exception or ErrorRecord using the inbuilt error logging. EXAMPLES EXAMPLE 1 try { /* logic */ } catch { $_ | Write-PodeErrorLog } EXAMPLE 2 [System.Exception]::new('error message') | Write-PodeErrorLog PARAMETERS -CheckInnerException If supplied, any exceptions are check for inner exceptions. If one is present, this is also logged. Type : SwitchParameter Parameter Sets : Exception Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ErrorRecord An ErrorRecord to write. Type : ErrorRecord Parameter Sets : Error Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Exception An Exception to write. Type : Exception Parameter Sets : Exception Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Level The Level of the error being logged. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Error Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeErrorLog"},{"location":"Functions/Logging/Write-PodeErrorLog/#write-podeerrorlog","text":"","title":"Write-PodeErrorLog"},{"location":"Functions/Logging/Write-PodeErrorLog/#synopsis","text":"Writes and Exception or ErrorRecord using the inbuilt error logging.","title":"SYNOPSIS"},{"location":"Functions/Logging/Write-PodeErrorLog/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Logging/Write-PodeErrorLog/#exception","text":"Write-PodeErrorLog -Exception <Exception> [-Level <String>] [-CheckInnerException] [<CommonParameters>]","title":"Exception"},{"location":"Functions/Logging/Write-PodeErrorLog/#error","text":"Write-PodeErrorLog -ErrorRecord <ErrorRecord> [-Level <String>] [<CommonParameters>]","title":"Error"},{"location":"Functions/Logging/Write-PodeErrorLog/#description","text":"Writes and Exception or ErrorRecord using the inbuilt error logging.","title":"DESCRIPTION"},{"location":"Functions/Logging/Write-PodeErrorLog/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/Write-PodeErrorLog/#example-1","text":"try { /* logic */ } catch { $_ | Write-PodeErrorLog }","title":"EXAMPLE 1"},{"location":"Functions/Logging/Write-PodeErrorLog/#example-2","text":"[System.Exception]::new('error message') | Write-PodeErrorLog","title":"EXAMPLE 2"},{"location":"Functions/Logging/Write-PodeErrorLog/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/Write-PodeErrorLog/#-checkinnerexception","text":"If supplied, any exceptions are check for inner exceptions. If one is present, this is also logged. Type : SwitchParameter Parameter Sets : Exception Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-CheckInnerException"},{"location":"Functions/Logging/Write-PodeErrorLog/#-errorrecord","text":"An ErrorRecord to write. Type : ErrorRecord Parameter Sets : Error Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-ErrorRecord"},{"location":"Functions/Logging/Write-PodeErrorLog/#-exception","text":"An Exception to write. Type : Exception Parameter Sets : Exception Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Exception"},{"location":"Functions/Logging/Write-PodeErrorLog/#-level","text":"The Level of the error being logged. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Error Accept pipeline input : False Accept wildcard characters : False","title":"-Level"},{"location":"Functions/Logging/Write-PodeErrorLog/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/Write-PodeErrorLog/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/Write-PodeErrorLog/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/Write-PodeErrorLog/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/Write-PodeErrorLog/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Logging/Write-PodeLog/","text":"Write-PodeLog SYNOPSIS Write an object to a configured custom Logging method. SYNTAX Write-PodeLog [-Name] <String> [-InputObject] <Object> [<CommonParameters>] DESCRIPTION Write an object to a configured custom Logging method. EXAMPLES EXAMPLE 1 $object | Write-PodeLog -Name 'LogName' PARAMETERS -InputObject The Object to write. Type : Object Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Name The Name of the Logging method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeLog"},{"location":"Functions/Logging/Write-PodeLog/#write-podelog","text":"","title":"Write-PodeLog"},{"location":"Functions/Logging/Write-PodeLog/#synopsis","text":"Write an object to a configured custom Logging method.","title":"SYNOPSIS"},{"location":"Functions/Logging/Write-PodeLog/#syntax","text":"Write-PodeLog [-Name] <String> [-InputObject] <Object> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Logging/Write-PodeLog/#description","text":"Write an object to a configured custom Logging method.","title":"DESCRIPTION"},{"location":"Functions/Logging/Write-PodeLog/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Logging/Write-PodeLog/#example-1","text":"$object | Write-PodeLog -Name 'LogName'","title":"EXAMPLE 1"},{"location":"Functions/Logging/Write-PodeLog/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Logging/Write-PodeLog/#-inputobject","text":"The Object to write. Type : Object Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-InputObject"},{"location":"Functions/Logging/Write-PodeLog/#-name","text":"The Name of the Logging method. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Logging/Write-PodeLog/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Logging/Write-PodeLog/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Logging/Write-PodeLog/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Logging/Write-PodeLog/#notes","text":"","title":"NOTES"},{"location":"Functions/Logging/Write-PodeLog/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/","text":"Get-PodeServerActiveRequestMetric SYNOPSIS Returns the count of active requests. SYNTAX Get-PodeServerActiveRequestMetric [[-CountType] <String>] [<CommonParameters>] DESCRIPTION Returns the count of all, processing, or queued active requests. EXAMPLES EXAMPLE 1 Get-PodeServerActiveRequestMetric EXAMPLE 2 Get-PodeServerActiveRequestMetric -CountType Queued PARAMETERS -CountType The count type to return. (Default: Total) Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : Total Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeServerActiveRequestMetric"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#get-podeserveractiverequestmetric","text":"","title":"Get-PodeServerActiveRequestMetric"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#synopsis","text":"Returns the count of active requests.","title":"SYNOPSIS"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#syntax","text":"Get-PodeServerActiveRequestMetric [[-CountType] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#description","text":"Returns the count of all, processing, or queued active requests.","title":"DESCRIPTION"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#example-1","text":"Get-PodeServerActiveRequestMetric","title":"EXAMPLE 1"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#example-2","text":"Get-PodeServerActiveRequestMetric -CountType Queued","title":"EXAMPLE 2"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#-counttype","text":"The count type to return. (Default: Total) Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : Total Accept pipeline input : False Accept wildcard characters : False","title":"-CountType"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#notes","text":"","title":"NOTES"},{"location":"Functions/Metrics/Get-PodeServerActiveRequestMetric/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/","text":"Get-PodeServerActiveSignalMetric SYNOPSIS Returns the count of active signals. SYNTAX Get-PodeServerActiveSignalMetric [[-Type] <String>] [[-CountType] <String>] [<CommonParameters>] DESCRIPTION Returns the count of all, processing, or queued active signals; for either server or client signals. EXAMPLES EXAMPLE 1 Get-PodeServerActiveSignalMetric EXAMPLE 2 Get-PodeServerActiveSignalMetric -Type Client -CountType Queued PARAMETERS -CountType The count type to return. (Default: Total) Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : Total Accept pipeline input : False Accept wildcard characters : False -Type The type of signal to return. (Default: Total) Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : Total Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeServerActiveSignalMetric"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#get-podeserveractivesignalmetric","text":"","title":"Get-PodeServerActiveSignalMetric"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#synopsis","text":"Returns the count of active signals.","title":"SYNOPSIS"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#syntax","text":"Get-PodeServerActiveSignalMetric [[-Type] <String>] [[-CountType] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#description","text":"Returns the count of all, processing, or queued active signals; for either server or client signals.","title":"DESCRIPTION"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#example-1","text":"Get-PodeServerActiveSignalMetric","title":"EXAMPLE 1"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#example-2","text":"Get-PodeServerActiveSignalMetric -Type Client -CountType Queued","title":"EXAMPLE 2"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#-counttype","text":"The count type to return. (Default: Total) Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : Total Accept pipeline input : False Accept wildcard characters : False","title":"-CountType"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#-type","text":"The type of signal to return. (Default: Total) Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : Total Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#notes","text":"","title":"NOTES"},{"location":"Functions/Metrics/Get-PodeServerActiveSignalMetric/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/","text":"Get-PodeServerRequestMetric SYNOPSIS Returns the total number of requests/per status code the Server has receieved. SYNTAX StatusCode (Default) Get-PodeServerRequestMetric [-StatusCode <Int32>] [<CommonParameters>] Total Get-PodeServerRequestMetric [-Total] [<CommonParameters>] DESCRIPTION Returns the total number of requests/per status code the Server has receieved. EXAMPLES EXAMPLE 1 $totalReqs = Get-PodeServerRequestMetric -Total EXAMPLE 2 $statusReqs = Get-PodeServerRequestMetric EXAMPLE 3 $404Reqs = Get-PodeServerRequestMetric -StatusCode 404 PARAMETERS -StatusCode If supplied, will return the total number of requests for a specific StatusCode. Type : Int32 Parameter Sets : StatusCode Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Total If supplied, will return the Total number of Requests. Type : SwitchParameter Parameter Sets : Total Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeServerRequestMetric"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#get-podeserverrequestmetric","text":"","title":"Get-PodeServerRequestMetric"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#synopsis","text":"Returns the total number of requests/per status code the Server has receieved.","title":"SYNOPSIS"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#statuscode-default","text":"Get-PodeServerRequestMetric [-StatusCode <Int32>] [<CommonParameters>]","title":"StatusCode (Default)"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#total","text":"Get-PodeServerRequestMetric [-Total] [<CommonParameters>]","title":"Total"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#description","text":"Returns the total number of requests/per status code the Server has receieved.","title":"DESCRIPTION"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#example-1","text":"$totalReqs = Get-PodeServerRequestMetric -Total","title":"EXAMPLE 1"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#example-2","text":"$statusReqs = Get-PodeServerRequestMetric","title":"EXAMPLE 2"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#example-3","text":"$404Reqs = Get-PodeServerRequestMetric -StatusCode 404","title":"EXAMPLE 3"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#-statuscode","text":"If supplied, will return the total number of requests for a specific StatusCode. Type : Int32 Parameter Sets : StatusCode Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-StatusCode"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#-total","text":"If supplied, will return the Total number of Requests. Type : SwitchParameter Parameter Sets : Total Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Total"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#notes","text":"","title":"NOTES"},{"location":"Functions/Metrics/Get-PodeServerRequestMetric/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/","text":"Get-PodeServerRestartCount SYNOPSIS Returns the number of times the server has restarted. SYNTAX Get-PodeServerRestartCount [<CommonParameters>] DESCRIPTION Returns the number of times the server has restarted. EXAMPLES EXAMPLE 1 $restarts = Get-PodeServerRestartCount PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeServerRestartCount"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#get-podeserverrestartcount","text":"","title":"Get-PodeServerRestartCount"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#synopsis","text":"Returns the number of times the server has restarted.","title":"SYNOPSIS"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#syntax","text":"Get-PodeServerRestartCount [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#description","text":"Returns the number of times the server has restarted.","title":"DESCRIPTION"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#example-1","text":"$restarts = Get-PodeServerRestartCount","title":"EXAMPLE 1"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#notes","text":"","title":"NOTES"},{"location":"Functions/Metrics/Get-PodeServerRestartCount/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/","text":"Get-PodeServerSignalMetric SYNOPSIS Returns the total number of Signal requests the Server has receieved. SYNTAX Get-PodeServerSignalMetric [<CommonParameters>] DESCRIPTION Returns the total number of Signal requests the Server has receieved. EXAMPLES EXAMPLE 1 $totalReqs = Get-PodeServerSignalMetric PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeServerSignalMetric"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#get-podeserversignalmetric","text":"","title":"Get-PodeServerSignalMetric"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#synopsis","text":"Returns the total number of Signal requests the Server has receieved.","title":"SYNOPSIS"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#syntax","text":"Get-PodeServerSignalMetric [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#description","text":"Returns the total number of Signal requests the Server has receieved.","title":"DESCRIPTION"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#example-1","text":"$totalReqs = Get-PodeServerSignalMetric","title":"EXAMPLE 1"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#notes","text":"","title":"NOTES"},{"location":"Functions/Metrics/Get-PodeServerSignalMetric/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Metrics/Get-PodeServerUptime/","text":"Get-PodeServerUptime SYNOPSIS Returns the uptime of the server in milliseconds. SYNTAX Get-PodeServerUptime [-Total] [<CommonParameters>] DESCRIPTION Returns the uptime of the server in milliseconds. You can optionally return the total uptime regardless of server restarts. EXAMPLES EXAMPLE 1 $currentUptime = Get-PodeServerUptime EXAMPLE 2 $totalUptime = Get-PodeServerUptime -Total PARAMETERS -Total If supplied, the total uptime of the server will be returned, regardless of restarts. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeServerUptime"},{"location":"Functions/Metrics/Get-PodeServerUptime/#get-podeserveruptime","text":"","title":"Get-PodeServerUptime"},{"location":"Functions/Metrics/Get-PodeServerUptime/#synopsis","text":"Returns the uptime of the server in milliseconds.","title":"SYNOPSIS"},{"location":"Functions/Metrics/Get-PodeServerUptime/#syntax","text":"Get-PodeServerUptime [-Total] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Metrics/Get-PodeServerUptime/#description","text":"Returns the uptime of the server in milliseconds. You can optionally return the total uptime regardless of server restarts.","title":"DESCRIPTION"},{"location":"Functions/Metrics/Get-PodeServerUptime/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Metrics/Get-PodeServerUptime/#example-1","text":"$currentUptime = Get-PodeServerUptime","title":"EXAMPLE 1"},{"location":"Functions/Metrics/Get-PodeServerUptime/#example-2","text":"$totalUptime = Get-PodeServerUptime -Total","title":"EXAMPLE 2"},{"location":"Functions/Metrics/Get-PodeServerUptime/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Metrics/Get-PodeServerUptime/#-total","text":"If supplied, the total uptime of the server will be returned, regardless of restarts. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Total"},{"location":"Functions/Metrics/Get-PodeServerUptime/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Metrics/Get-PodeServerUptime/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Metrics/Get-PodeServerUptime/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Metrics/Get-PodeServerUptime/#notes","text":"","title":"NOTES"},{"location":"Functions/Metrics/Get-PodeServerUptime/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Add-PodeAccessRule/","text":"Add-PodeAccessRule SYNOPSIS Adds an access rule to allow or deny IP addresses. SYNTAX Add-PodeAccessRule [-Access] <String> [-Type] <String> [-Values] <String[]> [<CommonParameters>] DESCRIPTION Adds an access rule to allow or deny IP addresses. EXAMPLES EXAMPLE 1 Add-PodeAccessRule -Access Allow -Type IP -Values '127.0.0.1' EXAMPLE 2 Add-PodeAccessRule -Access Deny -Type IP -Values @('192.168.1.1', '10.10.1.0/24') PARAMETERS -Access The type of access to enable. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Type What type of request are we configuring? Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Values A single, or an array of values. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeAccessRule"},{"location":"Functions/Middleware/Add-PodeAccessRule/#add-podeaccessrule","text":"","title":"Add-PodeAccessRule"},{"location":"Functions/Middleware/Add-PodeAccessRule/#synopsis","text":"Adds an access rule to allow or deny IP addresses.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Add-PodeAccessRule/#syntax","text":"Add-PodeAccessRule [-Access] <String> [-Type] <String> [-Values] <String[]> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Add-PodeAccessRule/#description","text":"Adds an access rule to allow or deny IP addresses.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Add-PodeAccessRule/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Add-PodeAccessRule/#example-1","text":"Add-PodeAccessRule -Access Allow -Type IP -Values '127.0.0.1'","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Add-PodeAccessRule/#example-2","text":"Add-PodeAccessRule -Access Deny -Type IP -Values @('192.168.1.1', '10.10.1.0/24')","title":"EXAMPLE 2"},{"location":"Functions/Middleware/Add-PodeAccessRule/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Add-PodeAccessRule/#-access","text":"The type of access to enable. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Access"},{"location":"Functions/Middleware/Add-PodeAccessRule/#-type","text":"What type of request are we configuring? Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Middleware/Add-PodeAccessRule/#-values","text":"A single, or an array of values. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Values"},{"location":"Functions/Middleware/Add-PodeAccessRule/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Add-PodeAccessRule/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Add-PodeAccessRule/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Add-PodeAccessRule/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Add-PodeAccessRule/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Add-PodeBodyParser/","text":"Add-PodeBodyParser SYNOPSIS Adds a custom body parser middleware. SYNTAX Add-PodeBodyParser [-ContentType] <String> [-ScriptBlock] <ScriptBlock> [<CommonParameters>] DESCRIPTION Adds a custom body parser middleware script for a content-type, which will be used if a payload is sent with a Request. EXAMPLES EXAMPLE 1 Add-PodeBodyParser -ContentType 'application/json' -ScriptBlock { param($body) /* parsing logic */ } PARAMETERS -ContentType The ContentType of the custom body parser. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The ScriptBlock that will parse the body content, and return the result. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeBodyParser"},{"location":"Functions/Middleware/Add-PodeBodyParser/#add-podebodyparser","text":"","title":"Add-PodeBodyParser"},{"location":"Functions/Middleware/Add-PodeBodyParser/#synopsis","text":"Adds a custom body parser middleware.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Add-PodeBodyParser/#syntax","text":"Add-PodeBodyParser [-ContentType] <String> [-ScriptBlock] <ScriptBlock> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Add-PodeBodyParser/#description","text":"Adds a custom body parser middleware script for a content-type, which will be used if a payload is sent with a Request.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Add-PodeBodyParser/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Add-PodeBodyParser/#example-1","text":"Add-PodeBodyParser -ContentType 'application/json' -ScriptBlock { param($body) /* parsing logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Add-PodeBodyParser/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Add-PodeBodyParser/#-contenttype","text":"The ContentType of the custom body parser. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ContentType"},{"location":"Functions/Middleware/Add-PodeBodyParser/#-scriptblock","text":"The ScriptBlock that will parse the body content, and return the result. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Middleware/Add-PodeBodyParser/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Add-PodeBodyParser/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Add-PodeBodyParser/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Add-PodeBodyParser/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Add-PodeBodyParser/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Add-PodeLimitRule/","text":"Add-PodeLimitRule SYNOPSIS Adds rate limiting rules for an IP addresses, Routes, or Endpoints. SYNTAX Add-PodeLimitRule [-Type] <String> [-Values] <String[]> [-Limit] <Int32> [-Seconds] <Int32> [-Group] [<CommonParameters>] DESCRIPTION Adds rate limiting rules for an IP addresses, Routes, or Endpoints. EXAMPLES EXAMPLE 1 Add-PodeLimitRule -Type IP -Values '127.0.0.1' -Limit 10 -Seconds 1 EXAMPLE 2 Add-PodeLimitRule -Type IP -Values @('192.168.1.1', '10.10.1.0/24') -Limit 50 -Seconds 1 -Group EXAMPLE 3 Add-PodeLimitRule -Type Route -Values '/downloads' -Limit 5 -Seconds 1 PARAMETERS -Group If supplied, groups of IPs in a subnet will be considered as one IP. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Limit The maximum number of requests to allow. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Seconds The number of seconds to count requests before restarting the count. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 4 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Type What type of request is being rate limited: IP, Route, or Endpoint? Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Values A single, or an array of values. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeLimitRule"},{"location":"Functions/Middleware/Add-PodeLimitRule/#add-podelimitrule","text":"","title":"Add-PodeLimitRule"},{"location":"Functions/Middleware/Add-PodeLimitRule/#synopsis","text":"Adds rate limiting rules for an IP addresses, Routes, or Endpoints.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Add-PodeLimitRule/#syntax","text":"Add-PodeLimitRule [-Type] <String> [-Values] <String[]> [-Limit] <Int32> [-Seconds] <Int32> [-Group] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Add-PodeLimitRule/#description","text":"Adds rate limiting rules for an IP addresses, Routes, or Endpoints.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Add-PodeLimitRule/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Add-PodeLimitRule/#example-1","text":"Add-PodeLimitRule -Type IP -Values '127.0.0.1' -Limit 10 -Seconds 1","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Add-PodeLimitRule/#example-2","text":"Add-PodeLimitRule -Type IP -Values @('192.168.1.1', '10.10.1.0/24') -Limit 50 -Seconds 1 -Group","title":"EXAMPLE 2"},{"location":"Functions/Middleware/Add-PodeLimitRule/#example-3","text":"Add-PodeLimitRule -Type Route -Values '/downloads' -Limit 5 -Seconds 1","title":"EXAMPLE 3"},{"location":"Functions/Middleware/Add-PodeLimitRule/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Add-PodeLimitRule/#-group","text":"If supplied, groups of IPs in a subnet will be considered as one IP. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Group"},{"location":"Functions/Middleware/Add-PodeLimitRule/#-limit","text":"The maximum number of requests to allow. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Limit"},{"location":"Functions/Middleware/Add-PodeLimitRule/#-seconds","text":"The number of seconds to count requests before restarting the count. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 4 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Seconds"},{"location":"Functions/Middleware/Add-PodeLimitRule/#-type","text":"What type of request is being rate limited: IP, Route, or Endpoint? Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Middleware/Add-PodeLimitRule/#-values","text":"A single, or an array of values. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Values"},{"location":"Functions/Middleware/Add-PodeLimitRule/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Add-PodeLimitRule/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Add-PodeLimitRule/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Add-PodeLimitRule/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Add-PodeLimitRule/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Add-PodeMiddleware/","text":"Add-PodeMiddleware SYNOPSIS Adds a new Middleware to be invoked before every Route, or certain Routes. SYNTAX Script (Default) Add-PodeMiddleware -Name <String> -ScriptBlock <ScriptBlock> [-Route <String>] [-ArgumentList <Object[]>] [<CommonParameters>] Input Add-PodeMiddleware -Name <String> -InputObject <Hashtable> [-Route <String>] [-ArgumentList <Object[]>] [<CommonParameters>] DESCRIPTION Adds a new Middleware to be invoked before every Route, or certain Routes. ScriptBlock should return $true to continue execution, or $false to stop. EXAMPLES EXAMPLE 1 Add-PodeMiddleware -Name 'BlockAgents' -ScriptBlock { /* logic */ } EXAMPLE 2 Add-PodeMiddleware -Name 'CheckEmailOnApi' -Route '/api/*' -ScriptBlock { /* logic */ } PARAMETERS -ArgumentList An array of arguments to supply to the Middleware's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -InputObject A Middleware HashTable from New-PodeMiddleware, or from certain other functions that return Middleware as a HashTable. Type : Hashtable Parameter Sets : Input Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Name The Name of the Middleware. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Route A Route path for which Routes this Middleware should only be invoked against. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The Script defining the logic of the Middleware. Should return $true to continue execution, or $false to stop. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS Boolean. ScriptBlock should return $true to continue to the next middleware/route, or return $false to stop execution. NOTES RELATED LINKS","title":"Add-PodeMiddleware"},{"location":"Functions/Middleware/Add-PodeMiddleware/#add-podemiddleware","text":"","title":"Add-PodeMiddleware"},{"location":"Functions/Middleware/Add-PodeMiddleware/#synopsis","text":"Adds a new Middleware to be invoked before every Route, or certain Routes.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Add-PodeMiddleware/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Middleware/Add-PodeMiddleware/#script-default","text":"Add-PodeMiddleware -Name <String> -ScriptBlock <ScriptBlock> [-Route <String>] [-ArgumentList <Object[]>] [<CommonParameters>]","title":"Script (Default)"},{"location":"Functions/Middleware/Add-PodeMiddleware/#input","text":"Add-PodeMiddleware -Name <String> -InputObject <Hashtable> [-Route <String>] [-ArgumentList <Object[]>] [<CommonParameters>]","title":"Input"},{"location":"Functions/Middleware/Add-PodeMiddleware/#description","text":"Adds a new Middleware to be invoked before every Route, or certain Routes. ScriptBlock should return $true to continue execution, or $false to stop.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Add-PodeMiddleware/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Add-PodeMiddleware/#example-1","text":"Add-PodeMiddleware -Name 'BlockAgents' -ScriptBlock { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Add-PodeMiddleware/#example-2","text":"Add-PodeMiddleware -Name 'CheckEmailOnApi' -Route '/api/*' -ScriptBlock { /* logic */ }","title":"EXAMPLE 2"},{"location":"Functions/Middleware/Add-PodeMiddleware/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Add-PodeMiddleware/#-argumentlist","text":"An array of arguments to supply to the Middleware's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Middleware/Add-PodeMiddleware/#-inputobject","text":"A Middleware HashTable from New-PodeMiddleware, or from certain other functions that return Middleware as a HashTable. Type : Hashtable Parameter Sets : Input Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-InputObject"},{"location":"Functions/Middleware/Add-PodeMiddleware/#-name","text":"The Name of the Middleware. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Middleware/Add-PodeMiddleware/#-route","text":"A Route path for which Routes this Middleware should only be invoked against. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Route"},{"location":"Functions/Middleware/Add-PodeMiddleware/#-scriptblock","text":"The Script defining the logic of the Middleware. Should return $true to continue execution, or $false to stop. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Middleware/Add-PodeMiddleware/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Add-PodeMiddleware/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Add-PodeMiddleware/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Add-PodeMiddleware/#boolean-scriptblock-should-return-true-to-continue-to-the-next-middlewareroute-or-return-false-to-stop-execution","text":"","title":"Boolean. ScriptBlock should return $true to continue to the next middleware/route, or return $false to stop execution."},{"location":"Functions/Middleware/Add-PodeMiddleware/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Add-PodeMiddleware/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Clear-PodeMiddleware/","text":"Clear-PodeMiddleware SYNOPSIS Removes all user defined Middleware. SYNTAX Clear-PodeMiddleware [<CommonParameters>] DESCRIPTION Removes all user defined Middleware. EXAMPLES EXAMPLE 1 Clear-PodeMiddleware PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeMiddleware"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#clear-podemiddleware","text":"","title":"Clear-PodeMiddleware"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#synopsis","text":"Removes all user defined Middleware.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#syntax","text":"Clear-PodeMiddleware [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#description","text":"Removes all user defined Middleware.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#example-1","text":"Clear-PodeMiddleware","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Clear-PodeMiddleware/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/","text":"Enable-PodeCsrfMiddleware SYNOPSIS Enables Middleware for verifying CSRF tokens on Requests. SYNTAX Enable-PodeCsrfMiddleware [-IgnoreMethods <String[]>] [-Secret <String>] [-UseCookies] [<CommonParameters>] DESCRIPTION Enables Middleware for verifying CSRF tokens on Requests, with configurable HTTP methods to ignore verification. EXAMPLES EXAMPLE 1 Enable-PodeCsrfMiddleware -IgnoreMethods @('Get', 'Trace') EXAMPLE 2 Enable-PodeCsrfMiddleware -Secret 'some-secret' -UseCookies PARAMETERS -IgnoreMethods An array of HTTP methods to ignore CSRF verification. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : @ ('Get', 'Head', 'Options', 'Trace') Accept pipeline input : False Accept wildcard characters : False -Secret A secret to use when signing cookies - for when using CSRF with cookies. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -UseCookies If supplied, CSRF will used cookies rather than sessions. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Enable-PodeCsrfMiddleware"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#enable-podecsrfmiddleware","text":"","title":"Enable-PodeCsrfMiddleware"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#synopsis","text":"Enables Middleware for verifying CSRF tokens on Requests.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#syntax","text":"Enable-PodeCsrfMiddleware [-IgnoreMethods <String[]>] [-Secret <String>] [-UseCookies] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#description","text":"Enables Middleware for verifying CSRF tokens on Requests, with configurable HTTP methods to ignore verification.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#example-1","text":"Enable-PodeCsrfMiddleware -IgnoreMethods @('Get', 'Trace')","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#example-2","text":"Enable-PodeCsrfMiddleware -Secret 'some-secret' -UseCookies","title":"EXAMPLE 2"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#-ignoremethods","text":"An array of HTTP methods to ignore CSRF verification. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : @ ('Get', 'Head', 'Options', 'Trace') Accept pipeline input : False Accept wildcard characters : False","title":"-IgnoreMethods"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#-secret","text":"A secret to use when signing cookies - for when using CSRF with cookies. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#-usecookies","text":"If supplied, CSRF will used cookies rather than sessions. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UseCookies"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Enable-PodeCsrfMiddleware/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/","text":"Enable-PodeSessionMiddleware SYNOPSIS Enables Middleware for creating, retrieving and using Sessions within Pode. SYNTAX Cookies (Default) Enable-PodeSessionMiddleware [-Secret <String>] [-Name <String>] [-Duration <Int32>] [-Generator <ScriptBlock>] [-Storage <PSObject>] [-Extend] [-HttpOnly] [-Secure] [-Strict] [<CommonParameters>] Headers Enable-PodeSessionMiddleware [-Secret <String>] [-Name <String>] [-Duration <Int32>] [-Generator <ScriptBlock>] [-Storage <PSObject>] [-Extend] [-Strict] [-UseHeaders] [<CommonParameters>] DESCRIPTION Enables Middleware for creating, retrieving and using Sessions within Pode; with support for defining Session duration, and custom Storage. If you're storing sessions outside of Pode, you must supply a Secret value so sessions aren't corrupted. EXAMPLES EXAMPLE 1 Enable-PodeSessionMiddleware -Duration 120 EXAMPLE 2 Enable-PodeSessionMiddleware -Duration 120 -Extend -Generator { return [System.IO.Path]::GetRandomFileName() } EXAMPLE 3 Enable-PodeSessionMiddleware -Secret 'schwifty' -Duration 120 -UseHeaders -Strict PARAMETERS -Duration The duration a Session should last for, before being expired. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Extend If supplied, the Sessions will have their durations extended on each successful Request. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Generator A custom ScriptBlock to generate a random unique SessionId. The value returned must be a String. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -HttpOnly If supplied, the Session cookie will only be accessible to browsers. Type : SwitchParameter Parameter Sets : Cookies Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Name The name of the cookie/header used for the Session. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Pode.sid Accept pipeline input : False Accept wildcard characters : False -Secret An optional Secret to use when signing Sessions (Default: random GUID). Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Secure If supplied, the Session cookie will only be accessible over HTTPS Requests. Type : SwitchParameter Parameter Sets : Cookies Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Storage A custom PSObject that defines methods for Delete, Get, and Set. This allow you to store Sessions in custom Storage such as Redis. A Secret is required. Type : PSObject Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Strict If supplied, the Secret will be extended using the client request's UserAgent and RemoteIPAddress. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -UseHeaders If supplied, Sessions will be sent back in a header on the Response with the Name supplied. Type : SwitchParameter Parameter Sets : Headers Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Enable-PodeSessionMiddleware"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#enable-podesessionmiddleware","text":"","title":"Enable-PodeSessionMiddleware"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#synopsis","text":"Enables Middleware for creating, retrieving and using Sessions within Pode.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#cookies-default","text":"Enable-PodeSessionMiddleware [-Secret <String>] [-Name <String>] [-Duration <Int32>] [-Generator <ScriptBlock>] [-Storage <PSObject>] [-Extend] [-HttpOnly] [-Secure] [-Strict] [<CommonParameters>]","title":"Cookies (Default)"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#headers","text":"Enable-PodeSessionMiddleware [-Secret <String>] [-Name <String>] [-Duration <Int32>] [-Generator <ScriptBlock>] [-Storage <PSObject>] [-Extend] [-Strict] [-UseHeaders] [<CommonParameters>]","title":"Headers"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#description","text":"Enables Middleware for creating, retrieving and using Sessions within Pode; with support for defining Session duration, and custom Storage. If you're storing sessions outside of Pode, you must supply a Secret value so sessions aren't corrupted.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#example-1","text":"Enable-PodeSessionMiddleware -Duration 120","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#example-2","text":"Enable-PodeSessionMiddleware -Duration 120 -Extend -Generator { return [System.IO.Path]::GetRandomFileName() }","title":"EXAMPLE 2"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#example-3","text":"Enable-PodeSessionMiddleware -Secret 'schwifty' -Duration 120 -UseHeaders -Strict","title":"EXAMPLE 3"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#-duration","text":"The duration a Session should last for, before being expired. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Duration"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#-extend","text":"If supplied, the Sessions will have their durations extended on each successful Request. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Extend"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#-generator","text":"A custom ScriptBlock to generate a random unique SessionId. The value returned must be a String. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Generator"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#-httponly","text":"If supplied, the Session cookie will only be accessible to browsers. Type : SwitchParameter Parameter Sets : Cookies Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-HttpOnly"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#-name","text":"The name of the cookie/header used for the Session. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Pode.sid Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#-secret","text":"An optional Secret to use when signing Sessions (Default: random GUID). Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#-secure","text":"If supplied, the Session cookie will only be accessible over HTTPS Requests. Type : SwitchParameter Parameter Sets : Cookies Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Secure"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#-storage","text":"A custom PSObject that defines methods for Delete, Get, and Set. This allow you to store Sessions in custom Storage such as Redis. A Secret is required. Type : PSObject Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Storage"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#-strict","text":"If supplied, the Secret will be extended using the client request's UserAgent and RemoteIPAddress. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Strict"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#-useheaders","text":"If supplied, Sessions will be sent back in a header on the Response with the Name supplied. Type : SwitchParameter Parameter Sets : Headers Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UseHeaders"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Enable-PodeSessionMiddleware/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/","text":"Get-PodeCsrfMiddleware SYNOPSIS Returns adhoc CSRF CSRF verification Middleware, for use on Routes. SYNTAX Get-PodeCsrfMiddleware [<CommonParameters>] DESCRIPTION Returns adhoc CSRF CSRF verification Middleware, for use on Routes. EXAMPLES EXAMPLE 1 $csrf = Get-PodeCsrfMiddleware Add-PodeRoute -Method Get -Path '/cpu' -Middleware $csrf -ScriptBlock { /* logic */ } PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Collections.Hashtable NOTES RELATED LINKS","title":"Get-PodeCsrfMiddleware"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#get-podecsrfmiddleware","text":"","title":"Get-PodeCsrfMiddleware"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#synopsis","text":"Returns adhoc CSRF CSRF verification Middleware, for use on Routes.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#syntax","text":"Get-PodeCsrfMiddleware [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#description","text":"Returns adhoc CSRF CSRF verification Middleware, for use on Routes.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#example-1","text":"$csrf = Get-PodeCsrfMiddleware Add-PodeRoute -Method Get -Path '/cpu' -Middleware $csrf -ScriptBlock { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#systemcollectionshashtable","text":"","title":"System.Collections.Hashtable"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Get-PodeCsrfMiddleware/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Get-PodeSessionId/","text":"Get-PodeSessionId SYNOPSIS Returns the currently authenticated SessionId. SYNTAX Get-PodeSessionId [-Signed] [-Force] [<CommonParameters>] DESCRIPTION Returns the currently authenticated SessionId. If there's no session, or it's not authenticated, then null is returned instead. You can also have the SessionId returned as signed as well. EXAMPLES EXAMPLE 1 $sessionId = Get-PodeSessionId PARAMETERS -Force If supplied, the sessionId will be returned regardless of authentication. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Signed If supplied, the returned SessionId will also be signed. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeSessionId"},{"location":"Functions/Middleware/Get-PodeSessionId/#get-podesessionid","text":"","title":"Get-PodeSessionId"},{"location":"Functions/Middleware/Get-PodeSessionId/#synopsis","text":"Returns the currently authenticated SessionId.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Get-PodeSessionId/#syntax","text":"Get-PodeSessionId [-Signed] [-Force] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Get-PodeSessionId/#description","text":"Returns the currently authenticated SessionId. If there's no session, or it's not authenticated, then null is returned instead. You can also have the SessionId returned as signed as well.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Get-PodeSessionId/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Get-PodeSessionId/#example-1","text":"$sessionId = Get-PodeSessionId","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Get-PodeSessionId/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Get-PodeSessionId/#-force","text":"If supplied, the sessionId will be returned regardless of authentication. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Middleware/Get-PodeSessionId/#-signed","text":"If supplied, the returned SessionId will also be signed. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Signed"},{"location":"Functions/Middleware/Get-PodeSessionId/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Get-PodeSessionId/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Get-PodeSessionId/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Get-PodeSessionId/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Get-PodeSessionId/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Initialize-PodeCsrf/","text":"Initialize-PodeCsrf SYNOPSIS Initialises CSRF within Pode for adhoc usage. SYNTAX Initialize-PodeCsrf [[-IgnoreMethods] <String[]>] [[-Secret] <String>] [-UseCookies] [<CommonParameters>] DESCRIPTION Initialises CSRF within Pode for adhoc usage, with configurable HTTP methods to ignore verification. EXAMPLES EXAMPLE 1 Initialize-PodeCsrf -IgnoreMethods @('Get', 'Trace') EXAMPLE 2 Initialize-PodeCsrf -Secret 'some-secret' -UseCookies PARAMETERS -IgnoreMethods An array of HTTP methods to ignore CSRF verification. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : @ ('Get', 'Head', 'Options', 'Trace') Accept pipeline input : False Accept wildcard characters : False -Secret A secret to use when signing cookies - for when using CSRF with cookies. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -UseCookies If supplied, CSRF will used cookies rather than sessions. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Initialize-PodeCsrf"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#initialize-podecsrf","text":"","title":"Initialize-PodeCsrf"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#synopsis","text":"Initialises CSRF within Pode for adhoc usage.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#syntax","text":"Initialize-PodeCsrf [[-IgnoreMethods] <String[]>] [[-Secret] <String>] [-UseCookies] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#description","text":"Initialises CSRF within Pode for adhoc usage, with configurable HTTP methods to ignore verification.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#example-1","text":"Initialize-PodeCsrf -IgnoreMethods @('Get', 'Trace')","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#example-2","text":"Initialize-PodeCsrf -Secret 'some-secret' -UseCookies","title":"EXAMPLE 2"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#-ignoremethods","text":"An array of HTTP methods to ignore CSRF verification. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : @ ('Get', 'Head', 'Options', 'Trace') Accept pipeline input : False Accept wildcard characters : False","title":"-IgnoreMethods"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#-secret","text":"A secret to use when signing cookies - for when using CSRF with cookies. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Secret"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#-usecookies","text":"If supplied, CSRF will used cookies rather than sessions. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UseCookies"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Initialize-PodeCsrf/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/New-PodeCsrfToken/","text":"New-PodeCsrfToken SYNOPSIS Creates and returns a new secure token for use with CSRF. SYNTAX New-PodeCsrfToken [<CommonParameters>] DESCRIPTION Creates and returns a new secure token for use with CSRF. EXAMPLES EXAMPLE 1 $token = New-PodeCsrfToken PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.String NOTES RELATED LINKS","title":"New-PodeCsrfToken"},{"location":"Functions/Middleware/New-PodeCsrfToken/#new-podecsrftoken","text":"","title":"New-PodeCsrfToken"},{"location":"Functions/Middleware/New-PodeCsrfToken/#synopsis","text":"Creates and returns a new secure token for use with CSRF.","title":"SYNOPSIS"},{"location":"Functions/Middleware/New-PodeCsrfToken/#syntax","text":"New-PodeCsrfToken [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/New-PodeCsrfToken/#description","text":"Creates and returns a new secure token for use with CSRF.","title":"DESCRIPTION"},{"location":"Functions/Middleware/New-PodeCsrfToken/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/New-PodeCsrfToken/#example-1","text":"$token = New-PodeCsrfToken","title":"EXAMPLE 1"},{"location":"Functions/Middleware/New-PodeCsrfToken/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/New-PodeCsrfToken/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/New-PodeCsrfToken/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/New-PodeCsrfToken/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/New-PodeCsrfToken/#systemstring","text":"","title":"System.String"},{"location":"Functions/Middleware/New-PodeCsrfToken/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/New-PodeCsrfToken/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/New-PodeMiddleware/","text":"New-PodeMiddleware SYNOPSIS Creates a new Middleware HashTable object, that can be piped/used in Add-PodeMiddleware or in Routes. SYNTAX New-PodeMiddleware [-ScriptBlock] <ScriptBlock> [[-Route] <String>] [[-ArgumentList] <Object[]>] [<CommonParameters>] DESCRIPTION Creates a new Middleware HashTable object, that can be piped/used in Add-PodeMiddleware or in Routes. ScriptBlock should return $true to continue execution, or $false to stop. EXAMPLES EXAMPLE 1 New-PodeMiddleware -ScriptBlock { /* logic */ } -ArgumentList 'Email' | Add-PodeMiddleware -Name 'CheckEmail' PARAMETERS -ArgumentList An array of arguments to supply to the Middleware's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Route A Route path for which Routes this Middleware should only be invoked against. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The Script that defines the logic of the Middleware. Should return $true to continue execution, or $false to stop. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS Boolean. ScriptBlock should return $true to continue to the next middleware/route, or return $false to stop execution. NOTES RELATED LINKS","title":"New-PodeMiddleware"},{"location":"Functions/Middleware/New-PodeMiddleware/#new-podemiddleware","text":"","title":"New-PodeMiddleware"},{"location":"Functions/Middleware/New-PodeMiddleware/#synopsis","text":"Creates a new Middleware HashTable object, that can be piped/used in Add-PodeMiddleware or in Routes.","title":"SYNOPSIS"},{"location":"Functions/Middleware/New-PodeMiddleware/#syntax","text":"New-PodeMiddleware [-ScriptBlock] <ScriptBlock> [[-Route] <String>] [[-ArgumentList] <Object[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/New-PodeMiddleware/#description","text":"Creates a new Middleware HashTable object, that can be piped/used in Add-PodeMiddleware or in Routes. ScriptBlock should return $true to continue execution, or $false to stop.","title":"DESCRIPTION"},{"location":"Functions/Middleware/New-PodeMiddleware/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/New-PodeMiddleware/#example-1","text":"New-PodeMiddleware -ScriptBlock { /* logic */ } -ArgumentList 'Email' | Add-PodeMiddleware -Name 'CheckEmail'","title":"EXAMPLE 1"},{"location":"Functions/Middleware/New-PodeMiddleware/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/New-PodeMiddleware/#-argumentlist","text":"An array of arguments to supply to the Middleware's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Middleware/New-PodeMiddleware/#-route","text":"A Route path for which Routes this Middleware should only be invoked against. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Route"},{"location":"Functions/Middleware/New-PodeMiddleware/#-scriptblock","text":"The Script that defines the logic of the Middleware. Should return $true to continue execution, or $false to stop. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Middleware/New-PodeMiddleware/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/New-PodeMiddleware/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/New-PodeMiddleware/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/New-PodeMiddleware/#boolean-scriptblock-should-return-true-to-continue-to-the-next-middlewareroute-or-return-false-to-stop-execution","text":"","title":"Boolean. ScriptBlock should return $true to continue to the next middleware/route, or return $false to stop execution."},{"location":"Functions/Middleware/New-PodeMiddleware/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/New-PodeMiddleware/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Remove-PodeBodyParser/","text":"Remove-PodeBodyParser SYNOPSIS Removes a custom body parser. SYNTAX Remove-PodeBodyParser [-ContentType] <String> [<CommonParameters>] DESCRIPTION Removes a custom body parser middleware script for a content-type. EXAMPLES EXAMPLE 1 Remove-PodeBodyParser -ContentType 'application/json' PARAMETERS -ContentType The ContentType of the custom body parser. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeBodyParser"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#remove-podebodyparser","text":"","title":"Remove-PodeBodyParser"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#synopsis","text":"Removes a custom body parser.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#syntax","text":"Remove-PodeBodyParser [-ContentType] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#description","text":"Removes a custom body parser middleware script for a content-type.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#example-1","text":"Remove-PodeBodyParser -ContentType 'application/json'","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#-contenttype","text":"The ContentType of the custom body parser. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-ContentType"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Remove-PodeBodyParser/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Remove-PodeMiddleware/","text":"Remove-PodeMiddleware SYNOPSIS Removes a specific user defined Middleware. SYNTAX Remove-PodeMiddleware [-Name] <String> [<CommonParameters>] DESCRIPTION Removes a specific user defined Middleware. EXAMPLES EXAMPLE 1 Remove-PodeMiddleware -Name 'Sessions' PARAMETERS -Name The Name of the Middleware to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeMiddleware"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#remove-podemiddleware","text":"","title":"Remove-PodeMiddleware"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#synopsis","text":"Removes a specific user defined Middleware.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#syntax","text":"Remove-PodeMiddleware [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#description","text":"Removes a specific user defined Middleware.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#example-1","text":"Remove-PodeMiddleware -Name 'Sessions'","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#-name","text":"The Name of the Middleware to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Remove-PodeMiddleware/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Remove-PodeSession/","text":"Remove-PodeSession SYNOPSIS Remove the current Session, logging it out. SYNTAX Remove-PodeSession [<CommonParameters>] DESCRIPTION Remove the current Session, logging it out. This will remove the session from Storage, and Cookies. EXAMPLES EXAMPLE 1 Remove-PodeSession PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSession"},{"location":"Functions/Middleware/Remove-PodeSession/#remove-podesession","text":"","title":"Remove-PodeSession"},{"location":"Functions/Middleware/Remove-PodeSession/#synopsis","text":"Remove the current Session, logging it out.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Remove-PodeSession/#syntax","text":"Remove-PodeSession [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Remove-PodeSession/#description","text":"Remove the current Session, logging it out. This will remove the session from Storage, and Cookies.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Remove-PodeSession/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Remove-PodeSession/#example-1","text":"Remove-PodeSession","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Remove-PodeSession/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Remove-PodeSession/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Remove-PodeSession/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Remove-PodeSession/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Remove-PodeSession/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Remove-PodeSession/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Save-PodeSession/","text":"Save-PodeSession SYNOPSIS Saves the current Session's data. SYNTAX Save-PodeSession [-Force] [<CommonParameters>] DESCRIPTION Saves the current Session's data. EXAMPLES EXAMPLE 1 Save-PodeSession -Force PARAMETERS -Force If supplied, the data will be saved even if nothing has changed. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Save-PodeSession"},{"location":"Functions/Middleware/Save-PodeSession/#save-podesession","text":"","title":"Save-PodeSession"},{"location":"Functions/Middleware/Save-PodeSession/#synopsis","text":"Saves the current Session's data.","title":"SYNOPSIS"},{"location":"Functions/Middleware/Save-PodeSession/#syntax","text":"Save-PodeSession [-Force] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Save-PodeSession/#description","text":"Saves the current Session's data.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Save-PodeSession/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Save-PodeSession/#example-1","text":"Save-PodeSession -Force","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Save-PodeSession/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Save-PodeSession/#-force","text":"If supplied, the data will be saved even if nothing has changed. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Middleware/Save-PodeSession/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Save-PodeSession/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Save-PodeSession/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Save-PodeSession/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Save-PodeSession/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Middleware/Use-PodeMiddleware/","text":"Use-PodeMiddleware SYNOPSIS Automatically loads middleware ps1 files SYNTAX Use-PodeMiddleware [[-Path] <String>] [<CommonParameters>] DESCRIPTION Automatically loads middleware ps1 files from either a /middleware folder, or a custom folder. Saves space dot-sourcing them all one-by-one. EXAMPLES EXAMPLE 1 Use-PodeMiddleware EXAMPLE 2 Use-PodeMiddleware -Path './my-middleware' PARAMETERS -Path Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeMiddleware"},{"location":"Functions/Middleware/Use-PodeMiddleware/#use-podemiddleware","text":"","title":"Use-PodeMiddleware"},{"location":"Functions/Middleware/Use-PodeMiddleware/#synopsis","text":"Automatically loads middleware ps1 files","title":"SYNOPSIS"},{"location":"Functions/Middleware/Use-PodeMiddleware/#syntax","text":"Use-PodeMiddleware [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Middleware/Use-PodeMiddleware/#description","text":"Automatically loads middleware ps1 files from either a /middleware folder, or a custom folder. Saves space dot-sourcing them all one-by-one.","title":"DESCRIPTION"},{"location":"Functions/Middleware/Use-PodeMiddleware/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Middleware/Use-PodeMiddleware/#example-1","text":"Use-PodeMiddleware","title":"EXAMPLE 1"},{"location":"Functions/Middleware/Use-PodeMiddleware/#example-2","text":"Use-PodeMiddleware -Path './my-middleware'","title":"EXAMPLE 2"},{"location":"Functions/Middleware/Use-PodeMiddleware/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Middleware/Use-PodeMiddleware/#-path","text":"Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Middleware/Use-PodeMiddleware/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Middleware/Use-PodeMiddleware/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Middleware/Use-PodeMiddleware/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Middleware/Use-PodeMiddleware/#notes","text":"","title":"NOTES"},{"location":"Functions/Middleware/Use-PodeMiddleware/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/","text":"Add-PodeOAComponentParameter SYNOPSIS Adds a reusable component for a request parameter. SYNTAX Add-PodeOAComponentParameter [[-Name] <String>] [-Parameter] <Hashtable> [<CommonParameters>] DESCRIPTION Adds a reusable component for a request parameter. EXAMPLES EXAMPLE 1 New-PodeOAIntProperty -Name 'userId' | ConvertTo-PodeOAParameter -In Query | Add-PodeOAComponentParameter -Name 'UserIdParam' PARAMETERS -Name The reference Name of the parameter. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Parameter The Parameter to use for the component (from ConvertTo-PodeOAParameter) Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeOAComponentParameter"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#add-podeoacomponentparameter","text":"","title":"Add-PodeOAComponentParameter"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#synopsis","text":"Adds a reusable component for a request parameter.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#syntax","text":"Add-PodeOAComponentParameter [[-Name] <String>] [-Parameter] <Hashtable> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#description","text":"Adds a reusable component for a request parameter.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#example-1","text":"New-PodeOAIntProperty -Name 'userId' | ConvertTo-PodeOAParameter -In Query | Add-PodeOAComponentParameter -Name 'UserIdParam'","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#-name","text":"The reference Name of the parameter. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#-parameter","text":"The Parameter to use for the component (from ConvertTo-PodeOAParameter) Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Parameter"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/Add-PodeOAComponentParameter/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/","text":"Add-PodeOAComponentRequestBody SYNOPSIS Adds a reusable component for a request body. SYNTAX Add-PodeOAComponentRequestBody [-Name] <String> [-ContentSchemas] <Hashtable> [[-Description] <String>] [-Required] [<CommonParameters>] DESCRIPTION Adds a reusable component for a request body. EXAMPLES EXAMPLE 1 Add-PodeOAComponentRequestBody -Name 'UserIdBody' -ContentSchemas @{ 'application/json' = (New-PodeOAIntProperty -Name 'userId' -Object) } EXAMPLE 2 Add-PodeOAComponentRequestBody -Name 'UserIdBody' -ContentSchemas @{ 'application/json' = 'UserIdSchema' } PARAMETERS -ContentSchemas The content-types and schema the request body accepts (the schema is created using the Property functions). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Description A Description of the request body. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The reference Name of the request body. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Required If supplied, the request body will be flagged as required. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeOAComponentRequestBody"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#add-podeoacomponentrequestbody","text":"","title":"Add-PodeOAComponentRequestBody"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#synopsis","text":"Adds a reusable component for a request body.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#syntax","text":"Add-PodeOAComponentRequestBody [-Name] <String> [-ContentSchemas] <Hashtable> [[-Description] <String>] [-Required] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#description","text":"Adds a reusable component for a request body.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#example-1","text":"Add-PodeOAComponentRequestBody -Name 'UserIdBody' -ContentSchemas @{ 'application/json' = (New-PodeOAIntProperty -Name 'userId' -Object) }","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#example-2","text":"Add-PodeOAComponentRequestBody -Name 'UserIdBody' -ContentSchemas @{ 'application/json' = 'UserIdSchema' }","title":"EXAMPLE 2"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#-contentschemas","text":"The content-types and schema the request body accepts (the schema is created using the Property functions). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-ContentSchemas"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#-description","text":"A Description of the request body. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#-name","text":"The reference Name of the request body. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#-required","text":"If supplied, the request body will be flagged as required. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Required"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/Add-PodeOAComponentRequestBody/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/","text":"Add-PodeOAComponentResponse SYNOPSIS Adds a reusable component for responses. SYNTAX Add-PodeOAComponentResponse [-Name] <String> [[-ContentSchemas] <Hashtable>] [[-HeaderSchemas] <Hashtable>] [-Description] <String> [<CommonParameters>] DESCRIPTION Adds a reusable component for responses. EXAMPLES EXAMPLE 1 Add-PodeOAComponentResponse -Name 'OKResponse' -ContentSchemas @{ 'application/json' = (New-PodeOAIntProperty -Name 'userId' -Object) } EXAMPLE 2 Add-PodeOAComponentResponse -Name 'ErrorResponse' -ContentSchemas @{ 'application/json' = 'ErrorSchema' } PARAMETERS -ContentSchemas The content-types and schema the response returns (the schema is created using the Property functions). Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Description The Description of the response. Type : String Parameter Sets : (All) Aliases : Required : True Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -HeaderSchemas The header name and schema the response returns (the schema is created using the Property functions). Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The reference Name of the response. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeOAComponentResponse"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#add-podeoacomponentresponse","text":"","title":"Add-PodeOAComponentResponse"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#synopsis","text":"Adds a reusable component for responses.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#syntax","text":"Add-PodeOAComponentResponse [-Name] <String> [[-ContentSchemas] <Hashtable>] [[-HeaderSchemas] <Hashtable>] [-Description] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#description","text":"Adds a reusable component for responses.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#example-1","text":"Add-PodeOAComponentResponse -Name 'OKResponse' -ContentSchemas @{ 'application/json' = (New-PodeOAIntProperty -Name 'userId' -Object) }","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#example-2","text":"Add-PodeOAComponentResponse -Name 'ErrorResponse' -ContentSchemas @{ 'application/json' = 'ErrorSchema' }","title":"EXAMPLE 2"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#-contentschemas","text":"The content-types and schema the response returns (the schema is created using the Property functions). Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ContentSchemas"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#-description","text":"The Description of the response. Type : String Parameter Sets : (All) Aliases : Required : True Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#-headerschemas","text":"The header name and schema the response returns (the schema is created using the Property functions). Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-HeaderSchemas"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#-name","text":"The reference Name of the response. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/Add-PodeOAComponentResponse/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/","text":"Add-PodeOAComponentSchema SYNOPSIS Adds a reusable component for a request body. SYNTAX Add-PodeOAComponentSchema [-Name] <String> [-Schema] <Hashtable> [<CommonParameters>] DESCRIPTION Adds a reusable component for a request body. EXAMPLES EXAMPLE 1 Add-PodeOAComponentSchema -Name 'UserIdSchema' -Schema (New-PodeOAIntProperty -Name 'userId' -Object) PARAMETERS -Name The reference Name of the schema. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Schema The Schema definition (the schema is created using the Property functions). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeOAComponentSchema"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#add-podeoacomponentschema","text":"","title":"Add-PodeOAComponentSchema"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#synopsis","text":"Adds a reusable component for a request body.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#syntax","text":"Add-PodeOAComponentSchema [-Name] <String> [-Schema] <Hashtable> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#description","text":"Adds a reusable component for a request body.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#example-1","text":"Add-PodeOAComponentSchema -Name 'UserIdSchema' -Schema (New-PodeOAIntProperty -Name 'userId' -Object)","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#-name","text":"The reference Name of the schema. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#-schema","text":"The Schema definition (the schema is created using the Property functions). Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Schema"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/Add-PodeOAComponentSchema/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/Add-PodeOAResponse/","text":"Add-PodeOAResponse SYNOPSIS Adds a response definition to the supplied route. SYNTAX Schema (Default) Add-PodeOAResponse -Route <Hashtable[]> -StatusCode <Int32> [-ContentSchemas <Hashtable>] [-HeaderSchemas <Hashtable>] [-Description <String>] [-Default] [-PassThru] [<CommonParameters>] Reference Add-PodeOAResponse -Route <Hashtable[]> -StatusCode <Int32> -Reference <String> [-Default] [-PassThru] [<CommonParameters>] DESCRIPTION Adds a response definition to the supplied route. EXAMPLES EXAMPLE 1 Add-PodeRoute -PassThru | Add-PodeOAResponse -StatusCode 200 -ContentSchemas @{ 'application/json' = (New-PodeOAIntProperty -Name 'userId' -Object) } EXAMPLE 2 Add-PodeRoute -PassThru | Add-PodeOAResponse -StatusCode 200 -ContentSchemas @{ 'application/json' = 'UserIdSchema' } EXAMPLE 3 Add-PodeRoute -PassThru | Add-PodeOAResponse -StatusCode 200 -Reference 'OKResponse' PARAMETERS -ContentSchemas The content-types and schema the response returns (the schema is created using the Property functions). Type : Hashtable Parameter Sets : Schema Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Default If supplied, the response will be used as a default response - this overrides the StatusCode supplied. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Description A Description of the response. (Default: the HTTP StatusCode description) Type : String Parameter Sets : Schema Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -HeaderSchemas The header name and schema the response returns (the schema is created using the Property functions). Type : Hashtable Parameter Sets : Schema Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -PassThru If supplied, the route passed in will be returned for further chaining. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Reference A Reference Name of an existing component response to use. Type : String Parameter Sets : Reference Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Route The route to add the response definition, usually from -PassThru on Add-PodeRoute. Type : Hashtable[] Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -StatusCode The HTTP StatusCode for the response. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeOAResponse"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#add-podeoaresponse","text":"","title":"Add-PodeOAResponse"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#synopsis","text":"Adds a response definition to the supplied route.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#schema-default","text":"Add-PodeOAResponse -Route <Hashtable[]> -StatusCode <Int32> [-ContentSchemas <Hashtable>] [-HeaderSchemas <Hashtable>] [-Description <String>] [-Default] [-PassThru] [<CommonParameters>]","title":"Schema (Default)"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#reference","text":"Add-PodeOAResponse -Route <Hashtable[]> -StatusCode <Int32> -Reference <String> [-Default] [-PassThru] [<CommonParameters>]","title":"Reference"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#description","text":"Adds a response definition to the supplied route.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#example-1","text":"Add-PodeRoute -PassThru | Add-PodeOAResponse -StatusCode 200 -ContentSchemas @{ 'application/json' = (New-PodeOAIntProperty -Name 'userId' -Object) }","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#example-2","text":"Add-PodeRoute -PassThru | Add-PodeOAResponse -StatusCode 200 -ContentSchemas @{ 'application/json' = 'UserIdSchema' }","title":"EXAMPLE 2"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#example-3","text":"Add-PodeRoute -PassThru | Add-PodeOAResponse -StatusCode 200 -Reference 'OKResponse'","title":"EXAMPLE 3"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#-contentschemas","text":"The content-types and schema the response returns (the schema is created using the Property functions). Type : Hashtable Parameter Sets : Schema Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ContentSchemas"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#-default","text":"If supplied, the response will be used as a default response - this overrides the StatusCode supplied. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Default"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#-description","text":"A Description of the response. (Default: the HTTP StatusCode description) Type : String Parameter Sets : Schema Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#-headerschemas","text":"The header name and schema the response returns (the schema is created using the Property functions). Type : Hashtable Parameter Sets : Schema Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-HeaderSchemas"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#-passthru","text":"If supplied, the route passed in will be returned for further chaining. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-PassThru"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#-reference","text":"A Reference Name of an existing component response to use. Type : String Parameter Sets : Reference Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Reference"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#-route","text":"The route to add the response definition, usually from -PassThru on Add-PodeRoute. Type : Hashtable[] Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Route"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#-statuscode","text":"The HTTP StatusCode for the response. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-StatusCode"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/Add-PodeOAResponse/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/","text":"ConvertTo-PodeOAParameter SYNOPSIS Converts an OpenAPI property into a Request Parameter. SYNTAX Reference (Default) ConvertTo-PodeOAParameter -Reference <String> [<CommonParameters>] Schema ConvertTo-PodeOAParameter -In <String> -Property <Hashtable> [<CommonParameters>] DESCRIPTION Converts an OpenAPI property (such as from New-PodeOAIntProperty) into a Request Parameter. EXAMPLES EXAMPLE 1 New-PodeOAIntProperty -Name 'userId' | ConvertTo-PodeOAParameter -In Query EXAMPLE 2 ConvertTo-PodeOAParameter -Reference 'UserIdParam' PARAMETERS -In Where in the Request can the parameter be found? Type : String Parameter Sets : Schema Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Property The Property that need converting (such as from New-PodeOAIntProperty). Type : Hashtable Parameter Sets : Schema Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Reference The name of an existing component parameter to be reused. Type : String Parameter Sets : Reference Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"ConvertTo-PodeOAParameter"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#convertto-podeoaparameter","text":"","title":"ConvertTo-PodeOAParameter"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#synopsis","text":"Converts an OpenAPI property into a Request Parameter.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#reference-default","text":"ConvertTo-PodeOAParameter -Reference <String> [<CommonParameters>]","title":"Reference (Default)"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#schema","text":"ConvertTo-PodeOAParameter -In <String> -Property <Hashtable> [<CommonParameters>]","title":"Schema"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#description","text":"Converts an OpenAPI property (such as from New-PodeOAIntProperty) into a Request Parameter.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#example-1","text":"New-PodeOAIntProperty -Name 'userId' | ConvertTo-PodeOAParameter -In Query","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#example-2","text":"ConvertTo-PodeOAParameter -Reference 'UserIdParam'","title":"EXAMPLE 2"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#-in","text":"Where in the Request can the parameter be found? Type : String Parameter Sets : Schema Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-In"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#-property","text":"The Property that need converting (such as from New-PodeOAIntProperty). Type : Hashtable Parameter Sets : Schema Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Property"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#-reference","text":"The name of an existing component parameter to be reused. Type : String Parameter Sets : Reference Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Reference"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/ConvertTo-PodeOAParameter/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/","text":"Enable-PodeOpenApi SYNOPSIS Enables the OpenAPI default route in Pode. SYNTAX Enable-PodeOpenApi [[-Path] <String>] [-Title] <String> [[-Version] <String>] [[-Description] <String>] [[-RouteFilter] <String>] [[-Middleware] <Object[]>] [-RestrictRoutes] [<CommonParameters>] DESCRIPTION Enables the OpenAPI default route in Pode, as well as setting up details like Title and API Version. EXAMPLES EXAMPLE 1 Enable-PodeOpenApi -Title 'My API' -Version '1.0.0' -RouteFilter '/api/*' EXAMPLE 2 Enable-PodeOpenApi -Title 'My API' -Version '1.0.0' -RouteFilter '/api/*' -RestrictRoutes EXAMPLE 3 Enable-PodeOpenApi -Path '/docs/openapi' -Title 'My API' -Version '1.0.0' PARAMETERS -Description A Description of the API. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Middleware Like normal Routes, an array of Middleware that will be applied to the route. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path An optional custom route path to access the OpenAPI definition. (Default: /openapi) Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : /openapi Accept pipeline input : False Accept wildcard characters : False -RestrictRoutes If supplied, only routes that are available on the Requests URI will be used to generate the OpenAPI definition. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -RouteFilter An optional route filter for routes that should be included in the definition. (Default: /*) Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : /* Accept pipeline input : False Accept wildcard characters : False -Title The Title of the API. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Version The Version of the API. (Default: 0.0.0) Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : 0.0.0 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Enable-PodeOpenApi"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#enable-podeopenapi","text":"","title":"Enable-PodeOpenApi"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#synopsis","text":"Enables the OpenAPI default route in Pode.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#syntax","text":"Enable-PodeOpenApi [[-Path] <String>] [-Title] <String> [[-Version] <String>] [[-Description] <String>] [[-RouteFilter] <String>] [[-Middleware] <Object[]>] [-RestrictRoutes] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#description","text":"Enables the OpenAPI default route in Pode, as well as setting up details like Title and API Version.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#example-1","text":"Enable-PodeOpenApi -Title 'My API' -Version '1.0.0' -RouteFilter '/api/*'","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#example-2","text":"Enable-PodeOpenApi -Title 'My API' -Version '1.0.0' -RouteFilter '/api/*' -RestrictRoutes","title":"EXAMPLE 2"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#example-3","text":"Enable-PodeOpenApi -Path '/docs/openapi' -Title 'My API' -Version '1.0.0'","title":"EXAMPLE 3"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#-description","text":"A Description of the API. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#-middleware","text":"Like normal Routes, an array of Middleware that will be applied to the route. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#-path","text":"An optional custom route path to access the OpenAPI definition. (Default: /openapi) Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : /openapi Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#-restrictroutes","text":"If supplied, only routes that are available on the Requests URI will be used to generate the OpenAPI definition. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-RestrictRoutes"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#-routefilter","text":"An optional route filter for routes that should be included in the definition. (Default: /*) Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : /* Accept pipeline input : False Accept wildcard characters : False","title":"-RouteFilter"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#-title","text":"The Title of the API. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Title"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#-version","text":"The Version of the API. (Default: 0.0.0) Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : 0.0.0 Accept pipeline input : False Accept wildcard characters : False","title":"-Version"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/Enable-PodeOpenApi/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/","text":"Enable-PodeOpenApiViewer SYNOPSIS Adds a route that enables a viewer to display OpenAPI docs, such as Swagger or ReDoc. SYNTAX Enable-PodeOpenApiViewer [-Type] <String> [[-Path] <String>] [[-OpenApiUrl] <String>] [[-Middleware] <Object[]>] [[-Title] <String>] [-DarkMode] [<CommonParameters>] DESCRIPTION Adds a route that enables a viewer to display OpenAPI docs, such as Swagger or ReDoc. EXAMPLES EXAMPLE 1 Enable-PodeOpenApiViewer -Type Swagger -DarkMode EXAMPLE 2 Enable-PodeOpenApiViewer -Type ReDoc -Title 'Some Title' -OpenApi 'http://some-url/openapi' PARAMETERS -DarkMode If supplied, the page will be rendered using a dark theme (this is not supported for all viewers). Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Middleware Like normal Routes, an array of Middleware that will be applied. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -OpenApiUrl The URL where the OpenAPI definition can be retrieved. (Default is the OpenAPI path from Enable-PodeOpenApi) Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The route Path where the docs can be accessed. (Default: \"/$Type\") Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Title The title of the web page. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -Type The Type of OpenAPI viewer to use. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Enable-PodeOpenApiViewer"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#enable-podeopenapiviewer","text":"","title":"Enable-PodeOpenApiViewer"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#synopsis","text":"Adds a route that enables a viewer to display OpenAPI docs, such as Swagger or ReDoc.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#syntax","text":"Enable-PodeOpenApiViewer [-Type] <String> [[-Path] <String>] [[-OpenApiUrl] <String>] [[-Middleware] <Object[]>] [[-Title] <String>] [-DarkMode] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#description","text":"Adds a route that enables a viewer to display OpenAPI docs, such as Swagger or ReDoc.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#example-1","text":"Enable-PodeOpenApiViewer -Type Swagger -DarkMode","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#example-2","text":"Enable-PodeOpenApiViewer -Type ReDoc -Title 'Some Title' -OpenApi 'http://some-url/openapi'","title":"EXAMPLE 2"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#-darkmode","text":"If supplied, the page will be rendered using a dark theme (this is not supported for all viewers). Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-DarkMode"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#-middleware","text":"Like normal Routes, an array of Middleware that will be applied. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#-openapiurl","text":"The URL where the OpenAPI definition can be retrieved. (Default is the OpenAPI path from Enable-PodeOpenApi) Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-OpenApiUrl"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#-path","text":"The route Path where the docs can be accessed. (Default: \"/$Type\") Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#-title","text":"The title of the web page. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Title"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#-type","text":"The Type of OpenAPI viewer to use. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/Enable-PodeOpenApiViewer/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/","text":"Get-PodeOpenApiDefinition SYNOPSIS Gets the OpenAPI definition. SYNTAX Get-PodeOpenApiDefinition [[-Title] <String>] [[-Version] <String>] [[-Description] <String>] [[-RouteFilter] <String>] [-RestrictRoutes] [<CommonParameters>] DESCRIPTION Gets the OpenAPI definition for custom use in routes, or other functions. EXAMPLES EXAMPLE 1 $def = Get-PodeOpenApiDefinition -RouteFilter '/api/*' PARAMETERS -Description A Description of the API. (Default: the description supplied into Enable-PodeOpenApi) Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -RestrictRoutes If supplied, only routes that are available on the Requests URI will be used to generate the OpenAPI definition. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -RouteFilter An optional route filter for routes that should be included in the definition. (Default: /*) Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : /* Accept pipeline input : False Accept wildcard characters : False -Title The Title of the API. (Default: the title supplied in Enable-PodeOpenApi) Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Version The Version of the API. (Default: the version supplied in Enable-PodeOpenApi) Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeOpenApiDefinition"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#get-podeopenapidefinition","text":"","title":"Get-PodeOpenApiDefinition"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#synopsis","text":"Gets the OpenAPI definition.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#syntax","text":"Get-PodeOpenApiDefinition [[-Title] <String>] [[-Version] <String>] [[-Description] <String>] [[-RouteFilter] <String>] [-RestrictRoutes] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#description","text":"Gets the OpenAPI definition for custom use in routes, or other functions.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#example-1","text":"$def = Get-PodeOpenApiDefinition -RouteFilter '/api/*'","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#-description","text":"A Description of the API. (Default: the description supplied into Enable-PodeOpenApi) Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#-restrictroutes","text":"If supplied, only routes that are available on the Requests URI will be used to generate the OpenAPI definition. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-RestrictRoutes"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#-routefilter","text":"An optional route filter for routes that should be included in the definition. (Default: /*) Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : /* Accept pipeline input : False Accept wildcard characters : False","title":"-RouteFilter"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#-title","text":"The Title of the API. (Default: the title supplied in Enable-PodeOpenApi) Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Title"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#-version","text":"The Version of the API. (Default: the version supplied in Enable-PodeOpenApi) Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Version"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/Get-PodeOpenApiDefinition/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/","text":"New-PodeOABoolProperty SYNOPSIS Creates a new OpenAPI boolean property. SYNTAX New-PodeOABoolProperty [[-Name] <String>] [[-Default] <Boolean>] [[-Description] <String>] [[-Enum] <Boolean[]>] [-Required] [-Deprecated] [-Array] [-Object] [<CommonParameters>] DESCRIPTION Creates a new OpenAPI boolean property, for Schemas or Parameters. EXAMPLES EXAMPLE 1 New-PodeOABoolProperty -Name 'enabled' -Required PARAMETERS -Array If supplied, the boolean will be treated as an array of booleans. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Default The default value of the property. (Default: $false) Type : Boolean Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : False Accept pipeline input : False Accept wildcard characters : False -Deprecated If supplied, the object will be treated as Deprecated where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Description A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Enum An optional array of values that this property can only be set to. Type : Boolean[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Object If supplied, the boolean will be automatically wrapped in an object. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Required If supplied, the object will be treated as Required where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"New-PodeOABoolProperty"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#new-podeoaboolproperty","text":"","title":"New-PodeOABoolProperty"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#synopsis","text":"Creates a new OpenAPI boolean property.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#syntax","text":"New-PodeOABoolProperty [[-Name] <String>] [[-Default] <Boolean>] [[-Description] <String>] [[-Enum] <Boolean[]>] [-Required] [-Deprecated] [-Array] [-Object] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#description","text":"Creates a new OpenAPI boolean property, for Schemas or Parameters.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#example-1","text":"New-PodeOABoolProperty -Name 'enabled' -Required","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#-array","text":"If supplied, the boolean will be treated as an array of booleans. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Array"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#-default","text":"The default value of the property. (Default: $false) Type : Boolean Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Default"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#-deprecated","text":"If supplied, the object will be treated as Deprecated where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Deprecated"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#-description","text":"A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#-enum","text":"An optional array of values that this property can only be set to. Type : Boolean[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Enum"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#-name","text":"The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#-object","text":"If supplied, the boolean will be automatically wrapped in an object. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Object"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#-required","text":"If supplied, the object will be treated as Required where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Required"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/New-PodeOABoolProperty/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/","text":"New-PodeOAIntProperty SYNOPSIS Creates a new OpenAPI integer property. SYNTAX New-PodeOAIntProperty [[-Name] <String>] [[-Format] <String>] [[-Default] <Int32>] [[-Minimum] <Int32>] [[-Maximum] <Int32>] [[-MultiplesOf] <Int32>] [[-Description] <String>] [[-Enum] <Int32[]>] [-Required] [-Deprecated] [-Array] [-Object] [<CommonParameters>] DESCRIPTION Creates a new OpenAPI integer property, for Schemas or Parameters. EXAMPLES EXAMPLE 1 New-PodeOANumberProperty -Name 'age' -Required PARAMETERS -Array If supplied, the integer will be treated as an array of integers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Default The default value of the property. (Default: 0) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Deprecated If supplied, the object will be treated as Deprecated where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Description A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False -Enum An optional array of values that this property can only be set to. Type : Int32[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False -Format The inbuilt OpenAPI Format of the integer. (Default: Any) Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Maximum The maximum value of the integer. (Default: Int.Max) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : 2147483647 Accept pipeline input : False Accept wildcard characters : False -Minimum The minimum value of the integer. (Default: Int.Min) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : -2147483648 Accept pipeline input : False Accept wildcard characters : False -MultiplesOf The integer must be in multiples of the supplied value. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Name The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Object If supplied, the integer will be automatically wrapped in an object. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Required If supplied, the object will be treated as Required where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"New-PodeOAIntProperty"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#new-podeoaintproperty","text":"","title":"New-PodeOAIntProperty"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#synopsis","text":"Creates a new OpenAPI integer property.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#syntax","text":"New-PodeOAIntProperty [[-Name] <String>] [[-Format] <String>] [[-Default] <Int32>] [[-Minimum] <Int32>] [[-Maximum] <Int32>] [[-MultiplesOf] <Int32>] [[-Description] <String>] [[-Enum] <Int32[]>] [-Required] [-Deprecated] [-Array] [-Object] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#description","text":"Creates a new OpenAPI integer property, for Schemas or Parameters.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#example-1","text":"New-PodeOANumberProperty -Name 'age' -Required","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-array","text":"If supplied, the integer will be treated as an array of integers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Array"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-default","text":"The default value of the property. (Default: 0) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Default"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-deprecated","text":"If supplied, the object will be treated as Deprecated where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Deprecated"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-description","text":"A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-enum","text":"An optional array of values that this property can only be set to. Type : Int32[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Enum"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-format","text":"The inbuilt OpenAPI Format of the integer. (Default: Any) Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Format"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-maximum","text":"The maximum value of the integer. (Default: Int.Max) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : 2147483647 Accept pipeline input : False Accept wildcard characters : False","title":"-Maximum"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-minimum","text":"The minimum value of the integer. (Default: Int.Min) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : -2147483648 Accept pipeline input : False Accept wildcard characters : False","title":"-Minimum"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-multiplesof","text":"The integer must be in multiples of the supplied value. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-MultiplesOf"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-name","text":"The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-object","text":"If supplied, the integer will be automatically wrapped in an object. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Object"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#-required","text":"If supplied, the object will be treated as Required where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Required"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/New-PodeOAIntProperty/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/","text":"New-PodeOANumberProperty SYNOPSIS Creates a new OpenAPI number property. SYNTAX New-PodeOANumberProperty [[-Name] <String>] [[-Format] <String>] [[-Default] <Double>] [[-Minimum] <Double>] [[-Maximum] <Double>] [[-MultiplesOf] <Double>] [[-Description] <String>] [[-Enum] <Double[]>] [-Required] [-Deprecated] [-Array] [-Object] [<CommonParameters>] DESCRIPTION Creates a new OpenAPI number property, for Schemas or Parameters. EXAMPLES EXAMPLE 1 New-PodeOANumberProperty -Name 'gravity' -Default 9.8 PARAMETERS -Array If supplied, the number will be treated as an array of numbers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Default The default value of the property. (Default: 0) Type : Double Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Deprecated If supplied, the object will be treated as Deprecated where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Description A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False -Enum An optional array of values that this property can only be set to. Type : Double[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False -Format The inbuilt OpenAPI Format of the number. (Default: Any) Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Maximum The maximum value of the number. (Default: Double.Max) Type : Double Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : 1.79769313486232E+308 Accept pipeline input : False Accept wildcard characters : False -Minimum The minimum value of the number. (Default: Double.Min) Type : Double Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : -1.79769313486232E+308 Accept pipeline input : False Accept wildcard characters : False -MultiplesOf The number must be in multiples of the supplied value. Type : Double Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Name The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Object If supplied, the number will be automatically wrapped in an object. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Required If supplied, the object will be treated as Required where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"New-PodeOANumberProperty"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#new-podeoanumberproperty","text":"","title":"New-PodeOANumberProperty"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#synopsis","text":"Creates a new OpenAPI number property.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#syntax","text":"New-PodeOANumberProperty [[-Name] <String>] [[-Format] <String>] [[-Default] <Double>] [[-Minimum] <Double>] [[-Maximum] <Double>] [[-MultiplesOf] <Double>] [[-Description] <String>] [[-Enum] <Double[]>] [-Required] [-Deprecated] [-Array] [-Object] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#description","text":"Creates a new OpenAPI number property, for Schemas or Parameters.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#example-1","text":"New-PodeOANumberProperty -Name 'gravity' -Default 9.8","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-array","text":"If supplied, the number will be treated as an array of numbers. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Array"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-default","text":"The default value of the property. (Default: 0) Type : Double Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Default"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-deprecated","text":"If supplied, the object will be treated as Deprecated where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Deprecated"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-description","text":"A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-enum","text":"An optional array of values that this property can only be set to. Type : Double[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Enum"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-format","text":"The inbuilt OpenAPI Format of the number. (Default: Any) Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Format"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-maximum","text":"The maximum value of the number. (Default: Double.Max) Type : Double Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : 1.79769313486232E+308 Accept pipeline input : False Accept wildcard characters : False","title":"-Maximum"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-minimum","text":"The minimum value of the number. (Default: Double.Min) Type : Double Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : -1.79769313486232E+308 Accept pipeline input : False Accept wildcard characters : False","title":"-Minimum"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-multiplesof","text":"The number must be in multiples of the supplied value. Type : Double Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-MultiplesOf"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-name","text":"The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-object","text":"If supplied, the number will be automatically wrapped in an object. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Object"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#-required","text":"If supplied, the object will be treated as Required where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Required"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/New-PodeOANumberProperty/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/","text":"New-PodeOAObjectProperty SYNOPSIS Creates a new OpenAPI object property from other properties. SYNTAX New-PodeOAObjectProperty [[-Name] <String>] [-Properties] <Hashtable[]> [[-Description] <String>] [-Required] [-Deprecated] [-Array] [<CommonParameters>] DESCRIPTION Creates a new OpenAPI object property from other properties, for Schemas or Parameters. EXAMPLES EXAMPLE 1 ') PARAMETERS -Array If supplied, the object will be treated as an array of objects. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Deprecated If supplied, the object will be treated as Deprecated where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Description A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Properties An array of other int/string/etc properties wrap up as an object. Type : Hashtable[] Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Required If supplied, the object will be treated as Required where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"New-PodeOAObjectProperty"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#new-podeoaobjectproperty","text":"","title":"New-PodeOAObjectProperty"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#synopsis","text":"Creates a new OpenAPI object property from other properties.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#syntax","text":"New-PodeOAObjectProperty [[-Name] <String>] [-Properties] <Hashtable[]> [[-Description] <String>] [-Required] [-Deprecated] [-Array] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#description","text":"Creates a new OpenAPI object property from other properties, for Schemas or Parameters.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#example-1","text":"')","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#-array","text":"If supplied, the object will be treated as an array of objects. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Array"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#-deprecated","text":"If supplied, the object will be treated as Deprecated where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Deprecated"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#-description","text":"A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#-name","text":"The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#-properties","text":"An array of other int/string/etc properties wrap up as an object. Type : Hashtable[] Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Properties"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#-required","text":"If supplied, the object will be treated as Required where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Required"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/New-PodeOAObjectProperty/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/New-PodeOARequestBody/","text":"New-PodeOARequestBody SYNOPSIS Creates a Request Body definition for routes. SYNTAX Schema (Default) New-PodeOARequestBody -ContentSchemas <Hashtable> [-Description <String>] [-Required] [<CommonParameters>] Reference New-PodeOARequestBody -Reference <String> [<CommonParameters>] DESCRIPTION Creates a Request Body definition for routes from the supplied content-types and schemas. EXAMPLES EXAMPLE 1 New-PodeOARequestBody -ContentSchemas @{ 'application/json' = (New-PodeOAIntProperty -Name 'userId' -Object) } EXAMPLE 2 New-PodeOARequestBody -ContentSchemas @{ 'application/json' = 'UserIdSchema' } EXAMPLE 3 New-PodeOARequestBody -Reference 'UserIdBody' PARAMETERS -ContentSchemas The content-types and schema the request body accepts (the schema is created using the Property functions). Type : Hashtable Parameter Sets : Schema Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Description A Description of the request body. Type : String Parameter Sets : Schema Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Reference A reference name from an existing component request body. Type : String Parameter Sets : Reference Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Required If supplied, the request body will be flagged as required. Type : SwitchParameter Parameter Sets : Schema Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"New-PodeOARequestBody"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#new-podeoarequestbody","text":"","title":"New-PodeOARequestBody"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#synopsis","text":"Creates a Request Body definition for routes.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#schema-default","text":"New-PodeOARequestBody -ContentSchemas <Hashtable> [-Description <String>] [-Required] [<CommonParameters>]","title":"Schema (Default)"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#reference","text":"New-PodeOARequestBody -Reference <String> [<CommonParameters>]","title":"Reference"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#description","text":"Creates a Request Body definition for routes from the supplied content-types and schemas.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#example-1","text":"New-PodeOARequestBody -ContentSchemas @{ 'application/json' = (New-PodeOAIntProperty -Name 'userId' -Object) }","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#example-2","text":"New-PodeOARequestBody -ContentSchemas @{ 'application/json' = 'UserIdSchema' }","title":"EXAMPLE 2"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#example-3","text":"New-PodeOARequestBody -Reference 'UserIdBody'","title":"EXAMPLE 3"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#-contentschemas","text":"The content-types and schema the request body accepts (the schema is created using the Property functions). Type : Hashtable Parameter Sets : Schema Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ContentSchemas"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#-description","text":"A Description of the request body. Type : String Parameter Sets : Schema Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#-reference","text":"A reference name from an existing component request body. Type : String Parameter Sets : Reference Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Reference"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#-required","text":"If supplied, the request body will be flagged as required. Type : SwitchParameter Parameter Sets : Schema Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Required"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/New-PodeOARequestBody/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/","text":"New-PodeOASchemaProperty SYNOPSIS Creates a OpenAPI schema reference property. SYNTAX New-PodeOASchemaProperty [[-Name] <String>] [-Reference] <String> [[-Description] <String>] [-Array] [<CommonParameters>] DESCRIPTION Creates a new OpenAPI schema reference from another OpenAPI schema. EXAMPLES EXAMPLE 1 New-PodeOASchemaProperty -Name 'Config' -ComponentSchema \"MyConfigSchema\" PARAMETERS -Array If supplied, the schema reference will be treated as an array. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Description A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Reference An component schema name. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"New-PodeOASchemaProperty"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#new-podeoaschemaproperty","text":"","title":"New-PodeOASchemaProperty"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#synopsis","text":"Creates a OpenAPI schema reference property.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#syntax","text":"New-PodeOASchemaProperty [[-Name] <String>] [-Reference] <String> [[-Description] <String>] [-Array] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#description","text":"Creates a new OpenAPI schema reference from another OpenAPI schema.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#example-1","text":"New-PodeOASchemaProperty -Name 'Config' -ComponentSchema \"MyConfigSchema\"","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#-array","text":"If supplied, the schema reference will be treated as an array. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Array"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#-description","text":"A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#-name","text":"The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#-reference","text":"An component schema name. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Reference"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/New-PodeOASchemaProperty/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/","text":"New-PodeOAStringProperty SYNOPSIS Creates a new OpenAPI string property. SYNTAX Inbuilt (Default) New-PodeOAStringProperty [-Name <String>] [-Format <String>] [-Default <String>] [-MinLength <Int32>] [-MaxLength <Int32>] [-Pattern <String>] [-Description <String>] [-Enum <String[]>] [-Required] [-Deprecated] [-Array] [-Object] [<CommonParameters>] Custom New-PodeOAStringProperty [-Name <String>] [-CustomFormat <String>] [-Default <String>] [-MinLength <Int32>] [-MaxLength <Int32>] [-Pattern <String>] [-Description <String>] [-Enum <String[]>] [-Required] [-Deprecated] [-Array] [-Object] [<CommonParameters>] DESCRIPTION Creates a new OpenAPI string property, for Schemas or Parameters. EXAMPLES EXAMPLE 1 New-PodeOAStringProperty -Name 'userType' -Default 'admin' EXAMPLE 2 New-PodeOAStringProperty -Name 'password' -Format Password PARAMETERS -Array If supplied, the string will be treated as an array of strings. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -CustomFormat The name of a custom OpenAPI Format of the string. (Default: None) Type : String Parameter Sets : Custom Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Default The default value of the property. (Default: $null) Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Deprecated If supplied, the object will be treated as Deprecated where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Description A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Enum An optional array of values that this property can only be set to. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Format The inbuilt OpenAPI Format of the string. (Default: Any) Type : String Parameter Sets : Inbuilt Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -MaxLength The maximum length of the string. (Default: Int.Max) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 2147483647 Accept pipeline input : False Accept wildcard characters : False -MinLength The minimum length of the string. (Default: Int.Min) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : -2147483648 Accept pipeline input : False Accept wildcard characters : False -Name The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Object If supplied, the string will be automatically wrapped in an object. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Pattern A Regex pattern that the string must match. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Required If supplied, the object will be treated as Required where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"New-PodeOAStringProperty"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#new-podeoastringproperty","text":"","title":"New-PodeOAStringProperty"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#synopsis","text":"Creates a new OpenAPI string property.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#inbuilt-default","text":"New-PodeOAStringProperty [-Name <String>] [-Format <String>] [-Default <String>] [-MinLength <Int32>] [-MaxLength <Int32>] [-Pattern <String>] [-Description <String>] [-Enum <String[]>] [-Required] [-Deprecated] [-Array] [-Object] [<CommonParameters>]","title":"Inbuilt (Default)"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#custom","text":"New-PodeOAStringProperty [-Name <String>] [-CustomFormat <String>] [-Default <String>] [-MinLength <Int32>] [-MaxLength <Int32>] [-Pattern <String>] [-Description <String>] [-Enum <String[]>] [-Required] [-Deprecated] [-Array] [-Object] [<CommonParameters>]","title":"Custom"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#description","text":"Creates a new OpenAPI string property, for Schemas or Parameters.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#example-1","text":"New-PodeOAStringProperty -Name 'userType' -Default 'admin'","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#example-2","text":"New-PodeOAStringProperty -Name 'password' -Format Password","title":"EXAMPLE 2"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-array","text":"If supplied, the string will be treated as an array of strings. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Array"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-customformat","text":"The name of a custom OpenAPI Format of the string. (Default: None) Type : String Parameter Sets : Custom Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-CustomFormat"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-default","text":"The default value of the property. (Default: $null) Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Default"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-deprecated","text":"If supplied, the object will be treated as Deprecated where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Deprecated"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-description","text":"A Description of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-enum","text":"An optional array of values that this property can only be set to. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Enum"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-format","text":"The inbuilt OpenAPI Format of the string. (Default: Any) Type : String Parameter Sets : Inbuilt Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Format"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-maxlength","text":"The maximum length of the string. (Default: Int.Max) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 2147483647 Accept pipeline input : False Accept wildcard characters : False","title":"-MaxLength"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-minlength","text":"The minimum length of the string. (Default: Int.Min) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : -2147483648 Accept pipeline input : False Accept wildcard characters : False","title":"-MinLength"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-name","text":"The Name of the property. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-object","text":"If supplied, the string will be automatically wrapped in an object. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Object"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-pattern","text":"A Regex pattern that the string must match. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Pattern"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#-required","text":"If supplied, the object will be treated as Required where supported. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Required"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/New-PodeOAStringProperty/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/","text":"Remove-PodeOAResponse SYNOPSIS Remove a response definition from the supplied route. SYNTAX Remove-PodeOAResponse [-Route] <Hashtable[]> [-StatusCode] <Int32> [-Default] [-PassThru] [<CommonParameters>] DESCRIPTION Remove a response definition from the supplied route. EXAMPLES EXAMPLE 1 Add-PodeRoute -PassThru | Remove-PodeOAResponse -StatusCode 200 EXAMPLE 2 Add-PodeRoute -PassThru | Remove-PodeOAResponse -StatusCode 201 -Default PARAMETERS -Default If supplied, the response will be used as a default response - this overrides the StatusCode supplied. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -PassThru If supplied, the route passed in will be returned for further chaining. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Route The route to remove the response definition, usually from -PassThru on Add-PodeRoute. Type : Hashtable[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -StatusCode The HTTP StatusCode for the response to remove. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : 0 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeOAResponse"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#remove-podeoaresponse","text":"","title":"Remove-PodeOAResponse"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#synopsis","text":"Remove a response definition from the supplied route.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#syntax","text":"Remove-PodeOAResponse [-Route] <Hashtable[]> [-StatusCode] <Int32> [-Default] [-PassThru] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#description","text":"Remove a response definition from the supplied route.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#example-1","text":"Add-PodeRoute -PassThru | Remove-PodeOAResponse -StatusCode 200","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#example-2","text":"Add-PodeRoute -PassThru | Remove-PodeOAResponse -StatusCode 201 -Default","title":"EXAMPLE 2"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#-default","text":"If supplied, the response will be used as a default response - this overrides the StatusCode supplied. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Default"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#-passthru","text":"If supplied, the route passed in will be returned for further chaining. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-PassThru"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#-route","text":"The route to remove the response definition, usually from -PassThru on Add-PodeRoute. Type : Hashtable[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Route"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#-statuscode","text":"The HTTP StatusCode for the response to remove. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-StatusCode"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/Remove-PodeOAResponse/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/Set-PodeOARequest/","text":"Set-PodeOARequest SYNOPSIS Sets the definition of a request for a route. SYNTAX Set-PodeOARequest [-Route] <Hashtable[]> [[-Parameters] <Hashtable[]>] [[-RequestBody] <Hashtable>] [-PassThru] [<CommonParameters>] DESCRIPTION Sets the definition of a request for a route. EXAMPLES EXAMPLE 1 Add-PodeRoute -PassThru | Set-PodeOARequest -RequestBody (New-PodeOARequestBody -Reference 'UserIdBody') PARAMETERS -Parameters The Parameter definitions the request uses (from ConvertTo-PodeOAParameter). Type : Hashtable[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -PassThru If supplied, the route passed in will be returned for further chaining. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -RequestBody The Request Body definition the request uses (from New-PodeOARequestBody). Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Route The route to set a request definition, usually from -PassThru on Add-PodeRoute. Type : Hashtable[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeOARequest"},{"location":"Functions/OpenApi/Set-PodeOARequest/#set-podeoarequest","text":"","title":"Set-PodeOARequest"},{"location":"Functions/OpenApi/Set-PodeOARequest/#synopsis","text":"Sets the definition of a request for a route.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/Set-PodeOARequest/#syntax","text":"Set-PodeOARequest [-Route] <Hashtable[]> [[-Parameters] <Hashtable[]>] [[-RequestBody] <Hashtable>] [-PassThru] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/Set-PodeOARequest/#description","text":"Sets the definition of a request for a route.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/Set-PodeOARequest/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/Set-PodeOARequest/#example-1","text":"Add-PodeRoute -PassThru | Set-PodeOARequest -RequestBody (New-PodeOARequestBody -Reference 'UserIdBody')","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/Set-PodeOARequest/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/Set-PodeOARequest/#-parameters","text":"The Parameter definitions the request uses (from ConvertTo-PodeOAParameter). Type : Hashtable[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Parameters"},{"location":"Functions/OpenApi/Set-PodeOARequest/#-passthru","text":"If supplied, the route passed in will be returned for further chaining. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-PassThru"},{"location":"Functions/OpenApi/Set-PodeOARequest/#-requestbody","text":"The Request Body definition the request uses (from New-PodeOARequestBody). Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-RequestBody"},{"location":"Functions/OpenApi/Set-PodeOARequest/#-route","text":"The route to set a request definition, usually from -PassThru on Add-PodeRoute. Type : Hashtable[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Route"},{"location":"Functions/OpenApi/Set-PodeOARequest/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/Set-PodeOARequest/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/Set-PodeOARequest/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/Set-PodeOARequest/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/Set-PodeOARequest/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/","text":"Set-PodeOARouteInfo SYNOPSIS Sets metadate for the supplied route. SYNTAX Set-PodeOARouteInfo [-Route] <Hashtable[]> [[-Summary] <String>] [[-Description] <String>] [[-OperationId] <String>] [[-Tags] <String[]>] [-Deprecated] [-PassThru] [<CommonParameters>] DESCRIPTION Sets metadate for the supplied route, such as Summary and Tags. EXAMPLES EXAMPLE 1 Add-PodeRoute -PassThru | Set-PodeOARouteInfo -Summary 'A quick summary' -Tags 'Admin' PARAMETERS -Deprecated If supplied, the route will be flagged as deprecated. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Description A longer Description of the route. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -OperationId Sets the OperationId of the route. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -PassThru If supplied, the route passed in will be returned for further chaining. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Route The route to update info, usually from -PassThru on Add-PodeRoute. Type : Hashtable[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Summary A quick Summary of the route. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Tags An array of Tags for the route, mostly for grouping. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeOARouteInfo"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#set-podeoarouteinfo","text":"","title":"Set-PodeOARouteInfo"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#synopsis","text":"Sets metadate for the supplied route.","title":"SYNOPSIS"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#syntax","text":"Set-PodeOARouteInfo [-Route] <Hashtable[]> [[-Summary] <String>] [[-Description] <String>] [[-OperationId] <String>] [[-Tags] <String[]>] [-Deprecated] [-PassThru] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#description","text":"Sets metadate for the supplied route, such as Summary and Tags.","title":"DESCRIPTION"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#example-1","text":"Add-PodeRoute -PassThru | Set-PodeOARouteInfo -Summary 'A quick summary' -Tags 'Admin'","title":"EXAMPLE 1"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#-deprecated","text":"If supplied, the route will be flagged as deprecated. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Deprecated"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#-description","text":"A longer Description of the route. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#-operationid","text":"Sets the OperationId of the route. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-OperationId"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#-passthru","text":"If supplied, the route passed in will be returned for further chaining. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-PassThru"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#-route","text":"The route to update info, usually from -PassThru on Add-PodeRoute. Type : Hashtable[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Route"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#-summary","text":"A quick Summary of the route. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Summary"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#-tags","text":"An array of Tags for the route, mostly for grouping. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Tags"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#inputs","text":"","title":"INPUTS"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#notes","text":"","title":"NOTES"},{"location":"Functions/OpenApi/Set-PodeOARouteInfo/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Add-PodeViewFolder/","text":"Add-PodeViewFolder SYNOPSIS Add a custom path that contains additional views. SYNTAX Add-PodeViewFolder [-Name] <String> [-Source] <String> [<CommonParameters>] DESCRIPTION Add a custom path that contains additional views. EXAMPLES EXAMPLE 1 Add-PodeViewFolder -Name 'assets' -Source './assets' PARAMETERS -Name The Name of the views folder. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Source The literal, or relative, path to the directory that contains views. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeViewFolder"},{"location":"Functions/Responses/Add-PodeViewFolder/#add-podeviewfolder","text":"","title":"Add-PodeViewFolder"},{"location":"Functions/Responses/Add-PodeViewFolder/#synopsis","text":"Add a custom path that contains additional views.","title":"SYNOPSIS"},{"location":"Functions/Responses/Add-PodeViewFolder/#syntax","text":"Add-PodeViewFolder [-Name] <String> [-Source] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Responses/Add-PodeViewFolder/#description","text":"Add a custom path that contains additional views.","title":"DESCRIPTION"},{"location":"Functions/Responses/Add-PodeViewFolder/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Add-PodeViewFolder/#example-1","text":"Add-PodeViewFolder -Name 'assets' -Source './assets'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Add-PodeViewFolder/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Add-PodeViewFolder/#-name","text":"The Name of the views folder. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Responses/Add-PodeViewFolder/#-source","text":"The literal, or relative, path to the directory that contains views. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Source"},{"location":"Functions/Responses/Add-PodeViewFolder/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Add-PodeViewFolder/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Add-PodeViewFolder/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Add-PodeViewFolder/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Add-PodeViewFolder/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Close-PodeTcpClient/","text":"Close-PodeTcpClient SYNOPSIS Close an open TCP client connection SYNTAX Close-PodeTcpClient [<CommonParameters>] DESCRIPTION Close an open TCP client connection EXAMPLES EXAMPLE 1 Close-PodeTcpClient PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Close-PodeTcpClient"},{"location":"Functions/Responses/Close-PodeTcpClient/#close-podetcpclient","text":"","title":"Close-PodeTcpClient"},{"location":"Functions/Responses/Close-PodeTcpClient/#synopsis","text":"Close an open TCP client connection","title":"SYNOPSIS"},{"location":"Functions/Responses/Close-PodeTcpClient/#syntax","text":"Close-PodeTcpClient [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Responses/Close-PodeTcpClient/#description","text":"Close an open TCP client connection","title":"DESCRIPTION"},{"location":"Functions/Responses/Close-PodeTcpClient/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Close-PodeTcpClient/#example-1","text":"Close-PodeTcpClient","title":"EXAMPLE 1"},{"location":"Functions/Responses/Close-PodeTcpClient/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Close-PodeTcpClient/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Close-PodeTcpClient/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Close-PodeTcpClient/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Close-PodeTcpClient/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Close-PodeTcpClient/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Move-PodeResponseUrl/","text":"Move-PodeResponseUrl SYNOPSIS Redirecting a user to a new URL. SYNTAX Url (Default) Move-PodeResponseUrl -Url <String> [-Moved] [<CommonParameters>] Endpoint Move-PodeResponseUrl [-EndpointName <String>] [-Moved] [<CommonParameters>] Components Move-PodeResponseUrl [-Port <Int32>] [-Protocol <String>] [-Address <String>] [-Moved] [<CommonParameters>] DESCRIPTION Redirecting a user to a new URL, or the same URL as the Request but a different Protocol - or other components. EXAMPLES EXAMPLE 1 Move-PodeResponseUrl -Url 'https://google.com' EXAMPLE 2 Move-PodeResponseUrl -Url '/about' EXAMPLE 3 Move-PodeResponseUrl -Protocol HTTPS EXAMPLE 4 Move-PodeResponseUrl -Port 9000 -Moved PARAMETERS -Address Change the domain address of the current Request before redirecting. Type : String Parameter Sets : Components Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -EndpointName The Name of an Endpoint to redirect to. Type : String Parameter Sets : Endpoint Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Moved Set the Status Code as \"301 Moved\", rather than \"302 Redirect\". Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Port Change the port of the current Request before redirecting. Type : Int32 Parameter Sets : Components Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Protocol Change the protocol of the current Request before redirecting. Type : String Parameter Sets : Components Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Url Redirect the user to a new URL, or a relative path. Type : String Parameter Sets : Url Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Move-PodeResponseUrl"},{"location":"Functions/Responses/Move-PodeResponseUrl/#move-poderesponseurl","text":"","title":"Move-PodeResponseUrl"},{"location":"Functions/Responses/Move-PodeResponseUrl/#synopsis","text":"Redirecting a user to a new URL.","title":"SYNOPSIS"},{"location":"Functions/Responses/Move-PodeResponseUrl/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Responses/Move-PodeResponseUrl/#url-default","text":"Move-PodeResponseUrl -Url <String> [-Moved] [<CommonParameters>]","title":"Url (Default)"},{"location":"Functions/Responses/Move-PodeResponseUrl/#endpoint","text":"Move-PodeResponseUrl [-EndpointName <String>] [-Moved] [<CommonParameters>]","title":"Endpoint"},{"location":"Functions/Responses/Move-PodeResponseUrl/#components","text":"Move-PodeResponseUrl [-Port <Int32>] [-Protocol <String>] [-Address <String>] [-Moved] [<CommonParameters>]","title":"Components"},{"location":"Functions/Responses/Move-PodeResponseUrl/#description","text":"Redirecting a user to a new URL, or the same URL as the Request but a different Protocol - or other components.","title":"DESCRIPTION"},{"location":"Functions/Responses/Move-PodeResponseUrl/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Move-PodeResponseUrl/#example-1","text":"Move-PodeResponseUrl -Url 'https://google.com'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Move-PodeResponseUrl/#example-2","text":"Move-PodeResponseUrl -Url '/about'","title":"EXAMPLE 2"},{"location":"Functions/Responses/Move-PodeResponseUrl/#example-3","text":"Move-PodeResponseUrl -Protocol HTTPS","title":"EXAMPLE 3"},{"location":"Functions/Responses/Move-PodeResponseUrl/#example-4","text":"Move-PodeResponseUrl -Port 9000 -Moved","title":"EXAMPLE 4"},{"location":"Functions/Responses/Move-PodeResponseUrl/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Move-PodeResponseUrl/#-address","text":"Change the domain address of the current Request before redirecting. Type : String Parameter Sets : Components Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Address"},{"location":"Functions/Responses/Move-PodeResponseUrl/#-endpointname","text":"The Name of an Endpoint to redirect to. Type : String Parameter Sets : Endpoint Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Responses/Move-PodeResponseUrl/#-moved","text":"Set the Status Code as \"301 Moved\", rather than \"302 Redirect\". Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Moved"},{"location":"Functions/Responses/Move-PodeResponseUrl/#-port","text":"Change the port of the current Request before redirecting. Type : Int32 Parameter Sets : Components Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Port"},{"location":"Functions/Responses/Move-PodeResponseUrl/#-protocol","text":"Change the protocol of the current Request before redirecting. Type : String Parameter Sets : Components Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Protocol"},{"location":"Functions/Responses/Move-PodeResponseUrl/#-url","text":"Redirect the user to a new URL, or a relative path. Type : String Parameter Sets : Url Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Url"},{"location":"Functions/Responses/Move-PodeResponseUrl/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Move-PodeResponseUrl/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Move-PodeResponseUrl/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Move-PodeResponseUrl/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Move-PodeResponseUrl/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Read-PodeTcpClient/","text":"Read-PodeTcpClient SYNOPSIS Reads data from a TCP socket stream. SYNTAX default (Default) Read-PodeTcpClient [-Timeout <Int32>] [<CommonParameters>] CheckBytes Read-PodeTcpClient [-Timeout <Int32>] [-CheckBytes <Byte[]>] [<CommonParameters>] CRLF Read-PodeTcpClient [-Timeout <Int32>] [-CRLFMessageEnd] [<CommonParameters>] DESCRIPTION Reads data from a TCP socket stream. EXAMPLES EXAMPLE 1 $data = Read-PodeTcpClient EXAMPLE 2 $data = Read-PodeTcpClient -CRLFMessageEnd PARAMETERS -CheckBytes An optional array of bytes to check at the end of a receievd data stream, to determine if the data is complete. Type : Byte[] Parameter Sets : CheckBytes Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -CRLFMessageEnd If supplied, the CheckBytes will be set to 13 and 10 to make sure a message ends with CR and LF. Type : SwitchParameter Parameter Sets : CRLF Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Timeout An optional Timeout in milliseconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.String NOTES RELATED LINKS","title":"Read-PodeTcpClient"},{"location":"Functions/Responses/Read-PodeTcpClient/#read-podetcpclient","text":"","title":"Read-PodeTcpClient"},{"location":"Functions/Responses/Read-PodeTcpClient/#synopsis","text":"Reads data from a TCP socket stream.","title":"SYNOPSIS"},{"location":"Functions/Responses/Read-PodeTcpClient/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Responses/Read-PodeTcpClient/#default-default","text":"Read-PodeTcpClient [-Timeout <Int32>] [<CommonParameters>]","title":"default (Default)"},{"location":"Functions/Responses/Read-PodeTcpClient/#checkbytes","text":"Read-PodeTcpClient [-Timeout <Int32>] [-CheckBytes <Byte[]>] [<CommonParameters>]","title":"CheckBytes"},{"location":"Functions/Responses/Read-PodeTcpClient/#crlf","text":"Read-PodeTcpClient [-Timeout <Int32>] [-CRLFMessageEnd] [<CommonParameters>]","title":"CRLF"},{"location":"Functions/Responses/Read-PodeTcpClient/#description","text":"Reads data from a TCP socket stream.","title":"DESCRIPTION"},{"location":"Functions/Responses/Read-PodeTcpClient/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Read-PodeTcpClient/#example-1","text":"$data = Read-PodeTcpClient","title":"EXAMPLE 1"},{"location":"Functions/Responses/Read-PodeTcpClient/#example-2","text":"$data = Read-PodeTcpClient -CRLFMessageEnd","title":"EXAMPLE 2"},{"location":"Functions/Responses/Read-PodeTcpClient/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Read-PodeTcpClient/#-checkbytes","text":"An optional array of bytes to check at the end of a receievd data stream, to determine if the data is complete. Type : Byte[] Parameter Sets : CheckBytes Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-CheckBytes"},{"location":"Functions/Responses/Read-PodeTcpClient/#-crlfmessageend","text":"If supplied, the CheckBytes will be set to 13 and 10 to make sure a message ends with CR and LF. Type : SwitchParameter Parameter Sets : CRLF Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-CRLFMessageEnd"},{"location":"Functions/Responses/Read-PodeTcpClient/#-timeout","text":"An optional Timeout in milliseconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Timeout"},{"location":"Functions/Responses/Read-PodeTcpClient/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Read-PodeTcpClient/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Read-PodeTcpClient/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Read-PodeTcpClient/#systemstring","text":"","title":"System.String"},{"location":"Functions/Responses/Read-PodeTcpClient/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Read-PodeTcpClient/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Save-PodeRequestFile/","text":"Save-PodeRequestFile SYNOPSIS Saves an uploaded file on the Request to the File System. SYNTAX Save-PodeRequestFile [-Key] <String> [[-Path] <String>] [<CommonParameters>] DESCRIPTION Saves an uploaded file on the Request to the File System. EXAMPLES EXAMPLE 1 Save-PodeRequestFile -Key 'avatar' EXAMPLE 2 Save-PodeRequestFile -Key 'avatar' -Path 'F:/Images' PARAMETERS -Key The name of the key within the web event's Data HashTable that stores the file's name. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The path to save files. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : . Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Save-PodeRequestFile"},{"location":"Functions/Responses/Save-PodeRequestFile/#save-poderequestfile","text":"","title":"Save-PodeRequestFile"},{"location":"Functions/Responses/Save-PodeRequestFile/#synopsis","text":"Saves an uploaded file on the Request to the File System.","title":"SYNOPSIS"},{"location":"Functions/Responses/Save-PodeRequestFile/#syntax","text":"Save-PodeRequestFile [-Key] <String> [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Responses/Save-PodeRequestFile/#description","text":"Saves an uploaded file on the Request to the File System.","title":"DESCRIPTION"},{"location":"Functions/Responses/Save-PodeRequestFile/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Save-PodeRequestFile/#example-1","text":"Save-PodeRequestFile -Key 'avatar'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Save-PodeRequestFile/#example-2","text":"Save-PodeRequestFile -Key 'avatar' -Path 'F:/Images'","title":"EXAMPLE 2"},{"location":"Functions/Responses/Save-PodeRequestFile/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Save-PodeRequestFile/#-key","text":"The name of the key within the web event's Data HashTable that stores the file's name. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Key"},{"location":"Functions/Responses/Save-PodeRequestFile/#-path","text":"The path to save files. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : . Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Responses/Save-PodeRequestFile/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Save-PodeRequestFile/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Save-PodeRequestFile/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Save-PodeRequestFile/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Save-PodeRequestFile/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Send-PodeSignal/","text":"Send-PodeSignal SYNOPSIS Broadcasts a message to connected WebSocket clients. SYNTAX Send-PodeSignal [[-Value] <Object>] [[-Path] <String>] [[-ClientId] <String>] [[-Depth] <Int32>] [[-Mode] <String>] [-IgnoreEvent] [<CommonParameters>] DESCRIPTION Broadcasts a message to all, or some, connected WebSocket clients. You can specify a path to send messages to, or a specific ClientId. EXAMPLES EXAMPLE 1 Send-PodeSignal -Value @{ Message = 'Hello, world!' } EXAMPLE 2 Send-PodeSignal -Value @{ Data = @(123, 100, 101) } -Path '/response-charts' PARAMETERS -ClientId A specific ClientId of a connected client to send a message. Not currently used. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Depth The Depth to generate the JSON document - the larger this value the worse performance gets. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : 10 Accept pipeline input : False Accept wildcard characters : False -IgnoreEvent If supplied, if a SignalEvent is available it's data, such as path/clientId, will be ignored. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Mode The Mode to broadcast a message: Auto, Broadcast, Direct. (Default: Auto) Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : Auto Accept pipeline input : False Accept wildcard characters : False -Path The Path of connected clients to send the message. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Value A String, PSObject, or HashTable value. For non-string values, they will be converted to JSON. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Send-PodeSignal"},{"location":"Functions/Responses/Send-PodeSignal/#send-podesignal","text":"","title":"Send-PodeSignal"},{"location":"Functions/Responses/Send-PodeSignal/#synopsis","text":"Broadcasts a message to connected WebSocket clients.","title":"SYNOPSIS"},{"location":"Functions/Responses/Send-PodeSignal/#syntax","text":"Send-PodeSignal [[-Value] <Object>] [[-Path] <String>] [[-ClientId] <String>] [[-Depth] <Int32>] [[-Mode] <String>] [-IgnoreEvent] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Responses/Send-PodeSignal/#description","text":"Broadcasts a message to all, or some, connected WebSocket clients. You can specify a path to send messages to, or a specific ClientId.","title":"DESCRIPTION"},{"location":"Functions/Responses/Send-PodeSignal/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Send-PodeSignal/#example-1","text":"Send-PodeSignal -Value @{ Message = 'Hello, world!' }","title":"EXAMPLE 1"},{"location":"Functions/Responses/Send-PodeSignal/#example-2","text":"Send-PodeSignal -Value @{ Data = @(123, 100, 101) } -Path '/response-charts'","title":"EXAMPLE 2"},{"location":"Functions/Responses/Send-PodeSignal/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Send-PodeSignal/#-clientid","text":"A specific ClientId of a connected client to send a message. Not currently used. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ClientId"},{"location":"Functions/Responses/Send-PodeSignal/#-depth","text":"The Depth to generate the JSON document - the larger this value the worse performance gets. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : 10 Accept pipeline input : False Accept wildcard characters : False","title":"-Depth"},{"location":"Functions/Responses/Send-PodeSignal/#-ignoreevent","text":"If supplied, if a SignalEvent is available it's data, such as path/clientId, will be ignored. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-IgnoreEvent"},{"location":"Functions/Responses/Send-PodeSignal/#-mode","text":"The Mode to broadcast a message: Auto, Broadcast, Direct. (Default: Auto) Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : Auto Accept pipeline input : False Accept wildcard characters : False","title":"-Mode"},{"location":"Functions/Responses/Send-PodeSignal/#-path","text":"The Path of connected clients to send the message. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Responses/Send-PodeSignal/#-value","text":"A String, PSObject, or HashTable value. For non-string values, they will be converted to JSON. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Responses/Send-PodeSignal/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Send-PodeSignal/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Send-PodeSignal/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Send-PodeSignal/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Send-PodeSignal/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Set-PodeResponseAttachment/","text":"Set-PodeResponseAttachment SYNOPSIS Attaches a file onto the Response for downloading. SYNTAX Set-PodeResponseAttachment [-Path] <String> [[-ContentType] <String>] [[-EndpointName] <String>] [<CommonParameters>] DESCRIPTION Attaches a file from the \"/public\", and static Routes, onto the Response for downloading. If the supplied path is not in the Static Routes but is a literal/relative path, then this file is used instead. EXAMPLES EXAMPLE 1 Set-PodeResponseAttachment -Path 'downloads/installer.exe' EXAMPLE 2 Set-PodeResponseAttachment -Path './image.png' EXAMPLE 3 Set-PodeResponseAttachment -Path 'c:/content/accounts.xlsx' EXAMPLE 4 Set-PodeResponseAttachment -Path './data.txt' -ContentType 'application/json' EXAMPLE 5 Set-PodeResponseAttachment -Path '/assets/data.txt' -EndpointName 'Example' PARAMETERS -ContentType Manually specify the content type of the response rather than infering it from the attachment's file extension. The supplied value must match the valid ContentType format, e.g. application/json Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -EndpointName Optional EndpointName that the static route was creating under. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The Path to a static file relative to the \"/public\" directory, or a static Route. If the supplied Path doesn't match any custom static Route, then Pode will look in the \"/public\" directory. Failing this, if the file path exists as a literal/relative file, then this file is used as a fall back. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeResponseAttachment"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#set-poderesponseattachment","text":"","title":"Set-PodeResponseAttachment"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#synopsis","text":"Attaches a file onto the Response for downloading.","title":"SYNOPSIS"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#syntax","text":"Set-PodeResponseAttachment [-Path] <String> [[-ContentType] <String>] [[-EndpointName] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#description","text":"Attaches a file from the \"/public\", and static Routes, onto the Response for downloading. If the supplied path is not in the Static Routes but is a literal/relative path, then this file is used instead.","title":"DESCRIPTION"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#example-1","text":"Set-PodeResponseAttachment -Path 'downloads/installer.exe'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#example-2","text":"Set-PodeResponseAttachment -Path './image.png'","title":"EXAMPLE 2"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#example-3","text":"Set-PodeResponseAttachment -Path 'c:/content/accounts.xlsx'","title":"EXAMPLE 3"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#example-4","text":"Set-PodeResponseAttachment -Path './data.txt' -ContentType 'application/json'","title":"EXAMPLE 4"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#example-5","text":"Set-PodeResponseAttachment -Path '/assets/data.txt' -EndpointName 'Example'","title":"EXAMPLE 5"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#-contenttype","text":"Manually specify the content type of the response rather than infering it from the attachment's file extension. The supplied value must match the valid ContentType format, e.g. application/json Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ContentType"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#-endpointname","text":"Optional EndpointName that the static route was creating under. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#-path","text":"The Path to a static file relative to the \"/public\" directory, or a static Route. If the supplied Path doesn't match any custom static Route, then Pode will look in the \"/public\" directory. Failing this, if the file path exists as a literal/relative file, then this file is used as a fall back. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Set-PodeResponseAttachment/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Set-PodeResponseStatus/","text":"Set-PodeResponseStatus SYNOPSIS Sets the Status Code of the Response, and controls rendering error pages. SYNTAX Set-PodeResponseStatus [-Code] <Int32> [[-Description] <String>] [[-Exception] <Object>] [[-ContentType] <String>] [-NoErrorPage] [<CommonParameters>] DESCRIPTION Sets the Status Code of the Response, and controls rendering error pages. EXAMPLES EXAMPLE 1 Set-PodeResponseStatus -Code 404 EXAMPLE 2 Set-PodeResponseStatus -Code 500 -Exception $_.Exception EXAMPLE 3 Set-PodeResponseStatus -Code 500 -Exception $_.Exception -ContentType 'application/json' PARAMETERS -Code The Status Code to set on the Response. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -ContentType The content type of the error page to use. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Description An optional Status Description. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Exception An exception to use when detailing error information on error pages. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -NoErrorPage Don't render an error page when the Status Code is 400+. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeResponseStatus"},{"location":"Functions/Responses/Set-PodeResponseStatus/#set-poderesponsestatus","text":"","title":"Set-PodeResponseStatus"},{"location":"Functions/Responses/Set-PodeResponseStatus/#synopsis","text":"Sets the Status Code of the Response, and controls rendering error pages.","title":"SYNOPSIS"},{"location":"Functions/Responses/Set-PodeResponseStatus/#syntax","text":"Set-PodeResponseStatus [-Code] <Int32> [[-Description] <String>] [[-Exception] <Object>] [[-ContentType] <String>] [-NoErrorPage] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Responses/Set-PodeResponseStatus/#description","text":"Sets the Status Code of the Response, and controls rendering error pages.","title":"DESCRIPTION"},{"location":"Functions/Responses/Set-PodeResponseStatus/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Set-PodeResponseStatus/#example-1","text":"Set-PodeResponseStatus -Code 404","title":"EXAMPLE 1"},{"location":"Functions/Responses/Set-PodeResponseStatus/#example-2","text":"Set-PodeResponseStatus -Code 500 -Exception $_.Exception","title":"EXAMPLE 2"},{"location":"Functions/Responses/Set-PodeResponseStatus/#example-3","text":"Set-PodeResponseStatus -Code 500 -Exception $_.Exception -ContentType 'application/json'","title":"EXAMPLE 3"},{"location":"Functions/Responses/Set-PodeResponseStatus/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Set-PodeResponseStatus/#-code","text":"The Status Code to set on the Response. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Code"},{"location":"Functions/Responses/Set-PodeResponseStatus/#-contenttype","text":"The content type of the error page to use. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ContentType"},{"location":"Functions/Responses/Set-PodeResponseStatus/#-description","text":"An optional Status Description. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Description"},{"location":"Functions/Responses/Set-PodeResponseStatus/#-exception","text":"An exception to use when detailing error information on error pages. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Exception"},{"location":"Functions/Responses/Set-PodeResponseStatus/#-noerrorpage","text":"Don't render an error page when the Status Code is 400+. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoErrorPage"},{"location":"Functions/Responses/Set-PodeResponseStatus/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Set-PodeResponseStatus/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Set-PodeResponseStatus/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Set-PodeResponseStatus/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Set-PodeResponseStatus/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Set-PodeViewEngine/","text":"Set-PodeViewEngine SYNOPSIS Short description SYNTAX Set-PodeViewEngine [[-Type] <String>] [[-ScriptBlock] <ScriptBlock>] [[-Extension] <String>] [<CommonParameters>] DESCRIPTION Long description EXAMPLES EXAMPLE 1 Set-PodeViewEngine -Type HTML EXAMPLE 2 Set-PodeViewEngine -Type Markdown EXAMPLE 3 Set-PodeViewEngine -Type PSHTML -Extension PS1 -ScriptBlock { param($path, $data) /* logic */ } PARAMETERS -Extension A custom extension for the engine's files. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock A ScriptBlock for specifying custom view engine rendering rules. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Type The type name of the view engine (inbuilt types are: Pode and HTML). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeViewEngine"},{"location":"Functions/Responses/Set-PodeViewEngine/#set-podeviewengine","text":"","title":"Set-PodeViewEngine"},{"location":"Functions/Responses/Set-PodeViewEngine/#synopsis","text":"Short description","title":"SYNOPSIS"},{"location":"Functions/Responses/Set-PodeViewEngine/#syntax","text":"Set-PodeViewEngine [[-Type] <String>] [[-ScriptBlock] <ScriptBlock>] [[-Extension] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Responses/Set-PodeViewEngine/#description","text":"Long description","title":"DESCRIPTION"},{"location":"Functions/Responses/Set-PodeViewEngine/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Set-PodeViewEngine/#example-1","text":"Set-PodeViewEngine -Type HTML","title":"EXAMPLE 1"},{"location":"Functions/Responses/Set-PodeViewEngine/#example-2","text":"Set-PodeViewEngine -Type Markdown","title":"EXAMPLE 2"},{"location":"Functions/Responses/Set-PodeViewEngine/#example-3","text":"Set-PodeViewEngine -Type PSHTML -Extension PS1 -ScriptBlock { param($path, $data) /* logic */ }","title":"EXAMPLE 3"},{"location":"Functions/Responses/Set-PodeViewEngine/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Set-PodeViewEngine/#-extension","text":"A custom extension for the engine's files. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Extension"},{"location":"Functions/Responses/Set-PodeViewEngine/#-scriptblock","text":"A ScriptBlock for specifying custom view engine rendering rules. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Responses/Set-PodeViewEngine/#-type","text":"The type name of the view engine (inbuilt types are: Pode and HTML). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Responses/Set-PodeViewEngine/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Set-PodeViewEngine/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Set-PodeViewEngine/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Set-PodeViewEngine/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Set-PodeViewEngine/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Use-PodePartialView/","text":"Use-PodePartialView SYNOPSIS Includes the contents of a partial View into another dynamic View. SYNTAX Use-PodePartialView [-Path] <String> [[-Data] <Object>] [[-Folder] <String>] [<CommonParameters>] DESCRIPTION Includes the contents of a partial View into another dynamic View. The partial View can be static or dynamic. EXAMPLES EXAMPLE 1 Use-PodePartialView -Path 'shared/footer' PARAMETERS -Data Any dynamic data to supply to a dynamic partial View. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : @ {} Accept pipeline input : False Accept wildcard characters : False -Folder If supplied, a custom views folder will be used. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The path to a partial View, relative to the \"/views\" directory. (Extension is optional). Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.String NOTES RELATED LINKS","title":"Use-PodePartialView"},{"location":"Functions/Responses/Use-PodePartialView/#use-podepartialview","text":"","title":"Use-PodePartialView"},{"location":"Functions/Responses/Use-PodePartialView/#synopsis","text":"Includes the contents of a partial View into another dynamic View.","title":"SYNOPSIS"},{"location":"Functions/Responses/Use-PodePartialView/#syntax","text":"Use-PodePartialView [-Path] <String> [[-Data] <Object>] [[-Folder] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Responses/Use-PodePartialView/#description","text":"Includes the contents of a partial View into another dynamic View. The partial View can be static or dynamic.","title":"DESCRIPTION"},{"location":"Functions/Responses/Use-PodePartialView/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Use-PodePartialView/#example-1","text":"Use-PodePartialView -Path 'shared/footer'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Use-PodePartialView/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Use-PodePartialView/#-data","text":"Any dynamic data to supply to a dynamic partial View. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : @ {} Accept pipeline input : False Accept wildcard characters : False","title":"-Data"},{"location":"Functions/Responses/Use-PodePartialView/#-folder","text":"If supplied, a custom views folder will be used. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Folder"},{"location":"Functions/Responses/Use-PodePartialView/#-path","text":"The path to a partial View, relative to the \"/views\" directory. (Extension is optional). Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Responses/Use-PodePartialView/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Use-PodePartialView/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Use-PodePartialView/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Use-PodePartialView/#systemstring","text":"","title":"System.String"},{"location":"Functions/Responses/Use-PodePartialView/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Use-PodePartialView/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Write-PodeCsvResponse/","text":"Write-PodeCsvResponse SYNOPSIS Writes CSV data to the Response. SYNTAX Value (Default) Write-PodeCsvResponse [-Value] <Object> [-StatusCode <Int32>] [<CommonParameters>] File Write-PodeCsvResponse -Path <String> [-StatusCode <Int32>] [<CommonParameters>] DESCRIPTION Writes CSV data to the Response, setting the content type accordingly. EXAMPLES EXAMPLE 1 Write-PodeCsvResponse -Value \"Name`nRick\" EXAMPLE 2 Write-PodeCsvResponse -Value @{ Name = 'Rick' } EXAMPLE 3 Write-PodeCsvResponse -Path 'E:/Files/Names.csv' PARAMETERS -Path The path to a CSV file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -StatusCode The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False -Value A String, PSObject, or HashTable value. Type : Object Parameter Sets : Value Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeCsvResponse"},{"location":"Functions/Responses/Write-PodeCsvResponse/#write-podecsvresponse","text":"","title":"Write-PodeCsvResponse"},{"location":"Functions/Responses/Write-PodeCsvResponse/#synopsis","text":"Writes CSV data to the Response.","title":"SYNOPSIS"},{"location":"Functions/Responses/Write-PodeCsvResponse/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Responses/Write-PodeCsvResponse/#value-default","text":"Write-PodeCsvResponse [-Value] <Object> [-StatusCode <Int32>] [<CommonParameters>]","title":"Value (Default)"},{"location":"Functions/Responses/Write-PodeCsvResponse/#file","text":"Write-PodeCsvResponse -Path <String> [-StatusCode <Int32>] [<CommonParameters>]","title":"File"},{"location":"Functions/Responses/Write-PodeCsvResponse/#description","text":"Writes CSV data to the Response, setting the content type accordingly.","title":"DESCRIPTION"},{"location":"Functions/Responses/Write-PodeCsvResponse/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Write-PodeCsvResponse/#example-1","text":"Write-PodeCsvResponse -Value \"Name`nRick\"","title":"EXAMPLE 1"},{"location":"Functions/Responses/Write-PodeCsvResponse/#example-2","text":"Write-PodeCsvResponse -Value @{ Name = 'Rick' }","title":"EXAMPLE 2"},{"location":"Functions/Responses/Write-PodeCsvResponse/#example-3","text":"Write-PodeCsvResponse -Path 'E:/Files/Names.csv'","title":"EXAMPLE 3"},{"location":"Functions/Responses/Write-PodeCsvResponse/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Write-PodeCsvResponse/#-path","text":"The path to a CSV file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Responses/Write-PodeCsvResponse/#-statuscode","text":"The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False","title":"-StatusCode"},{"location":"Functions/Responses/Write-PodeCsvResponse/#-value","text":"A String, PSObject, or HashTable value. Type : Object Parameter Sets : Value Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Responses/Write-PodeCsvResponse/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Write-PodeCsvResponse/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Write-PodeCsvResponse/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Write-PodeCsvResponse/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Write-PodeCsvResponse/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Write-PodeFileResponse/","text":"Write-PodeFileResponse SYNOPSIS Renders the content of a static, or dynamic, file on the Response. SYNTAX Write-PodeFileResponse [-Path] <String> [[-Data] <Object>] [[-ContentType] <String>] [[-MaxAge] <Int32>] [[-StatusCode] <Int32>] [-Cache] [<CommonParameters>] DESCRIPTION Renders the content of a static, or dynamic, file on the Response. You can set browser's to cache the content, and also override the file's content type. EXAMPLES EXAMPLE 1 Write-PodeFileResponse -Path 'C:/Files/Stuff.txt' EXAMPLE 2 Write-PodeFileResponse -Path 'C:/Files/Stuff.txt' -Cache -MaxAge 1800 EXAMPLE 3 Write-PodeFileResponse -Path 'C:/Files/Stuff.txt' -ContentType 'application/json' EXAMPLE 4 Write-PodeFileResponse -Path 'C:/Views/Index.pode' -Data @{ Counter = 2 } EXAMPLE 5 Write-PodeFileResponse -Path 'C:/Files/Stuff.txt' -StatusCode 201 PARAMETERS -Cache Should the file's content be cached by browsers, or not? Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ContentType The content type of the file's contents - this overrides the file's extension. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Data A HashTable of dynamic data to supply to a dynamic file. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : @ {} Accept pipeline input : False Accept wildcard characters : False -MaxAge The maximum age to cache the file's content on the browser, in seconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : 3600 Accept pipeline input : False Accept wildcard characters : False -Path The path to a file. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -StatusCode The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : 200 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeFileResponse"},{"location":"Functions/Responses/Write-PodeFileResponse/#write-podefileresponse","text":"","title":"Write-PodeFileResponse"},{"location":"Functions/Responses/Write-PodeFileResponse/#synopsis","text":"Renders the content of a static, or dynamic, file on the Response.","title":"SYNOPSIS"},{"location":"Functions/Responses/Write-PodeFileResponse/#syntax","text":"Write-PodeFileResponse [-Path] <String> [[-Data] <Object>] [[-ContentType] <String>] [[-MaxAge] <Int32>] [[-StatusCode] <Int32>] [-Cache] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Responses/Write-PodeFileResponse/#description","text":"Renders the content of a static, or dynamic, file on the Response. You can set browser's to cache the content, and also override the file's content type.","title":"DESCRIPTION"},{"location":"Functions/Responses/Write-PodeFileResponse/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Write-PodeFileResponse/#example-1","text":"Write-PodeFileResponse -Path 'C:/Files/Stuff.txt'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Write-PodeFileResponse/#example-2","text":"Write-PodeFileResponse -Path 'C:/Files/Stuff.txt' -Cache -MaxAge 1800","title":"EXAMPLE 2"},{"location":"Functions/Responses/Write-PodeFileResponse/#example-3","text":"Write-PodeFileResponse -Path 'C:/Files/Stuff.txt' -ContentType 'application/json'","title":"EXAMPLE 3"},{"location":"Functions/Responses/Write-PodeFileResponse/#example-4","text":"Write-PodeFileResponse -Path 'C:/Views/Index.pode' -Data @{ Counter = 2 }","title":"EXAMPLE 4"},{"location":"Functions/Responses/Write-PodeFileResponse/#example-5","text":"Write-PodeFileResponse -Path 'C:/Files/Stuff.txt' -StatusCode 201","title":"EXAMPLE 5"},{"location":"Functions/Responses/Write-PodeFileResponse/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Write-PodeFileResponse/#-cache","text":"Should the file's content be cached by browsers, or not? Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Cache"},{"location":"Functions/Responses/Write-PodeFileResponse/#-contenttype","text":"The content type of the file's contents - this overrides the file's extension. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ContentType"},{"location":"Functions/Responses/Write-PodeFileResponse/#-data","text":"A HashTable of dynamic data to supply to a dynamic file. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : @ {} Accept pipeline input : False Accept wildcard characters : False","title":"-Data"},{"location":"Functions/Responses/Write-PodeFileResponse/#-maxage","text":"The maximum age to cache the file's content on the browser, in seconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : 3600 Accept pipeline input : False Accept wildcard characters : False","title":"-MaxAge"},{"location":"Functions/Responses/Write-PodeFileResponse/#-path","text":"The path to a file. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Responses/Write-PodeFileResponse/#-statuscode","text":"The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : 200 Accept pipeline input : False Accept wildcard characters : False","title":"-StatusCode"},{"location":"Functions/Responses/Write-PodeFileResponse/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Write-PodeFileResponse/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Write-PodeFileResponse/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Write-PodeFileResponse/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Write-PodeFileResponse/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Write-PodeHtmlResponse/","text":"Write-PodeHtmlResponse SYNOPSIS Writes HTML data to the Response. SYNTAX Value (Default) Write-PodeHtmlResponse [-Value] <Object> [-StatusCode <Int32>] [<CommonParameters>] File Write-PodeHtmlResponse -Path <String> [-StatusCode <Int32>] [<CommonParameters>] DESCRIPTION Writes HTML data to the Response, setting the content type accordingly. EXAMPLES EXAMPLE 1 <body>Hello!</body></html>' EXAMPLE 2 Write-PodeHtmlResponse -Value @{ Message = 'Hello, all!' } EXAMPLE 3 Write-PodeHtmlResponse -Path 'E:/Site/About.html' PARAMETERS -Path The path to a HTML file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -StatusCode The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False -Value A String, PSObject, or HashTable value. Type : Object Parameter Sets : Value Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeHtmlResponse"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#write-podehtmlresponse","text":"","title":"Write-PodeHtmlResponse"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#synopsis","text":"Writes HTML data to the Response.","title":"SYNOPSIS"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#value-default","text":"Write-PodeHtmlResponse [-Value] <Object> [-StatusCode <Int32>] [<CommonParameters>]","title":"Value (Default)"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#file","text":"Write-PodeHtmlResponse -Path <String> [-StatusCode <Int32>] [<CommonParameters>]","title":"File"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#description","text":"Writes HTML data to the Response, setting the content type accordingly.","title":"DESCRIPTION"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#example-1","text":"<body>Hello!</body></html>'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#example-2","text":"Write-PodeHtmlResponse -Value @{ Message = 'Hello, all!' }","title":"EXAMPLE 2"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#example-3","text":"Write-PodeHtmlResponse -Path 'E:/Site/About.html'","title":"EXAMPLE 3"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#-path","text":"The path to a HTML file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#-statuscode","text":"The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False","title":"-StatusCode"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#-value","text":"A String, PSObject, or HashTable value. Type : Object Parameter Sets : Value Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Write-PodeHtmlResponse/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Write-PodeJsonResponse/","text":"Write-PodeJsonResponse SYNOPSIS Writes JSON data to the Response. SYNTAX Value (Default) Write-PodeJsonResponse [-Value] <Object> [-Depth <Int32>] [-StatusCode <Int32>] [<CommonParameters>] File Write-PodeJsonResponse -Path <String> [-Depth <Int32>] [-StatusCode <Int32>] [<CommonParameters>] DESCRIPTION Writes JSON data to the Response, setting the content type accordingly. EXAMPLES EXAMPLE 1 Write-PodeJsonResponse -Value '{\"name\": \"Rick\"}' EXAMPLE 2 Write-PodeJsonResponse -Value @{ Name = 'Rick' } -StatusCode 201 EXAMPLE 3 Write-PodeJsonResponse -Path 'E:/Files/Names.json' PARAMETERS -Depth The Depth to generate the JSON document - the larger this value the worse performance gets. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 10 Accept pipeline input : False Accept wildcard characters : False -Path The path to a JSON file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -StatusCode The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False -Value A String, PSObject, or HashTable value. For non-string values, they will be converted to JSON. Type : Object Parameter Sets : Value Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeJsonResponse"},{"location":"Functions/Responses/Write-PodeJsonResponse/#write-podejsonresponse","text":"","title":"Write-PodeJsonResponse"},{"location":"Functions/Responses/Write-PodeJsonResponse/#synopsis","text":"Writes JSON data to the Response.","title":"SYNOPSIS"},{"location":"Functions/Responses/Write-PodeJsonResponse/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Responses/Write-PodeJsonResponse/#value-default","text":"Write-PodeJsonResponse [-Value] <Object> [-Depth <Int32>] [-StatusCode <Int32>] [<CommonParameters>]","title":"Value (Default)"},{"location":"Functions/Responses/Write-PodeJsonResponse/#file","text":"Write-PodeJsonResponse -Path <String> [-Depth <Int32>] [-StatusCode <Int32>] [<CommonParameters>]","title":"File"},{"location":"Functions/Responses/Write-PodeJsonResponse/#description","text":"Writes JSON data to the Response, setting the content type accordingly.","title":"DESCRIPTION"},{"location":"Functions/Responses/Write-PodeJsonResponse/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Write-PodeJsonResponse/#example-1","text":"Write-PodeJsonResponse -Value '{\"name\": \"Rick\"}'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Write-PodeJsonResponse/#example-2","text":"Write-PodeJsonResponse -Value @{ Name = 'Rick' } -StatusCode 201","title":"EXAMPLE 2"},{"location":"Functions/Responses/Write-PodeJsonResponse/#example-3","text":"Write-PodeJsonResponse -Path 'E:/Files/Names.json'","title":"EXAMPLE 3"},{"location":"Functions/Responses/Write-PodeJsonResponse/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Write-PodeJsonResponse/#-depth","text":"The Depth to generate the JSON document - the larger this value the worse performance gets. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 10 Accept pipeline input : False Accept wildcard characters : False","title":"-Depth"},{"location":"Functions/Responses/Write-PodeJsonResponse/#-path","text":"The path to a JSON file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Responses/Write-PodeJsonResponse/#-statuscode","text":"The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False","title":"-StatusCode"},{"location":"Functions/Responses/Write-PodeJsonResponse/#-value","text":"A String, PSObject, or HashTable value. For non-string values, they will be converted to JSON. Type : Object Parameter Sets : Value Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Responses/Write-PodeJsonResponse/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Write-PodeJsonResponse/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Write-PodeJsonResponse/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Write-PodeJsonResponse/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Write-PodeJsonResponse/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/","text":"Write-PodeMarkdownResponse SYNOPSIS Writes Markdown data to the Response. SYNTAX Value (Default) Write-PodeMarkdownResponse [-Value] <Object> [-StatusCode <Int32>] [-AsHtml] [<CommonParameters>] File Write-PodeMarkdownResponse -Path <String> [-StatusCode <Int32>] [-AsHtml] [<CommonParameters>] DESCRIPTION Writes Markdown data to the Response, with the option to render it as HTML. EXAMPLES EXAMPLE 1 Write-PodeMarkdownResponse -Value '# Hello, world!' -AsHtml EXAMPLE 2 Write-PodeMarkdownResponse -Path 'E:/Site/About.md' PARAMETERS -AsHtml If supplied, the Markdown will be converted to HTML. (This is only supported in PS7+) Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Path The path to a Markdown file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -StatusCode The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False -Value A String, PSObject, or HashTable value. Type : Object Parameter Sets : Value Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeMarkdownResponse"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#write-podemarkdownresponse","text":"","title":"Write-PodeMarkdownResponse"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#synopsis","text":"Writes Markdown data to the Response.","title":"SYNOPSIS"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#value-default","text":"Write-PodeMarkdownResponse [-Value] <Object> [-StatusCode <Int32>] [-AsHtml] [<CommonParameters>]","title":"Value (Default)"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#file","text":"Write-PodeMarkdownResponse -Path <String> [-StatusCode <Int32>] [-AsHtml] [<CommonParameters>]","title":"File"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#description","text":"Writes Markdown data to the Response, with the option to render it as HTML.","title":"DESCRIPTION"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#example-1","text":"Write-PodeMarkdownResponse -Value '# Hello, world!' -AsHtml","title":"EXAMPLE 1"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#example-2","text":"Write-PodeMarkdownResponse -Path 'E:/Site/About.md'","title":"EXAMPLE 2"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#-ashtml","text":"If supplied, the Markdown will be converted to HTML. (This is only supported in PS7+) Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AsHtml"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#-path","text":"The path to a Markdown file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#-statuscode","text":"The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False","title":"-StatusCode"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#-value","text":"A String, PSObject, or HashTable value. Type : Object Parameter Sets : Value Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Write-PodeMarkdownResponse/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Write-PodeTcpClient/","text":"Write-PodeTcpClient SYNOPSIS Writes data to a TCP socket stream. SYNTAX Write-PodeTcpClient [[-Message] <String>] [<CommonParameters>] DESCRIPTION Writes data to a TCP socket stream. EXAMPLES EXAMPLE 1 Write-PodeTcpClient -Message '250 OK' PARAMETERS -Message The message to write Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeTcpClient"},{"location":"Functions/Responses/Write-PodeTcpClient/#write-podetcpclient","text":"","title":"Write-PodeTcpClient"},{"location":"Functions/Responses/Write-PodeTcpClient/#synopsis","text":"Writes data to a TCP socket stream.","title":"SYNOPSIS"},{"location":"Functions/Responses/Write-PodeTcpClient/#syntax","text":"Write-PodeTcpClient [[-Message] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Responses/Write-PodeTcpClient/#description","text":"Writes data to a TCP socket stream.","title":"DESCRIPTION"},{"location":"Functions/Responses/Write-PodeTcpClient/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Write-PodeTcpClient/#example-1","text":"Write-PodeTcpClient -Message '250 OK'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Write-PodeTcpClient/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Write-PodeTcpClient/#-message","text":"The message to write Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Message"},{"location":"Functions/Responses/Write-PodeTcpClient/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Write-PodeTcpClient/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Write-PodeTcpClient/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Write-PodeTcpClient/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Write-PodeTcpClient/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Write-PodeTextResponse/","text":"Write-PodeTextResponse SYNOPSIS Writes a String or a Byte[] to the Response. SYNTAX String (Default) Write-PodeTextResponse [[-Value] <String>] [-ContentType <String>] [-MaxAge <Int32>] [-StatusCode <Int32>] [-Cache] [<CommonParameters>] Bytes Write-PodeTextResponse [-Bytes <Byte[]>] [-ContentType <String>] [-MaxAge <Int32>] [-StatusCode <Int32>] [-Cache] [<CommonParameters>] DESCRIPTION Writes a String or a Byte[] to the Response, as some specified content type. This value can also be cached. EXAMPLES EXAMPLE 1 Write-PodeTextResponse -Value 'Leeeeeerrrooooy Jeeeenkiiins!' EXAMPLE 2 Write-PodeTextResponse -Value '{\"name\": \"Rick\"}' -ContentType 'application/json' EXAMPLE 3 Write-PodeTextResponse -Bytes (Get-Content -Path ./some/image.png -Raw -AsByteStream) -Cache -MaxAge 1800 EXAMPLE 4 Write-PodeTextResponse -Value 'Untitled Text Response' -StatusCode 418 PARAMETERS -Bytes An array of Bytes to write. Type : Byte[] Parameter Sets : Bytes Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Cache Should the value be cached by browsers, or not? Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ContentType The content type of the data being written. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Text/plain Accept pipeline input : False Accept wildcard characters : False -MaxAge The maximum age to cache the value on the browser, in seconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 3600 Accept pipeline input : False Accept wildcard characters : False -StatusCode The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False -Value A String value to write. Type : String Parameter Sets : String Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeTextResponse"},{"location":"Functions/Responses/Write-PodeTextResponse/#write-podetextresponse","text":"","title":"Write-PodeTextResponse"},{"location":"Functions/Responses/Write-PodeTextResponse/#synopsis","text":"Writes a String or a Byte[] to the Response.","title":"SYNOPSIS"},{"location":"Functions/Responses/Write-PodeTextResponse/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Responses/Write-PodeTextResponse/#string-default","text":"Write-PodeTextResponse [[-Value] <String>] [-ContentType <String>] [-MaxAge <Int32>] [-StatusCode <Int32>] [-Cache] [<CommonParameters>]","title":"String (Default)"},{"location":"Functions/Responses/Write-PodeTextResponse/#bytes","text":"Write-PodeTextResponse [-Bytes <Byte[]>] [-ContentType <String>] [-MaxAge <Int32>] [-StatusCode <Int32>] [-Cache] [<CommonParameters>]","title":"Bytes"},{"location":"Functions/Responses/Write-PodeTextResponse/#description","text":"Writes a String or a Byte[] to the Response, as some specified content type. This value can also be cached.","title":"DESCRIPTION"},{"location":"Functions/Responses/Write-PodeTextResponse/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Write-PodeTextResponse/#example-1","text":"Write-PodeTextResponse -Value 'Leeeeeerrrooooy Jeeeenkiiins!'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Write-PodeTextResponse/#example-2","text":"Write-PodeTextResponse -Value '{\"name\": \"Rick\"}' -ContentType 'application/json'","title":"EXAMPLE 2"},{"location":"Functions/Responses/Write-PodeTextResponse/#example-3","text":"Write-PodeTextResponse -Bytes (Get-Content -Path ./some/image.png -Raw -AsByteStream) -Cache -MaxAge 1800","title":"EXAMPLE 3"},{"location":"Functions/Responses/Write-PodeTextResponse/#example-4","text":"Write-PodeTextResponse -Value 'Untitled Text Response' -StatusCode 418","title":"EXAMPLE 4"},{"location":"Functions/Responses/Write-PodeTextResponse/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Write-PodeTextResponse/#-bytes","text":"An array of Bytes to write. Type : Byte[] Parameter Sets : Bytes Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Bytes"},{"location":"Functions/Responses/Write-PodeTextResponse/#-cache","text":"Should the value be cached by browsers, or not? Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Cache"},{"location":"Functions/Responses/Write-PodeTextResponse/#-contenttype","text":"The content type of the data being written. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Text/plain Accept pipeline input : False Accept wildcard characters : False","title":"-ContentType"},{"location":"Functions/Responses/Write-PodeTextResponse/#-maxage","text":"The maximum age to cache the value on the browser, in seconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 3600 Accept pipeline input : False Accept wildcard characters : False","title":"-MaxAge"},{"location":"Functions/Responses/Write-PodeTextResponse/#-statuscode","text":"The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False","title":"-StatusCode"},{"location":"Functions/Responses/Write-PodeTextResponse/#-value","text":"A String value to write. Type : String Parameter Sets : String Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Responses/Write-PodeTextResponse/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Write-PodeTextResponse/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Write-PodeTextResponse/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Write-PodeTextResponse/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Write-PodeTextResponse/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Write-PodeViewResponse/","text":"Write-PodeViewResponse SYNOPSIS Renders a dynamic, or static, View on the Response. SYNTAX Write-PodeViewResponse [-Path] <String> [[-Data] <Hashtable>] [[-StatusCode] <Int32>] [[-Folder] <String>] [-FlashMessages] [<CommonParameters>] DESCRIPTION Renders a dynamic, or static, View on the Response; allowing for dynamic data to be supplied. EXAMPLES EXAMPLE 1 Write-PodeViewResponse -Path 'index' EXAMPLE 2 Write-PodeViewResponse -Path 'accounts/profile_page' -Data @{ Username = 'Morty' } EXAMPLE 3 Write-PodeViewResponse -Path 'login' -FlashMessages PARAMETERS -Data Any dynamic data to supply to a dynamic View. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : @ {} Accept pipeline input : False Accept wildcard characters : False -FlashMessages Automatically supply all Flash messages in the current session to the View. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Folder If supplied, a custom views folder will be used. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The path to a View, relative to the \"/views\" directory. (Extension is optional). Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -StatusCode The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : 200 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeViewResponse"},{"location":"Functions/Responses/Write-PodeViewResponse/#write-podeviewresponse","text":"","title":"Write-PodeViewResponse"},{"location":"Functions/Responses/Write-PodeViewResponse/#synopsis","text":"Renders a dynamic, or static, View on the Response.","title":"SYNOPSIS"},{"location":"Functions/Responses/Write-PodeViewResponse/#syntax","text":"Write-PodeViewResponse [-Path] <String> [[-Data] <Hashtable>] [[-StatusCode] <Int32>] [[-Folder] <String>] [-FlashMessages] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Responses/Write-PodeViewResponse/#description","text":"Renders a dynamic, or static, View on the Response; allowing for dynamic data to be supplied.","title":"DESCRIPTION"},{"location":"Functions/Responses/Write-PodeViewResponse/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Write-PodeViewResponse/#example-1","text":"Write-PodeViewResponse -Path 'index'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Write-PodeViewResponse/#example-2","text":"Write-PodeViewResponse -Path 'accounts/profile_page' -Data @{ Username = 'Morty' }","title":"EXAMPLE 2"},{"location":"Functions/Responses/Write-PodeViewResponse/#example-3","text":"Write-PodeViewResponse -Path 'login' -FlashMessages","title":"EXAMPLE 3"},{"location":"Functions/Responses/Write-PodeViewResponse/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Write-PodeViewResponse/#-data","text":"Any dynamic data to supply to a dynamic View. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : @ {} Accept pipeline input : False Accept wildcard characters : False","title":"-Data"},{"location":"Functions/Responses/Write-PodeViewResponse/#-flashmessages","text":"Automatically supply all Flash messages in the current session to the View. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-FlashMessages"},{"location":"Functions/Responses/Write-PodeViewResponse/#-folder","text":"If supplied, a custom views folder will be used. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Folder"},{"location":"Functions/Responses/Write-PodeViewResponse/#-path","text":"The path to a View, relative to the \"/views\" directory. (Extension is optional). Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Responses/Write-PodeViewResponse/#-statuscode","text":"The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : 200 Accept pipeline input : False Accept wildcard characters : False","title":"-StatusCode"},{"location":"Functions/Responses/Write-PodeViewResponse/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Write-PodeViewResponse/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Write-PodeViewResponse/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Write-PodeViewResponse/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Write-PodeViewResponse/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Responses/Write-PodeXmlResponse/","text":"Write-PodeXmlResponse SYNOPSIS Writes XML data to the Response. SYNTAX Value (Default) Write-PodeXmlResponse [-Value] <Object> [-StatusCode <Int32>] [<CommonParameters>] File Write-PodeXmlResponse -Path <String> [-StatusCode <Int32>] [<CommonParameters>] DESCRIPTION Writes XML data to the Response, setting the content type accordingly. EXAMPLES EXAMPLE 1 <name>Rick</name></root>' EXAMPLE 2 Write-PodeXmlResponse -Value @{ Name = 'Rick' } -StatusCode 201 EXAMPLE 3 Write-PodeXmlResponse -Path 'E:/Files/Names.xml' PARAMETERS -Path The path to an XML file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -StatusCode The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False -Value A String, PSObject, or HashTable value. Type : Object Parameter Sets : Value Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeXmlResponse"},{"location":"Functions/Responses/Write-PodeXmlResponse/#write-podexmlresponse","text":"","title":"Write-PodeXmlResponse"},{"location":"Functions/Responses/Write-PodeXmlResponse/#synopsis","text":"Writes XML data to the Response.","title":"SYNOPSIS"},{"location":"Functions/Responses/Write-PodeXmlResponse/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Responses/Write-PodeXmlResponse/#value-default","text":"Write-PodeXmlResponse [-Value] <Object> [-StatusCode <Int32>] [<CommonParameters>]","title":"Value (Default)"},{"location":"Functions/Responses/Write-PodeXmlResponse/#file","text":"Write-PodeXmlResponse -Path <String> [-StatusCode <Int32>] [<CommonParameters>]","title":"File"},{"location":"Functions/Responses/Write-PodeXmlResponse/#description","text":"Writes XML data to the Response, setting the content type accordingly.","title":"DESCRIPTION"},{"location":"Functions/Responses/Write-PodeXmlResponse/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Responses/Write-PodeXmlResponse/#example-1","text":"<name>Rick</name></root>'","title":"EXAMPLE 1"},{"location":"Functions/Responses/Write-PodeXmlResponse/#example-2","text":"Write-PodeXmlResponse -Value @{ Name = 'Rick' } -StatusCode 201","title":"EXAMPLE 2"},{"location":"Functions/Responses/Write-PodeXmlResponse/#example-3","text":"Write-PodeXmlResponse -Path 'E:/Files/Names.xml'","title":"EXAMPLE 3"},{"location":"Functions/Responses/Write-PodeXmlResponse/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Responses/Write-PodeXmlResponse/#-path","text":"The path to an XML file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Responses/Write-PodeXmlResponse/#-statuscode","text":"The status code to set against the response. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 200 Accept pipeline input : False Accept wildcard characters : False","title":"-StatusCode"},{"location":"Functions/Responses/Write-PodeXmlResponse/#-value","text":"A String, PSObject, or HashTable value. Type : Object Parameter Sets : Value Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Responses/Write-PodeXmlResponse/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Responses/Write-PodeXmlResponse/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Responses/Write-PodeXmlResponse/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Responses/Write-PodeXmlResponse/#notes","text":"","title":"NOTES"},{"location":"Functions/Responses/Write-PodeXmlResponse/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Add-PodePage/","text":"Add-PodePage SYNOPSIS Helper function to generate simple GET routes. SYNTAX ScriptBlock (Default) Add-PodePage -Name <String> -ScriptBlock <ScriptBlock> [-Data <Hashtable>] [-Path <String>] [-Middleware <Object[]>] [-Authentication <String>] [-AllowAnon] [<CommonParameters>] File Add-PodePage -Name <String> -FilePath <String> [-Data <Hashtable>] [-Path <String>] [-Middleware <Object[]>] [-Authentication <String>] [-AllowAnon] [<CommonParameters>] View Add-PodePage -Name <String> -View <String> [-Data <Hashtable>] [-Path <String>] [-Middleware <Object[]>] [-Authentication <String>] [-AllowAnon] [-FlashMessages] [<CommonParameters>] DESCRIPTION Helper function to generate simple GET routes from ScritpBlocks, Files, and Views. The output is always rendered as HTML. EXAMPLES EXAMPLE 1 Add-PodePage -Name Services -ScriptBlock { Get-Service } EXAMPLE 2 Add-PodePage -Name Index -View 'index' EXAMPLE 3 Add-PodePage -Name About -FilePath '.\\views\\about.pode' -Data @{ Date = [DateTime]::UtcNow } PARAMETERS -AllowAnon If supplied, the Page will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Authentication The name of an Authentication method which should be used as middleware on this Route. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Data A hashtable of Data to supply to a Dynamic File/View, or to be splatted as arguments for the ScriptBlock. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FilePath A FilePath, literal or relative, to a valid HTML file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FlashMessages If supplied, Views will have any flash messages supplied to them for rendering. Type : SwitchParameter Parameter Sets : View Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Middleware Like normal Routes, an array of Middleware that will be applied to all generated Routes. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Name A unique name for the page, that will be used in the Path for the route. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Path An optional Path for the Route, to prepend before the Name. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : / Accept pipeline input : False Accept wildcard characters : False -ScriptBlock A ScriptBlock to invoke, where any results will be converted to HTML. Type : ScriptBlock Parameter Sets : ScriptBlock Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -View The name of a View to render, this can be HTML or Dynamic. Type : String Parameter Sets : View Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodePage"},{"location":"Functions/Routes/Add-PodePage/#add-podepage","text":"","title":"Add-PodePage"},{"location":"Functions/Routes/Add-PodePage/#synopsis","text":"Helper function to generate simple GET routes.","title":"SYNOPSIS"},{"location":"Functions/Routes/Add-PodePage/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Routes/Add-PodePage/#scriptblock-default","text":"Add-PodePage -Name <String> -ScriptBlock <ScriptBlock> [-Data <Hashtable>] [-Path <String>] [-Middleware <Object[]>] [-Authentication <String>] [-AllowAnon] [<CommonParameters>]","title":"ScriptBlock (Default)"},{"location":"Functions/Routes/Add-PodePage/#file","text":"Add-PodePage -Name <String> -FilePath <String> [-Data <Hashtable>] [-Path <String>] [-Middleware <Object[]>] [-Authentication <String>] [-AllowAnon] [<CommonParameters>]","title":"File"},{"location":"Functions/Routes/Add-PodePage/#view","text":"Add-PodePage -Name <String> -View <String> [-Data <Hashtable>] [-Path <String>] [-Middleware <Object[]>] [-Authentication <String>] [-AllowAnon] [-FlashMessages] [<CommonParameters>]","title":"View"},{"location":"Functions/Routes/Add-PodePage/#description","text":"Helper function to generate simple GET routes from ScritpBlocks, Files, and Views. The output is always rendered as HTML.","title":"DESCRIPTION"},{"location":"Functions/Routes/Add-PodePage/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Add-PodePage/#example-1","text":"Add-PodePage -Name Services -ScriptBlock { Get-Service }","title":"EXAMPLE 1"},{"location":"Functions/Routes/Add-PodePage/#example-2","text":"Add-PodePage -Name Index -View 'index'","title":"EXAMPLE 2"},{"location":"Functions/Routes/Add-PodePage/#example-3","text":"Add-PodePage -Name About -FilePath '.\\views\\about.pode' -Data @{ Date = [DateTime]::UtcNow }","title":"EXAMPLE 3"},{"location":"Functions/Routes/Add-PodePage/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Add-PodePage/#-allowanon","text":"If supplied, the Page will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AllowAnon"},{"location":"Functions/Routes/Add-PodePage/#-authentication","text":"The name of an Authentication method which should be used as middleware on this Route. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Authentication"},{"location":"Functions/Routes/Add-PodePage/#-data","text":"A hashtable of Data to supply to a Dynamic File/View, or to be splatted as arguments for the ScriptBlock. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Data"},{"location":"Functions/Routes/Add-PodePage/#-filepath","text":"A FilePath, literal or relative, to a valid HTML file. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"Functions/Routes/Add-PodePage/#-flashmessages","text":"If supplied, Views will have any flash messages supplied to them for rendering. Type : SwitchParameter Parameter Sets : View Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-FlashMessages"},{"location":"Functions/Routes/Add-PodePage/#-middleware","text":"Like normal Routes, an array of Middleware that will be applied to all generated Routes. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/Routes/Add-PodePage/#-name","text":"A unique name for the page, that will be used in the Path for the route. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Routes/Add-PodePage/#-path","text":"An optional Path for the Route, to prepend before the Name. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : / Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Add-PodePage/#-scriptblock","text":"A ScriptBlock to invoke, where any results will be converted to HTML. Type : ScriptBlock Parameter Sets : ScriptBlock Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Routes/Add-PodePage/#-view","text":"The name of a View to render, this can be HTML or Dynamic. Type : String Parameter Sets : View Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-View"},{"location":"Functions/Routes/Add-PodePage/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Add-PodePage/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Add-PodePage/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Add-PodePage/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Add-PodePage/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Add-PodeRoute/","text":"Add-PodeRoute SYNOPSIS Adds a Route for a specific HTTP Method. SYNTAX Script (Default) Add-PodeRoute -Method <String> -Path <String> [-Middleware <Object[]>] [-ScriptBlock <ScriptBlock>] [-EndpointName <String[]>] [-ContentType <String>] [-TransferEncoding <String>] [-ErrorContentType <String>] [-ArgumentList <Object[]>] [-Authentication <String>] [-AllowAnon] [-Login] [-Logout] [-PassThru] [<CommonParameters>] File Add-PodeRoute -Method <String> -Path <String> [-Middleware <Object[]>] [-EndpointName <String[]>] [-ContentType <String>] [-TransferEncoding <String>] [-ErrorContentType <String>] -FilePath <String> [-ArgumentList <Object[]>] [-Authentication <String>] [-AllowAnon] [-Login] [-Logout] [-PassThru] [<CommonParameters>] DESCRIPTION Adds a Route for a specific HTTP Method, with path, that when called with invoke any logic and/or Middleware. EXAMPLES EXAMPLE 1 Add-PodeRoute -Method Get -Path '/' -ScriptBlock { /* logic */ } EXAMPLE 2 Add-PodeRoute -Method Post -Path '/users/:userId/message' -Middleware (Get-PodeCsrfMiddleware) -ScriptBlock { /* logic */ } EXAMPLE 3 Add-PodeRoute -Method Post -Path '/user' -ContentType 'application/json' -ScriptBlock { /* logic */ } EXAMPLE 4 Add-PodeRoute -Method Post -Path '/user' -ContentType 'application/json' -TransferEncoding gzip -ScriptBlock { /* logic */ } EXAMPLE 5 Add-PodeRoute -Method Get -Path '/api/cpu' -ErrorContentType 'application/json' -ScriptBlock { /* logic */ } EXAMPLE 6 Add-PodeRoute -Method Get -Path '/' -ScriptBlock { /* logic */ } -ArgumentList 'arg1', 'arg2' PARAMETERS -AllowAnon If supplied, the Route will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ArgumentList An array of arguments to supply to the Route's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Authentication The name of an Authentication method which should be used as middleware on this Route. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ContentType The content type the Route should use when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -EndpointName The EndpointName of an Endpoint(s) this Route should be bound against. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ErrorContentType The content type of any error pages that may get returned. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FilePath A literal, or relative, path to a file containing a ScriptBlock for the Route's main logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Login If supplied, the Route will be flagged to Authentication as being a Route that handles user logins. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Logout If supplied, the Route will be flagged to Authentication as being a Route that handles users logging out. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Method The HTTP Method of this Route. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Middleware An array of ScriptBlocks for optional Middleware. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -PassThru If supplied, the route created will be returned so it can be passed through a pipe. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Path The URI path for the Route. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock A ScriptBlock for the Route's main logic. Type : ScriptBlock Parameter Sets : Script Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -TransferEncoding The transfer encoding the Route should use when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeRoute"},{"location":"Functions/Routes/Add-PodeRoute/#add-poderoute","text":"","title":"Add-PodeRoute"},{"location":"Functions/Routes/Add-PodeRoute/#synopsis","text":"Adds a Route for a specific HTTP Method.","title":"SYNOPSIS"},{"location":"Functions/Routes/Add-PodeRoute/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Routes/Add-PodeRoute/#script-default","text":"Add-PodeRoute -Method <String> -Path <String> [-Middleware <Object[]>] [-ScriptBlock <ScriptBlock>] [-EndpointName <String[]>] [-ContentType <String>] [-TransferEncoding <String>] [-ErrorContentType <String>] [-ArgumentList <Object[]>] [-Authentication <String>] [-AllowAnon] [-Login] [-Logout] [-PassThru] [<CommonParameters>]","title":"Script (Default)"},{"location":"Functions/Routes/Add-PodeRoute/#file","text":"Add-PodeRoute -Method <String> -Path <String> [-Middleware <Object[]>] [-EndpointName <String[]>] [-ContentType <String>] [-TransferEncoding <String>] [-ErrorContentType <String>] -FilePath <String> [-ArgumentList <Object[]>] [-Authentication <String>] [-AllowAnon] [-Login] [-Logout] [-PassThru] [<CommonParameters>]","title":"File"},{"location":"Functions/Routes/Add-PodeRoute/#description","text":"Adds a Route for a specific HTTP Method, with path, that when called with invoke any logic and/or Middleware.","title":"DESCRIPTION"},{"location":"Functions/Routes/Add-PodeRoute/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Add-PodeRoute/#example-1","text":"Add-PodeRoute -Method Get -Path '/' -ScriptBlock { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Routes/Add-PodeRoute/#example-2","text":"Add-PodeRoute -Method Post -Path '/users/:userId/message' -Middleware (Get-PodeCsrfMiddleware) -ScriptBlock { /* logic */ }","title":"EXAMPLE 2"},{"location":"Functions/Routes/Add-PodeRoute/#example-3","text":"Add-PodeRoute -Method Post -Path '/user' -ContentType 'application/json' -ScriptBlock { /* logic */ }","title":"EXAMPLE 3"},{"location":"Functions/Routes/Add-PodeRoute/#example-4","text":"Add-PodeRoute -Method Post -Path '/user' -ContentType 'application/json' -TransferEncoding gzip -ScriptBlock { /* logic */ }","title":"EXAMPLE 4"},{"location":"Functions/Routes/Add-PodeRoute/#example-5","text":"Add-PodeRoute -Method Get -Path '/api/cpu' -ErrorContentType 'application/json' -ScriptBlock { /* logic */ }","title":"EXAMPLE 5"},{"location":"Functions/Routes/Add-PodeRoute/#example-6","text":"Add-PodeRoute -Method Get -Path '/' -ScriptBlock { /* logic */ } -ArgumentList 'arg1', 'arg2'","title":"EXAMPLE 6"},{"location":"Functions/Routes/Add-PodeRoute/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Add-PodeRoute/#-allowanon","text":"If supplied, the Route will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AllowAnon"},{"location":"Functions/Routes/Add-PodeRoute/#-argumentlist","text":"An array of arguments to supply to the Route's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Routes/Add-PodeRoute/#-authentication","text":"The name of an Authentication method which should be used as middleware on this Route. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Authentication"},{"location":"Functions/Routes/Add-PodeRoute/#-contenttype","text":"The content type the Route should use when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ContentType"},{"location":"Functions/Routes/Add-PodeRoute/#-endpointname","text":"The EndpointName of an Endpoint(s) this Route should be bound against. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Add-PodeRoute/#-errorcontenttype","text":"The content type of any error pages that may get returned. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ErrorContentType"},{"location":"Functions/Routes/Add-PodeRoute/#-filepath","text":"A literal, or relative, path to a file containing a ScriptBlock for the Route's main logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"Functions/Routes/Add-PodeRoute/#-login","text":"If supplied, the Route will be flagged to Authentication as being a Route that handles user logins. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Login"},{"location":"Functions/Routes/Add-PodeRoute/#-logout","text":"If supplied, the Route will be flagged to Authentication as being a Route that handles users logging out. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Logout"},{"location":"Functions/Routes/Add-PodeRoute/#-method","text":"The HTTP Method of this Route. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Method"},{"location":"Functions/Routes/Add-PodeRoute/#-middleware","text":"An array of ScriptBlocks for optional Middleware. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/Routes/Add-PodeRoute/#-passthru","text":"If supplied, the route created will be returned so it can be passed through a pipe. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-PassThru"},{"location":"Functions/Routes/Add-PodeRoute/#-path","text":"The URI path for the Route. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Add-PodeRoute/#-scriptblock","text":"A ScriptBlock for the Route's main logic. Type : ScriptBlock Parameter Sets : Script Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Routes/Add-PodeRoute/#-transferencoding","text":"The transfer encoding the Route should use when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-TransferEncoding"},{"location":"Functions/Routes/Add-PodeRoute/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Add-PodeRoute/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Add-PodeRoute/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Add-PodeRoute/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Add-PodeRoute/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Add-PodeRouteGroup/","text":"Add-PodeRouteGroup SYNOPSIS Add a Route Group for multiple Routes. SYNTAX Add-PodeRouteGroup [[-Path] <String>] [-Routes] <ScriptBlock> [[-Middleware] <Object[]>] [[-EndpointName] <String[]>] [[-ContentType] <String>] [[-TransferEncoding] <String>] [[-ErrorContentType] <String>] [[-Authentication] <String>] [-AllowAnon] [<CommonParameters>] DESCRIPTION Add a Route Group for sharing values between multiple Routes. EXAMPLES EXAMPLE 1 Add-PodeRouteGroup -Path '/api' -Routes { Add-PodeRoute -Path '/route1' -Etc } PARAMETERS -AllowAnon If supplied, the Routes will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Authentication The name of an Authentication method which should be used as middleware on the Routes. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False -ContentType The content type to use for the Routes, when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -EndpointName The EndpointName of an Endpoint(s) to use for the Routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -ErrorContentType The content type of any error pages that may get returned. Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False -Middleware An array of ScriptBlocks for optional Middleware to give each Route. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The URI path to use as a base for the Routes, that should be prepended. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Routes A ScriptBlock for adding Routes. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -TransferEncoding The transfer encoding to use for the Routes, when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeRouteGroup"},{"location":"Functions/Routes/Add-PodeRouteGroup/#add-poderoutegroup","text":"","title":"Add-PodeRouteGroup"},{"location":"Functions/Routes/Add-PodeRouteGroup/#synopsis","text":"Add a Route Group for multiple Routes.","title":"SYNOPSIS"},{"location":"Functions/Routes/Add-PodeRouteGroup/#syntax","text":"Add-PodeRouteGroup [[-Path] <String>] [-Routes] <ScriptBlock> [[-Middleware] <Object[]>] [[-EndpointName] <String[]>] [[-ContentType] <String>] [[-TransferEncoding] <String>] [[-ErrorContentType] <String>] [[-Authentication] <String>] [-AllowAnon] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Add-PodeRouteGroup/#description","text":"Add a Route Group for sharing values between multiple Routes.","title":"DESCRIPTION"},{"location":"Functions/Routes/Add-PodeRouteGroup/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Add-PodeRouteGroup/#example-1","text":"Add-PodeRouteGroup -Path '/api' -Routes { Add-PodeRoute -Path '/route1' -Etc }","title":"EXAMPLE 1"},{"location":"Functions/Routes/Add-PodeRouteGroup/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Add-PodeRouteGroup/#-allowanon","text":"If supplied, the Routes will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AllowAnon"},{"location":"Functions/Routes/Add-PodeRouteGroup/#-authentication","text":"The name of an Authentication method which should be used as middleware on the Routes. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Authentication"},{"location":"Functions/Routes/Add-PodeRouteGroup/#-contenttype","text":"The content type to use for the Routes, when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ContentType"},{"location":"Functions/Routes/Add-PodeRouteGroup/#-endpointname","text":"The EndpointName of an Endpoint(s) to use for the Routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Add-PodeRouteGroup/#-errorcontenttype","text":"The content type of any error pages that may get returned. Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ErrorContentType"},{"location":"Functions/Routes/Add-PodeRouteGroup/#-middleware","text":"An array of ScriptBlocks for optional Middleware to give each Route. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/Routes/Add-PodeRouteGroup/#-path","text":"The URI path to use as a base for the Routes, that should be prepended. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Add-PodeRouteGroup/#-routes","text":"A ScriptBlock for adding Routes. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Routes"},{"location":"Functions/Routes/Add-PodeRouteGroup/#-transferencoding","text":"The transfer encoding to use for the Routes, when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-TransferEncoding"},{"location":"Functions/Routes/Add-PodeRouteGroup/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Add-PodeRouteGroup/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Add-PodeRouteGroup/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Add-PodeRouteGroup/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Add-PodeRouteGroup/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Add-PodeSignalRoute/","text":"Add-PodeSignalRoute SYNOPSIS Adds a Signal Route for WebSockets. SYNTAX Script (Default) Add-PodeSignalRoute -Path <String> [-ScriptBlock <ScriptBlock>] [-EndpointName <String[]>] [-ArgumentList <Object[]>] [<CommonParameters>] File Add-PodeSignalRoute -Path <String> [-EndpointName <String[]>] -FilePath <String> [-ArgumentList <Object[]>] [<CommonParameters>] DESCRIPTION Adds a Signal Route, with path, that when called with invoke any logic. EXAMPLES EXAMPLE 1 Add-PodeSignalRoute -Path '/message' -ScriptBlock { /* logic */ } EXAMPLE 2 Add-PodeSignalRoute -Path '/message' -ScriptBlock { /* logic */ } -ArgumentList 'arg1', 'arg2' PARAMETERS -ArgumentList An array of arguments to supply to the Signal Route's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -EndpointName The EndpointName of an Endpoint(s) this Signal Route should be bound against. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FilePath A literal, or relative, path to a file containing a ScriptBlock for the Signal Route's main logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The URI path for the Signal Route. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock A ScriptBlock for the Signal Route's main logic. Type : ScriptBlock Parameter Sets : Script Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeSignalRoute"},{"location":"Functions/Routes/Add-PodeSignalRoute/#add-podesignalroute","text":"","title":"Add-PodeSignalRoute"},{"location":"Functions/Routes/Add-PodeSignalRoute/#synopsis","text":"Adds a Signal Route for WebSockets.","title":"SYNOPSIS"},{"location":"Functions/Routes/Add-PodeSignalRoute/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Routes/Add-PodeSignalRoute/#script-default","text":"Add-PodeSignalRoute -Path <String> [-ScriptBlock <ScriptBlock>] [-EndpointName <String[]>] [-ArgumentList <Object[]>] [<CommonParameters>]","title":"Script (Default)"},{"location":"Functions/Routes/Add-PodeSignalRoute/#file","text":"Add-PodeSignalRoute -Path <String> [-EndpointName <String[]>] -FilePath <String> [-ArgumentList <Object[]>] [<CommonParameters>]","title":"File"},{"location":"Functions/Routes/Add-PodeSignalRoute/#description","text":"Adds a Signal Route, with path, that when called with invoke any logic.","title":"DESCRIPTION"},{"location":"Functions/Routes/Add-PodeSignalRoute/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Add-PodeSignalRoute/#example-1","text":"Add-PodeSignalRoute -Path '/message' -ScriptBlock { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Routes/Add-PodeSignalRoute/#example-2","text":"Add-PodeSignalRoute -Path '/message' -ScriptBlock { /* logic */ } -ArgumentList 'arg1', 'arg2'","title":"EXAMPLE 2"},{"location":"Functions/Routes/Add-PodeSignalRoute/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Add-PodeSignalRoute/#-argumentlist","text":"An array of arguments to supply to the Signal Route's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Routes/Add-PodeSignalRoute/#-endpointname","text":"The EndpointName of an Endpoint(s) this Signal Route should be bound against. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Add-PodeSignalRoute/#-filepath","text":"A literal, or relative, path to a file containing a ScriptBlock for the Signal Route's main logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"Functions/Routes/Add-PodeSignalRoute/#-path","text":"The URI path for the Signal Route. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Add-PodeSignalRoute/#-scriptblock","text":"A ScriptBlock for the Signal Route's main logic. Type : ScriptBlock Parameter Sets : Script Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Routes/Add-PodeSignalRoute/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Add-PodeSignalRoute/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Add-PodeSignalRoute/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Add-PodeSignalRoute/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Add-PodeSignalRoute/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/","text":"Add-PodeSignalRouteGroup SYNOPSIS Adds a Signal Route Group for multiple WebSockets. SYNTAX Add-PodeSignalRouteGroup [[-Path] <String>] [-Routes] <ScriptBlock> [[-EndpointName] <String[]>] [<CommonParameters>] DESCRIPTION Adds a Signal Route Group for sharing values between multiple WebSockets. EXAMPLES EXAMPLE 1 Add-PodeSignalRouteGroup -Path '/signals' -Routes { Add-PodeSignalRoute -Path '/signal1' -Etc } PARAMETERS -EndpointName The EndpointName of an Endpoint(s) to use for the Signal Routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The URI path to use as a base for the Signal Routes, that should be prepended. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Routes A ScriptBlock for adding Signal Routes. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeSignalRouteGroup"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#add-podesignalroutegroup","text":"","title":"Add-PodeSignalRouteGroup"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#synopsis","text":"Adds a Signal Route Group for multiple WebSockets.","title":"SYNOPSIS"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#syntax","text":"Add-PodeSignalRouteGroup [[-Path] <String>] [-Routes] <ScriptBlock> [[-EndpointName] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#description","text":"Adds a Signal Route Group for sharing values between multiple WebSockets.","title":"DESCRIPTION"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#example-1","text":"Add-PodeSignalRouteGroup -Path '/signals' -Routes { Add-PodeSignalRoute -Path '/signal1' -Etc }","title":"EXAMPLE 1"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#-endpointname","text":"The EndpointName of an Endpoint(s) to use for the Signal Routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#-path","text":"The URI path to use as a base for the Signal Routes, that should be prepended. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#-routes","text":"A ScriptBlock for adding Signal Routes. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Routes"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Add-PodeSignalRouteGroup/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Add-PodeStaticRoute/","text":"Add-PodeStaticRoute SYNOPSIS Add a static Route for rendering static content. SYNTAX Add-PodeStaticRoute [-Path] <String> [-Source] <String> [[-Middleware] <Object[]>] [[-EndpointName] <String[]>] [[-ContentType] <String>] [[-TransferEncoding] <String>] [[-Defaults] <String[]>] [[-ErrorContentType] <String>] [[-Authentication] <String>] [-AllowAnon] [-DownloadOnly] [-PassThru] [<CommonParameters>] DESCRIPTION Add a static Route for rendering static content. You can also define default pages to display. EXAMPLES EXAMPLE 1 Add-PodeStaticRoute -Path '/assets' -Source './assets' EXAMPLE 2 Add-PodeStaticRoute -Path '/assets' -Source './assets' -Defaults @('index.html') EXAMPLE 3 Add-PodeStaticRoute -Path '/installers' -Source './exes' -DownloadOnly PARAMETERS -AllowAnon If supplied, the static route will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Authentication The name of an Authentication method which should be used as middleware on this Route. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False -ContentType The content type the static Route should use when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -Defaults An array of default pages to display, such as 'index.html'. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False -DownloadOnly When supplied, all static content on this Route will be attached as downloads - rather than rendered. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -EndpointName The EndpointName of an Endpoint(s) to bind the static Route against. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -ErrorContentType The content type of any error pages that may get returned. Type : String Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False -Middleware An array of ScriptBlocks for optional Middleware. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -PassThru If supplied, the static route created will be returned so it can be passed through a pipe. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Path The URI path for the static Route. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Source The literal, or relative, path to the directory that contains the static content. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -TransferEncoding The transfer encoding the static Route should use when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeStaticRoute"},{"location":"Functions/Routes/Add-PodeStaticRoute/#add-podestaticroute","text":"","title":"Add-PodeStaticRoute"},{"location":"Functions/Routes/Add-PodeStaticRoute/#synopsis","text":"Add a static Route for rendering static content.","title":"SYNOPSIS"},{"location":"Functions/Routes/Add-PodeStaticRoute/#syntax","text":"Add-PodeStaticRoute [-Path] <String> [-Source] <String> [[-Middleware] <Object[]>] [[-EndpointName] <String[]>] [[-ContentType] <String>] [[-TransferEncoding] <String>] [[-Defaults] <String[]>] [[-ErrorContentType] <String>] [[-Authentication] <String>] [-AllowAnon] [-DownloadOnly] [-PassThru] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Add-PodeStaticRoute/#description","text":"Add a static Route for rendering static content. You can also define default pages to display.","title":"DESCRIPTION"},{"location":"Functions/Routes/Add-PodeStaticRoute/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Add-PodeStaticRoute/#example-1","text":"Add-PodeStaticRoute -Path '/assets' -Source './assets'","title":"EXAMPLE 1"},{"location":"Functions/Routes/Add-PodeStaticRoute/#example-2","text":"Add-PodeStaticRoute -Path '/assets' -Source './assets' -Defaults @('index.html')","title":"EXAMPLE 2"},{"location":"Functions/Routes/Add-PodeStaticRoute/#example-3","text":"Add-PodeStaticRoute -Path '/installers' -Source './exes' -DownloadOnly","title":"EXAMPLE 3"},{"location":"Functions/Routes/Add-PodeStaticRoute/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-allowanon","text":"If supplied, the static route will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AllowAnon"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-authentication","text":"The name of an Authentication method which should be used as middleware on this Route. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Authentication"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-contenttype","text":"The content type the static Route should use when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ContentType"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-defaults","text":"An array of default pages to display, such as 'index.html'. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Defaults"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-downloadonly","text":"When supplied, all static content on this Route will be attached as downloads - rather than rendered. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-DownloadOnly"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-endpointname","text":"The EndpointName of an Endpoint(s) to bind the static Route against. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-errorcontenttype","text":"The content type of any error pages that may get returned. Type : String Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ErrorContentType"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-middleware","text":"An array of ScriptBlocks for optional Middleware. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-passthru","text":"If supplied, the static route created will be returned so it can be passed through a pipe. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-PassThru"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-path","text":"The URI path for the static Route. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-source","text":"The literal, or relative, path to the directory that contains the static content. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Source"},{"location":"Functions/Routes/Add-PodeStaticRoute/#-transferencoding","text":"The transfer encoding the static Route should use when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-TransferEncoding"},{"location":"Functions/Routes/Add-PodeStaticRoute/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Add-PodeStaticRoute/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Add-PodeStaticRoute/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Add-PodeStaticRoute/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Add-PodeStaticRoute/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/","text":"Add-PodeStaticRouteGroup SYNOPSIS Add a Static Route Group for multiple Static Routes. SYNTAX Add-PodeStaticRouteGroup [[-Path] <String>] [[-Source] <String>] [-Routes] <ScriptBlock> [[-Middleware] <Object[]>] [[-EndpointName] <String[]>] [[-ContentType] <String>] [[-TransferEncoding] <String>] [[-Defaults] <String[]>] [[-ErrorContentType] <String>] [[-Authentication] <String>] [-AllowAnon] [-DownloadOnly] [<CommonParameters>] DESCRIPTION Add a Static Route Group for sharing values between multiple Static Routes. EXAMPLES EXAMPLE 1 Add-PodeStaticRouteGroup -Path '/static' -Routes { Add-PodeStaticRoute -Path '/images' -Etc } PARAMETERS -AllowAnon If supplied, the Static Routes will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Authentication The name of an Authentication method which should be used as middleware on the Static Routes. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False -ContentType The content type to use for the Static Routes, when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False -Defaults An array of default pages to display, such as 'index.html', for each Static Route. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False -DownloadOnly When supplied, all static content on the Routes will be attached as downloads - rather than rendered. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -EndpointName The EndpointName of an Endpoint(s) to use for the Static Routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -ErrorContentType The content type of any error pages that may get returned. Type : String Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False -Middleware An array of ScriptBlocks for optional Middleware to give each Static Route. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The URI path to use as a base for the Static Routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Routes A ScriptBlock for adding Static Routes. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Source A literal, or relative, base path to the directory that contains the static content, that should be prepended. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -TransferEncoding The transfer encoding to use for the Static Routes, when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeStaticRouteGroup"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#add-podestaticroutegroup","text":"","title":"Add-PodeStaticRouteGroup"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#synopsis","text":"Add a Static Route Group for multiple Static Routes.","title":"SYNOPSIS"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#syntax","text":"Add-PodeStaticRouteGroup [[-Path] <String>] [[-Source] <String>] [-Routes] <ScriptBlock> [[-Middleware] <Object[]>] [[-EndpointName] <String[]>] [[-ContentType] <String>] [[-TransferEncoding] <String>] [[-Defaults] <String[]>] [[-ErrorContentType] <String>] [[-Authentication] <String>] [-AllowAnon] [-DownloadOnly] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#description","text":"Add a Static Route Group for sharing values between multiple Static Routes.","title":"DESCRIPTION"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#example-1","text":"Add-PodeStaticRouteGroup -Path '/static' -Routes { Add-PodeStaticRoute -Path '/images' -Etc }","title":"EXAMPLE 1"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-allowanon","text":"If supplied, the Static Routes will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AllowAnon"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-authentication","text":"The name of an Authentication method which should be used as middleware on the Static Routes. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Authentication"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-contenttype","text":"The content type to use for the Static Routes, when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ContentType"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-defaults","text":"An array of default pages to display, such as 'index.html', for each Static Route. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Defaults"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-downloadonly","text":"When supplied, all static content on the Routes will be attached as downloads - rather than rendered. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-DownloadOnly"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-endpointname","text":"The EndpointName of an Endpoint(s) to use for the Static Routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-errorcontenttype","text":"The content type of any error pages that may get returned. Type : String Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ErrorContentType"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-middleware","text":"An array of ScriptBlocks for optional Middleware to give each Static Route. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-path","text":"The URI path to use as a base for the Static Routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-routes","text":"A ScriptBlock for adding Static Routes. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Routes"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-source","text":"A literal, or relative, base path to the directory that contains the static content, that should be prepended. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Source"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#-transferencoding","text":"The transfer encoding to use for the Static Routes, when parsing any payloads. Type : String Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-TransferEncoding"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Add-PodeStaticRouteGroup/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Clear-PodeRoutes/","text":"Clear-PodeRoutes SYNOPSIS Removes all added Routes, or Routes for a specific Method. SYNTAX Clear-PodeRoutes [[-Method] <String>] [<CommonParameters>] DESCRIPTION Removes all added Routes, or Routes for a specific Method. EXAMPLES EXAMPLE 1 Clear-PodeRoutes EXAMPLE 2 Clear-PodeRoutes -Method Get PARAMETERS -Method The Method to from which to remove all Routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeRoutes"},{"location":"Functions/Routes/Clear-PodeRoutes/#clear-poderoutes","text":"","title":"Clear-PodeRoutes"},{"location":"Functions/Routes/Clear-PodeRoutes/#synopsis","text":"Removes all added Routes, or Routes for a specific Method.","title":"SYNOPSIS"},{"location":"Functions/Routes/Clear-PodeRoutes/#syntax","text":"Clear-PodeRoutes [[-Method] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Clear-PodeRoutes/#description","text":"Removes all added Routes, or Routes for a specific Method.","title":"DESCRIPTION"},{"location":"Functions/Routes/Clear-PodeRoutes/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Clear-PodeRoutes/#example-1","text":"Clear-PodeRoutes","title":"EXAMPLE 1"},{"location":"Functions/Routes/Clear-PodeRoutes/#example-2","text":"Clear-PodeRoutes -Method Get","title":"EXAMPLE 2"},{"location":"Functions/Routes/Clear-PodeRoutes/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Clear-PodeRoutes/#-method","text":"The Method to from which to remove all Routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Method"},{"location":"Functions/Routes/Clear-PodeRoutes/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Clear-PodeRoutes/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Clear-PodeRoutes/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Clear-PodeRoutes/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Clear-PodeRoutes/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/","text":"Clear-PodeSignalRoutes SYNOPSIS Removes all added Signal Routes. SYNTAX Clear-PodeSignalRoutes [<CommonParameters>] DESCRIPTION Removes all added Signal Routes. EXAMPLES EXAMPLE 1 Clear-PodeSignalRoutes PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeSignalRoutes"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#clear-podesignalroutes","text":"","title":"Clear-PodeSignalRoutes"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#synopsis","text":"Removes all added Signal Routes.","title":"SYNOPSIS"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#syntax","text":"Clear-PodeSignalRoutes [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#description","text":"Removes all added Signal Routes.","title":"DESCRIPTION"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#example-1","text":"Clear-PodeSignalRoutes","title":"EXAMPLE 1"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Clear-PodeSignalRoutes/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/","text":"Clear-PodeStaticRoutes SYNOPSIS Removes all added static Routes. SYNTAX Clear-PodeStaticRoutes [<CommonParameters>] DESCRIPTION Removes all added static Routes. EXAMPLES EXAMPLE 1 Clear-PodeStaticRoutes PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeStaticRoutes"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#clear-podestaticroutes","text":"","title":"Clear-PodeStaticRoutes"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#synopsis","text":"Removes all added static Routes.","title":"SYNOPSIS"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#syntax","text":"Clear-PodeStaticRoutes [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#description","text":"Removes all added static Routes.","title":"DESCRIPTION"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#example-1","text":"Clear-PodeStaticRoutes","title":"EXAMPLE 1"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Clear-PodeStaticRoutes/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/ConvertTo-PodeRoute/","text":"ConvertTo-PodeRoute SYNOPSIS Takes an array of Commands, or a Module, and converts them into Routes. SYNTAX ConvertTo-PodeRoute [[-Commands] <String[]>] [[-Module] <String>] [[-Method] <String>] [[-Path] <String>] [[-Middleware] <Object[]>] [[-Authentication] <String>] [-AllowAnon] [-NoVerb] [-NoOpenApi] [<CommonParameters>] DESCRIPTION Takes an array of Commands (Functions/Aliases), or a Module, and generates appropriate Routes for the commands. EXAMPLES EXAMPLE 1 ConvertTo-PodeRoute -Commands @('Get-ChildItem', 'Get-Host', 'Invoke-Expression') -Middleware { ... } EXAMPLE 2 ConvertTo-PodeRoute -Commands @('Get-ChildItem', 'Get-Host', 'Invoke-Expression') -Authentication AuthName EXAMPLE 3 ConvertTo-PodeRoute -Module Pester -Path '/api' EXAMPLE 4 ConvertTo-PodeRoute -Commands @('Invoke-Pester') -Module Pester PARAMETERS -AllowAnon If supplied, the Route will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Authentication The name of an Authentication method which should be used as middleware on this Route. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False -Commands An array of Commands to convert - if a Module is supplied, these Commands must be present within that Module. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Method An override HTTP method to use when generating the Routes. If not supplied, Pode will make a best guess based on the Command's Verb. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Middleware Like normal Routes, an array of Middleware that will be applied to all generated Routes. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -Module A Module whose exported commands will be converted. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -NoOpenApi If supplied, no OpenAPI definitions will be generated for the routes created. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -NoVerb If supplied, the Command's Verb will not be included in the Route's path. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Path An optional Path for the Route, to prepend before the Command Name and Module. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : / Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"ConvertTo-PodeRoute"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#convertto-poderoute","text":"","title":"ConvertTo-PodeRoute"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#synopsis","text":"Takes an array of Commands, or a Module, and converts them into Routes.","title":"SYNOPSIS"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#syntax","text":"ConvertTo-PodeRoute [[-Commands] <String[]>] [[-Module] <String>] [[-Method] <String>] [[-Path] <String>] [[-Middleware] <Object[]>] [[-Authentication] <String>] [-AllowAnon] [-NoVerb] [-NoOpenApi] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#description","text":"Takes an array of Commands (Functions/Aliases), or a Module, and generates appropriate Routes for the commands.","title":"DESCRIPTION"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#example-1","text":"ConvertTo-PodeRoute -Commands @('Get-ChildItem', 'Get-Host', 'Invoke-Expression') -Middleware { ... }","title":"EXAMPLE 1"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#example-2","text":"ConvertTo-PodeRoute -Commands @('Get-ChildItem', 'Get-Host', 'Invoke-Expression') -Authentication AuthName","title":"EXAMPLE 2"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#example-3","text":"ConvertTo-PodeRoute -Module Pester -Path '/api'","title":"EXAMPLE 3"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#example-4","text":"ConvertTo-PodeRoute -Commands @('Invoke-Pester') -Module Pester","title":"EXAMPLE 4"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#-allowanon","text":"If supplied, the Route will allow anonymous access for non-authenticated users. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AllowAnon"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#-authentication","text":"The name of an Authentication method which should be used as middleware on this Route. Type : String Parameter Sets : (All) Aliases : Auth Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Authentication"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#-commands","text":"An array of Commands to convert - if a Module is supplied, these Commands must be present within that Module. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Commands"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#-method","text":"An override HTTP method to use when generating the Routes. If not supplied, Pode will make a best guess based on the Command's Verb. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Method"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#-middleware","text":"Like normal Routes, an array of Middleware that will be applied to all generated Routes. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Middleware"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#-module","text":"A Module whose exported commands will be converted. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Module"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#-noopenapi","text":"If supplied, no OpenAPI definitions will be generated for the routes created. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoOpenApi"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#-noverb","text":"If supplied, the Command's Verb will not be included in the Route's path. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoVerb"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#-path","text":"An optional Path for the Route, to prepend before the Command Name and Module. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : / Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/ConvertTo-PodeRoute/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Get-PodeRoute/","text":"Get-PodeRoute SYNOPSIS Get a Route(s). SYNTAX Get-PodeRoute [[-Method] <String>] [[-Path] <String>] [[-EndpointName] <String[]>] [<CommonParameters>] DESCRIPTION Get a Route(s). EXAMPLES EXAMPLE 1 Get-PodeRoute -Method Get -Path '/about' EXAMPLE 2 Get-PodeRoute -Method Post -Path '/users/:userId' -EndpointName User PARAMETERS -EndpointName The name of an endpoint to filter routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Method A Method to filter the routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path A Path to filter the routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeRoute"},{"location":"Functions/Routes/Get-PodeRoute/#get-poderoute","text":"","title":"Get-PodeRoute"},{"location":"Functions/Routes/Get-PodeRoute/#synopsis","text":"Get a Route(s).","title":"SYNOPSIS"},{"location":"Functions/Routes/Get-PodeRoute/#syntax","text":"Get-PodeRoute [[-Method] <String>] [[-Path] <String>] [[-EndpointName] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Get-PodeRoute/#description","text":"Get a Route(s).","title":"DESCRIPTION"},{"location":"Functions/Routes/Get-PodeRoute/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Get-PodeRoute/#example-1","text":"Get-PodeRoute -Method Get -Path '/about'","title":"EXAMPLE 1"},{"location":"Functions/Routes/Get-PodeRoute/#example-2","text":"Get-PodeRoute -Method Post -Path '/users/:userId' -EndpointName User","title":"EXAMPLE 2"},{"location":"Functions/Routes/Get-PodeRoute/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Get-PodeRoute/#-endpointname","text":"The name of an endpoint to filter routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Get-PodeRoute/#-method","text":"A Method to filter the routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Method"},{"location":"Functions/Routes/Get-PodeRoute/#-path","text":"A Path to filter the routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Get-PodeRoute/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Get-PodeRoute/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Get-PodeRoute/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Get-PodeRoute/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Get-PodeRoute/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Get-PodeSignalRoute/","text":"Get-PodeSignalRoute SYNOPSIS Get a Signal Route(s). SYNTAX Get-PodeSignalRoute [[-Path] <String>] [[-EndpointName] <String[]>] [<CommonParameters>] DESCRIPTION Get a Signal Route(s). EXAMPLES EXAMPLE 1 Get-PodeSignalRoute -Path '/message' PARAMETERS -EndpointName The name of an endpoint to filter signal routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path A Path to filter the signal routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeSignalRoute"},{"location":"Functions/Routes/Get-PodeSignalRoute/#get-podesignalroute","text":"","title":"Get-PodeSignalRoute"},{"location":"Functions/Routes/Get-PodeSignalRoute/#synopsis","text":"Get a Signal Route(s).","title":"SYNOPSIS"},{"location":"Functions/Routes/Get-PodeSignalRoute/#syntax","text":"Get-PodeSignalRoute [[-Path] <String>] [[-EndpointName] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Get-PodeSignalRoute/#description","text":"Get a Signal Route(s).","title":"DESCRIPTION"},{"location":"Functions/Routes/Get-PodeSignalRoute/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Get-PodeSignalRoute/#example-1","text":"Get-PodeSignalRoute -Path '/message'","title":"EXAMPLE 1"},{"location":"Functions/Routes/Get-PodeSignalRoute/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Get-PodeSignalRoute/#-endpointname","text":"The name of an endpoint to filter signal routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Get-PodeSignalRoute/#-path","text":"A Path to filter the signal routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Get-PodeSignalRoute/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Get-PodeSignalRoute/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Get-PodeSignalRoute/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Get-PodeSignalRoute/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Get-PodeSignalRoute/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Get-PodeStaticRoute/","text":"Get-PodeStaticRoute SYNOPSIS Get a static Route(s). SYNTAX Get-PodeStaticRoute [[-Path] <String>] [[-EndpointName] <String[]>] [<CommonParameters>] DESCRIPTION Get a static Route(s). EXAMPLES EXAMPLE 1 Get-PodeStaticRoute -Path '/assets' EXAMPLE 2 Get-PodeStaticRoute -Path '/assets' -EndpointName User PARAMETERS -EndpointName The name of an endpoint to filter static routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path A Path to filter the static routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeStaticRoute"},{"location":"Functions/Routes/Get-PodeStaticRoute/#get-podestaticroute","text":"","title":"Get-PodeStaticRoute"},{"location":"Functions/Routes/Get-PodeStaticRoute/#synopsis","text":"Get a static Route(s).","title":"SYNOPSIS"},{"location":"Functions/Routes/Get-PodeStaticRoute/#syntax","text":"Get-PodeStaticRoute [[-Path] <String>] [[-EndpointName] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Get-PodeStaticRoute/#description","text":"Get a static Route(s).","title":"DESCRIPTION"},{"location":"Functions/Routes/Get-PodeStaticRoute/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Get-PodeStaticRoute/#example-1","text":"Get-PodeStaticRoute -Path '/assets'","title":"EXAMPLE 1"},{"location":"Functions/Routes/Get-PodeStaticRoute/#example-2","text":"Get-PodeStaticRoute -Path '/assets' -EndpointName User","title":"EXAMPLE 2"},{"location":"Functions/Routes/Get-PodeStaticRoute/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Get-PodeStaticRoute/#-endpointname","text":"The name of an endpoint to filter static routes. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Get-PodeStaticRoute/#-path","text":"A Path to filter the static routes. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Get-PodeStaticRoute/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Get-PodeStaticRoute/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Get-PodeStaticRoute/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Get-PodeStaticRoute/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Get-PodeStaticRoute/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Remove-PodeRoute/","text":"Remove-PodeRoute SYNOPSIS Remove a specific Route. SYNTAX Remove-PodeRoute [-Method] <String> [-Path] <String> [[-EndpointName] <String>] [<CommonParameters>] DESCRIPTION Remove a specific Route. EXAMPLES EXAMPLE 1 Remove-PodeRoute -Method Get -Route '/about' EXAMPLE 2 Remove-PodeRoute -Method Post -Route '/users/:userId' -EndpointName User PARAMETERS -EndpointName The EndpointName of an Endpoint(s) bound to the Route to be removed. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Method The method of the Route to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The path of the Route to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeRoute"},{"location":"Functions/Routes/Remove-PodeRoute/#remove-poderoute","text":"","title":"Remove-PodeRoute"},{"location":"Functions/Routes/Remove-PodeRoute/#synopsis","text":"Remove a specific Route.","title":"SYNOPSIS"},{"location":"Functions/Routes/Remove-PodeRoute/#syntax","text":"Remove-PodeRoute [-Method] <String> [-Path] <String> [[-EndpointName] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Remove-PodeRoute/#description","text":"Remove a specific Route.","title":"DESCRIPTION"},{"location":"Functions/Routes/Remove-PodeRoute/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Remove-PodeRoute/#example-1","text":"Remove-PodeRoute -Method Get -Route '/about'","title":"EXAMPLE 1"},{"location":"Functions/Routes/Remove-PodeRoute/#example-2","text":"Remove-PodeRoute -Method Post -Route '/users/:userId' -EndpointName User","title":"EXAMPLE 2"},{"location":"Functions/Routes/Remove-PodeRoute/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Remove-PodeRoute/#-endpointname","text":"The EndpointName of an Endpoint(s) bound to the Route to be removed. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Remove-PodeRoute/#-method","text":"The method of the Route to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Method"},{"location":"Functions/Routes/Remove-PodeRoute/#-path","text":"The path of the Route to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Remove-PodeRoute/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Remove-PodeRoute/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Remove-PodeRoute/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Remove-PodeRoute/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Remove-PodeRoute/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Remove-PodeSignalRoute/","text":"Remove-PodeSignalRoute SYNOPSIS Remove a specific Signal Route. SYNTAX Remove-PodeSignalRoute [-Path] <String> [[-EndpointName] <String>] [<CommonParameters>] DESCRIPTION Remove a specific Signal Route. EXAMPLES EXAMPLE 1 Remove-PodeSignalRoute -Route '/message' PARAMETERS -EndpointName The EndpointName of an Endpoint(s) bound to the Signal Route to be removed. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The path of the Signal Route to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSignalRoute"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#remove-podesignalroute","text":"","title":"Remove-PodeSignalRoute"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#synopsis","text":"Remove a specific Signal Route.","title":"SYNOPSIS"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#syntax","text":"Remove-PodeSignalRoute [-Path] <String> [[-EndpointName] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#description","text":"Remove a specific Signal Route.","title":"DESCRIPTION"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#example-1","text":"Remove-PodeSignalRoute -Route '/message'","title":"EXAMPLE 1"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#-endpointname","text":"The EndpointName of an Endpoint(s) bound to the Signal Route to be removed. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#-path","text":"The path of the Signal Route to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Remove-PodeSignalRoute/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Remove-PodeStaticRoute/","text":"Remove-PodeStaticRoute SYNOPSIS Remove a specific static Route. SYNTAX Remove-PodeStaticRoute [-Path] <String> [[-EndpointName] <String>] [<CommonParameters>] DESCRIPTION Remove a specific static Route. EXAMPLES EXAMPLE 1 Remove-PodeStaticRoute -Path '/assets' PARAMETERS -EndpointName The EndpointName of an Endpoint(s) bound to the static Route to be removed. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The path of the static Route to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeStaticRoute"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#remove-podestaticroute","text":"","title":"Remove-PodeStaticRoute"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#synopsis","text":"Remove a specific static Route.","title":"SYNOPSIS"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#syntax","text":"Remove-PodeStaticRoute [-Path] <String> [[-EndpointName] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#description","text":"Remove a specific static Route.","title":"DESCRIPTION"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#example-1","text":"Remove-PodeStaticRoute -Path '/assets'","title":"EXAMPLE 1"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#-endpointname","text":"The EndpointName of an Endpoint(s) bound to the static Route to be removed. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#-path","text":"The path of the static Route to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Remove-PodeStaticRoute/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Routes/Use-PodeRoutes/","text":"Use-PodeRoutes SYNOPSIS Automatically loads route ps1 files SYNTAX Use-PodeRoutes [[-Path] <String>] [<CommonParameters>] DESCRIPTION Automatically loads route ps1 files from either a /routes folder, or a custom folder. Saves space dot-sourcing them all one-by-one. EXAMPLES EXAMPLE 1 Use-PodeRoutes EXAMPLE 2 Use-PodeRoutes -Path './my-routes' PARAMETERS -Path Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeRoutes"},{"location":"Functions/Routes/Use-PodeRoutes/#use-poderoutes","text":"","title":"Use-PodeRoutes"},{"location":"Functions/Routes/Use-PodeRoutes/#synopsis","text":"Automatically loads route ps1 files","title":"SYNOPSIS"},{"location":"Functions/Routes/Use-PodeRoutes/#syntax","text":"Use-PodeRoutes [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Routes/Use-PodeRoutes/#description","text":"Automatically loads route ps1 files from either a /routes folder, or a custom folder. Saves space dot-sourcing them all one-by-one.","title":"DESCRIPTION"},{"location":"Functions/Routes/Use-PodeRoutes/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Routes/Use-PodeRoutes/#example-1","text":"Use-PodeRoutes","title":"EXAMPLE 1"},{"location":"Functions/Routes/Use-PodeRoutes/#example-2","text":"Use-PodeRoutes -Path './my-routes'","title":"EXAMPLE 2"},{"location":"Functions/Routes/Use-PodeRoutes/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Routes/Use-PodeRoutes/#-path","text":"Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Routes/Use-PodeRoutes/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Routes/Use-PodeRoutes/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Routes/Use-PodeRoutes/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Routes/Use-PodeRoutes/#notes","text":"","title":"NOTES"},{"location":"Functions/Routes/Use-PodeRoutes/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Schedules/Add-PodeSchedule/","text":"Add-PodeSchedule SYNOPSIS Adds a new Schedule with logic to periodically invoke, defined using Cron Expressions. SYNTAX Script (Default) Add-PodeSchedule -Name <String> -Cron <String[]> -ScriptBlock <ScriptBlock> [-Limit <Int32>] [-StartTime <DateTime>] [-EndTime <DateTime>] [-ArgumentList <Hashtable>] [-OnStart] [<CommonParameters>] File Add-PodeSchedule -Name <String> -Cron <String[]> [-Limit <Int32>] [-StartTime <DateTime>] [-EndTime <DateTime>] -FilePath <String> [-ArgumentList <Hashtable>] [-OnStart] [<CommonParameters>] DESCRIPTION Adds a new Schedule with logic to periodically invoke, defined using Cron Expressions. EXAMPLES EXAMPLE 1 Add-PodeSchedule -Name 'RunEveryMinute' -Cron '@minutely' -ScriptBlock { /* logic */ } EXAMPLE 2 Add-PodeSchedule -Name 'RunEveryTuesday' -Cron '0 0 * * TUE' -ScriptBlock { /* logic */ } EXAMPLE 3 Add-PodeSchedule -Name 'StartAfter2days' -Cron '@hourly' -StartTime [DateTime]::Now.AddDays(2) -ScriptBlock { /* logic */ } EXAMPLE 4 Add-PodeSchedule -Name 'Args' -Cron '@minutely' -ScriptBlock { /* logic */ } -ArgumentList @{ Arg1 = 'value' } PARAMETERS -ArgumentList A hashtable of arguments to supply to the Schedule's ScriptBlock. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Cron One, or an Array, of Cron Expressions to define when the Schedule should trigger. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -EndTime A DateTime for when the Schedule should stop triggering, and be removed. Type : DateTime Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FilePath A literal, or relative, path to a file containing a ScriptBlock for the Schedule's logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Limit The number of times the Schedule should trigger before being removed. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Schedule. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -OnStart If supplied, the schedule will trigger when the server starts, regardless if the cron-expression matches the current time. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The script defining the Schedule's logic. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -StartTime A DateTime for when the Schedule should start triggering. Type : DateTime Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeSchedule"},{"location":"Functions/Schedules/Add-PodeSchedule/#add-podeschedule","text":"","title":"Add-PodeSchedule"},{"location":"Functions/Schedules/Add-PodeSchedule/#synopsis","text":"Adds a new Schedule with logic to periodically invoke, defined using Cron Expressions.","title":"SYNOPSIS"},{"location":"Functions/Schedules/Add-PodeSchedule/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Schedules/Add-PodeSchedule/#script-default","text":"Add-PodeSchedule -Name <String> -Cron <String[]> -ScriptBlock <ScriptBlock> [-Limit <Int32>] [-StartTime <DateTime>] [-EndTime <DateTime>] [-ArgumentList <Hashtable>] [-OnStart] [<CommonParameters>]","title":"Script (Default)"},{"location":"Functions/Schedules/Add-PodeSchedule/#file","text":"Add-PodeSchedule -Name <String> -Cron <String[]> [-Limit <Int32>] [-StartTime <DateTime>] [-EndTime <DateTime>] -FilePath <String> [-ArgumentList <Hashtable>] [-OnStart] [<CommonParameters>]","title":"File"},{"location":"Functions/Schedules/Add-PodeSchedule/#description","text":"Adds a new Schedule with logic to periodically invoke, defined using Cron Expressions.","title":"DESCRIPTION"},{"location":"Functions/Schedules/Add-PodeSchedule/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Schedules/Add-PodeSchedule/#example-1","text":"Add-PodeSchedule -Name 'RunEveryMinute' -Cron '@minutely' -ScriptBlock { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Schedules/Add-PodeSchedule/#example-2","text":"Add-PodeSchedule -Name 'RunEveryTuesday' -Cron '0 0 * * TUE' -ScriptBlock { /* logic */ }","title":"EXAMPLE 2"},{"location":"Functions/Schedules/Add-PodeSchedule/#example-3","text":"Add-PodeSchedule -Name 'StartAfter2days' -Cron '@hourly' -StartTime [DateTime]::Now.AddDays(2) -ScriptBlock { /* logic */ }","title":"EXAMPLE 3"},{"location":"Functions/Schedules/Add-PodeSchedule/#example-4","text":"Add-PodeSchedule -Name 'Args' -Cron '@minutely' -ScriptBlock { /* logic */ } -ArgumentList @{ Arg1 = 'value' }","title":"EXAMPLE 4"},{"location":"Functions/Schedules/Add-PodeSchedule/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Schedules/Add-PodeSchedule/#-argumentlist","text":"A hashtable of arguments to supply to the Schedule's ScriptBlock. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Schedules/Add-PodeSchedule/#-cron","text":"One, or an Array, of Cron Expressions to define when the Schedule should trigger. Type : String[] Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Cron"},{"location":"Functions/Schedules/Add-PodeSchedule/#-endtime","text":"A DateTime for when the Schedule should stop triggering, and be removed. Type : DateTime Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndTime"},{"location":"Functions/Schedules/Add-PodeSchedule/#-filepath","text":"A literal, or relative, path to a file containing a ScriptBlock for the Schedule's logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"Functions/Schedules/Add-PodeSchedule/#-limit","text":"The number of times the Schedule should trigger before being removed. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Limit"},{"location":"Functions/Schedules/Add-PodeSchedule/#-name","text":"The Name of the Schedule. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Schedules/Add-PodeSchedule/#-onstart","text":"If supplied, the schedule will trigger when the server starts, regardless if the cron-expression matches the current time. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-OnStart"},{"location":"Functions/Schedules/Add-PodeSchedule/#-scriptblock","text":"The script defining the Schedule's logic. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Schedules/Add-PodeSchedule/#-starttime","text":"A DateTime for when the Schedule should start triggering. Type : DateTime Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-StartTime"},{"location":"Functions/Schedules/Add-PodeSchedule/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Schedules/Add-PodeSchedule/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Schedules/Add-PodeSchedule/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Schedules/Add-PodeSchedule/#notes","text":"","title":"NOTES"},{"location":"Functions/Schedules/Add-PodeSchedule/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Schedules/Clear-PodeSchedules/","text":"Clear-PodeSchedules SYNOPSIS Removes all Schedules. SYNTAX Clear-PodeSchedules [<CommonParameters>] DESCRIPTION Removes all Schedules. EXAMPLES EXAMPLE 1 Clear-PodeSchedules PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeSchedules"},{"location":"Functions/Schedules/Clear-PodeSchedules/#clear-podeschedules","text":"","title":"Clear-PodeSchedules"},{"location":"Functions/Schedules/Clear-PodeSchedules/#synopsis","text":"Removes all Schedules.","title":"SYNOPSIS"},{"location":"Functions/Schedules/Clear-PodeSchedules/#syntax","text":"Clear-PodeSchedules [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Schedules/Clear-PodeSchedules/#description","text":"Removes all Schedules.","title":"DESCRIPTION"},{"location":"Functions/Schedules/Clear-PodeSchedules/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Schedules/Clear-PodeSchedules/#example-1","text":"Clear-PodeSchedules","title":"EXAMPLE 1"},{"location":"Functions/Schedules/Clear-PodeSchedules/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Schedules/Clear-PodeSchedules/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Schedules/Clear-PodeSchedules/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Schedules/Clear-PodeSchedules/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Schedules/Clear-PodeSchedules/#notes","text":"","title":"NOTES"},{"location":"Functions/Schedules/Clear-PodeSchedules/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Schedules/Edit-PodeSchedule/","text":"Edit-PodeSchedule SYNOPSIS Edits an existing Schedule. SYNTAX Edit-PodeSchedule [-Name] <String> [[-Cron] <String[]>] [[-ScriptBlock] <ScriptBlock>] [[-ArgumentList] <Hashtable>] [<CommonParameters>] DESCRIPTION Edits an existing Schedule's properties, such an cron expressions or scriptblock. EXAMPLES EXAMPLE 1 Edit-PodeSchedule -Name 'Hello' -Cron '@minutely' EXAMPLE 2 Edit-PodeSchedule -Name 'Hello' -Cron @('@hourly', '0 0 * * TUE') PARAMETERS -ArgumentList Any new Arguments for the Schedule. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Cron Any new Cron Expressions for the Schedule. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Schedule. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -ScriptBlock The new ScriptBlock for the Schedule. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Edit-PodeSchedule"},{"location":"Functions/Schedules/Edit-PodeSchedule/#edit-podeschedule","text":"","title":"Edit-PodeSchedule"},{"location":"Functions/Schedules/Edit-PodeSchedule/#synopsis","text":"Edits an existing Schedule.","title":"SYNOPSIS"},{"location":"Functions/Schedules/Edit-PodeSchedule/#syntax","text":"Edit-PodeSchedule [-Name] <String> [[-Cron] <String[]>] [[-ScriptBlock] <ScriptBlock>] [[-ArgumentList] <Hashtable>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Schedules/Edit-PodeSchedule/#description","text":"Edits an existing Schedule's properties, such an cron expressions or scriptblock.","title":"DESCRIPTION"},{"location":"Functions/Schedules/Edit-PodeSchedule/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Schedules/Edit-PodeSchedule/#example-1","text":"Edit-PodeSchedule -Name 'Hello' -Cron '@minutely'","title":"EXAMPLE 1"},{"location":"Functions/Schedules/Edit-PodeSchedule/#example-2","text":"Edit-PodeSchedule -Name 'Hello' -Cron @('@hourly', '0 0 * * TUE')","title":"EXAMPLE 2"},{"location":"Functions/Schedules/Edit-PodeSchedule/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Schedules/Edit-PodeSchedule/#-argumentlist","text":"Any new Arguments for the Schedule. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Schedules/Edit-PodeSchedule/#-cron","text":"Any new Cron Expressions for the Schedule. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Cron"},{"location":"Functions/Schedules/Edit-PodeSchedule/#-name","text":"The Name of the Schedule. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Schedules/Edit-PodeSchedule/#-scriptblock","text":"The new ScriptBlock for the Schedule. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Schedules/Edit-PodeSchedule/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Schedules/Edit-PodeSchedule/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Schedules/Edit-PodeSchedule/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Schedules/Edit-PodeSchedule/#notes","text":"","title":"NOTES"},{"location":"Functions/Schedules/Edit-PodeSchedule/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Schedules/Get-PodeSchedule/","text":"Get-PodeSchedule SYNOPSIS Returns any defined schedules. SYNTAX Get-PodeSchedule [[-Name] <String[]>] [[-StartTime] <Object>] [[-EndTime] <Object>] [<CommonParameters>] DESCRIPTION Returns any defined schedules, with support for filtering. EXAMPLES EXAMPLE 1 Get-PodeSchedule EXAMPLE 2 Get-PodeSchedule -Name Name1, Name2 EXAMPLE 3 Get-PodeSchedule -Name Name1, Name2 -StartTime [datetime]::new(2020, 3, 1) -EndTime [datetime]::new(2020, 3, 31) PARAMETERS -EndTime An optional EndTime to only return Schedules that will trigger before this date. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name Any schedule Names to filter the schedules. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -StartTime An optional StartTime to only return Schedules that will trigger after this date. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeSchedule"},{"location":"Functions/Schedules/Get-PodeSchedule/#get-podeschedule","text":"","title":"Get-PodeSchedule"},{"location":"Functions/Schedules/Get-PodeSchedule/#synopsis","text":"Returns any defined schedules.","title":"SYNOPSIS"},{"location":"Functions/Schedules/Get-PodeSchedule/#syntax","text":"Get-PodeSchedule [[-Name] <String[]>] [[-StartTime] <Object>] [[-EndTime] <Object>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Schedules/Get-PodeSchedule/#description","text":"Returns any defined schedules, with support for filtering.","title":"DESCRIPTION"},{"location":"Functions/Schedules/Get-PodeSchedule/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Schedules/Get-PodeSchedule/#example-1","text":"Get-PodeSchedule","title":"EXAMPLE 1"},{"location":"Functions/Schedules/Get-PodeSchedule/#example-2","text":"Get-PodeSchedule -Name Name1, Name2","title":"EXAMPLE 2"},{"location":"Functions/Schedules/Get-PodeSchedule/#example-3","text":"Get-PodeSchedule -Name Name1, Name2 -StartTime [datetime]::new(2020, 3, 1) -EndTime [datetime]::new(2020, 3, 31)","title":"EXAMPLE 3"},{"location":"Functions/Schedules/Get-PodeSchedule/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Schedules/Get-PodeSchedule/#-endtime","text":"An optional EndTime to only return Schedules that will trigger before this date. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndTime"},{"location":"Functions/Schedules/Get-PodeSchedule/#-name","text":"Any schedule Names to filter the schedules. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Schedules/Get-PodeSchedule/#-starttime","text":"An optional StartTime to only return Schedules that will trigger after this date. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-StartTime"},{"location":"Functions/Schedules/Get-PodeSchedule/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Schedules/Get-PodeSchedule/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Schedules/Get-PodeSchedule/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Schedules/Get-PodeSchedule/#notes","text":"","title":"NOTES"},{"location":"Functions/Schedules/Get-PodeSchedule/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/","text":"Get-PodeScheduleNextTrigger SYNOPSIS Get the next trigger time for a Schedule. SYNTAX Get-PodeScheduleNextTrigger [-Name] <String> [[-DateTime] <Object>] [<CommonParameters>] DESCRIPTION Get the next trigger time for a Schedule, either from the Schedule's StartTime or from a defined DateTime. EXAMPLES EXAMPLE 1 Get-PodeScheduleNextTrigger -Name Schedule1 EXAMPLE 2 Get-PodeScheduleNextTrigger -Name Schedule1 -DateTime [datetime]::new(2020, 3, 10) PARAMETERS -DateTime An optional specific DateTime to get the next trigger time after. This DateTime must be between the Schedule's StartTime and EndTime. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Schedule. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeScheduleNextTrigger"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#get-podeschedulenexttrigger","text":"","title":"Get-PodeScheduleNextTrigger"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#synopsis","text":"Get the next trigger time for a Schedule.","title":"SYNOPSIS"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#syntax","text":"Get-PodeScheduleNextTrigger [-Name] <String> [[-DateTime] <Object>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#description","text":"Get the next trigger time for a Schedule, either from the Schedule's StartTime or from a defined DateTime.","title":"DESCRIPTION"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#example-1","text":"Get-PodeScheduleNextTrigger -Name Schedule1","title":"EXAMPLE 1"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#example-2","text":"Get-PodeScheduleNextTrigger -Name Schedule1 -DateTime [datetime]::new(2020, 3, 10)","title":"EXAMPLE 2"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#-datetime","text":"An optional specific DateTime to get the next trigger time after. This DateTime must be between the Schedule's StartTime and EndTime. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-DateTime"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#-name","text":"The Name of the Schedule. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#notes","text":"","title":"NOTES"},{"location":"Functions/Schedules/Get-PodeScheduleNextTrigger/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Schedules/Invoke-PodeSchedule/","text":"Invoke-PodeSchedule SYNOPSIS Adhoc invoke a Schedule's logic. SYNTAX Invoke-PodeSchedule [-Name] <String> [[-ArgumentList] <Hashtable>] [<CommonParameters>] DESCRIPTION Adhoc invoke a Schedule's logic outside of its defined cron-expression. This invocation doesn't count towards the Schedule's limit. EXAMPLES EXAMPLE 1 Invoke-PodeSchedule -Name 'schedule-name' PARAMETERS -ArgumentList A hashtable of arguments to supply to the Schedule's ScriptBlock. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Schedule. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Invoke-PodeSchedule"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#invoke-podeschedule","text":"","title":"Invoke-PodeSchedule"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#synopsis","text":"Adhoc invoke a Schedule's logic.","title":"SYNOPSIS"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#syntax","text":"Invoke-PodeSchedule [-Name] <String> [[-ArgumentList] <Hashtable>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#description","text":"Adhoc invoke a Schedule's logic outside of its defined cron-expression. This invocation doesn't count towards the Schedule's limit.","title":"DESCRIPTION"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#example-1","text":"Invoke-PodeSchedule -Name 'schedule-name'","title":"EXAMPLE 1"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#-argumentlist","text":"A hashtable of arguments to supply to the Schedule's ScriptBlock. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#-name","text":"The Name of the Schedule. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#notes","text":"","title":"NOTES"},{"location":"Functions/Schedules/Invoke-PodeSchedule/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Schedules/Remove-PodeSchedule/","text":"Remove-PodeSchedule SYNOPSIS Removes a specific Schedule. SYNTAX Remove-PodeSchedule [-Name] <String> [<CommonParameters>] DESCRIPTION Removes a specific Schedule. EXAMPLES EXAMPLE 1 Remove-PodeSchedule -Name 'RenewToken' PARAMETERS -Name The Name of the Schedule to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSchedule"},{"location":"Functions/Schedules/Remove-PodeSchedule/#remove-podeschedule","text":"","title":"Remove-PodeSchedule"},{"location":"Functions/Schedules/Remove-PodeSchedule/#synopsis","text":"Removes a specific Schedule.","title":"SYNOPSIS"},{"location":"Functions/Schedules/Remove-PodeSchedule/#syntax","text":"Remove-PodeSchedule [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Schedules/Remove-PodeSchedule/#description","text":"Removes a specific Schedule.","title":"DESCRIPTION"},{"location":"Functions/Schedules/Remove-PodeSchedule/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Schedules/Remove-PodeSchedule/#example-1","text":"Remove-PodeSchedule -Name 'RenewToken'","title":"EXAMPLE 1"},{"location":"Functions/Schedules/Remove-PodeSchedule/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Schedules/Remove-PodeSchedule/#-name","text":"The Name of the Schedule to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Schedules/Remove-PodeSchedule/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Schedules/Remove-PodeSchedule/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Schedules/Remove-PodeSchedule/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Schedules/Remove-PodeSchedule/#notes","text":"","title":"NOTES"},{"location":"Functions/Schedules/Remove-PodeSchedule/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/","text":"Set-PodeScheduleConcurrency SYNOPSIS Set the maximum number of concurrent schedules. SYNTAX Set-PodeScheduleConcurrency [-Maximum] <Int32> [<CommonParameters>] DESCRIPTION Set the maximum number of concurrent schedules. EXAMPLES EXAMPLE 1 Set-PodeScheduleConcurrency -Maximum 25 PARAMETERS -Maximum The Maximum number of schedules to run. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : 0 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeScheduleConcurrency"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#set-podescheduleconcurrency","text":"","title":"Set-PodeScheduleConcurrency"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#synopsis","text":"Set the maximum number of concurrent schedules.","title":"SYNOPSIS"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#syntax","text":"Set-PodeScheduleConcurrency [-Maximum] <Int32> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#description","text":"Set the maximum number of concurrent schedules.","title":"DESCRIPTION"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#example-1","text":"Set-PodeScheduleConcurrency -Maximum 25","title":"EXAMPLE 1"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#-maximum","text":"The Maximum number of schedules to run. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Maximum"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#notes","text":"","title":"NOTES"},{"location":"Functions/Schedules/Set-PodeScheduleConcurrency/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Schedules/Use-PodeSchedules/","text":"Use-PodeSchedules SYNOPSIS Automatically loads schedule ps1 files SYNTAX Use-PodeSchedules [[-Path] <String>] [<CommonParameters>] DESCRIPTION Automatically loads schedule ps1 files from either a /schedules folder, or a custom folder. Saves space dot-sourcing them all one-by-one. EXAMPLES EXAMPLE 1 Use-PodeSchedules EXAMPLE 2 Use-PodeSchedules -Path './my-schedules' PARAMETERS -Path Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeSchedules"},{"location":"Functions/Schedules/Use-PodeSchedules/#use-podeschedules","text":"","title":"Use-PodeSchedules"},{"location":"Functions/Schedules/Use-PodeSchedules/#synopsis","text":"Automatically loads schedule ps1 files","title":"SYNOPSIS"},{"location":"Functions/Schedules/Use-PodeSchedules/#syntax","text":"Use-PodeSchedules [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Schedules/Use-PodeSchedules/#description","text":"Automatically loads schedule ps1 files from either a /schedules folder, or a custom folder. Saves space dot-sourcing them all one-by-one.","title":"DESCRIPTION"},{"location":"Functions/Schedules/Use-PodeSchedules/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Schedules/Use-PodeSchedules/#example-1","text":"Use-PodeSchedules","title":"EXAMPLE 1"},{"location":"Functions/Schedules/Use-PodeSchedules/#example-2","text":"Use-PodeSchedules -Path './my-schedules'","title":"EXAMPLE 2"},{"location":"Functions/Schedules/Use-PodeSchedules/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Schedules/Use-PodeSchedules/#-path","text":"Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Schedules/Use-PodeSchedules/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Schedules/Use-PodeSchedules/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Schedules/Use-PodeSchedules/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Schedules/Use-PodeSchedules/#notes","text":"","title":"NOTES"},{"location":"Functions/Schedules/Use-PodeSchedules/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/","text":"Add-PodeSecurityContentSecurityPolicy SYNOPSIS Adds additional values to already defined values for the Content-Security-Policy header. SYNTAX Add-PodeSecurityContentSecurityPolicy [[-Default] <String[]>] [[-Child] <String[]>] [[-Connect] <String[]>] [[-Font] <String[]>] [[-Frame] <String[]>] [[-Image] <String[]>] [[-Manifest] <String[]>] [[-Media] <String[]>] [[-Object] <String[]>] [[-Scripts] <String[]>] [[-Style] <String[]>] [[-BaseUri] <String[]>] [[-FormAction] <String[]>] [[-FrameAncestor] <String[]>] [[-Sandbox] <String>] [-UpgradeInsecureRequests] [<CommonParameters>] DESCRIPTION Adds additional values to already defined values for the Content-Security-Policy header, instead of overriding them. EXAMPLES EXAMPLE 1 Add-PodeSecurityContentSecurityPolicy -Default '*.twitter.com' -Image 'data' PARAMETERS -BaseUri The values to add for the BaseUri portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 12 Default value : None Accept pipeline input : False Accept wildcard characters : False -Child The values to add for the Child portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Connect The values to add for the Connect portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Default The values to add for the Default portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Font The values to add for the Font portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -FormAction The values to add for the FormAction portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 13 Default value : None Accept pipeline input : False Accept wildcard characters : False -Frame The values to add for the Frame portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -FrameAncestor The values to add for the FrameAncestor portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 14 Default value : None Accept pipeline input : False Accept wildcard characters : False -Image The values to add for the Image portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False -Manifest The values to add for the Manifest portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False -Media The values to add for the Media portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False -Object The values to add for the Object portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False -Sandbox The value to use for the Sandbox portion of the header. Type : String Parameter Sets : (All) Aliases : Required : False Position : 15 Default value : None Accept pipeline input : False Accept wildcard characters : False -Scripts The values to add for the Scripts portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False -Style The values to add for the Style portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 11 Default value : None Accept pipeline input : False Accept wildcard characters : False -UpgradeInsecureRequests If supplied, the header will have the upgrade-insecure-requests value added. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeSecurityContentSecurityPolicy"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#add-podesecuritycontentsecuritypolicy","text":"","title":"Add-PodeSecurityContentSecurityPolicy"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#synopsis","text":"Adds additional values to already defined values for the Content-Security-Policy header.","title":"SYNOPSIS"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#syntax","text":"Add-PodeSecurityContentSecurityPolicy [[-Default] <String[]>] [[-Child] <String[]>] [[-Connect] <String[]>] [[-Font] <String[]>] [[-Frame] <String[]>] [[-Image] <String[]>] [[-Manifest] <String[]>] [[-Media] <String[]>] [[-Object] <String[]>] [[-Scripts] <String[]>] [[-Style] <String[]>] [[-BaseUri] <String[]>] [[-FormAction] <String[]>] [[-FrameAncestor] <String[]>] [[-Sandbox] <String>] [-UpgradeInsecureRequests] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#description","text":"Adds additional values to already defined values for the Content-Security-Policy header, instead of overriding them.","title":"DESCRIPTION"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#example-1","text":"Add-PodeSecurityContentSecurityPolicy -Default '*.twitter.com' -Image 'data'","title":"EXAMPLE 1"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-baseuri","text":"The values to add for the BaseUri portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 12 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-BaseUri"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-child","text":"The values to add for the Child portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Child"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-connect","text":"The values to add for the Connect portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Connect"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-default","text":"The values to add for the Default portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Default"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-font","text":"The values to add for the Font portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Font"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-formaction","text":"The values to add for the FormAction portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 13 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FormAction"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-frame","text":"The values to add for the Frame portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Frame"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-frameancestor","text":"The values to add for the FrameAncestor portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 14 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FrameAncestor"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-image","text":"The values to add for the Image portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Image"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-manifest","text":"The values to add for the Manifest portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Manifest"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-media","text":"The values to add for the Media portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Media"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-object","text":"The values to add for the Object portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Object"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-sandbox","text":"The value to use for the Sandbox portion of the header. Type : String Parameter Sets : (All) Aliases : Required : False Position : 15 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Sandbox"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-scripts","text":"The values to add for the Scripts portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Scripts"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-style","text":"The values to add for the Style portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 11 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Style"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#-upgradeinsecurerequests","text":"If supplied, the header will have the upgrade-insecure-requests value added. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UpgradeInsecureRequests"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Add-PodeSecurityContentSecurityPolicy/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Add-PodeSecurityHeader/","text":"Add-PodeSecurityHeader SYNOPSIS Add definition for specified security header. SYNTAX Add-PodeSecurityHeader [-Name] <String> [[-Value] <String>] [<CommonParameters>] DESCRIPTION Add definition for specified security header. EXAMPLES EXAMPLE 1 Add-PodeSecurityHeader -Name 'X-Header-Name' -Value 'SomeValue' PARAMETERS -Name The Name of the security header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Value The Value of the security header. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeSecurityHeader"},{"location":"Functions/Security/Add-PodeSecurityHeader/#add-podesecurityheader","text":"","title":"Add-PodeSecurityHeader"},{"location":"Functions/Security/Add-PodeSecurityHeader/#synopsis","text":"Add definition for specified security header.","title":"SYNOPSIS"},{"location":"Functions/Security/Add-PodeSecurityHeader/#syntax","text":"Add-PodeSecurityHeader [-Name] <String> [[-Value] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Add-PodeSecurityHeader/#description","text":"Add definition for specified security header.","title":"DESCRIPTION"},{"location":"Functions/Security/Add-PodeSecurityHeader/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Add-PodeSecurityHeader/#example-1","text":"Add-PodeSecurityHeader -Name 'X-Header-Name' -Value 'SomeValue'","title":"EXAMPLE 1"},{"location":"Functions/Security/Add-PodeSecurityHeader/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Add-PodeSecurityHeader/#-name","text":"The Name of the security header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Security/Add-PodeSecurityHeader/#-value","text":"The Value of the security header. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Security/Add-PodeSecurityHeader/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Add-PodeSecurityHeader/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Add-PodeSecurityHeader/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Add-PodeSecurityHeader/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Add-PodeSecurityHeader/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/","text":"Add-PodeSecurityPermissionsPolicy SYNOPSIS Adds additional values to already defined values for the Permissions-Policy header. SYNTAX Add-PodeSecurityPermissionsPolicy [[-Accelerometer] <String[]>] [[-AmbientLightSensor] <String[]>] [[-Autoplay] <String[]>] [[-Battery] <String[]>] [[-Camera] <String[]>] [[-DisplayCapture] <String[]>] [[-DocumentDomain] <String[]>] [[-EncryptedMedia] <String[]>] [[-Fullscreen] <String[]>] [[-Gamepad] <String[]>] [[-Geolocation] <String[]>] [[-Gyroscope] <String[]>] [[-InterestCohort] <String[]>] [[-LayoutAnimations] <String[]>] [[-LegacyImageFormats] <String[]>] [[-Magnetometer] <String[]>] [[-Microphone] <String[]>] [[-Midi] <String[]>] [[-OversizedImages] <String[]>] [[-Payment] <String[]>] [[-PictureInPicture] <String[]>] [[-PublicKeyCredentials] <String[]>] [[-Speakers] <String[]>] [[-SyncXhr] <String[]>] [[-UnoptimisedImages] <String[]>] [[-UnsizedMedia] <String[]>] [[-Usb] <String[]>] [[-ScreenWakeLake] <String[]>] [[-WebShare] <String[]>] [[-XrSpatialTracking] <String[]>] [<CommonParameters>] DESCRIPTION Adds additional values to already defined values for the Permissions-Policy header, instead of overriding them. EXAMPLES EXAMPLE 1 Add-PodeSecurityPermissionsPolicy -AmbientLightSensor 'none' PARAMETERS -Accelerometer The values to add for the Accelerometer portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -AmbientLightSensor The values to add for the AmbientLightSensor portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Autoplay The values to add for the Autoplay portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Battery The values to add for the Battery portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Camera The values to add for the Camera portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -DisplayCapture The values to add for the DisplayCapture portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False -DocumentDomain The values to add for the DocumentDomain portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False -EncryptedMedia The values to add for the EncryptedMedia portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False -Fullscreen The values to add for the Fullscreen portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False -Gamepad The values to add for the Gamepad portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False -Geolocation The values to add for the Geolocation portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 11 Default value : None Accept pipeline input : False Accept wildcard characters : False -Gyroscope The values to add for the Gyroscope portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 12 Default value : None Accept pipeline input : False Accept wildcard characters : False -InterestCohort The values to use for the InterestCohort portal of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 13 Default value : None Accept pipeline input : False Accept wildcard characters : False -LayoutAnimations The values to add for the LayoutAnimations portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 14 Default value : None Accept pipeline input : False Accept wildcard characters : False -LegacyImageFormats The values to add for the LegacyImageFormats portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 15 Default value : None Accept pipeline input : False Accept wildcard characters : False -Magnetometer The values to add for the Magnetometer portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 16 Default value : None Accept pipeline input : False Accept wildcard characters : False -Microphone The values to add for the Microphone portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 17 Default value : None Accept pipeline input : False Accept wildcard characters : False -Midi The values to add for the Midi portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 18 Default value : None Accept pipeline input : False Accept wildcard characters : False -OversizedImages The values to add for the OversizedImages portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 19 Default value : None Accept pipeline input : False Accept wildcard characters : False -Payment The values to add for the Payment portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 20 Default value : None Accept pipeline input : False Accept wildcard characters : False -PictureInPicture The values to add for the PictureInPicture portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 21 Default value : None Accept pipeline input : False Accept wildcard characters : False -PublicKeyCredentials The values to add for the PublicKeyCredentials portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 22 Default value : None Accept pipeline input : False Accept wildcard characters : False -ScreenWakeLake The values to add for the ScreenWakeLake portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 28 Default value : None Accept pipeline input : False Accept wildcard characters : False -Speakers The values to add for the Speakers portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 23 Default value : None Accept pipeline input : False Accept wildcard characters : False -SyncXhr The values to add for the SyncXhr portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 24 Default value : None Accept pipeline input : False Accept wildcard characters : False -UnoptimisedImages The values to add for the UnoptimisedImages portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 25 Default value : None Accept pipeline input : False Accept wildcard characters : False -UnsizedMedia The values to add for the UnsizedMedia portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 26 Default value : None Accept pipeline input : False Accept wildcard characters : False -Usb The values to add for the Usb portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 27 Default value : None Accept pipeline input : False Accept wildcard characters : False -WebShare The values to add for the WebShare portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 29 Default value : None Accept pipeline input : False Accept wildcard characters : False -XrSpatialTracking The values to add for the XrSpatialTracking portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 30 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeSecurityPermissionsPolicy"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#add-podesecuritypermissionspolicy","text":"","title":"Add-PodeSecurityPermissionsPolicy"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#synopsis","text":"Adds additional values to already defined values for the Permissions-Policy header.","title":"SYNOPSIS"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#syntax","text":"Add-PodeSecurityPermissionsPolicy [[-Accelerometer] <String[]>] [[-AmbientLightSensor] <String[]>] [[-Autoplay] <String[]>] [[-Battery] <String[]>] [[-Camera] <String[]>] [[-DisplayCapture] <String[]>] [[-DocumentDomain] <String[]>] [[-EncryptedMedia] <String[]>] [[-Fullscreen] <String[]>] [[-Gamepad] <String[]>] [[-Geolocation] <String[]>] [[-Gyroscope] <String[]>] [[-InterestCohort] <String[]>] [[-LayoutAnimations] <String[]>] [[-LegacyImageFormats] <String[]>] [[-Magnetometer] <String[]>] [[-Microphone] <String[]>] [[-Midi] <String[]>] [[-OversizedImages] <String[]>] [[-Payment] <String[]>] [[-PictureInPicture] <String[]>] [[-PublicKeyCredentials] <String[]>] [[-Speakers] <String[]>] [[-SyncXhr] <String[]>] [[-UnoptimisedImages] <String[]>] [[-UnsizedMedia] <String[]>] [[-Usb] <String[]>] [[-ScreenWakeLake] <String[]>] [[-WebShare] <String[]>] [[-XrSpatialTracking] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#description","text":"Adds additional values to already defined values for the Permissions-Policy header, instead of overriding them.","title":"DESCRIPTION"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#example-1","text":"Add-PodeSecurityPermissionsPolicy -AmbientLightSensor 'none'","title":"EXAMPLE 1"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-accelerometer","text":"The values to add for the Accelerometer portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Accelerometer"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-ambientlightsensor","text":"The values to add for the AmbientLightSensor portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-AmbientLightSensor"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-autoplay","text":"The values to add for the Autoplay portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Autoplay"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-battery","text":"The values to add for the Battery portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Battery"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-camera","text":"The values to add for the Camera portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Camera"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-displaycapture","text":"The values to add for the DisplayCapture portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-DisplayCapture"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-documentdomain","text":"The values to add for the DocumentDomain portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-DocumentDomain"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-encryptedmedia","text":"The values to add for the EncryptedMedia portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EncryptedMedia"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-fullscreen","text":"The values to add for the Fullscreen portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Fullscreen"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-gamepad","text":"The values to add for the Gamepad portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Gamepad"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-geolocation","text":"The values to add for the Geolocation portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 11 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Geolocation"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-gyroscope","text":"The values to add for the Gyroscope portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 12 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Gyroscope"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-interestcohort","text":"The values to use for the InterestCohort portal of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 13 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-InterestCohort"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-layoutanimations","text":"The values to add for the LayoutAnimations portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 14 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-LayoutAnimations"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-legacyimageformats","text":"The values to add for the LegacyImageFormats portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 15 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-LegacyImageFormats"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-magnetometer","text":"The values to add for the Magnetometer portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 16 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Magnetometer"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-microphone","text":"The values to add for the Microphone portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 17 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Microphone"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-midi","text":"The values to add for the Midi portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 18 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Midi"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-oversizedimages","text":"The values to add for the OversizedImages portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 19 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-OversizedImages"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-payment","text":"The values to add for the Payment portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 20 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Payment"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-pictureinpicture","text":"The values to add for the PictureInPicture portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 21 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PictureInPicture"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-publickeycredentials","text":"The values to add for the PublicKeyCredentials portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 22 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PublicKeyCredentials"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-screenwakelake","text":"The values to add for the ScreenWakeLake portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 28 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScreenWakeLake"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-speakers","text":"The values to add for the Speakers portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 23 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Speakers"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-syncxhr","text":"The values to add for the SyncXhr portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 24 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-SyncXhr"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-unoptimisedimages","text":"The values to add for the UnoptimisedImages portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 25 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-UnoptimisedImages"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-unsizedmedia","text":"The values to add for the UnsizedMedia portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 26 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-UnsizedMedia"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-usb","text":"The values to add for the Usb portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 27 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Usb"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-webshare","text":"The values to add for the WebShare portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 29 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WebShare"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#-xrspatialtracking","text":"The values to add for the XrSpatialTracking portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 30 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-XrSpatialTracking"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Add-PodeSecurityPermissionsPolicy/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Remove-PodeSecurity/","text":"Remove-PodeSecurity SYNOPSIS Removes definitions for all security headers. SYNTAX Remove-PodeSecurity [<CommonParameters>] DESCRIPTION Removes definitions for all security headers. EXAMPLES EXAMPLE 1 Remove-PodeSecurity PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSecurity"},{"location":"Functions/Security/Remove-PodeSecurity/#remove-podesecurity","text":"","title":"Remove-PodeSecurity"},{"location":"Functions/Security/Remove-PodeSecurity/#synopsis","text":"Removes definitions for all security headers.","title":"SYNOPSIS"},{"location":"Functions/Security/Remove-PodeSecurity/#syntax","text":"Remove-PodeSecurity [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Remove-PodeSecurity/#description","text":"Removes definitions for all security headers.","title":"DESCRIPTION"},{"location":"Functions/Security/Remove-PodeSecurity/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Remove-PodeSecurity/#example-1","text":"Remove-PodeSecurity","title":"EXAMPLE 1"},{"location":"Functions/Security/Remove-PodeSecurity/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Remove-PodeSecurity/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Remove-PodeSecurity/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Remove-PodeSecurity/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Remove-PodeSecurity/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Remove-PodeSecurity/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/","text":"Remove-PodeSecurityAccessControl SYNOPSIS Removes definitions for the Access-Control headers. SYNTAX Remove-PodeSecurityAccessControl [<CommonParameters>] DESCRIPTION Removes definitions for the Access-Control headers: Access-Control-Allow-Origin, Access-Control-Allow-Methods, Access-Control-Allow-Headers, Access-Control-Max-Age, Access-Control-Allow-Credentials EXAMPLES EXAMPLE 1 Remove-PodeSecurityAccessControl PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSecurityAccessControl"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#remove-podesecurityaccesscontrol","text":"","title":"Remove-PodeSecurityAccessControl"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#synopsis","text":"Removes definitions for the Access-Control headers.","title":"SYNOPSIS"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#syntax","text":"Remove-PodeSecurityAccessControl [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#description","text":"Removes definitions for the Access-Control headers: Access-Control-Allow-Origin, Access-Control-Allow-Methods, Access-Control-Allow-Headers, Access-Control-Max-Age, Access-Control-Allow-Credentials","title":"DESCRIPTION"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#example-1","text":"Remove-PodeSecurityAccessControl","title":"EXAMPLE 1"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Remove-PodeSecurityAccessControl/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/","text":"Remove-PodeSecurityContentSecurityPolicy SYNOPSIS Removes definition for the Content-Security-Policy and X-XSS-Protection headers. SYNTAX Remove-PodeSecurityContentSecurityPolicy [<CommonParameters>] DESCRIPTION Removes definition for the Content-Security-Policy and X-XSS-Protection headers. EXAMPLES EXAMPLE 1 Remove-PodeSecurityContentSecurityPolicy PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSecurityContentSecurityPolicy"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#remove-podesecuritycontentsecuritypolicy","text":"","title":"Remove-PodeSecurityContentSecurityPolicy"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#synopsis","text":"Removes definition for the Content-Security-Policy and X-XSS-Protection headers.","title":"SYNOPSIS"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#syntax","text":"Remove-PodeSecurityContentSecurityPolicy [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#description","text":"Removes definition for the Content-Security-Policy and X-XSS-Protection headers.","title":"DESCRIPTION"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#example-1","text":"Remove-PodeSecurityContentSecurityPolicy","title":"EXAMPLE 1"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Remove-PodeSecurityContentSecurityPolicy/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/","text":"Remove-PodeSecurityContentTypeOptions SYNOPSIS Removes definition for the X-Content-Type-Options header. SYNTAX Remove-PodeSecurityContentTypeOptions [<CommonParameters>] DESCRIPTION Removes definitions for the X-Content-Type-Options header. EXAMPLES EXAMPLE 1 Remove-PodeSecurityContentTypeOptions PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSecurityContentTypeOptions"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#remove-podesecuritycontenttypeoptions","text":"","title":"Remove-PodeSecurityContentTypeOptions"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#synopsis","text":"Removes definition for the X-Content-Type-Options header.","title":"SYNOPSIS"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#syntax","text":"Remove-PodeSecurityContentTypeOptions [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#description","text":"Removes definitions for the X-Content-Type-Options header.","title":"DESCRIPTION"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#example-1","text":"Remove-PodeSecurityContentTypeOptions","title":"EXAMPLE 1"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Remove-PodeSecurityContentTypeOptions/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/","text":"Remove-PodeSecurityCrossOrigin SYNOPSIS Removes definitions for the Cross-Origin headers. SYNTAX Remove-PodeSecurityCrossOrigin [<CommonParameters>] DESCRIPTION Removes definitions for the Cross-Origin headers: Cross-Origin-Embedder-Policy, Cross-Origin-Opener-Policy, Cross-Origin-Resource-Policy EXAMPLES EXAMPLE 1 Remove-PodeSecurityCrossOrigin PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSecurityCrossOrigin"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#remove-podesecuritycrossorigin","text":"","title":"Remove-PodeSecurityCrossOrigin"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#synopsis","text":"Removes definitions for the Cross-Origin headers.","title":"SYNOPSIS"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#syntax","text":"Remove-PodeSecurityCrossOrigin [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#description","text":"Removes definitions for the Cross-Origin headers: Cross-Origin-Embedder-Policy, Cross-Origin-Opener-Policy, Cross-Origin-Resource-Policy","title":"DESCRIPTION"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#example-1","text":"Remove-PodeSecurityCrossOrigin","title":"EXAMPLE 1"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Remove-PodeSecurityCrossOrigin/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/","text":"Remove-PodeSecurityFrameOptions SYNOPSIS Removes definition for the X-Frame-Options header. SYNTAX Remove-PodeSecurityFrameOptions [<CommonParameters>] DESCRIPTION Removes definition for the X-Frame-Options header. EXAMPLES EXAMPLE 1 Remove-PodeSecurityFrameOptions PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSecurityFrameOptions"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#remove-podesecurityframeoptions","text":"","title":"Remove-PodeSecurityFrameOptions"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#synopsis","text":"Removes definition for the X-Frame-Options header.","title":"SYNOPSIS"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#syntax","text":"Remove-PodeSecurityFrameOptions [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#description","text":"Removes definition for the X-Frame-Options header.","title":"DESCRIPTION"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#example-1","text":"Remove-PodeSecurityFrameOptions","title":"EXAMPLE 1"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Remove-PodeSecurityFrameOptions/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Remove-PodeSecurityHeader/","text":"Remove-PodeSecurityHeader SYNOPSIS Removes definition for specified security header. SYNTAX Remove-PodeSecurityHeader [-Name] <String> [<CommonParameters>] DESCRIPTION Removes definition for specified security header. EXAMPLES EXAMPLE 1 Remove-PodeSecurityHeader -Name 'X-Header-Name' PARAMETERS -Name The Name of the security header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSecurityHeader"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#remove-podesecurityheader","text":"","title":"Remove-PodeSecurityHeader"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#synopsis","text":"Removes definition for specified security header.","title":"SYNOPSIS"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#syntax","text":"Remove-PodeSecurityHeader [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#description","text":"Removes definition for specified security header.","title":"DESCRIPTION"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#example-1","text":"Remove-PodeSecurityHeader -Name 'X-Header-Name'","title":"EXAMPLE 1"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#-name","text":"The Name of the security header. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Remove-PodeSecurityHeader/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/","text":"Remove-PodeSecurityPermissionsPolicy SYNOPSIS Removes definition for the Permissions-Policy header. SYNTAX Remove-PodeSecurityPermissionsPolicy [<CommonParameters>] DESCRIPTION Removes definitions for the Permissions-Policy header. EXAMPLES EXAMPLE 1 Remove-PodeSecurityPermissionsPolicy PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSecurityPermissionsPolicy"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#remove-podesecuritypermissionspolicy","text":"","title":"Remove-PodeSecurityPermissionsPolicy"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#synopsis","text":"Removes definition for the Permissions-Policy header.","title":"SYNOPSIS"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#syntax","text":"Remove-PodeSecurityPermissionsPolicy [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#description","text":"Removes definitions for the Permissions-Policy header.","title":"DESCRIPTION"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#example-1","text":"Remove-PodeSecurityPermissionsPolicy","title":"EXAMPLE 1"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Remove-PodeSecurityPermissionsPolicy/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/","text":"Remove-PodeSecurityReferrerPolicy SYNOPSIS Removes definition for the Referrer-Policy header. SYNTAX Remove-PodeSecurityReferrerPolicy [<CommonParameters>] DESCRIPTION Removes definitions for the Referrer-Policy header. EXAMPLES EXAMPLE 1 Remove-PodeSecurityReferrerPolicy PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSecurityReferrerPolicy"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#remove-podesecurityreferrerpolicy","text":"","title":"Remove-PodeSecurityReferrerPolicy"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#synopsis","text":"Removes definition for the Referrer-Policy header.","title":"SYNOPSIS"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#syntax","text":"Remove-PodeSecurityReferrerPolicy [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#description","text":"Removes definitions for the Referrer-Policy header.","title":"DESCRIPTION"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#example-1","text":"Remove-PodeSecurityReferrerPolicy","title":"EXAMPLE 1"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Remove-PodeSecurityReferrerPolicy/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/","text":"Remove-PodeSecurityStrictTransportSecurity SYNOPSIS Removes definition for the Strict-Transport-Security header. SYNTAX Remove-PodeSecurityStrictTransportSecurity [<CommonParameters>] DESCRIPTION Removes definitions for the Strict-Transport-Security header. EXAMPLES EXAMPLE 1 Remove-PodeSecurityStrictTransportSecurity PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeSecurityStrictTransportSecurity"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#remove-podesecuritystricttransportsecurity","text":"","title":"Remove-PodeSecurityStrictTransportSecurity"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#synopsis","text":"Removes definition for the Strict-Transport-Security header.","title":"SYNOPSIS"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#syntax","text":"Remove-PodeSecurityStrictTransportSecurity [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#description","text":"Removes definitions for the Strict-Transport-Security header.","title":"DESCRIPTION"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#example-1","text":"Remove-PodeSecurityStrictTransportSecurity","title":"EXAMPLE 1"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Remove-PodeSecurityStrictTransportSecurity/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Set-PodeSecurity/","text":"Set-PodeSecurity SYNOPSIS Sets inbuilt definitions for security headers. SYNTAX Set-PodeSecurity [-Type] <String> [-UseHsts] [-XssBlock] [<CommonParameters>] DESCRIPTION Sets inbuilt definitions for security headers, in either Simple or Strict types. EXAMPLES EXAMPLE 1 Set-PodeSecurity -Type Simple EXAMPLE 2 Set-PodeSecurity -Type Strict -UseHsts PARAMETERS -Type The Type of security to use. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -UseHsts If supplied, the Strict-Transport-Security header will be set. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -XssBlock If supplied, the X-XSS-Protection header will be set to blocking mode. (Default: Off) Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeSecurity"},{"location":"Functions/Security/Set-PodeSecurity/#set-podesecurity","text":"","title":"Set-PodeSecurity"},{"location":"Functions/Security/Set-PodeSecurity/#synopsis","text":"Sets inbuilt definitions for security headers.","title":"SYNOPSIS"},{"location":"Functions/Security/Set-PodeSecurity/#syntax","text":"Set-PodeSecurity [-Type] <String> [-UseHsts] [-XssBlock] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Set-PodeSecurity/#description","text":"Sets inbuilt definitions for security headers, in either Simple or Strict types.","title":"DESCRIPTION"},{"location":"Functions/Security/Set-PodeSecurity/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Set-PodeSecurity/#example-1","text":"Set-PodeSecurity -Type Simple","title":"EXAMPLE 1"},{"location":"Functions/Security/Set-PodeSecurity/#example-2","text":"Set-PodeSecurity -Type Strict -UseHsts","title":"EXAMPLE 2"},{"location":"Functions/Security/Set-PodeSecurity/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Set-PodeSecurity/#-type","text":"The Type of security to use. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Security/Set-PodeSecurity/#-usehsts","text":"If supplied, the Strict-Transport-Security header will be set. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UseHsts"},{"location":"Functions/Security/Set-PodeSecurity/#-xssblock","text":"If supplied, the X-XSS-Protection header will be set to blocking mode. (Default: Off) Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-XssBlock"},{"location":"Functions/Security/Set-PodeSecurity/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Set-PodeSecurity/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Set-PodeSecurity/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Set-PodeSecurity/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Set-PodeSecurity/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/","text":"Set-PodeSecurityAccessControl SYNOPSIS Set definitions for Access-Control headers. SYNTAX Set-PodeSecurityAccessControl [[-Origin] <String>] [[-Methods] <String[]>] [[-Headers] <String[]>] [[-Duration] <Int32>] [-Credentials] [-WithOptions] [<CommonParameters>] DESCRIPTION Removes definitions for the Access-Control headers: Access-Control-Allow-Origin, Access-Control-Allow-Methods, Access-Control-Allow-Headers, Access-Control-Max-Age, Access-Control-Allow-Credentials EXAMPLES EXAMPLE 1 Set-PodeSecurityAccessControl -Origin '*' -Methods '*' -Headers '*' -Duration 7200 PARAMETERS -Credentials Specifies a value for Access-Control-Allow-Credentials Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Duration Specifies a value for Access-Control-Max-Age in seconds. (Default: 7200) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : 7200 Accept pipeline input : False Accept wildcard characters : False -Headers Specifies a value for Access-Control-Allow-Headers. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Methods Specifies a value for Access-Control-Allow-Methods. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Origin Specifies a value for Access-Control-Allow-Origin. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -WithOptions If supplied, a global Options Route will be created. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeSecurityAccessControl"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#set-podesecurityaccesscontrol","text":"","title":"Set-PodeSecurityAccessControl"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#synopsis","text":"Set definitions for Access-Control headers.","title":"SYNOPSIS"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#syntax","text":"Set-PodeSecurityAccessControl [[-Origin] <String>] [[-Methods] <String[]>] [[-Headers] <String[]>] [[-Duration] <Int32>] [-Credentials] [-WithOptions] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#description","text":"Removes definitions for the Access-Control headers: Access-Control-Allow-Origin, Access-Control-Allow-Methods, Access-Control-Allow-Headers, Access-Control-Max-Age, Access-Control-Allow-Credentials","title":"DESCRIPTION"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#example-1","text":"Set-PodeSecurityAccessControl -Origin '*' -Methods '*' -Headers '*' -Duration 7200","title":"EXAMPLE 1"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#-credentials","text":"Specifies a value for Access-Control-Allow-Credentials Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Credentials"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#-duration","text":"Specifies a value for Access-Control-Max-Age in seconds. (Default: 7200) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : 7200 Accept pipeline input : False Accept wildcard characters : False","title":"-Duration"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#-headers","text":"Specifies a value for Access-Control-Allow-Headers. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Headers"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#-methods","text":"Specifies a value for Access-Control-Allow-Methods. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Methods"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#-origin","text":"Specifies a value for Access-Control-Allow-Origin. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Origin"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#-withoptions","text":"If supplied, a global Options Route will be created. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-WithOptions"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Set-PodeSecurityAccessControl/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/","text":"Set-PodeSecurityContentSecurityPolicy SYNOPSIS Set the value to use for the Content-Security-Policy and X-XSS-Protection headers. SYNTAX Set-PodeSecurityContentSecurityPolicy [[-Default] <String[]>] [[-Child] <String[]>] [[-Connect] <String[]>] [[-Font] <String[]>] [[-Frame] <String[]>] [[-Image] <String[]>] [[-Manifest] <String[]>] [[-Media] <String[]>] [[-Object] <String[]>] [[-Scripts] <String[]>] [[-Style] <String[]>] [[-BaseUri] <String[]>] [[-FormAction] <String[]>] [[-FrameAncestor] <String[]>] [[-Sandbox] <String>] [-UpgradeInsecureRequests] [-XssBlock] [<CommonParameters>] DESCRIPTION Set the value to use for the Content-Security-Policy and X-XSS-Protection headers. EXAMPLES EXAMPLE 1 Set-PodeSecurityContentSecurityPolicy -Default 'self' PARAMETERS -BaseUri The values to use for the BaseUri portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 12 Default value : None Accept pipeline input : False Accept wildcard characters : False -Child The values to use for the Child portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Connect The values to use for the Connect portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Default The values to use for the Default portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Font The values to use for the Font portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -FormAction The values to use for the FormAction portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 13 Default value : None Accept pipeline input : False Accept wildcard characters : False -Frame The values to use for the Frame portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -FrameAncestor The values to use for the FrameAncestor portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 14 Default value : None Accept pipeline input : False Accept wildcard characters : False -Image The values to use for the Image portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False -Manifest The values to use for the Manifest portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False -Media The values to use for the Media portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False -Object The values to use for the Object portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False -Sandbox The value to use for the Sandbox portion of the header. Type : String Parameter Sets : (All) Aliases : Required : False Position : 15 Default value : None Accept pipeline input : False Accept wildcard characters : False -Scripts The values to use for the Scripts portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False -Style The values to use for the Style portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 11 Default value : None Accept pipeline input : False Accept wildcard characters : False -UpgradeInsecureRequests If supplied, the header will have the upgrade-insecure-requests value added. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -XssBlock If supplied, the X-XSS-Protection header will be set to blocking mode. (Default: Off) Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeSecurityContentSecurityPolicy"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#set-podesecuritycontentsecuritypolicy","text":"","title":"Set-PodeSecurityContentSecurityPolicy"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#synopsis","text":"Set the value to use for the Content-Security-Policy and X-XSS-Protection headers.","title":"SYNOPSIS"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#syntax","text":"Set-PodeSecurityContentSecurityPolicy [[-Default] <String[]>] [[-Child] <String[]>] [[-Connect] <String[]>] [[-Font] <String[]>] [[-Frame] <String[]>] [[-Image] <String[]>] [[-Manifest] <String[]>] [[-Media] <String[]>] [[-Object] <String[]>] [[-Scripts] <String[]>] [[-Style] <String[]>] [[-BaseUri] <String[]>] [[-FormAction] <String[]>] [[-FrameAncestor] <String[]>] [[-Sandbox] <String>] [-UpgradeInsecureRequests] [-XssBlock] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#description","text":"Set the value to use for the Content-Security-Policy and X-XSS-Protection headers.","title":"DESCRIPTION"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#example-1","text":"Set-PodeSecurityContentSecurityPolicy -Default 'self'","title":"EXAMPLE 1"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-baseuri","text":"The values to use for the BaseUri portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 12 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-BaseUri"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-child","text":"The values to use for the Child portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Child"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-connect","text":"The values to use for the Connect portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Connect"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-default","text":"The values to use for the Default portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Default"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-font","text":"The values to use for the Font portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Font"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-formaction","text":"The values to use for the FormAction portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 13 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FormAction"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-frame","text":"The values to use for the Frame portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Frame"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-frameancestor","text":"The values to use for the FrameAncestor portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 14 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FrameAncestor"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-image","text":"The values to use for the Image portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Image"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-manifest","text":"The values to use for the Manifest portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Manifest"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-media","text":"The values to use for the Media portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Media"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-object","text":"The values to use for the Object portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Object"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-sandbox","text":"The value to use for the Sandbox portion of the header. Type : String Parameter Sets : (All) Aliases : Required : False Position : 15 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Sandbox"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-scripts","text":"The values to use for the Scripts portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Scripts"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-style","text":"The values to use for the Style portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 11 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Style"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-upgradeinsecurerequests","text":"If supplied, the header will have the upgrade-insecure-requests value added. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UpgradeInsecureRequests"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#-xssblock","text":"If supplied, the X-XSS-Protection header will be set to blocking mode. (Default: Off) Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-XssBlock"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Set-PodeSecurityContentSecurityPolicy/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/","text":"Set-PodeSecurityContentTypeOptions SYNOPSIS Set a value for the X-Content-Type-Options header. SYNTAX Set-PodeSecurityContentTypeOptions [<CommonParameters>] DESCRIPTION Set a value for the X-Content-Type-Options header to \"nosniff\". EXAMPLES EXAMPLE 1 Set-PodeSecurityContentTypeOptions PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeSecurityContentTypeOptions"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#set-podesecuritycontenttypeoptions","text":"","title":"Set-PodeSecurityContentTypeOptions"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#synopsis","text":"Set a value for the X-Content-Type-Options header.","title":"SYNOPSIS"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#syntax","text":"Set-PodeSecurityContentTypeOptions [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#description","text":"Set a value for the X-Content-Type-Options header to \"nosniff\".","title":"DESCRIPTION"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#example-1","text":"Set-PodeSecurityContentTypeOptions","title":"EXAMPLE 1"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Set-PodeSecurityContentTypeOptions/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/","text":"Set-PodeSecurityCrossOrigin SYNOPSIS Removes definitions for the Cross-Origin headers. SYNTAX Set-PodeSecurityCrossOrigin [[-Embed] <String>] [[-Open] <String>] [[-Resource] <String>] [<CommonParameters>] DESCRIPTION Removes definitions for the Cross-Origin headers: Cross-Origin-Embedder-Policy, Cross-Origin-Opener-Policy, Cross-Origin-Resource-Policy EXAMPLES EXAMPLE 1 Set-PodeSecurityCrossOrigin -Embed Require-Corp -Open Same-Origin -Resource Same-Origin PARAMETERS -Embed Specifies a value for Cross-Origin-Embedder-Policy. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Open Specifies a value for Cross-Origin-Opener-Policy. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Resource Specifies a value for Cross-Origin-Resource-Policy. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeSecurityCrossOrigin"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#set-podesecuritycrossorigin","text":"","title":"Set-PodeSecurityCrossOrigin"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#synopsis","text":"Removes definitions for the Cross-Origin headers.","title":"SYNOPSIS"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#syntax","text":"Set-PodeSecurityCrossOrigin [[-Embed] <String>] [[-Open] <String>] [[-Resource] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#description","text":"Removes definitions for the Cross-Origin headers: Cross-Origin-Embedder-Policy, Cross-Origin-Opener-Policy, Cross-Origin-Resource-Policy","title":"DESCRIPTION"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#example-1","text":"Set-PodeSecurityCrossOrigin -Embed Require-Corp -Open Same-Origin -Resource Same-Origin","title":"EXAMPLE 1"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#-embed","text":"Specifies a value for Cross-Origin-Embedder-Policy. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Embed"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#-open","text":"Specifies a value for Cross-Origin-Opener-Policy. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Open"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#-resource","text":"Specifies a value for Cross-Origin-Resource-Policy. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Resource"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Set-PodeSecurityCrossOrigin/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/","text":"Set-PodeSecurityFrameOptions SYNOPSIS Set a value for the X-Frame-Options header. SYNTAX Set-PodeSecurityFrameOptions [-Type] <String> [<CommonParameters>] DESCRIPTION Set a value for the X-Frame-Options header. EXAMPLES EXAMPLE 1 Set-PodeSecurityFrameOptions -Type SameOrigin PARAMETERS -Type The Type to use. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeSecurityFrameOptions"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#set-podesecurityframeoptions","text":"","title":"Set-PodeSecurityFrameOptions"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#synopsis","text":"Set a value for the X-Frame-Options header.","title":"SYNOPSIS"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#syntax","text":"Set-PodeSecurityFrameOptions [-Type] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#description","text":"Set a value for the X-Frame-Options header.","title":"DESCRIPTION"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#example-1","text":"Set-PodeSecurityFrameOptions -Type SameOrigin","title":"EXAMPLE 1"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#-type","text":"The Type to use. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Set-PodeSecurityFrameOptions/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/","text":"Set-PodeSecurityPermissionsPolicy SYNOPSIS Set the value to use for the Permissions-Policy header. SYNTAX Set-PodeSecurityPermissionsPolicy [[-Accelerometer] <String[]>] [[-AmbientLightSensor] <String[]>] [[-Autoplay] <String[]>] [[-Battery] <String[]>] [[-Camera] <String[]>] [[-DisplayCapture] <String[]>] [[-DocumentDomain] <String[]>] [[-EncryptedMedia] <String[]>] [[-Fullscreen] <String[]>] [[-Gamepad] <String[]>] [[-Geolocation] <String[]>] [[-Gyroscope] <String[]>] [[-InterestCohort] <String[]>] [[-LayoutAnimations] <String[]>] [[-LegacyImageFormats] <String[]>] [[-Magnetometer] <String[]>] [[-Microphone] <String[]>] [[-Midi] <String[]>] [[-OversizedImages] <String[]>] [[-Payment] <String[]>] [[-PictureInPicture] <String[]>] [[-PublicKeyCredentials] <String[]>] [[-Speakers] <String[]>] [[-SyncXhr] <String[]>] [[-UnoptimisedImages] <String[]>] [[-UnsizedMedia] <String[]>] [[-Usb] <String[]>] [[-ScreenWakeLake] <String[]>] [[-WebShare] <String[]>] [[-XrSpatialTracking] <String[]>] [<CommonParameters>] DESCRIPTION Set the value to use for the Permissions-Policy header. EXAMPLES EXAMPLE 1 Set-PodeSecurityPermissionsPolicy -LayoutAnimations 'none' -UnoptimisedImages 'none' -OversizedImages 'none' -SyncXhr 'none' -UnsizedMedia 'none' PARAMETERS -Accelerometer The values to use for the Accelerometer portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -AmbientLightSensor The values to use for the AmbientLightSensor portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Autoplay The values to use for the Autoplay portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Battery The values to use for the Battery portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Camera The values to use for the Camera portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -DisplayCapture The values to use for the DisplayCapture portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False -DocumentDomain The values to use for the DocumentDomain portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False -EncryptedMedia The values to use for the EncryptedMedia portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False -Fullscreen The values to use for the Fullscreen portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False -Gamepad The values to use for the Gamepad portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False -Geolocation The values to use for the Geolocation portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 11 Default value : None Accept pipeline input : False Accept wildcard characters : False -Gyroscope The values to use for the Gyroscope portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 12 Default value : None Accept pipeline input : False Accept wildcard characters : False -InterestCohort The values to use for the InterestCohort portal of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 13 Default value : None Accept pipeline input : False Accept wildcard characters : False -LayoutAnimations The values to use for the LayoutAnimations portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 14 Default value : None Accept pipeline input : False Accept wildcard characters : False -LegacyImageFormats The values to use for the LegacyImageFormats portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 15 Default value : None Accept pipeline input : False Accept wildcard characters : False -Magnetometer The values to use for the Magnetometer portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 16 Default value : None Accept pipeline input : False Accept wildcard characters : False -Microphone The values to use for the Microphone portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 17 Default value : None Accept pipeline input : False Accept wildcard characters : False -Midi The values to use for the Midi portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 18 Default value : None Accept pipeline input : False Accept wildcard characters : False -OversizedImages The values to use for the OversizedImages portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 19 Default value : None Accept pipeline input : False Accept wildcard characters : False -Payment The values to use for the Payment portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 20 Default value : None Accept pipeline input : False Accept wildcard characters : False -PictureInPicture The values to use for the PictureInPicture portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 21 Default value : None Accept pipeline input : False Accept wildcard characters : False -PublicKeyCredentials The values to use for the PublicKeyCredentials portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 22 Default value : None Accept pipeline input : False Accept wildcard characters : False -ScreenWakeLake The values to use for the ScreenWakeLake portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 28 Default value : None Accept pipeline input : False Accept wildcard characters : False -Speakers The values to use for the Speakers portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 23 Default value : None Accept pipeline input : False Accept wildcard characters : False -SyncXhr The values to use for the SyncXhr portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 24 Default value : None Accept pipeline input : False Accept wildcard characters : False -UnoptimisedImages The values to use for the UnoptimisedImages portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 25 Default value : None Accept pipeline input : False Accept wildcard characters : False -UnsizedMedia The values to use for the UnsizedMedia portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 26 Default value : None Accept pipeline input : False Accept wildcard characters : False -Usb The values to use for the Usb portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 27 Default value : None Accept pipeline input : False Accept wildcard characters : False -WebShare The values to use for the WebShare portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 29 Default value : None Accept pipeline input : False Accept wildcard characters : False -XrSpatialTracking The values to use for the XrSpatialTracking portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 30 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeSecurityPermissionsPolicy"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#set-podesecuritypermissionspolicy","text":"","title":"Set-PodeSecurityPermissionsPolicy"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#synopsis","text":"Set the value to use for the Permissions-Policy header.","title":"SYNOPSIS"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#syntax","text":"Set-PodeSecurityPermissionsPolicy [[-Accelerometer] <String[]>] [[-AmbientLightSensor] <String[]>] [[-Autoplay] <String[]>] [[-Battery] <String[]>] [[-Camera] <String[]>] [[-DisplayCapture] <String[]>] [[-DocumentDomain] <String[]>] [[-EncryptedMedia] <String[]>] [[-Fullscreen] <String[]>] [[-Gamepad] <String[]>] [[-Geolocation] <String[]>] [[-Gyroscope] <String[]>] [[-InterestCohort] <String[]>] [[-LayoutAnimations] <String[]>] [[-LegacyImageFormats] <String[]>] [[-Magnetometer] <String[]>] [[-Microphone] <String[]>] [[-Midi] <String[]>] [[-OversizedImages] <String[]>] [[-Payment] <String[]>] [[-PictureInPicture] <String[]>] [[-PublicKeyCredentials] <String[]>] [[-Speakers] <String[]>] [[-SyncXhr] <String[]>] [[-UnoptimisedImages] <String[]>] [[-UnsizedMedia] <String[]>] [[-Usb] <String[]>] [[-ScreenWakeLake] <String[]>] [[-WebShare] <String[]>] [[-XrSpatialTracking] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#description","text":"Set the value to use for the Permissions-Policy header.","title":"DESCRIPTION"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#example-1","text":"Set-PodeSecurityPermissionsPolicy -LayoutAnimations 'none' -UnoptimisedImages 'none' -OversizedImages 'none' -SyncXhr 'none' -UnsizedMedia 'none'","title":"EXAMPLE 1"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-accelerometer","text":"The values to use for the Accelerometer portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Accelerometer"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-ambientlightsensor","text":"The values to use for the AmbientLightSensor portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-AmbientLightSensor"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-autoplay","text":"The values to use for the Autoplay portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Autoplay"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-battery","text":"The values to use for the Battery portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Battery"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-camera","text":"The values to use for the Camera portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Camera"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-displaycapture","text":"The values to use for the DisplayCapture portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-DisplayCapture"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-documentdomain","text":"The values to use for the DocumentDomain portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 7 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-DocumentDomain"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-encryptedmedia","text":"The values to use for the EncryptedMedia portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EncryptedMedia"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-fullscreen","text":"The values to use for the Fullscreen portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 9 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Fullscreen"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-gamepad","text":"The values to use for the Gamepad portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 10 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Gamepad"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-geolocation","text":"The values to use for the Geolocation portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 11 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Geolocation"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-gyroscope","text":"The values to use for the Gyroscope portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 12 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Gyroscope"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-interestcohort","text":"The values to use for the InterestCohort portal of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 13 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-InterestCohort"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-layoutanimations","text":"The values to use for the LayoutAnimations portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 14 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-LayoutAnimations"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-legacyimageformats","text":"The values to use for the LegacyImageFormats portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 15 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-LegacyImageFormats"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-magnetometer","text":"The values to use for the Magnetometer portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 16 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Magnetometer"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-microphone","text":"The values to use for the Microphone portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 17 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Microphone"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-midi","text":"The values to use for the Midi portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 18 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Midi"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-oversizedimages","text":"The values to use for the OversizedImages portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 19 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-OversizedImages"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-payment","text":"The values to use for the Payment portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 20 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Payment"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-pictureinpicture","text":"The values to use for the PictureInPicture portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 21 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PictureInPicture"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-publickeycredentials","text":"The values to use for the PublicKeyCredentials portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 22 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PublicKeyCredentials"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-screenwakelake","text":"The values to use for the ScreenWakeLake portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 28 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScreenWakeLake"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-speakers","text":"The values to use for the Speakers portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 23 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Speakers"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-syncxhr","text":"The values to use for the SyncXhr portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 24 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-SyncXhr"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-unoptimisedimages","text":"The values to use for the UnoptimisedImages portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 25 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-UnoptimisedImages"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-unsizedmedia","text":"The values to use for the UnsizedMedia portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 26 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-UnsizedMedia"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-usb","text":"The values to use for the Usb portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 27 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Usb"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-webshare","text":"The values to use for the WebShare portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 29 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WebShare"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#-xrspatialtracking","text":"The values to use for the XrSpatialTracking portion of the header. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 30 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-XrSpatialTracking"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Set-PodeSecurityPermissionsPolicy/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/","text":"Set-PodeSecurityReferrerPolicy SYNOPSIS Set a value for the Referrer-Policy header. SYNTAX Set-PodeSecurityReferrerPolicy [-Type] <String> [<CommonParameters>] DESCRIPTION Set a value for the Referrer-Policy header. EXAMPLES EXAMPLE 1 Set-PodeSecurityReferrerPolicy -Type No-Referrer PARAMETERS -Type The Type to use. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeSecurityReferrerPolicy"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#set-podesecurityreferrerpolicy","text":"","title":"Set-PodeSecurityReferrerPolicy"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#synopsis","text":"Set a value for the Referrer-Policy header.","title":"SYNOPSIS"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#syntax","text":"Set-PodeSecurityReferrerPolicy [-Type] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#description","text":"Set a value for the Referrer-Policy header.","title":"DESCRIPTION"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#example-1","text":"Set-PodeSecurityReferrerPolicy -Type No-Referrer","title":"EXAMPLE 1"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#-type","text":"The Type to use. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Set-PodeSecurityReferrerPolicy/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/","text":"Set-PodeSecurityStrictTransportSecurity SYNOPSIS Set a value for the Strict-Transport-Security header. SYNTAX Set-PodeSecurityStrictTransportSecurity [[-Duration] <Int32>] [-IncludeSubDomains] [<CommonParameters>] DESCRIPTION Set a value for the Strict-Transport-Security header. EXAMPLES EXAMPLE 1 Set-PodeSecurityStrictTransportSecurity -Duration 86400 -IncludeSubDomains PARAMETERS -Duration The Duration the browser to respect the header in seconds. (Default: 1 year) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : 31536000 Accept pipeline input : False Accept wildcard characters : False -IncludeSubDomains If supplied, the header will have includeSubDomains. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeSecurityStrictTransportSecurity"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#set-podesecuritystricttransportsecurity","text":"","title":"Set-PodeSecurityStrictTransportSecurity"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#synopsis","text":"Set a value for the Strict-Transport-Security header.","title":"SYNOPSIS"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#syntax","text":"Set-PodeSecurityStrictTransportSecurity [[-Duration] <Int32>] [-IncludeSubDomains] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#description","text":"Set a value for the Strict-Transport-Security header.","title":"DESCRIPTION"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#example-1","text":"Set-PodeSecurityStrictTransportSecurity -Duration 86400 -IncludeSubDomains","title":"EXAMPLE 1"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#-duration","text":"The Duration the browser to respect the header in seconds. (Default: 1 year) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : 31536000 Accept pipeline input : False Accept wildcard characters : False","title":"-Duration"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#-includesubdomains","text":"If supplied, the header will have includeSubDomains. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-IncludeSubDomains"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#notes","text":"","title":"NOTES"},{"location":"Functions/Security/Set-PodeSecurityStrictTransportSecurity/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/State/Get-PodeState/","text":"Get-PodeState SYNOPSIS Retrieves some state object from the shared state. SYNTAX Get-PodeState [-Name] <String> [-WithScope] [<CommonParameters>] DESCRIPTION Retrieves some state object from the shared state. EXAMPLES EXAMPLE 1 Get-PodeState -Name 'Data' PARAMETERS -Name The name of the state object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -WithScope If supplied, the state's value and scope will be returned as a hashtable. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeState"},{"location":"Functions/State/Get-PodeState/#get-podestate","text":"","title":"Get-PodeState"},{"location":"Functions/State/Get-PodeState/#synopsis","text":"Retrieves some state object from the shared state.","title":"SYNOPSIS"},{"location":"Functions/State/Get-PodeState/#syntax","text":"Get-PodeState [-Name] <String> [-WithScope] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/State/Get-PodeState/#description","text":"Retrieves some state object from the shared state.","title":"DESCRIPTION"},{"location":"Functions/State/Get-PodeState/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/State/Get-PodeState/#example-1","text":"Get-PodeState -Name 'Data'","title":"EXAMPLE 1"},{"location":"Functions/State/Get-PodeState/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/State/Get-PodeState/#-name","text":"The name of the state object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/State/Get-PodeState/#-withscope","text":"If supplied, the state's value and scope will be returned as a hashtable. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-WithScope"},{"location":"Functions/State/Get-PodeState/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/State/Get-PodeState/#inputs","text":"","title":"INPUTS"},{"location":"Functions/State/Get-PodeState/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/State/Get-PodeState/#notes","text":"","title":"NOTES"},{"location":"Functions/State/Get-PodeState/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/State/Get-PodeStateNames/","text":"Get-PodeStateNames SYNOPSIS Returns the current names of state variables. SYNTAX Get-PodeStateNames [[-Pattern] <String>] [[-Scope] <String[]>] [<CommonParameters>] DESCRIPTION Returns the current names of state variables that have been set. You can filter the result using Scope or a Pattern. EXAMPLES EXAMPLE 1 ' EXAMPLE 2 $names = Get-PodeStateNames -Pattern '^\\w+[0-9]{0,2}$' PARAMETERS -Pattern An optional regex Pattern to filter the state names. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Scope An optional Scope to filter the state names. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeStateNames"},{"location":"Functions/State/Get-PodeStateNames/#get-podestatenames","text":"","title":"Get-PodeStateNames"},{"location":"Functions/State/Get-PodeStateNames/#synopsis","text":"Returns the current names of state variables.","title":"SYNOPSIS"},{"location":"Functions/State/Get-PodeStateNames/#syntax","text":"Get-PodeStateNames [[-Pattern] <String>] [[-Scope] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/State/Get-PodeStateNames/#description","text":"Returns the current names of state variables that have been set. You can filter the result using Scope or a Pattern.","title":"DESCRIPTION"},{"location":"Functions/State/Get-PodeStateNames/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/State/Get-PodeStateNames/#example-1","text":"'","title":"EXAMPLE 1"},{"location":"Functions/State/Get-PodeStateNames/#example-2","text":"$names = Get-PodeStateNames -Pattern '^\\w+[0-9]{0,2}$'","title":"EXAMPLE 2"},{"location":"Functions/State/Get-PodeStateNames/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/State/Get-PodeStateNames/#-pattern","text":"An optional regex Pattern to filter the state names. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Pattern"},{"location":"Functions/State/Get-PodeStateNames/#-scope","text":"An optional Scope to filter the state names. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Scope"},{"location":"Functions/State/Get-PodeStateNames/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/State/Get-PodeStateNames/#inputs","text":"","title":"INPUTS"},{"location":"Functions/State/Get-PodeStateNames/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/State/Get-PodeStateNames/#notes","text":"","title":"NOTES"},{"location":"Functions/State/Get-PodeStateNames/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/State/Remove-PodeState/","text":"Remove-PodeState SYNOPSIS Removes some state object from the shared state. SYNTAX Remove-PodeState [-Name] <String> [<CommonParameters>] DESCRIPTION Removes some state object from the shared state. After removal, the original object being stored is returned. EXAMPLES EXAMPLE 1 Remove-PodeState -Name 'Data' PARAMETERS -Name The name of the state object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Object NOTES RELATED LINKS","title":"Remove-PodeState"},{"location":"Functions/State/Remove-PodeState/#remove-podestate","text":"","title":"Remove-PodeState"},{"location":"Functions/State/Remove-PodeState/#synopsis","text":"Removes some state object from the shared state.","title":"SYNOPSIS"},{"location":"Functions/State/Remove-PodeState/#syntax","text":"Remove-PodeState [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/State/Remove-PodeState/#description","text":"Removes some state object from the shared state. After removal, the original object being stored is returned.","title":"DESCRIPTION"},{"location":"Functions/State/Remove-PodeState/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/State/Remove-PodeState/#example-1","text":"Remove-PodeState -Name 'Data'","title":"EXAMPLE 1"},{"location":"Functions/State/Remove-PodeState/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/State/Remove-PodeState/#-name","text":"The name of the state object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/State/Remove-PodeState/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/State/Remove-PodeState/#inputs","text":"","title":"INPUTS"},{"location":"Functions/State/Remove-PodeState/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/State/Remove-PodeState/#systemobject","text":"","title":"System.Object"},{"location":"Functions/State/Remove-PodeState/#notes","text":"","title":"NOTES"},{"location":"Functions/State/Remove-PodeState/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/State/Restore-PodeState/","text":"Restore-PodeState SYNOPSIS Restores the shared state from some JSON file. SYNTAX Restore-PodeState [-Path] <String> [-Merge] [<CommonParameters>] DESCRIPTION Restores the shared state from some JSON file. EXAMPLES EXAMPLE 1 Restore-PodeState -Path './state.json' PARAMETERS -Merge If supplied, the state loaded from the JSON file will be merged with the current state, instead of overwriting it. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Path The path to a JSON file that contains the state information. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Restore-PodeState"},{"location":"Functions/State/Restore-PodeState/#restore-podestate","text":"","title":"Restore-PodeState"},{"location":"Functions/State/Restore-PodeState/#synopsis","text":"Restores the shared state from some JSON file.","title":"SYNOPSIS"},{"location":"Functions/State/Restore-PodeState/#syntax","text":"Restore-PodeState [-Path] <String> [-Merge] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/State/Restore-PodeState/#description","text":"Restores the shared state from some JSON file.","title":"DESCRIPTION"},{"location":"Functions/State/Restore-PodeState/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/State/Restore-PodeState/#example-1","text":"Restore-PodeState -Path './state.json'","title":"EXAMPLE 1"},{"location":"Functions/State/Restore-PodeState/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/State/Restore-PodeState/#-merge","text":"If supplied, the state loaded from the JSON file will be merged with the current state, instead of overwriting it. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Merge"},{"location":"Functions/State/Restore-PodeState/#-path","text":"The path to a JSON file that contains the state information. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/State/Restore-PodeState/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/State/Restore-PodeState/#inputs","text":"","title":"INPUTS"},{"location":"Functions/State/Restore-PodeState/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/State/Restore-PodeState/#notes","text":"","title":"NOTES"},{"location":"Functions/State/Restore-PodeState/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/State/Save-PodeState/","text":"Save-PodeState SYNOPSIS Saves the current shared state to a supplied JSON file. SYNTAX Save-PodeState [-Path] <String> [[-Scope] <String[]>] [[-Exclude] <String[]>] [[-Include] <String[]>] [-Compress] [<CommonParameters>] DESCRIPTION Saves the current shared state to a supplied JSON file. When using this function, it's recommended to wrap it in a Lock-PodeObject block. EXAMPLES EXAMPLE 1 Save-PodeState -Path './state.json' EXAMPLE 2 Save-PodeState -Path './state.json' -Exclude Name1, Name2 EXAMPLE 3 Save-PodeState -Path './state.json' -Scope Users PARAMETERS -Compress If supplied, the saved JSON will be compressed. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Exclude An optional array of state object names to exclude from being saved. (This has a higher precedence than Include) Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Include An optional array of state object names to only include when being saved. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The path to a JSON file which the current state will be saved to. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Scope An optional array of scopes for state objects that should be saved. (This has a lower precedence than Exclude/Include) Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Save-PodeState"},{"location":"Functions/State/Save-PodeState/#save-podestate","text":"","title":"Save-PodeState"},{"location":"Functions/State/Save-PodeState/#synopsis","text":"Saves the current shared state to a supplied JSON file.","title":"SYNOPSIS"},{"location":"Functions/State/Save-PodeState/#syntax","text":"Save-PodeState [-Path] <String> [[-Scope] <String[]>] [[-Exclude] <String[]>] [[-Include] <String[]>] [-Compress] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/State/Save-PodeState/#description","text":"Saves the current shared state to a supplied JSON file. When using this function, it's recommended to wrap it in a Lock-PodeObject block.","title":"DESCRIPTION"},{"location":"Functions/State/Save-PodeState/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/State/Save-PodeState/#example-1","text":"Save-PodeState -Path './state.json'","title":"EXAMPLE 1"},{"location":"Functions/State/Save-PodeState/#example-2","text":"Save-PodeState -Path './state.json' -Exclude Name1, Name2","title":"EXAMPLE 2"},{"location":"Functions/State/Save-PodeState/#example-3","text":"Save-PodeState -Path './state.json' -Scope Users","title":"EXAMPLE 3"},{"location":"Functions/State/Save-PodeState/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/State/Save-PodeState/#-compress","text":"If supplied, the saved JSON will be compressed. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Compress"},{"location":"Functions/State/Save-PodeState/#-exclude","text":"An optional array of state object names to exclude from being saved. (This has a higher precedence than Include) Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Exclude"},{"location":"Functions/State/Save-PodeState/#-include","text":"An optional array of state object names to only include when being saved. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Include"},{"location":"Functions/State/Save-PodeState/#-path","text":"The path to a JSON file which the current state will be saved to. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/State/Save-PodeState/#-scope","text":"An optional array of scopes for state objects that should be saved. (This has a lower precedence than Exclude/Include) Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Scope"},{"location":"Functions/State/Save-PodeState/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/State/Save-PodeState/#inputs","text":"","title":"INPUTS"},{"location":"Functions/State/Save-PodeState/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/State/Save-PodeState/#notes","text":"","title":"NOTES"},{"location":"Functions/State/Save-PodeState/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/State/Set-PodeState/","text":"Set-PodeState SYNOPSIS Sets an object within the shared state. SYNTAX Set-PodeState [-Name] <String> [[-Value] <Object>] [[-Scope] <String[]>] [<CommonParameters>] DESCRIPTION Sets an object within the shared state. EXAMPLES EXAMPLE 1 Set-PodeState -Name 'Data' -Value @{ 'Name' = 'Rick Sanchez' } EXAMPLE 2 Set-PodeState -Name 'Users' -Value @('user1', 'user2') -Scope General, Users PARAMETERS -Name The name of the state object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Scope An optional Scope for the state object, used when saving the state. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Value The value to set in the state. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Object NOTES RELATED LINKS","title":"Set-PodeState"},{"location":"Functions/State/Set-PodeState/#set-podestate","text":"","title":"Set-PodeState"},{"location":"Functions/State/Set-PodeState/#synopsis","text":"Sets an object within the shared state.","title":"SYNOPSIS"},{"location":"Functions/State/Set-PodeState/#syntax","text":"Set-PodeState [-Name] <String> [[-Value] <Object>] [[-Scope] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/State/Set-PodeState/#description","text":"Sets an object within the shared state.","title":"DESCRIPTION"},{"location":"Functions/State/Set-PodeState/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/State/Set-PodeState/#example-1","text":"Set-PodeState -Name 'Data' -Value @{ 'Name' = 'Rick Sanchez' }","title":"EXAMPLE 1"},{"location":"Functions/State/Set-PodeState/#example-2","text":"Set-PodeState -Name 'Users' -Value @('user1', 'user2') -Scope General, Users","title":"EXAMPLE 2"},{"location":"Functions/State/Set-PodeState/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/State/Set-PodeState/#-name","text":"The name of the state object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/State/Set-PodeState/#-scope","text":"An optional Scope for the state object, used when saving the state. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Scope"},{"location":"Functions/State/Set-PodeState/#-value","text":"The value to set in the state. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Value"},{"location":"Functions/State/Set-PodeState/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/State/Set-PodeState/#inputs","text":"","title":"INPUTS"},{"location":"Functions/State/Set-PodeState/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/State/Set-PodeState/#systemobject","text":"","title":"System.Object"},{"location":"Functions/State/Set-PodeState/#notes","text":"","title":"NOTES"},{"location":"Functions/State/Set-PodeState/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/State/Test-PodeState/","text":"Test-PodeState SYNOPSIS Tests if the shared state contains some state object. SYNTAX Test-PodeState [-Name] <String> [<CommonParameters>] DESCRIPTION Tests if the shared state contains some state object. EXAMPLES EXAMPLE 1 Test-PodeState -Name 'Data' PARAMETERS -Name The name of the state object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Boolean NOTES RELATED LINKS","title":"Test-PodeState"},{"location":"Functions/State/Test-PodeState/#test-podestate","text":"","title":"Test-PodeState"},{"location":"Functions/State/Test-PodeState/#synopsis","text":"Tests if the shared state contains some state object.","title":"SYNOPSIS"},{"location":"Functions/State/Test-PodeState/#syntax","text":"Test-PodeState [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/State/Test-PodeState/#description","text":"Tests if the shared state contains some state object.","title":"DESCRIPTION"},{"location":"Functions/State/Test-PodeState/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/State/Test-PodeState/#example-1","text":"Test-PodeState -Name 'Data'","title":"EXAMPLE 1"},{"location":"Functions/State/Test-PodeState/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/State/Test-PodeState/#-name","text":"The name of the state object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/State/Test-PodeState/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/State/Test-PodeState/#inputs","text":"","title":"INPUTS"},{"location":"Functions/State/Test-PodeState/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/State/Test-PodeState/#systemboolean","text":"","title":"System.Boolean"},{"location":"Functions/State/Test-PodeState/#notes","text":"","title":"NOTES"},{"location":"Functions/State/Test-PodeState/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Tasks/Add-PodeTask/","text":"Add-PodeTask SYNOPSIS Adds a new Task. SYNTAX Script (Default) Add-PodeTask -Name <String> -ScriptBlock <ScriptBlock> [-ArgumentList <Hashtable>] [<CommonParameters>] File Add-PodeTask -Name <String> -FilePath <String> [-ArgumentList <Hashtable>] [<CommonParameters>] DESCRIPTION Adds a new Task, which can be asynchronously or synchronously invoked. EXAMPLES EXAMPLE 1 Add-PodeTask -Name 'Example1' -ScriptBlock { Invoke-SomeLogic } EXAMPLE 2 Add-PodeTask -Name 'Example1' -ScriptBlock { return Get-SomeObject } PARAMETERS -ArgumentList A hashtable of arguments to supply to the Task's ScriptBlock. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FilePath A literal, or relative, path to a file containing a ScriptBlock for the Task's logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Task. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The script for the Task. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeTask"},{"location":"Functions/Tasks/Add-PodeTask/#add-podetask","text":"","title":"Add-PodeTask"},{"location":"Functions/Tasks/Add-PodeTask/#synopsis","text":"Adds a new Task.","title":"SYNOPSIS"},{"location":"Functions/Tasks/Add-PodeTask/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Tasks/Add-PodeTask/#script-default","text":"Add-PodeTask -Name <String> -ScriptBlock <ScriptBlock> [-ArgumentList <Hashtable>] [<CommonParameters>]","title":"Script (Default)"},{"location":"Functions/Tasks/Add-PodeTask/#file","text":"Add-PodeTask -Name <String> -FilePath <String> [-ArgumentList <Hashtable>] [<CommonParameters>]","title":"File"},{"location":"Functions/Tasks/Add-PodeTask/#description","text":"Adds a new Task, which can be asynchronously or synchronously invoked.","title":"DESCRIPTION"},{"location":"Functions/Tasks/Add-PodeTask/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Tasks/Add-PodeTask/#example-1","text":"Add-PodeTask -Name 'Example1' -ScriptBlock { Invoke-SomeLogic }","title":"EXAMPLE 1"},{"location":"Functions/Tasks/Add-PodeTask/#example-2","text":"Add-PodeTask -Name 'Example1' -ScriptBlock { return Get-SomeObject }","title":"EXAMPLE 2"},{"location":"Functions/Tasks/Add-PodeTask/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Tasks/Add-PodeTask/#-argumentlist","text":"A hashtable of arguments to supply to the Task's ScriptBlock. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Tasks/Add-PodeTask/#-filepath","text":"A literal, or relative, path to a file containing a ScriptBlock for the Task's logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"Functions/Tasks/Add-PodeTask/#-name","text":"The Name of the Task. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Tasks/Add-PodeTask/#-scriptblock","text":"The script for the Task. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Tasks/Add-PodeTask/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Tasks/Add-PodeTask/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Tasks/Add-PodeTask/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Tasks/Add-PodeTask/#notes","text":"","title":"NOTES"},{"location":"Functions/Tasks/Add-PodeTask/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Tasks/Clear-PodeTasks/","text":"Clear-PodeTasks SYNOPSIS Removes all Tasks. SYNTAX Clear-PodeTasks [<CommonParameters>] DESCRIPTION Removes all Tasks. EXAMPLES EXAMPLE 1 Clear-PodeTasks PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeTasks"},{"location":"Functions/Tasks/Clear-PodeTasks/#clear-podetasks","text":"","title":"Clear-PodeTasks"},{"location":"Functions/Tasks/Clear-PodeTasks/#synopsis","text":"Removes all Tasks.","title":"SYNOPSIS"},{"location":"Functions/Tasks/Clear-PodeTasks/#syntax","text":"Clear-PodeTasks [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Tasks/Clear-PodeTasks/#description","text":"Removes all Tasks.","title":"DESCRIPTION"},{"location":"Functions/Tasks/Clear-PodeTasks/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Tasks/Clear-PodeTasks/#example-1","text":"Clear-PodeTasks","title":"EXAMPLE 1"},{"location":"Functions/Tasks/Clear-PodeTasks/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Tasks/Clear-PodeTasks/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Tasks/Clear-PodeTasks/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Tasks/Clear-PodeTasks/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Tasks/Clear-PodeTasks/#notes","text":"","title":"NOTES"},{"location":"Functions/Tasks/Clear-PodeTasks/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Tasks/Close-PodeTask/","text":"Close-PodeTask SYNOPSIS Close and dispose of a Task. SYNTAX Close-PodeTask [-Task] <Hashtable> [<CommonParameters>] DESCRIPTION Close and dispose of a Task, even if still running. EXAMPLES EXAMPLE 1 Invoke-PodeTask -Name 'Example1' | Close-PodeTask PARAMETERS -Task The Task to be closed. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Close-PodeTask"},{"location":"Functions/Tasks/Close-PodeTask/#close-podetask","text":"","title":"Close-PodeTask"},{"location":"Functions/Tasks/Close-PodeTask/#synopsis","text":"Close and dispose of a Task.","title":"SYNOPSIS"},{"location":"Functions/Tasks/Close-PodeTask/#syntax","text":"Close-PodeTask [-Task] <Hashtable> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Tasks/Close-PodeTask/#description","text":"Close and dispose of a Task, even if still running.","title":"DESCRIPTION"},{"location":"Functions/Tasks/Close-PodeTask/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Tasks/Close-PodeTask/#example-1","text":"Invoke-PodeTask -Name 'Example1' | Close-PodeTask","title":"EXAMPLE 1"},{"location":"Functions/Tasks/Close-PodeTask/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Tasks/Close-PodeTask/#-task","text":"The Task to be closed. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Task"},{"location":"Functions/Tasks/Close-PodeTask/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Tasks/Close-PodeTask/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Tasks/Close-PodeTask/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Tasks/Close-PodeTask/#notes","text":"","title":"NOTES"},{"location":"Functions/Tasks/Close-PodeTask/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Tasks/Edit-PodeTask/","text":"Edit-PodeTask SYNOPSIS Edits an existing Task. SYNTAX Edit-PodeTask [-Name] <String> [[-ScriptBlock] <ScriptBlock>] [[-ArgumentList] <Hashtable>] [<CommonParameters>] DESCRIPTION Edits an existing Task's properties, such as scriptblock. EXAMPLES EXAMPLE 1 Edit-PodeTask -Name 'Example1' -ScriptBlock { Invoke-SomeNewLogic } PARAMETERS -ArgumentList Any new Arguments for the Task. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Task. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -ScriptBlock The new ScriptBlock for the Task. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Edit-PodeTask"},{"location":"Functions/Tasks/Edit-PodeTask/#edit-podetask","text":"","title":"Edit-PodeTask"},{"location":"Functions/Tasks/Edit-PodeTask/#synopsis","text":"Edits an existing Task.","title":"SYNOPSIS"},{"location":"Functions/Tasks/Edit-PodeTask/#syntax","text":"Edit-PodeTask [-Name] <String> [[-ScriptBlock] <ScriptBlock>] [[-ArgumentList] <Hashtable>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Tasks/Edit-PodeTask/#description","text":"Edits an existing Task's properties, such as scriptblock.","title":"DESCRIPTION"},{"location":"Functions/Tasks/Edit-PodeTask/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Tasks/Edit-PodeTask/#example-1","text":"Edit-PodeTask -Name 'Example1' -ScriptBlock { Invoke-SomeNewLogic }","title":"EXAMPLE 1"},{"location":"Functions/Tasks/Edit-PodeTask/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Tasks/Edit-PodeTask/#-argumentlist","text":"Any new Arguments for the Task. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Tasks/Edit-PodeTask/#-name","text":"The Name of the Task. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Tasks/Edit-PodeTask/#-scriptblock","text":"The new ScriptBlock for the Task. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Tasks/Edit-PodeTask/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Tasks/Edit-PodeTask/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Tasks/Edit-PodeTask/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Tasks/Edit-PodeTask/#notes","text":"","title":"NOTES"},{"location":"Functions/Tasks/Edit-PodeTask/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Tasks/Get-PodeTask/","text":"Get-PodeTask SYNOPSIS Returns any defined Tasks. SYNTAX Get-PodeTask [[-Name] <String[]>] [<CommonParameters>] DESCRIPTION Returns any defined Tasks, with support for filtering. EXAMPLES EXAMPLE 1 Get-PodeTask EXAMPLE 2 Get-PodeTask -Name Example1, Example2 PARAMETERS -Name Any Task Names to filter the Tasks. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeTask"},{"location":"Functions/Tasks/Get-PodeTask/#get-podetask","text":"","title":"Get-PodeTask"},{"location":"Functions/Tasks/Get-PodeTask/#synopsis","text":"Returns any defined Tasks.","title":"SYNOPSIS"},{"location":"Functions/Tasks/Get-PodeTask/#syntax","text":"Get-PodeTask [[-Name] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Tasks/Get-PodeTask/#description","text":"Returns any defined Tasks, with support for filtering.","title":"DESCRIPTION"},{"location":"Functions/Tasks/Get-PodeTask/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Tasks/Get-PodeTask/#example-1","text":"Get-PodeTask","title":"EXAMPLE 1"},{"location":"Functions/Tasks/Get-PodeTask/#example-2","text":"Get-PodeTask -Name Example1, Example2","title":"EXAMPLE 2"},{"location":"Functions/Tasks/Get-PodeTask/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Tasks/Get-PodeTask/#-name","text":"Any Task Names to filter the Tasks. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Tasks/Get-PodeTask/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Tasks/Get-PodeTask/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Tasks/Get-PodeTask/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Tasks/Get-PodeTask/#notes","text":"","title":"NOTES"},{"location":"Functions/Tasks/Get-PodeTask/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Tasks/Invoke-PodeTask/","text":"Invoke-PodeTask SYNOPSIS Invoke a Task. SYNTAX Invoke-PodeTask [-Name] <String> [[-ArgumentList] <Hashtable>] [[-Timeout] <Int32>] [-Wait] [<CommonParameters>] DESCRIPTION Invoke a Task either asynchronously or synchronously, with support for returning values. EXAMPLES EXAMPLE 1 Invoke-PodeTask -Name 'Example1' -Wait -Timeout 5 EXAMPLE 2 $task = Invoke-PodeTask -Name 'Example1' EXAMPLE 3 Invoke-PodeTask -Name 'Example1' | Wait-PodeTask -Timeout 3 PARAMETERS -ArgumentList A hashtable of arguments to supply to the Task's ScriptBlock. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Task. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Timeout A Timeout, in seconds, to abort running the task. (Default: -1 [never timeout]) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : -1 Accept pipeline input : False Accept wildcard characters : False -Wait If supplied, Pode will wait until the Task has finished executing, and then return any values. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Invoke-PodeTask"},{"location":"Functions/Tasks/Invoke-PodeTask/#invoke-podetask","text":"","title":"Invoke-PodeTask"},{"location":"Functions/Tasks/Invoke-PodeTask/#synopsis","text":"Invoke a Task.","title":"SYNOPSIS"},{"location":"Functions/Tasks/Invoke-PodeTask/#syntax","text":"Invoke-PodeTask [-Name] <String> [[-ArgumentList] <Hashtable>] [[-Timeout] <Int32>] [-Wait] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Tasks/Invoke-PodeTask/#description","text":"Invoke a Task either asynchronously or synchronously, with support for returning values.","title":"DESCRIPTION"},{"location":"Functions/Tasks/Invoke-PodeTask/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Tasks/Invoke-PodeTask/#example-1","text":"Invoke-PodeTask -Name 'Example1' -Wait -Timeout 5","title":"EXAMPLE 1"},{"location":"Functions/Tasks/Invoke-PodeTask/#example-2","text":"$task = Invoke-PodeTask -Name 'Example1'","title":"EXAMPLE 2"},{"location":"Functions/Tasks/Invoke-PodeTask/#example-3","text":"Invoke-PodeTask -Name 'Example1' | Wait-PodeTask -Timeout 3","title":"EXAMPLE 3"},{"location":"Functions/Tasks/Invoke-PodeTask/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Tasks/Invoke-PodeTask/#-argumentlist","text":"A hashtable of arguments to supply to the Task's ScriptBlock. Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Tasks/Invoke-PodeTask/#-name","text":"The Name of the Task. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Tasks/Invoke-PodeTask/#-timeout","text":"A Timeout, in seconds, to abort running the task. (Default: -1 [never timeout]) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : -1 Accept pipeline input : False Accept wildcard characters : False","title":"-Timeout"},{"location":"Functions/Tasks/Invoke-PodeTask/#-wait","text":"If supplied, Pode will wait until the Task has finished executing, and then return any values. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Wait"},{"location":"Functions/Tasks/Invoke-PodeTask/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Tasks/Invoke-PodeTask/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Tasks/Invoke-PodeTask/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Tasks/Invoke-PodeTask/#notes","text":"","title":"NOTES"},{"location":"Functions/Tasks/Invoke-PodeTask/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Tasks/Remove-PodeTask/","text":"Remove-PodeTask SYNOPSIS Removes a specific Task. SYNTAX Remove-PodeTask [-Name] <String> [<CommonParameters>] DESCRIPTION Removes a specific Task. EXAMPLES EXAMPLE 1 Remove-PodeTask -Name 'Example1' PARAMETERS -Name The Name of Task to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeTask"},{"location":"Functions/Tasks/Remove-PodeTask/#remove-podetask","text":"","title":"Remove-PodeTask"},{"location":"Functions/Tasks/Remove-PodeTask/#synopsis","text":"Removes a specific Task.","title":"SYNOPSIS"},{"location":"Functions/Tasks/Remove-PodeTask/#syntax","text":"Remove-PodeTask [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Tasks/Remove-PodeTask/#description","text":"Removes a specific Task.","title":"DESCRIPTION"},{"location":"Functions/Tasks/Remove-PodeTask/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Tasks/Remove-PodeTask/#example-1","text":"Remove-PodeTask -Name 'Example1'","title":"EXAMPLE 1"},{"location":"Functions/Tasks/Remove-PodeTask/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Tasks/Remove-PodeTask/#-name","text":"The Name of Task to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Tasks/Remove-PodeTask/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Tasks/Remove-PodeTask/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Tasks/Remove-PodeTask/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Tasks/Remove-PodeTask/#notes","text":"","title":"NOTES"},{"location":"Functions/Tasks/Remove-PodeTask/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/","text":"Set-PodeTaskConcurrency SYNOPSIS Set the maximum number of concurrent Tasks. SYNTAX Set-PodeTaskConcurrency [-Maximum] <Int32> [<CommonParameters>] DESCRIPTION Set the maximum number of concurrent Tasks. EXAMPLES EXAMPLE 1 Set-PodeTaskConcurrency -Maximum 10 PARAMETERS -Maximum The Maximum number of Tasks to run. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : 0 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeTaskConcurrency"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#set-podetaskconcurrency","text":"","title":"Set-PodeTaskConcurrency"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#synopsis","text":"Set the maximum number of concurrent Tasks.","title":"SYNOPSIS"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#syntax","text":"Set-PodeTaskConcurrency [-Maximum] <Int32> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#description","text":"Set the maximum number of concurrent Tasks.","title":"DESCRIPTION"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#example-1","text":"Set-PodeTaskConcurrency -Maximum 10","title":"EXAMPLE 1"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#-maximum","text":"The Maximum number of Tasks to run. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Maximum"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#notes","text":"","title":"NOTES"},{"location":"Functions/Tasks/Set-PodeTaskConcurrency/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/","text":"Test-PodeTaskCompleted SYNOPSIS Test if a running Task has completed. SYNTAX Test-PodeTaskCompleted [-Task] <Hashtable> [<CommonParameters>] DESCRIPTION Test if a running Task has completed. EXAMPLES EXAMPLE 1 Invoke-PodeTask -Name 'Example1' | Test-PodeTaskCompleted PARAMETERS -Task The Task to be check. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Test-PodeTaskCompleted"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#test-podetaskcompleted","text":"","title":"Test-PodeTaskCompleted"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#synopsis","text":"Test if a running Task has completed.","title":"SYNOPSIS"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#syntax","text":"Test-PodeTaskCompleted [-Task] <Hashtable> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#description","text":"Test if a running Task has completed.","title":"DESCRIPTION"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#example-1","text":"Invoke-PodeTask -Name 'Example1' | Test-PodeTaskCompleted","title":"EXAMPLE 1"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#-task","text":"The Task to be check. Type : Hashtable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Task"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#notes","text":"","title":"NOTES"},{"location":"Functions/Tasks/Test-PodeTaskCompleted/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Tasks/Use-PodeTasks/","text":"Use-PodeTasks SYNOPSIS Automatically loads task ps1 files SYNTAX Use-PodeTasks [[-Path] <String>] [<CommonParameters>] DESCRIPTION Automatically loads task ps1 files from either a /tasks folder, or a custom folder. Saves space dot-sourcing them all one-by-one. EXAMPLES EXAMPLE 1 Use-PodeTasks EXAMPLE 2 Use-PodeTasks -Path './my-tasks' PARAMETERS -Path Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeTasks"},{"location":"Functions/Tasks/Use-PodeTasks/#use-podetasks","text":"","title":"Use-PodeTasks"},{"location":"Functions/Tasks/Use-PodeTasks/#synopsis","text":"Automatically loads task ps1 files","title":"SYNOPSIS"},{"location":"Functions/Tasks/Use-PodeTasks/#syntax","text":"Use-PodeTasks [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Tasks/Use-PodeTasks/#description","text":"Automatically loads task ps1 files from either a /tasks folder, or a custom folder. Saves space dot-sourcing them all one-by-one.","title":"DESCRIPTION"},{"location":"Functions/Tasks/Use-PodeTasks/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Tasks/Use-PodeTasks/#example-1","text":"Use-PodeTasks","title":"EXAMPLE 1"},{"location":"Functions/Tasks/Use-PodeTasks/#example-2","text":"Use-PodeTasks -Path './my-tasks'","title":"EXAMPLE 2"},{"location":"Functions/Tasks/Use-PodeTasks/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Tasks/Use-PodeTasks/#-path","text":"Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Tasks/Use-PodeTasks/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Tasks/Use-PodeTasks/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Tasks/Use-PodeTasks/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Tasks/Use-PodeTasks/#notes","text":"","title":"NOTES"},{"location":"Functions/Tasks/Use-PodeTasks/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Tasks/Wait-PodeTask/","text":"Wait-PodeTask SYNOPSIS Waits for a task to finish, and returns a result if there is one. SYNTAX Wait-PodeTask [-Task] <Object> [[-Timeout] <Int32>] [<CommonParameters>] DESCRIPTION Waits for a task to finish, and returns a result if there is one. EXAMPLES EXAMPLE 1 $context = Wait-PodeTask -Task $listener.GetContextAsync() EXAMPLE 2 $result = Invoke-PodeTask -Name 'Example1' | Wait-PodeTask PARAMETERS -Task The task to wait on. Type : Object Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Timeout An optional Timeout in milliseconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : -1 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Object NOTES RELATED LINKS","title":"Wait-PodeTask"},{"location":"Functions/Tasks/Wait-PodeTask/#wait-podetask","text":"","title":"Wait-PodeTask"},{"location":"Functions/Tasks/Wait-PodeTask/#synopsis","text":"Waits for a task to finish, and returns a result if there is one.","title":"SYNOPSIS"},{"location":"Functions/Tasks/Wait-PodeTask/#syntax","text":"Wait-PodeTask [-Task] <Object> [[-Timeout] <Int32>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Tasks/Wait-PodeTask/#description","text":"Waits for a task to finish, and returns a result if there is one.","title":"DESCRIPTION"},{"location":"Functions/Tasks/Wait-PodeTask/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Tasks/Wait-PodeTask/#example-1","text":"$context = Wait-PodeTask -Task $listener.GetContextAsync()","title":"EXAMPLE 1"},{"location":"Functions/Tasks/Wait-PodeTask/#example-2","text":"$result = Invoke-PodeTask -Name 'Example1' | Wait-PodeTask","title":"EXAMPLE 2"},{"location":"Functions/Tasks/Wait-PodeTask/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Tasks/Wait-PodeTask/#-task","text":"The task to wait on. Type : Object Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Task"},{"location":"Functions/Tasks/Wait-PodeTask/#-timeout","text":"An optional Timeout in milliseconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : -1 Accept pipeline input : False Accept wildcard characters : False","title":"-Timeout"},{"location":"Functions/Tasks/Wait-PodeTask/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Tasks/Wait-PodeTask/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Tasks/Wait-PodeTask/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Tasks/Wait-PodeTask/#systemobject","text":"","title":"System.Object"},{"location":"Functions/Tasks/Wait-PodeTask/#notes","text":"","title":"NOTES"},{"location":"Functions/Tasks/Wait-PodeTask/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Timers/Add-PodeTimer/","text":"Add-PodeTimer SYNOPSIS Adds a new Timer with logic to periodically invoke. SYNTAX Script (Default) Add-PodeTimer -Name <String> -Interval <Int32> -ScriptBlock <ScriptBlock> [-Limit <Int32>] [-Skip <Int32>] [-ArgumentList <Object[]>] [-OnStart] [<CommonParameters>] File Add-PodeTimer -Name <String> -Interval <Int32> [-Limit <Int32>] [-Skip <Int32>] -FilePath <String> [-ArgumentList <Object[]>] [-OnStart] [<CommonParameters>] DESCRIPTION Adds a new Timer with logic to periodically invoke, with options to only run a specific number of times. EXAMPLES EXAMPLE 1 Add-PodeTimer -Name 'Hello' -Interval 10 -ScriptBlock { 'Hello, world!' | Out-Default } EXAMPLE 2 Add-PodeTimer -Name 'RunOnce' -Interval 1 -Limit 1 -ScriptBlock { /* logic */ } EXAMPLE 3 Add-PodeTimer -Name 'RunAfter60secs' -Interval 10 -Skip 6 -ScriptBlock { /* logic */ } EXAMPLE 4 Add-PodeTimer -Name 'Args' -Interval 2 -ScriptBlock { /* logic */ } -ArgumentList 'arg1', 'arg2' PARAMETERS -ArgumentList An array of arguments to supply to the Timer's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FilePath A literal, or relative, path to a file containing a ScriptBlock for the Timer's logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Interval The number of seconds to periodically invoke the Timer's ScriptBlock. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Limit The number of times the Timer should be invoked before being removed. (If 0, it will run indefinitely) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Timer. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -OnStart If supplied, the timer will trigger when the server starts. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The script for the Timer. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Skip The number of \"invokes\" to skip before the Timer actually runs. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeTimer"},{"location":"Functions/Timers/Add-PodeTimer/#add-podetimer","text":"","title":"Add-PodeTimer"},{"location":"Functions/Timers/Add-PodeTimer/#synopsis","text":"Adds a new Timer with logic to periodically invoke.","title":"SYNOPSIS"},{"location":"Functions/Timers/Add-PodeTimer/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Timers/Add-PodeTimer/#script-default","text":"Add-PodeTimer -Name <String> -Interval <Int32> -ScriptBlock <ScriptBlock> [-Limit <Int32>] [-Skip <Int32>] [-ArgumentList <Object[]>] [-OnStart] [<CommonParameters>]","title":"Script (Default)"},{"location":"Functions/Timers/Add-PodeTimer/#file","text":"Add-PodeTimer -Name <String> -Interval <Int32> [-Limit <Int32>] [-Skip <Int32>] -FilePath <String> [-ArgumentList <Object[]>] [-OnStart] [<CommonParameters>]","title":"File"},{"location":"Functions/Timers/Add-PodeTimer/#description","text":"Adds a new Timer with logic to periodically invoke, with options to only run a specific number of times.","title":"DESCRIPTION"},{"location":"Functions/Timers/Add-PodeTimer/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Timers/Add-PodeTimer/#example-1","text":"Add-PodeTimer -Name 'Hello' -Interval 10 -ScriptBlock { 'Hello, world!' | Out-Default }","title":"EXAMPLE 1"},{"location":"Functions/Timers/Add-PodeTimer/#example-2","text":"Add-PodeTimer -Name 'RunOnce' -Interval 1 -Limit 1 -ScriptBlock { /* logic */ }","title":"EXAMPLE 2"},{"location":"Functions/Timers/Add-PodeTimer/#example-3","text":"Add-PodeTimer -Name 'RunAfter60secs' -Interval 10 -Skip 6 -ScriptBlock { /* logic */ }","title":"EXAMPLE 3"},{"location":"Functions/Timers/Add-PodeTimer/#example-4","text":"Add-PodeTimer -Name 'Args' -Interval 2 -ScriptBlock { /* logic */ } -ArgumentList 'arg1', 'arg2'","title":"EXAMPLE 4"},{"location":"Functions/Timers/Add-PodeTimer/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Timers/Add-PodeTimer/#-argumentlist","text":"An array of arguments to supply to the Timer's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Timers/Add-PodeTimer/#-filepath","text":"A literal, or relative, path to a file containing a ScriptBlock for the Timer's logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"Functions/Timers/Add-PodeTimer/#-interval","text":"The number of seconds to periodically invoke the Timer's ScriptBlock. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Interval"},{"location":"Functions/Timers/Add-PodeTimer/#-limit","text":"The number of times the Timer should be invoked before being removed. (If 0, it will run indefinitely) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Limit"},{"location":"Functions/Timers/Add-PodeTimer/#-name","text":"The Name of the Timer. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Timers/Add-PodeTimer/#-onstart","text":"If supplied, the timer will trigger when the server starts. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-OnStart"},{"location":"Functions/Timers/Add-PodeTimer/#-scriptblock","text":"The script for the Timer. Type : ScriptBlock Parameter Sets : Script Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Timers/Add-PodeTimer/#-skip","text":"The number of \"invokes\" to skip before the Timer actually runs. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Skip"},{"location":"Functions/Timers/Add-PodeTimer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Timers/Add-PodeTimer/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Timers/Add-PodeTimer/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Timers/Add-PodeTimer/#notes","text":"","title":"NOTES"},{"location":"Functions/Timers/Add-PodeTimer/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Timers/Clear-PodeTimers/","text":"Clear-PodeTimers SYNOPSIS Removes all Timers. SYNTAX Clear-PodeTimers [<CommonParameters>] DESCRIPTION Removes all Timers. EXAMPLES EXAMPLE 1 Clear-PodeTimers PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeTimers"},{"location":"Functions/Timers/Clear-PodeTimers/#clear-podetimers","text":"","title":"Clear-PodeTimers"},{"location":"Functions/Timers/Clear-PodeTimers/#synopsis","text":"Removes all Timers.","title":"SYNOPSIS"},{"location":"Functions/Timers/Clear-PodeTimers/#syntax","text":"Clear-PodeTimers [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Timers/Clear-PodeTimers/#description","text":"Removes all Timers.","title":"DESCRIPTION"},{"location":"Functions/Timers/Clear-PodeTimers/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Timers/Clear-PodeTimers/#example-1","text":"Clear-PodeTimers","title":"EXAMPLE 1"},{"location":"Functions/Timers/Clear-PodeTimers/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Timers/Clear-PodeTimers/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Timers/Clear-PodeTimers/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Timers/Clear-PodeTimers/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Timers/Clear-PodeTimers/#notes","text":"","title":"NOTES"},{"location":"Functions/Timers/Clear-PodeTimers/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Timers/Edit-PodeTimer/","text":"Edit-PodeTimer SYNOPSIS Edits an existing Timer. SYNTAX Edit-PodeTimer [-Name] <String> [[-Interval] <Int32>] [[-ScriptBlock] <ScriptBlock>] [[-ArgumentList] <Object[]>] [<CommonParameters>] DESCRIPTION Edits an existing Timer's properties, such as interval or scriptblock. EXAMPLES EXAMPLE 1 Edit-PodeTimer -Name 'Hello' -Interval 10 PARAMETERS -ArgumentList Any new Arguments for the Timer. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -Interval The new Interval for the Timer in seconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : 0 Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Timer. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -ScriptBlock The new ScriptBlock for the Timer. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Edit-PodeTimer"},{"location":"Functions/Timers/Edit-PodeTimer/#edit-podetimer","text":"","title":"Edit-PodeTimer"},{"location":"Functions/Timers/Edit-PodeTimer/#synopsis","text":"Edits an existing Timer.","title":"SYNOPSIS"},{"location":"Functions/Timers/Edit-PodeTimer/#syntax","text":"Edit-PodeTimer [-Name] <String> [[-Interval] <Int32>] [[-ScriptBlock] <ScriptBlock>] [[-ArgumentList] <Object[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Timers/Edit-PodeTimer/#description","text":"Edits an existing Timer's properties, such as interval or scriptblock.","title":"DESCRIPTION"},{"location":"Functions/Timers/Edit-PodeTimer/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Timers/Edit-PodeTimer/#example-1","text":"Edit-PodeTimer -Name 'Hello' -Interval 10","title":"EXAMPLE 1"},{"location":"Functions/Timers/Edit-PodeTimer/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Timers/Edit-PodeTimer/#-argumentlist","text":"Any new Arguments for the Timer. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Timers/Edit-PodeTimer/#-interval","text":"The new Interval for the Timer in seconds. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Interval"},{"location":"Functions/Timers/Edit-PodeTimer/#-name","text":"The Name of the Timer. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Timers/Edit-PodeTimer/#-scriptblock","text":"The new ScriptBlock for the Timer. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Timers/Edit-PodeTimer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Timers/Edit-PodeTimer/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Timers/Edit-PodeTimer/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Timers/Edit-PodeTimer/#notes","text":"","title":"NOTES"},{"location":"Functions/Timers/Edit-PodeTimer/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Timers/Get-PodeTimer/","text":"Get-PodeTimer SYNOPSIS Returns any defined timers. SYNTAX Get-PodeTimer [[-Name] <String[]>] [<CommonParameters>] DESCRIPTION Returns any defined timers, with support for filtering. EXAMPLES EXAMPLE 1 Get-PodeTimer EXAMPLE 2 Get-PodeTimer -Name Name1, Name2 PARAMETERS -Name Any timer Names to filter the timers. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeTimer"},{"location":"Functions/Timers/Get-PodeTimer/#get-podetimer","text":"","title":"Get-PodeTimer"},{"location":"Functions/Timers/Get-PodeTimer/#synopsis","text":"Returns any defined timers.","title":"SYNOPSIS"},{"location":"Functions/Timers/Get-PodeTimer/#syntax","text":"Get-PodeTimer [[-Name] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Timers/Get-PodeTimer/#description","text":"Returns any defined timers, with support for filtering.","title":"DESCRIPTION"},{"location":"Functions/Timers/Get-PodeTimer/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Timers/Get-PodeTimer/#example-1","text":"Get-PodeTimer","title":"EXAMPLE 1"},{"location":"Functions/Timers/Get-PodeTimer/#example-2","text":"Get-PodeTimer -Name Name1, Name2","title":"EXAMPLE 2"},{"location":"Functions/Timers/Get-PodeTimer/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Timers/Get-PodeTimer/#-name","text":"Any timer Names to filter the timers. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Timers/Get-PodeTimer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Timers/Get-PodeTimer/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Timers/Get-PodeTimer/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Timers/Get-PodeTimer/#notes","text":"","title":"NOTES"},{"location":"Functions/Timers/Get-PodeTimer/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Timers/Invoke-PodeTimer/","text":"Invoke-PodeTimer SYNOPSIS Adhoc invoke a Timer's logic. SYNTAX Invoke-PodeTimer [-Name] <String> [[-ArgumentList] <Object[]>] [<CommonParameters>] DESCRIPTION Adhoc invoke a Timer's logic outside of its defined interval. This invocation doesn't count towards the Timer's limit. EXAMPLES EXAMPLE 1 Invoke-PodeTimer -Name 'timer-name' PARAMETERS -ArgumentList An array of arguments to supply to the Timer's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the Timer. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Invoke-PodeTimer"},{"location":"Functions/Timers/Invoke-PodeTimer/#invoke-podetimer","text":"","title":"Invoke-PodeTimer"},{"location":"Functions/Timers/Invoke-PodeTimer/#synopsis","text":"Adhoc invoke a Timer's logic.","title":"SYNOPSIS"},{"location":"Functions/Timers/Invoke-PodeTimer/#syntax","text":"Invoke-PodeTimer [-Name] <String> [[-ArgumentList] <Object[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Timers/Invoke-PodeTimer/#description","text":"Adhoc invoke a Timer's logic outside of its defined interval. This invocation doesn't count towards the Timer's limit.","title":"DESCRIPTION"},{"location":"Functions/Timers/Invoke-PodeTimer/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Timers/Invoke-PodeTimer/#example-1","text":"Invoke-PodeTimer -Name 'timer-name'","title":"EXAMPLE 1"},{"location":"Functions/Timers/Invoke-PodeTimer/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Timers/Invoke-PodeTimer/#-argumentlist","text":"An array of arguments to supply to the Timer's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Timers/Invoke-PodeTimer/#-name","text":"The Name of the Timer. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Timers/Invoke-PodeTimer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Timers/Invoke-PodeTimer/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Timers/Invoke-PodeTimer/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Timers/Invoke-PodeTimer/#notes","text":"","title":"NOTES"},{"location":"Functions/Timers/Invoke-PodeTimer/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Timers/Remove-PodeTimer/","text":"Remove-PodeTimer SYNOPSIS Removes a specific Timer. SYNTAX Remove-PodeTimer [-Name] <String> [<CommonParameters>] DESCRIPTION Removes a specific Timer. EXAMPLES EXAMPLE 1 Remove-PodeTimer -Name 'SaveState' PARAMETERS -Name The Name of Timer to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeTimer"},{"location":"Functions/Timers/Remove-PodeTimer/#remove-podetimer","text":"","title":"Remove-PodeTimer"},{"location":"Functions/Timers/Remove-PodeTimer/#synopsis","text":"Removes a specific Timer.","title":"SYNOPSIS"},{"location":"Functions/Timers/Remove-PodeTimer/#syntax","text":"Remove-PodeTimer [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Timers/Remove-PodeTimer/#description","text":"Removes a specific Timer.","title":"DESCRIPTION"},{"location":"Functions/Timers/Remove-PodeTimer/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Timers/Remove-PodeTimer/#example-1","text":"Remove-PodeTimer -Name 'SaveState'","title":"EXAMPLE 1"},{"location":"Functions/Timers/Remove-PodeTimer/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Timers/Remove-PodeTimer/#-name","text":"The Name of Timer to be removed. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Timers/Remove-PodeTimer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Timers/Remove-PodeTimer/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Timers/Remove-PodeTimer/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Timers/Remove-PodeTimer/#notes","text":"","title":"NOTES"},{"location":"Functions/Timers/Remove-PodeTimer/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Timers/Use-PodeTimers/","text":"Use-PodeTimers SYNOPSIS Automatically loads timer ps1 files SYNTAX Use-PodeTimers [[-Path] <String>] [<CommonParameters>] DESCRIPTION Automatically loads timer ps1 files from either a /timers folder, or a custom folder. Saves space dot-sourcing them all one-by-one. EXAMPLES EXAMPLE 1 Use-PodeTimers EXAMPLE 2 Use-PodeTimers -Path './my-timers' PARAMETERS -Path Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeTimers"},{"location":"Functions/Timers/Use-PodeTimers/#use-podetimers","text":"","title":"Use-PodeTimers"},{"location":"Functions/Timers/Use-PodeTimers/#synopsis","text":"Automatically loads timer ps1 files","title":"SYNOPSIS"},{"location":"Functions/Timers/Use-PodeTimers/#syntax","text":"Use-PodeTimers [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Timers/Use-PodeTimers/#description","text":"Automatically loads timer ps1 files from either a /timers folder, or a custom folder. Saves space dot-sourcing them all one-by-one.","title":"DESCRIPTION"},{"location":"Functions/Timers/Use-PodeTimers/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Timers/Use-PodeTimers/#example-1","text":"Use-PodeTimers","title":"EXAMPLE 1"},{"location":"Functions/Timers/Use-PodeTimers/#example-2","text":"Use-PodeTimers -Path './my-timers'","title":"EXAMPLE 2"},{"location":"Functions/Timers/Use-PodeTimers/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Timers/Use-PodeTimers/#-path","text":"Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Timers/Use-PodeTimers/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Timers/Use-PodeTimers/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Timers/Use-PodeTimers/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Timers/Use-PodeTimers/#notes","text":"","title":"NOTES"},{"location":"Functions/Timers/Use-PodeTimers/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Add-PodeEndware/","text":"Add-PodeEndware SYNOPSIS Adds a ScriptBlock as Endware to run at the end of each web Request. SYNTAX Add-PodeEndware [-ScriptBlock] <ScriptBlock> [[-ArgumentList] <Object[]>] [<CommonParameters>] DESCRIPTION Adds a ScriptBlock as Endware to run at the end of each web Request. EXAMPLES EXAMPLE 1 Add-PodeEndware -ScriptBlock { /* logic */ } PARAMETERS -ArgumentList An array of arguments to supply to the Endware's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The ScriptBlock to add. It will be supplied the current web event. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeEndware"},{"location":"Functions/Utilities/Add-PodeEndware/#add-podeendware","text":"","title":"Add-PodeEndware"},{"location":"Functions/Utilities/Add-PodeEndware/#synopsis","text":"Adds a ScriptBlock as Endware to run at the end of each web Request.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Add-PodeEndware/#syntax","text":"Add-PodeEndware [-ScriptBlock] <ScriptBlock> [[-ArgumentList] <Object[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Add-PodeEndware/#description","text":"Adds a ScriptBlock as Endware to run at the end of each web Request.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Add-PodeEndware/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Add-PodeEndware/#example-1","text":"Add-PodeEndware -ScriptBlock { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Add-PodeEndware/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Add-PodeEndware/#-argumentlist","text":"An array of arguments to supply to the Endware's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Utilities/Add-PodeEndware/#-scriptblock","text":"The ScriptBlock to add. It will be supplied the current web event. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Utilities/Add-PodeEndware/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Add-PodeEndware/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Add-PodeEndware/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Add-PodeEndware/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Add-PodeEndware/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Close-PodeDisposable/","text":"Close-PodeDisposable SYNOPSIS Dispose and close streams, tokens, and other Disposables. SYNTAX Close-PodeDisposable [[-Disposable] <IDisposable>] [-Close] [-CheckNetwork] [<CommonParameters>] DESCRIPTION Dispose and close streams, tokens, and other Disposables. EXAMPLES EXAMPLE 1 Close-PodeDisposable -Disposable $stream -Close PARAMETERS -CheckNetwork If an error is thrown, check the reason - if it's network related ignore the error. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Close Should the Disposable also be closed, as well as disposed? Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Disposable The Disposable object to dispose and close. Type : IDisposable Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Close-PodeDisposable"},{"location":"Functions/Utilities/Close-PodeDisposable/#close-podedisposable","text":"","title":"Close-PodeDisposable"},{"location":"Functions/Utilities/Close-PodeDisposable/#synopsis","text":"Dispose and close streams, tokens, and other Disposables.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Close-PodeDisposable/#syntax","text":"Close-PodeDisposable [[-Disposable] <IDisposable>] [-Close] [-CheckNetwork] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Close-PodeDisposable/#description","text":"Dispose and close streams, tokens, and other Disposables.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Close-PodeDisposable/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Close-PodeDisposable/#example-1","text":"Close-PodeDisposable -Disposable $stream -Close","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Close-PodeDisposable/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Close-PodeDisposable/#-checknetwork","text":"If an error is thrown, check the reason - if it's network related ignore the error. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-CheckNetwork"},{"location":"Functions/Utilities/Close-PodeDisposable/#-close","text":"Should the Disposable also be closed, as well as disposed? Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Close"},{"location":"Functions/Utilities/Close-PodeDisposable/#-disposable","text":"The Disposable object to dispose and close. Type : IDisposable Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Disposable"},{"location":"Functions/Utilities/Close-PodeDisposable/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Close-PodeDisposable/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Close-PodeDisposable/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Close-PodeDisposable/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Close-PodeDisposable/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Get-PodeConfig/","text":"Get-PodeConfig SYNOPSIS Returns the loaded configuration of the server. SYNTAX Get-PodeConfig [<CommonParameters>] DESCRIPTION Returns the loaded configuration of the server. EXAMPLES EXAMPLE 1 $s = Get-PodeConfig PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Collections.Hashtable NOTES RELATED LINKS","title":"Get-PodeConfig"},{"location":"Functions/Utilities/Get-PodeConfig/#get-podeconfig","text":"","title":"Get-PodeConfig"},{"location":"Functions/Utilities/Get-PodeConfig/#synopsis","text":"Returns the loaded configuration of the server.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Get-PodeConfig/#syntax","text":"Get-PodeConfig [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Get-PodeConfig/#description","text":"Returns the loaded configuration of the server.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Get-PodeConfig/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Get-PodeConfig/#example-1","text":"$s = Get-PodeConfig","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Get-PodeConfig/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Get-PodeConfig/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Get-PodeConfig/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Get-PodeConfig/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Get-PodeConfig/#systemcollectionshashtable","text":"","title":"System.Collections.Hashtable"},{"location":"Functions/Utilities/Get-PodeConfig/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Get-PodeConfig/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/","text":"Get-PodeIISApplicationPath SYNOPSIS Returns the IIS application path. SYNTAX Get-PodeIISApplicationPath [<CommonParameters>] DESCRIPTION Returns the IIS application path, or null if not using IIS. EXAMPLES EXAMPLE 1 $path = Get-PodeIISApplicationPath PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeIISApplicationPath"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#get-podeiisapplicationpath","text":"","title":"Get-PodeIISApplicationPath"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#synopsis","text":"Returns the IIS application path.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#syntax","text":"Get-PodeIISApplicationPath [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#description","text":"Returns the IIS application path, or null if not using IIS.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#example-1","text":"$path = Get-PodeIISApplicationPath","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Get-PodeIISApplicationPath/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Get-PodeLockable/","text":"Get-PodeLockable SYNOPSIS Get a custom lockable object for use with Lock-PodeObject. SYNTAX Get-PodeLockable [-Name] <String> [<CommonParameters>] DESCRIPTION Get a custom lockable object for use with Lock-PodeObject. EXAMPLES EXAMPLE 1 Get-PodeLockable -Name 'Lock1' | Lock-PodeObject -ScriptBlock {} PARAMETERS -Name The Name of the lockable object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeLockable"},{"location":"Functions/Utilities/Get-PodeLockable/#get-podelockable","text":"","title":"Get-PodeLockable"},{"location":"Functions/Utilities/Get-PodeLockable/#synopsis","text":"Get a custom lockable object for use with Lock-PodeObject.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Get-PodeLockable/#syntax","text":"Get-PodeLockable [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Get-PodeLockable/#description","text":"Get a custom lockable object for use with Lock-PodeObject.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Get-PodeLockable/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Get-PodeLockable/#example-1","text":"Get-PodeLockable -Name 'Lock1' | Lock-PodeObject -ScriptBlock {}","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Get-PodeLockable/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Get-PodeLockable/#-name","text":"The Name of the lockable object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Utilities/Get-PodeLockable/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Get-PodeLockable/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Get-PodeLockable/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Get-PodeLockable/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Get-PodeLockable/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Get-PodeServerPath/","text":"Get-PodeServerPath SYNOPSIS Returns the literal path of the server. SYNTAX Get-PodeServerPath [<CommonParameters>] DESCRIPTION Returns the literal path of the server. EXAMPLES EXAMPLE 1 $path = Get-PodeServerPath PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.String NOTES RELATED LINKS","title":"Get-PodeServerPath"},{"location":"Functions/Utilities/Get-PodeServerPath/#get-podeserverpath","text":"","title":"Get-PodeServerPath"},{"location":"Functions/Utilities/Get-PodeServerPath/#synopsis","text":"Returns the literal path of the server.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Get-PodeServerPath/#syntax","text":"Get-PodeServerPath [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Get-PodeServerPath/#description","text":"Returns the literal path of the server.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Get-PodeServerPath/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Get-PodeServerPath/#example-1","text":"$path = Get-PodeServerPath","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Get-PodeServerPath/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Get-PodeServerPath/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Get-PodeServerPath/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Get-PodeServerPath/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Get-PodeServerPath/#systemstring","text":"","title":"System.String"},{"location":"Functions/Utilities/Get-PodeServerPath/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Get-PodeServerPath/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Import-PodeModule/","text":"Import-PodeModule SYNOPSIS Imports a Module into the current, and all runspaces that Pode uses. SYNTAX Name (Default) Import-PodeModule -Name <String> [<CommonParameters>] Path Import-PodeModule -Path <String> [<CommonParameters>] DESCRIPTION Imports a Module into the current, and all runspaces that Pode uses. Modules can also be imported from the ps_modules directory. EXAMPLES EXAMPLE 1 Import-PodeModule -Name IISManager EXAMPLE 2 Import-PodeModule -Path './modules/utilities.psm1' PARAMETERS -Name The name of a globally installed Module, or one within the ps_modules directory, to import. Type : String Parameter Sets : Name Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Path The path, literal or relative, to a Module to import. Type : String Parameter Sets : Path Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Import-PodeModule"},{"location":"Functions/Utilities/Import-PodeModule/#import-podemodule","text":"","title":"Import-PodeModule"},{"location":"Functions/Utilities/Import-PodeModule/#synopsis","text":"Imports a Module into the current, and all runspaces that Pode uses.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Import-PodeModule/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Utilities/Import-PodeModule/#name-default","text":"Import-PodeModule -Name <String> [<CommonParameters>]","title":"Name (Default)"},{"location":"Functions/Utilities/Import-PodeModule/#path","text":"Import-PodeModule -Path <String> [<CommonParameters>]","title":"Path"},{"location":"Functions/Utilities/Import-PodeModule/#description","text":"Imports a Module into the current, and all runspaces that Pode uses. Modules can also be imported from the ps_modules directory.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Import-PodeModule/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Import-PodeModule/#example-1","text":"Import-PodeModule -Name IISManager","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Import-PodeModule/#example-2","text":"Import-PodeModule -Path './modules/utilities.psm1'","title":"EXAMPLE 2"},{"location":"Functions/Utilities/Import-PodeModule/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Import-PodeModule/#-name","text":"The name of a globally installed Module, or one within the ps_modules directory, to import. Type : String Parameter Sets : Name Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Utilities/Import-PodeModule/#-path","text":"The path, literal or relative, to a Module to import. Type : String Parameter Sets : Path Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Utilities/Import-PodeModule/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Import-PodeModule/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Import-PodeModule/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Import-PodeModule/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Import-PodeModule/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Import-PodeSnapin/","text":"Import-PodeSnapin SYNOPSIS Imports a Snapin into the current, and all runspaces that Pode uses. SYNTAX Import-PodeSnapin [-Name] <String> [<CommonParameters>] DESCRIPTION Imports a Snapin into the current, and all runspaces that Pode uses. EXAMPLES EXAMPLE 1 Import-PodeSnapin -Name 'WDeploySnapin3.0' PARAMETERS -Name The name of a Snapin to import. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Import-PodeSnapin"},{"location":"Functions/Utilities/Import-PodeSnapin/#import-podesnapin","text":"","title":"Import-PodeSnapin"},{"location":"Functions/Utilities/Import-PodeSnapin/#synopsis","text":"Imports a Snapin into the current, and all runspaces that Pode uses.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Import-PodeSnapin/#syntax","text":"Import-PodeSnapin [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Import-PodeSnapin/#description","text":"Imports a Snapin into the current, and all runspaces that Pode uses.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Import-PodeSnapin/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Import-PodeSnapin/#example-1","text":"Import-PodeSnapin -Name 'WDeploySnapin3.0'","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Import-PodeSnapin/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Import-PodeSnapin/#-name","text":"The name of a Snapin to import. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Utilities/Import-PodeSnapin/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Import-PodeSnapin/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Import-PodeSnapin/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Import-PodeSnapin/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Import-PodeSnapin/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/","text":"Invoke-PodeScriptBlock SYNOPSIS Invokes a ScriptBlock. SYNTAX Invoke-PodeScriptBlock [-ScriptBlock] <ScriptBlock> [[-Arguments] <Object>] [-Scoped] [-Return] [-Splat] [-NoNewClosure] [<CommonParameters>] DESCRIPTION Invokes a ScriptBlock, supplying optional arguments, splatting, and returning any optional values. EXAMPLES EXAMPLE 1 Invoke-PodeScriptBlock -ScriptBlock { Write-Host 'Hello!' } EXAMPLE 2 Invoke-PodeScriptBlock -Arguments 'Morty' -ScriptBlock { /* logic */ } PARAMETERS -Arguments Any arguments that should be supplied to the ScriptBlock. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -NoNewClosure Don't create a new closure before invoking the ScriptBlock. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Return Return any values that the ScriptBlock may return. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Scoped Run the ScriptBlock in a scoped context. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The ScriptBlock to invoke. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Splat Spat the argument onto the ScriptBlock. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Object NOTES RELATED LINKS","title":"Invoke-PodeScriptBlock"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#invoke-podescriptblock","text":"","title":"Invoke-PodeScriptBlock"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#synopsis","text":"Invokes a ScriptBlock.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#syntax","text":"Invoke-PodeScriptBlock [-ScriptBlock] <ScriptBlock> [[-Arguments] <Object>] [-Scoped] [-Return] [-Splat] [-NoNewClosure] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#description","text":"Invokes a ScriptBlock, supplying optional arguments, splatting, and returning any optional values.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#example-1","text":"Invoke-PodeScriptBlock -ScriptBlock { Write-Host 'Hello!' }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#example-2","text":"Invoke-PodeScriptBlock -Arguments 'Morty' -ScriptBlock { /* logic */ }","title":"EXAMPLE 2"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#-arguments","text":"Any arguments that should be supplied to the ScriptBlock. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Arguments"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#-nonewclosure","text":"Don't create a new closure before invoking the ScriptBlock. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoNewClosure"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#-return","text":"Return any values that the ScriptBlock may return. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Return"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#-scoped","text":"Run the ScriptBlock in a scoped context. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Scoped"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#-scriptblock","text":"The ScriptBlock to invoke. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#-splat","text":"Spat the argument onto the ScriptBlock. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Splat"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#systemobject","text":"","title":"System.Object"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Invoke-PodeScriptBlock/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Lock-PodeObject/","text":"Lock-PodeObject SYNOPSIS Places a temporary lock on a object while a ScriptBlock is invoked. SYNTAX Lock-PodeObject [[-Object] <Object>] [-ScriptBlock] <ScriptBlock> [-Return] [-CheckGlobal] [<CommonParameters>] DESCRIPTION Places a temporary lock on a object while a ScriptBlock is invoked. EXAMPLES EXAMPLE 1 Lock-PodeObject -ScriptBlock { /* logic */ } EXAMPLE 2 Lock-PodeObject -Object $SomeArray -ScriptBlock { /* logic */ } EXAMPLE 3 $result = (Lock-PodeObject -Return -Object $SomeArray -ScriptBlock { /* logic */ }) PARAMETERS -CheckGlobal If supplied, will check the global Lockable object and wait until it's freed-up before locking the passed object. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Object The object to lock, if no object is supplied then the global lockable is used by default. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Return If supplied, any values from the ScriptBlock will be returned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The ScriptBlock to invoke. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Object NOTES RELATED LINKS","title":"Lock-PodeObject"},{"location":"Functions/Utilities/Lock-PodeObject/#lock-podeobject","text":"","title":"Lock-PodeObject"},{"location":"Functions/Utilities/Lock-PodeObject/#synopsis","text":"Places a temporary lock on a object while a ScriptBlock is invoked.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Lock-PodeObject/#syntax","text":"Lock-PodeObject [[-Object] <Object>] [-ScriptBlock] <ScriptBlock> [-Return] [-CheckGlobal] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Lock-PodeObject/#description","text":"Places a temporary lock on a object while a ScriptBlock is invoked.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Lock-PodeObject/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Lock-PodeObject/#example-1","text":"Lock-PodeObject -ScriptBlock { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Lock-PodeObject/#example-2","text":"Lock-PodeObject -Object $SomeArray -ScriptBlock { /* logic */ }","title":"EXAMPLE 2"},{"location":"Functions/Utilities/Lock-PodeObject/#example-3","text":"$result = (Lock-PodeObject -Return -Object $SomeArray -ScriptBlock { /* logic */ })","title":"EXAMPLE 3"},{"location":"Functions/Utilities/Lock-PodeObject/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Lock-PodeObject/#-checkglobal","text":"If supplied, will check the global Lockable object and wait until it's freed-up before locking the passed object. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-CheckGlobal"},{"location":"Functions/Utilities/Lock-PodeObject/#-object","text":"The object to lock, if no object is supplied then the global lockable is used by default. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Object"},{"location":"Functions/Utilities/Lock-PodeObject/#-return","text":"If supplied, any values from the ScriptBlock will be returned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Return"},{"location":"Functions/Utilities/Lock-PodeObject/#-scriptblock","text":"The ScriptBlock to invoke. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Utilities/Lock-PodeObject/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Lock-PodeObject/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Lock-PodeObject/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Lock-PodeObject/#systemobject","text":"","title":"System.Object"},{"location":"Functions/Utilities/Lock-PodeObject/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Lock-PodeObject/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/New-PodeLockable/","text":"New-PodeLockable SYNOPSIS Creates a new custom lockable object for use with Lock-PodeObject. SYNTAX New-PodeLockable [-Name] <String> [<CommonParameters>] DESCRIPTION Creates a new custom lockable object for use with Lock-PodeObject. EXAMPLES EXAMPLE 1 New-PodeLockable -Name 'Lock1' PARAMETERS -Name The Name of the lockable object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"New-PodeLockable"},{"location":"Functions/Utilities/New-PodeLockable/#new-podelockable","text":"","title":"New-PodeLockable"},{"location":"Functions/Utilities/New-PodeLockable/#synopsis","text":"Creates a new custom lockable object for use with Lock-PodeObject.","title":"SYNOPSIS"},{"location":"Functions/Utilities/New-PodeLockable/#syntax","text":"New-PodeLockable [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/New-PodeLockable/#description","text":"Creates a new custom lockable object for use with Lock-PodeObject.","title":"DESCRIPTION"},{"location":"Functions/Utilities/New-PodeLockable/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/New-PodeLockable/#example-1","text":"New-PodeLockable -Name 'Lock1'","title":"EXAMPLE 1"},{"location":"Functions/Utilities/New-PodeLockable/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/New-PodeLockable/#-name","text":"The Name of the lockable object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Utilities/New-PodeLockable/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/New-PodeLockable/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/New-PodeLockable/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/New-PodeLockable/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/New-PodeLockable/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Out-PodeHost/","text":"Out-PodeHost SYNOPSIS Outputs an object to the main Host. SYNTAX Out-PodeHost [-InputObject] <Object> [<CommonParameters>] DESCRIPTION Due to Pode's use of runspaces, this will output a given object back to the main Host. It's advised to use this function, so that any output respects the -Quiet flag of the server. EXAMPLES EXAMPLE 1 'Hello, world!' | Out-PodeHost EXAMPLE 2 @{ Name = 'Rick' } | Out-PodeHost PARAMETERS -InputObject The object to output. Type : Object Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Out-PodeHost"},{"location":"Functions/Utilities/Out-PodeHost/#out-podehost","text":"","title":"Out-PodeHost"},{"location":"Functions/Utilities/Out-PodeHost/#synopsis","text":"Outputs an object to the main Host.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Out-PodeHost/#syntax","text":"Out-PodeHost [-InputObject] <Object> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Out-PodeHost/#description","text":"Due to Pode's use of runspaces, this will output a given object back to the main Host. It's advised to use this function, so that any output respects the -Quiet flag of the server.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Out-PodeHost/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Out-PodeHost/#example-1","text":"'Hello, world!' | Out-PodeHost","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Out-PodeHost/#example-2","text":"@{ Name = 'Rick' } | Out-PodeHost","title":"EXAMPLE 2"},{"location":"Functions/Utilities/Out-PodeHost/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Out-PodeHost/#-inputobject","text":"The object to output. Type : Object Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-InputObject"},{"location":"Functions/Utilities/Out-PodeHost/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Out-PodeHost/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Out-PodeHost/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Out-PodeHost/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Out-PodeHost/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Out-PodeVariable/","text":"Out-PodeVariable SYNOPSIS Defines variables to be created when the Pode server stops. SYNTAX Out-PodeVariable [-Name] <String> [[-Value] <Object>] [<CommonParameters>] DESCRIPTION Allows you to define a variable, with a value, that should be created on the in the main scope after the Pode server is stopped. EXAMPLES EXAMPLE 1 Out-PodeVariable -Name ExampleVar -Value @{ Name = 'Bob' } PARAMETERS -Name The Name of the variable to be set Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Value The Value of the variable to be set Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Out-PodeVariable"},{"location":"Functions/Utilities/Out-PodeVariable/#out-podevariable","text":"","title":"Out-PodeVariable"},{"location":"Functions/Utilities/Out-PodeVariable/#synopsis","text":"Defines variables to be created when the Pode server stops.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Out-PodeVariable/#syntax","text":"Out-PodeVariable [-Name] <String> [[-Value] <Object>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Out-PodeVariable/#description","text":"Allows you to define a variable, with a value, that should be created on the in the main scope after the Pode server is stopped.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Out-PodeVariable/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Out-PodeVariable/#example-1","text":"Out-PodeVariable -Name ExampleVar -Value @{ Name = 'Bob' }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Out-PodeVariable/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Out-PodeVariable/#-name","text":"The Name of the variable to be set Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Utilities/Out-PodeVariable/#-value","text":"The Value of the variable to be set Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Utilities/Out-PodeVariable/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Out-PodeVariable/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Out-PodeVariable/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Out-PodeVariable/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Out-PodeVariable/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Protect-PodeValue/","text":"Protect-PodeValue SYNOPSIS Protects a value, by returning a default value is the main one is null/empty. SYNTAX Protect-PodeValue [[-Value] <Object>] [[-Default] <Object>] [<CommonParameters>] DESCRIPTION Protects a value, by returning a default value is the main one is null/empty. EXAMPLES EXAMPLE 1 $Name = Protect-PodeValue -Value $Name -Default 'Rick' PARAMETERS -Default A default value to return should the main value be null/empty. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Value The main value to use. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Object NOTES RELATED LINKS","title":"Protect-PodeValue"},{"location":"Functions/Utilities/Protect-PodeValue/#protect-podevalue","text":"","title":"Protect-PodeValue"},{"location":"Functions/Utilities/Protect-PodeValue/#synopsis","text":"Protects a value, by returning a default value is the main one is null/empty.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Protect-PodeValue/#syntax","text":"Protect-PodeValue [[-Value] <Object>] [[-Default] <Object>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Protect-PodeValue/#description","text":"Protects a value, by returning a default value is the main one is null/empty.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Protect-PodeValue/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Protect-PodeValue/#example-1","text":"$Name = Protect-PodeValue -Value $Name -Default 'Rick'","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Protect-PodeValue/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Protect-PodeValue/#-default","text":"A default value to return should the main value be null/empty. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Default"},{"location":"Functions/Utilities/Protect-PodeValue/#-value","text":"The main value to use. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Utilities/Protect-PodeValue/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Protect-PodeValue/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Protect-PodeValue/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Protect-PodeValue/#systemobject","text":"","title":"System.Object"},{"location":"Functions/Utilities/Protect-PodeValue/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Protect-PodeValue/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Remove-PodeLockable/","text":"Remove-PodeLockable SYNOPSIS Removes a custom lockable object. SYNTAX Remove-PodeLockable [-Name] <String> [<CommonParameters>] DESCRIPTION Removes a custom lockable object. EXAMPLES EXAMPLE 1 Remove-PodeLockable -Name 'Lock1' PARAMETERS -Name The Name of the lockable object to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeLockable"},{"location":"Functions/Utilities/Remove-PodeLockable/#remove-podelockable","text":"","title":"Remove-PodeLockable"},{"location":"Functions/Utilities/Remove-PodeLockable/#synopsis","text":"Removes a custom lockable object.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Remove-PodeLockable/#syntax","text":"Remove-PodeLockable [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Remove-PodeLockable/#description","text":"Removes a custom lockable object.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Remove-PodeLockable/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Remove-PodeLockable/#example-1","text":"Remove-PodeLockable -Name 'Lock1'","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Remove-PodeLockable/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Remove-PodeLockable/#-name","text":"The Name of the lockable object to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Utilities/Remove-PodeLockable/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Remove-PodeLockable/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Remove-PodeLockable/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Remove-PodeLockable/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Remove-PodeLockable/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Resolve-PodeValue/","text":"Resolve-PodeValue SYNOPSIS Resolves a query, and returns a value based on the response. SYNTAX Resolve-PodeValue [-Check] <Boolean> [[-TrueValue] <Object>] [[-FalseValue] <Object>] [<CommonParameters>] DESCRIPTION Resolves a query, and returns a value based on the response. EXAMPLES EXAMPLE 1 $Port = Resolve-PodeValue -Check $AllowSsl -TrueValue 443 -FalseValue -80 PARAMETERS -Check The query, or variable, to evalulate. Type : Boolean Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : False Accept pipeline input : False Accept wildcard characters : False -FalseValue The value to use if evaluated to False. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -TrueValue The value to use if evaluated to True. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Object NOTES RELATED LINKS","title":"Resolve-PodeValue"},{"location":"Functions/Utilities/Resolve-PodeValue/#resolve-podevalue","text":"","title":"Resolve-PodeValue"},{"location":"Functions/Utilities/Resolve-PodeValue/#synopsis","text":"Resolves a query, and returns a value based on the response.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Resolve-PodeValue/#syntax","text":"Resolve-PodeValue [-Check] <Boolean> [[-TrueValue] <Object>] [[-FalseValue] <Object>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Resolve-PodeValue/#description","text":"Resolves a query, and returns a value based on the response.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Resolve-PodeValue/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Resolve-PodeValue/#example-1","text":"$Port = Resolve-PodeValue -Check $AllowSsl -TrueValue 443 -FalseValue -80","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Resolve-PodeValue/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Resolve-PodeValue/#-check","text":"The query, or variable, to evalulate. Type : Boolean Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Check"},{"location":"Functions/Utilities/Resolve-PodeValue/#-falsevalue","text":"The value to use if evaluated to False. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FalseValue"},{"location":"Functions/Utilities/Resolve-PodeValue/#-truevalue","text":"The value to use if evaluated to True. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-TrueValue"},{"location":"Functions/Utilities/Resolve-PodeValue/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Resolve-PodeValue/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Resolve-PodeValue/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Resolve-PodeValue/#systemobject","text":"","title":"System.Object"},{"location":"Functions/Utilities/Resolve-PodeValue/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Resolve-PodeValue/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Start-PodeStopwatch/","text":"Start-PodeStopwatch SYNOPSIS Starts a Stopwatch on some ScriptBlock, and outputs the duration at the end. SYNTAX Start-PodeStopwatch [-Name] <String> [-ScriptBlock] <ScriptBlock> [<CommonParameters>] DESCRIPTION Starts a Stopwatch on some ScriptBlock, and outputs the duration at the end. EXAMPLES EXAMPLE 1 Start-PodeStopwatch -Name 'ReadFile' -ScriptBlock { $content = Get-Content './file.txt' } PARAMETERS -Name The name of the Stopwatch. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The ScriptBlock to time. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Start-PodeStopwatch"},{"location":"Functions/Utilities/Start-PodeStopwatch/#start-podestopwatch","text":"","title":"Start-PodeStopwatch"},{"location":"Functions/Utilities/Start-PodeStopwatch/#synopsis","text":"Starts a Stopwatch on some ScriptBlock, and outputs the duration at the end.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Start-PodeStopwatch/#syntax","text":"Start-PodeStopwatch [-Name] <String> [-ScriptBlock] <ScriptBlock> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Start-PodeStopwatch/#description","text":"Starts a Stopwatch on some ScriptBlock, and outputs the duration at the end.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Start-PodeStopwatch/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Start-PodeStopwatch/#example-1","text":"Start-PodeStopwatch -Name 'ReadFile' -ScriptBlock { $content = Get-Content './file.txt' }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Start-PodeStopwatch/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Start-PodeStopwatch/#-name","text":"The name of the Stopwatch. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Utilities/Start-PodeStopwatch/#-scriptblock","text":"The ScriptBlock to time. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Utilities/Start-PodeStopwatch/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Start-PodeStopwatch/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Start-PodeStopwatch/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Start-PodeStopwatch/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Start-PodeStopwatch/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Test-PodeIsEmpty/","text":"Test-PodeIsEmpty SYNOPSIS Tests if a value is empty - the value can be of any type. SYNTAX Test-PodeIsEmpty [[-Value] <Object>] [<CommonParameters>] DESCRIPTION Tests if a value is empty - the value can be of any type. EXAMPLES EXAMPLE 1 if (Test-PodeIsEmpty @{}) { /* logic */ } PARAMETERS -Value The value to test. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Boolean NOTES RELATED LINKS","title":"Test-PodeIsEmpty"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#test-podeisempty","text":"","title":"Test-PodeIsEmpty"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#synopsis","text":"Tests if a value is empty - the value can be of any type.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#syntax","text":"Test-PodeIsEmpty [[-Value] <Object>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#description","text":"Tests if a value is empty - the value can be of any type.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#example-1","text":"if (Test-PodeIsEmpty @{}) { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#-value","text":"The value to test. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Value"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#systemboolean","text":"","title":"System.Boolean"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Test-PodeIsEmpty/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Test-PodeIsHeroku/","text":"Test-PodeIsHeroku SYNOPSIS Returns whether or not the server is running via Heroku. SYNTAX Test-PodeIsHeroku [<CommonParameters>] DESCRIPTION Returns whether or not the server is running via Heroku. EXAMPLES EXAMPLE 1 if (Test-PodeIsHeroku) { } PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Test-PodeIsHeroku"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#test-podeisheroku","text":"","title":"Test-PodeIsHeroku"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#synopsis","text":"Returns whether or not the server is running via Heroku.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#syntax","text":"Test-PodeIsHeroku [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#description","text":"Returns whether or not the server is running via Heroku.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#example-1","text":"if (Test-PodeIsHeroku) { }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Test-PodeIsHeroku/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Test-PodeIsHosted/","text":"Test-PodeIsHosted SYNOPSIS Returns whether or not the server is being hosted behind another application. SYNTAX Test-PodeIsHosted [<CommonParameters>] DESCRIPTION Returns whether or not the server is being hosted behind another application, such as Heroku or IIS. EXAMPLES EXAMPLE 1 if (Test-PodeIsHosted) { } PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Test-PodeIsHosted"},{"location":"Functions/Utilities/Test-PodeIsHosted/#test-podeishosted","text":"","title":"Test-PodeIsHosted"},{"location":"Functions/Utilities/Test-PodeIsHosted/#synopsis","text":"Returns whether or not the server is being hosted behind another application.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Test-PodeIsHosted/#syntax","text":"Test-PodeIsHosted [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Test-PodeIsHosted/#description","text":"Returns whether or not the server is being hosted behind another application, such as Heroku or IIS.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Test-PodeIsHosted/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Test-PodeIsHosted/#example-1","text":"if (Test-PodeIsHosted) { }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Test-PodeIsHosted/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Test-PodeIsHosted/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Test-PodeIsHosted/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Test-PodeIsHosted/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Test-PodeIsHosted/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Test-PodeIsHosted/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Test-PodeIsIIS/","text":"Test-PodeIsIIS SYNOPSIS Returns whether or not the server is running via IIS. SYNTAX Test-PodeIsIIS [<CommonParameters>] DESCRIPTION Returns whether or not the server is running via IIS. EXAMPLES EXAMPLE 1 if (Test-PodeIsIIS) { } PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Test-PodeIsIIS"},{"location":"Functions/Utilities/Test-PodeIsIIS/#test-podeisiis","text":"","title":"Test-PodeIsIIS"},{"location":"Functions/Utilities/Test-PodeIsIIS/#synopsis","text":"Returns whether or not the server is running via IIS.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Test-PodeIsIIS/#syntax","text":"Test-PodeIsIIS [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Test-PodeIsIIS/#description","text":"Returns whether or not the server is running via IIS.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Test-PodeIsIIS/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Test-PodeIsIIS/#example-1","text":"if (Test-PodeIsIIS) { }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Test-PodeIsIIS/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Test-PodeIsIIS/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Test-PodeIsIIS/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Test-PodeIsIIS/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Test-PodeIsIIS/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Test-PodeIsIIS/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Test-PodeIsMacOS/","text":"Test-PodeIsMacOS SYNOPSIS Tests if the current OS is MacOS. SYNTAX Test-PodeIsMacOS [<CommonParameters>] DESCRIPTION Tests if the current OS is MacOS. EXAMPLES EXAMPLE 1 if (Test-PodeIsMacOS) { /* logic */ } PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Boolean NOTES RELATED LINKS","title":"Test-PodeIsMacOS"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#test-podeismacos","text":"","title":"Test-PodeIsMacOS"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#synopsis","text":"Tests if the current OS is MacOS.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#syntax","text":"Test-PodeIsMacOS [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#description","text":"Tests if the current OS is MacOS.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#example-1","text":"if (Test-PodeIsMacOS) { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#systemboolean","text":"","title":"System.Boolean"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Test-PodeIsMacOS/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Test-PodeIsPSCore/","text":"Test-PodeIsPSCore SYNOPSIS Tests if the the current session is running in PowerShell Core. SYNTAX Test-PodeIsPSCore [<CommonParameters>] DESCRIPTION Tests if the the current session is running in PowerShell Core. EXAMPLES EXAMPLE 1 if (Test-PodeIsPSCore) { /* logic */ } PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Boolean NOTES RELATED LINKS","title":"Test-PodeIsPSCore"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#test-podeispscore","text":"","title":"Test-PodeIsPSCore"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#synopsis","text":"Tests if the the current session is running in PowerShell Core.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#syntax","text":"Test-PodeIsPSCore [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#description","text":"Tests if the the current session is running in PowerShell Core.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#example-1","text":"if (Test-PodeIsPSCore) { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#systemboolean","text":"","title":"System.Boolean"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Test-PodeIsPSCore/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Test-PodeIsUnix/","text":"Test-PodeIsUnix SYNOPSIS Tests if the current OS is Unix. SYNTAX Test-PodeIsUnix [<CommonParameters>] DESCRIPTION Tests if the current OS is Unix. EXAMPLES EXAMPLE 1 if (Test-PodeIsUnix) { /* logic */ } PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Boolean NOTES RELATED LINKS","title":"Test-PodeIsUnix"},{"location":"Functions/Utilities/Test-PodeIsUnix/#test-podeisunix","text":"","title":"Test-PodeIsUnix"},{"location":"Functions/Utilities/Test-PodeIsUnix/#synopsis","text":"Tests if the current OS is Unix.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Test-PodeIsUnix/#syntax","text":"Test-PodeIsUnix [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Test-PodeIsUnix/#description","text":"Tests if the current OS is Unix.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Test-PodeIsUnix/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Test-PodeIsUnix/#example-1","text":"if (Test-PodeIsUnix) { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Test-PodeIsUnix/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Test-PodeIsUnix/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Test-PodeIsUnix/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Test-PodeIsUnix/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Test-PodeIsUnix/#systemboolean","text":"","title":"System.Boolean"},{"location":"Functions/Utilities/Test-PodeIsUnix/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Test-PodeIsUnix/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Test-PodeIsWindows/","text":"Test-PodeIsWindows SYNOPSIS Tests if the current OS is Windows. SYNTAX Test-PodeIsWindows [<CommonParameters>] DESCRIPTION Tests if the current OS is Windows. EXAMPLES EXAMPLE 1 if (Test-PodeIsWindows) { /* logic */ } PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Boolean NOTES RELATED LINKS","title":"Test-PodeIsWindows"},{"location":"Functions/Utilities/Test-PodeIsWindows/#test-podeiswindows","text":"","title":"Test-PodeIsWindows"},{"location":"Functions/Utilities/Test-PodeIsWindows/#synopsis","text":"Tests if the current OS is Windows.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Test-PodeIsWindows/#syntax","text":"Test-PodeIsWindows [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Test-PodeIsWindows/#description","text":"Tests if the current OS is Windows.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Test-PodeIsWindows/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Test-PodeIsWindows/#example-1","text":"if (Test-PodeIsWindows) { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Test-PodeIsWindows/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Test-PodeIsWindows/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Test-PodeIsWindows/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Test-PodeIsWindows/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Test-PodeIsWindows/#systemboolean","text":"","title":"System.Boolean"},{"location":"Functions/Utilities/Test-PodeIsWindows/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Test-PodeIsWindows/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Test-PodeLockable/","text":"Test-PodeLockable SYNOPSIS Test if a custom lockable object exists. SYNTAX Test-PodeLockable [-Name] <String> [<CommonParameters>] DESCRIPTION Test if a custom lockable object exists. EXAMPLES EXAMPLE 1 Test-PodeLockable -Name 'Lock1' PARAMETERS -Name The Name of the lockable object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Test-PodeLockable"},{"location":"Functions/Utilities/Test-PodeLockable/#test-podelockable","text":"","title":"Test-PodeLockable"},{"location":"Functions/Utilities/Test-PodeLockable/#synopsis","text":"Test if a custom lockable object exists.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Test-PodeLockable/#syntax","text":"Test-PodeLockable [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Test-PodeLockable/#description","text":"Test if a custom lockable object exists.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Test-PodeLockable/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Test-PodeLockable/#example-1","text":"Test-PodeLockable -Name 'Lock1'","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Test-PodeLockable/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Test-PodeLockable/#-name","text":"The Name of the lockable object. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Utilities/Test-PodeLockable/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Test-PodeLockable/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Test-PodeLockable/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Test-PodeLockable/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Test-PodeLockable/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Use-PodeEndware/","text":"Use-PodeEndware SYNOPSIS Automatically loads endware ps1 files SYNTAX Use-PodeEndware [[-Path] <String>] [<CommonParameters>] DESCRIPTION Automatically loads endware ps1 files from either a /endware folder, or a custom folder. Saves space dot-sourcing them all one-by-one. EXAMPLES EXAMPLE 1 Use-PodeEndware EXAMPLE 2 Use-PodeEndware -Path './endware' PARAMETERS -Path Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeEndware"},{"location":"Functions/Utilities/Use-PodeEndware/#use-podeendware","text":"","title":"Use-PodeEndware"},{"location":"Functions/Utilities/Use-PodeEndware/#synopsis","text":"Automatically loads endware ps1 files","title":"SYNOPSIS"},{"location":"Functions/Utilities/Use-PodeEndware/#syntax","text":"Use-PodeEndware [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Use-PodeEndware/#description","text":"Automatically loads endware ps1 files from either a /endware folder, or a custom folder. Saves space dot-sourcing them all one-by-one.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Use-PodeEndware/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Use-PodeEndware/#example-1","text":"Use-PodeEndware","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Use-PodeEndware/#example-2","text":"Use-PodeEndware -Path './endware'","title":"EXAMPLE 2"},{"location":"Functions/Utilities/Use-PodeEndware/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Use-PodeEndware/#-path","text":"Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Utilities/Use-PodeEndware/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Use-PodeEndware/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Use-PodeEndware/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Use-PodeEndware/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Use-PodeEndware/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Use-PodeScript/","text":"Use-PodeScript SYNOPSIS Loads a script, by dot-sourcing, at the supplied path. SYNTAX Use-PodeScript [-Path] <String> [<CommonParameters>] DESCRIPTION Loads a script, by dot-sourcing, at the supplied path. If the path is relative, the server's path is prepended. EXAMPLES EXAMPLE 1 Use-PodeScript -Path './scripts/tools.ps1' PARAMETERS -Path The path, literal or relative to the server, to some script. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeScript"},{"location":"Functions/Utilities/Use-PodeScript/#use-podescript","text":"","title":"Use-PodeScript"},{"location":"Functions/Utilities/Use-PodeScript/#synopsis","text":"Loads a script, by dot-sourcing, at the supplied path.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Use-PodeScript/#syntax","text":"Use-PodeScript [-Path] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Use-PodeScript/#description","text":"Loads a script, by dot-sourcing, at the supplied path. If the path is relative, the server's path is prepended.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Use-PodeScript/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Use-PodeScript/#example-1","text":"Use-PodeScript -Path './scripts/tools.ps1'","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Use-PodeScript/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Use-PodeScript/#-path","text":"The path, literal or relative to the server, to some script. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Utilities/Use-PodeScript/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Use-PodeScript/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Use-PodeScript/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Use-PodeScript/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Use-PodeScript/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Use-PodeStream/","text":"Use-PodeStream SYNOPSIS Like the \"using\" keyword in .NET. Allows you to use a Stream and then disposes of it. SYNTAX Use-PodeStream [-Stream] <IDisposable> [-ScriptBlock] <ScriptBlock> [<CommonParameters>] DESCRIPTION Like the \"using\" keyword in .NET. Allows you to use a Stream and then disposes of it. EXAMPLES EXAMPLE 1 $content = (Use-PodeStream -Stream $stream -ScriptBlock { return $args[0].ReadToEnd() }) PARAMETERS -ScriptBlock The ScriptBlock to invoke. It will be supplied the Stream. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Stream The Stream to use and then dispose. Type : IDisposable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Object NOTES RELATED LINKS","title":"Use-PodeStream"},{"location":"Functions/Utilities/Use-PodeStream/#use-podestream","text":"","title":"Use-PodeStream"},{"location":"Functions/Utilities/Use-PodeStream/#synopsis","text":"Like the \"using\" keyword in .NET. Allows you to use a Stream and then disposes of it.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Use-PodeStream/#syntax","text":"Use-PodeStream [-Stream] <IDisposable> [-ScriptBlock] <ScriptBlock> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Use-PodeStream/#description","text":"Like the \"using\" keyword in .NET. Allows you to use a Stream and then disposes of it.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Use-PodeStream/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Use-PodeStream/#example-1","text":"$content = (Use-PodeStream -Stream $stream -ScriptBlock { return $args[0].ReadToEnd() })","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Use-PodeStream/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Use-PodeStream/#-scriptblock","text":"The ScriptBlock to invoke. It will be supplied the Stream. Type : ScriptBlock Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Utilities/Use-PodeStream/#-stream","text":"The Stream to use and then dispose. Type : IDisposable Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Stream"},{"location":"Functions/Utilities/Use-PodeStream/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Use-PodeStream/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Use-PodeStream/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Use-PodeStream/#systemobject","text":"","title":"System.Object"},{"location":"Functions/Utilities/Use-PodeStream/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Use-PodeStream/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Utilities/Write-PodeHost/","text":"Write-PodeHost SYNOPSIS Writes an object to the Host. SYNTAX Write-PodeHost [[-Object] <Object>] [-ForegroundColor <ConsoleColor>] [-NoNewLine] [<CommonParameters>] DESCRIPTION Writes an object to the Host. It's advised to use this function, so that any output respects the -Quiet flag of the server. EXAMPLES EXAMPLE 1 'Some output' | Write-PodeHost -ForegroundColor Cyan PARAMETERS -ForegroundColor An optional foreground colour. Type : ConsoleColor Parameter Sets : (All) Aliases : Accepted values : Black, DarkBlue, DarkGreen, DarkCyan, DarkRed, DarkMagenta, DarkYellow, Gray, DarkGray, Blue, Green, Cyan, Red, Magenta, Yellow, White Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -NoNewLine Whether or not to write a new line. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Object The object to write. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Write-PodeHost"},{"location":"Functions/Utilities/Write-PodeHost/#write-podehost","text":"","title":"Write-PodeHost"},{"location":"Functions/Utilities/Write-PodeHost/#synopsis","text":"Writes an object to the Host.","title":"SYNOPSIS"},{"location":"Functions/Utilities/Write-PodeHost/#syntax","text":"Write-PodeHost [[-Object] <Object>] [-ForegroundColor <ConsoleColor>] [-NoNewLine] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Utilities/Write-PodeHost/#description","text":"Writes an object to the Host. It's advised to use this function, so that any output respects the -Quiet flag of the server.","title":"DESCRIPTION"},{"location":"Functions/Utilities/Write-PodeHost/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Utilities/Write-PodeHost/#example-1","text":"'Some output' | Write-PodeHost -ForegroundColor Cyan","title":"EXAMPLE 1"},{"location":"Functions/Utilities/Write-PodeHost/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Utilities/Write-PodeHost/#-foregroundcolor","text":"An optional foreground colour. Type : ConsoleColor Parameter Sets : (All) Aliases : Accepted values : Black, DarkBlue, DarkGreen, DarkCyan, DarkRed, DarkMagenta, DarkYellow, Gray, DarkGray, Blue, Green, Cyan, Red, Magenta, Yellow, White Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ForegroundColor"},{"location":"Functions/Utilities/Write-PodeHost/#-nonewline","text":"Whether or not to write a new line. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoNewLine"},{"location":"Functions/Utilities/Write-PodeHost/#-object","text":"The object to write. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Object"},{"location":"Functions/Utilities/Write-PodeHost/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Utilities/Write-PodeHost/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Utilities/Write-PodeHost/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Utilities/Write-PodeHost/#notes","text":"","title":"NOTES"},{"location":"Functions/Utilities/Write-PodeHost/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Verbs/Add-PodeVerb/","text":"Add-PodeVerb SYNOPSIS Adds a Verb for a TCP data. SYNTAX Script (Default) Add-PodeVerb -Verb <String> [-ScriptBlock <ScriptBlock>] [-ArgumentList <Object[]>] [-EndpointName <String[]>] [-UpgradeToSsl] [-Close] [<CommonParameters>] File Add-PodeVerb -Verb <String> -FilePath <String> [-ArgumentList <Object[]>] [-EndpointName <String[]>] [-UpgradeToSsl] [-Close] [<CommonParameters>] DESCRIPTION Adds a Verb for a TCP data. EXAMPLES EXAMPLE 1 Add-PodeVerb -Verb 'Hello' -ScriptBlock { /* logic */ } EXAMPLE 2 Add-PodeVerb -Verb 'Hello' -ScriptBlock { /* logic */ } -ArgumentList 'arg1', 'arg2' EXAMPLE 3 Add-PodeVerb -Verb 'Quit' -Close EXAMPLE 4 Add-PodeVerb -Verb 'StartTls' -UpgradeToSsl PARAMETERS -ArgumentList An array of arguments to supply to the Verb's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Close If supplied, the Verb will auto-close the connection. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -EndpointName The EndpointName of an Endpoint(s) this Verb should be bound against. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FilePath A literal, or relative, path to a file containing a ScriptBlock for the Verb's main logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock A ScriptBlock for the Verb's main logic. Type : ScriptBlock Parameter Sets : Script Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -UpgradeToSsl If supplied, the Verb will auto-upgrade the connection to use SSL. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Verb The Verb for the Verb. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Add-PodeVerb"},{"location":"Functions/Verbs/Add-PodeVerb/#add-podeverb","text":"","title":"Add-PodeVerb"},{"location":"Functions/Verbs/Add-PodeVerb/#synopsis","text":"Adds a Verb for a TCP data.","title":"SYNOPSIS"},{"location":"Functions/Verbs/Add-PodeVerb/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/Verbs/Add-PodeVerb/#script-default","text":"Add-PodeVerb -Verb <String> [-ScriptBlock <ScriptBlock>] [-ArgumentList <Object[]>] [-EndpointName <String[]>] [-UpgradeToSsl] [-Close] [<CommonParameters>]","title":"Script (Default)"},{"location":"Functions/Verbs/Add-PodeVerb/#file","text":"Add-PodeVerb -Verb <String> -FilePath <String> [-ArgumentList <Object[]>] [-EndpointName <String[]>] [-UpgradeToSsl] [-Close] [<CommonParameters>]","title":"File"},{"location":"Functions/Verbs/Add-PodeVerb/#description","text":"Adds a Verb for a TCP data.","title":"DESCRIPTION"},{"location":"Functions/Verbs/Add-PodeVerb/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Verbs/Add-PodeVerb/#example-1","text":"Add-PodeVerb -Verb 'Hello' -ScriptBlock { /* logic */ }","title":"EXAMPLE 1"},{"location":"Functions/Verbs/Add-PodeVerb/#example-2","text":"Add-PodeVerb -Verb 'Hello' -ScriptBlock { /* logic */ } -ArgumentList 'arg1', 'arg2'","title":"EXAMPLE 2"},{"location":"Functions/Verbs/Add-PodeVerb/#example-3","text":"Add-PodeVerb -Verb 'Quit' -Close","title":"EXAMPLE 3"},{"location":"Functions/Verbs/Add-PodeVerb/#example-4","text":"Add-PodeVerb -Verb 'StartTls' -UpgradeToSsl","title":"EXAMPLE 4"},{"location":"Functions/Verbs/Add-PodeVerb/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Verbs/Add-PodeVerb/#-argumentlist","text":"An array of arguments to supply to the Verb's ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/Verbs/Add-PodeVerb/#-close","text":"If supplied, the Verb will auto-close the connection. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Close"},{"location":"Functions/Verbs/Add-PodeVerb/#-endpointname","text":"The EndpointName of an Endpoint(s) this Verb should be bound against. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Verbs/Add-PodeVerb/#-filepath","text":"A literal, or relative, path to a file containing a ScriptBlock for the Verb's main logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"Functions/Verbs/Add-PodeVerb/#-scriptblock","text":"A ScriptBlock for the Verb's main logic. Type : ScriptBlock Parameter Sets : Script Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/Verbs/Add-PodeVerb/#-upgradetossl","text":"If supplied, the Verb will auto-upgrade the connection to use SSL. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UpgradeToSsl"},{"location":"Functions/Verbs/Add-PodeVerb/#-verb","text":"The Verb for the Verb. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Verb"},{"location":"Functions/Verbs/Add-PodeVerb/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Verbs/Add-PodeVerb/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Verbs/Add-PodeVerb/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Verbs/Add-PodeVerb/#notes","text":"","title":"NOTES"},{"location":"Functions/Verbs/Add-PodeVerb/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Verbs/Clear-PodeVerbs/","text":"Clear-PodeVerbs SYNOPSIS Removes all added Verbs. SYNTAX Clear-PodeVerbs [<CommonParameters>] DESCRIPTION Removes all added Verbs. EXAMPLES EXAMPLE 1 Clear-PodeVerbs PARAMETERS CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Clear-PodeVerbs"},{"location":"Functions/Verbs/Clear-PodeVerbs/#clear-podeverbs","text":"","title":"Clear-PodeVerbs"},{"location":"Functions/Verbs/Clear-PodeVerbs/#synopsis","text":"Removes all added Verbs.","title":"SYNOPSIS"},{"location":"Functions/Verbs/Clear-PodeVerbs/#syntax","text":"Clear-PodeVerbs [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Verbs/Clear-PodeVerbs/#description","text":"Removes all added Verbs.","title":"DESCRIPTION"},{"location":"Functions/Verbs/Clear-PodeVerbs/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Verbs/Clear-PodeVerbs/#example-1","text":"Clear-PodeVerbs","title":"EXAMPLE 1"},{"location":"Functions/Verbs/Clear-PodeVerbs/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Verbs/Clear-PodeVerbs/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Verbs/Clear-PodeVerbs/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Verbs/Clear-PodeVerbs/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Verbs/Clear-PodeVerbs/#notes","text":"","title":"NOTES"},{"location":"Functions/Verbs/Clear-PodeVerbs/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Verbs/Get-PodeVerb/","text":"Get-PodeVerb SYNOPSIS Get a Verb(s). SYNTAX Get-PodeVerb [[-Verb] <String>] [[-EndpointName] <String[]>] [<CommonParameters>] DESCRIPTION Get a Verb(s). EXAMPLES EXAMPLE 1 Get-PodeVerb -Verb 'Hello' EXAMPLE 2 Get-PodeVerb -Verb 'Hello :username' -EndpointName User PARAMETERS -EndpointName The name of an endpoint to filter verbs. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Verb A Verb to filter the verbs. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Get-PodeVerb"},{"location":"Functions/Verbs/Get-PodeVerb/#get-podeverb","text":"","title":"Get-PodeVerb"},{"location":"Functions/Verbs/Get-PodeVerb/#synopsis","text":"Get a Verb(s).","title":"SYNOPSIS"},{"location":"Functions/Verbs/Get-PodeVerb/#syntax","text":"Get-PodeVerb [[-Verb] <String>] [[-EndpointName] <String[]>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Verbs/Get-PodeVerb/#description","text":"Get a Verb(s).","title":"DESCRIPTION"},{"location":"Functions/Verbs/Get-PodeVerb/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Verbs/Get-PodeVerb/#example-1","text":"Get-PodeVerb -Verb 'Hello'","title":"EXAMPLE 1"},{"location":"Functions/Verbs/Get-PodeVerb/#example-2","text":"Get-PodeVerb -Verb 'Hello :username' -EndpointName User","title":"EXAMPLE 2"},{"location":"Functions/Verbs/Get-PodeVerb/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Verbs/Get-PodeVerb/#-endpointname","text":"The name of an endpoint to filter verbs. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Verbs/Get-PodeVerb/#-verb","text":"A Verb to filter the verbs. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Verb"},{"location":"Functions/Verbs/Get-PodeVerb/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Verbs/Get-PodeVerb/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Verbs/Get-PodeVerb/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Verbs/Get-PodeVerb/#notes","text":"","title":"NOTES"},{"location":"Functions/Verbs/Get-PodeVerb/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Verbs/Remove-PodeVerb/","text":"Remove-PodeVerb SYNOPSIS Remove a specific Verb. SYNTAX Remove-PodeVerb [-Verb] <String> [[-EndpointName] <String>] [<CommonParameters>] DESCRIPTION Remove a specific Verb. EXAMPLES EXAMPLE 1 Remove-PodeVerb -Verb 'Hello' EXAMPLE 2 Remove-PodeVerb -Verb 'Hello :username' -EndpointName User PARAMETERS -EndpointName The EndpointName of an Endpoint(s) bound to the Verb to be removed. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Verb The Verb of the Verb to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeVerb"},{"location":"Functions/Verbs/Remove-PodeVerb/#remove-podeverb","text":"","title":"Remove-PodeVerb"},{"location":"Functions/Verbs/Remove-PodeVerb/#synopsis","text":"Remove a specific Verb.","title":"SYNOPSIS"},{"location":"Functions/Verbs/Remove-PodeVerb/#syntax","text":"Remove-PodeVerb [-Verb] <String> [[-EndpointName] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Verbs/Remove-PodeVerb/#description","text":"Remove a specific Verb.","title":"DESCRIPTION"},{"location":"Functions/Verbs/Remove-PodeVerb/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Verbs/Remove-PodeVerb/#example-1","text":"Remove-PodeVerb -Verb 'Hello'","title":"EXAMPLE 1"},{"location":"Functions/Verbs/Remove-PodeVerb/#example-2","text":"Remove-PodeVerb -Verb 'Hello :username' -EndpointName User","title":"EXAMPLE 2"},{"location":"Functions/Verbs/Remove-PodeVerb/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Verbs/Remove-PodeVerb/#-endpointname","text":"The EndpointName of an Endpoint(s) bound to the Verb to be removed. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-EndpointName"},{"location":"Functions/Verbs/Remove-PodeVerb/#-verb","text":"The Verb of the Verb to remove. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Verb"},{"location":"Functions/Verbs/Remove-PodeVerb/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Verbs/Remove-PodeVerb/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Verbs/Remove-PodeVerb/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Verbs/Remove-PodeVerb/#notes","text":"","title":"NOTES"},{"location":"Functions/Verbs/Remove-PodeVerb/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/Verbs/Use-PodeVerbs/","text":"Use-PodeVerbs SYNOPSIS Automatically loads verb ps1 files SYNTAX Use-PodeVerbs [[-Path] <String>] [<CommonParameters>] DESCRIPTION Automatically loads verb ps1 files from either a /verbs folder, or a custom folder. Saves space dot-sourcing them all one-by-one. EXAMPLES EXAMPLE 1 Use-PodeVerbs EXAMPLE 2 Use-PodeVerbs -Path './my-verbs' PARAMETERS -Path Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Use-PodeVerbs"},{"location":"Functions/Verbs/Use-PodeVerbs/#use-podeverbs","text":"","title":"Use-PodeVerbs"},{"location":"Functions/Verbs/Use-PodeVerbs/#synopsis","text":"Automatically loads verb ps1 files","title":"SYNOPSIS"},{"location":"Functions/Verbs/Use-PodeVerbs/#syntax","text":"Use-PodeVerbs [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/Verbs/Use-PodeVerbs/#description","text":"Automatically loads verb ps1 files from either a /verbs folder, or a custom folder. Saves space dot-sourcing them all one-by-one.","title":"DESCRIPTION"},{"location":"Functions/Verbs/Use-PodeVerbs/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/Verbs/Use-PodeVerbs/#example-1","text":"Use-PodeVerbs","title":"EXAMPLE 1"},{"location":"Functions/Verbs/Use-PodeVerbs/#example-2","text":"Use-PodeVerbs -Path './my-verbs'","title":"EXAMPLE 2"},{"location":"Functions/Verbs/Use-PodeVerbs/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/Verbs/Use-PodeVerbs/#-path","text":"Optional Path to a folder containing ps1 files, can be relative or literal. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"Functions/Verbs/Use-PodeVerbs/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Verbs/Use-PodeVerbs/#inputs","text":"","title":"INPUTS"},{"location":"Functions/Verbs/Use-PodeVerbs/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/Verbs/Use-PodeVerbs/#notes","text":"","title":"NOTES"},{"location":"Functions/Verbs/Use-PodeVerbs/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/","text":"Connect-PodeWebSocket SYNOPSIS Connect to an external WebSocket. SYNTAX Script (Default) Connect-PodeWebSocket -Name <String> -Url <String> [-ScriptBlock <ScriptBlock>] [-ContentType <String>] [-ArgumentList <Object[]>] [<CommonParameters>] File Connect-PodeWebSocket -Name <String> -Url <String> -FilePath <String> [-ContentType <String>] [-ArgumentList <Object[]>] [<CommonParameters>] DESCRIPTION Connect to an external WebSocket. EXAMPLES EXAMPLE 1 Connect-PodeWebSocket -Name 'Example' -Url 'ws://example.com/some/socket' -ScriptBlock { ... } EXAMPLE 2 Connect-PodeWebSocket -Name 'Example' -Url 'ws://example.com/some/socket' -ScriptBlock { param($arg1, $arg2) ... } -ArgumentList 'arg1', 'arg2' EXAMPLE 3 Connect-PodeWebSocket -Name 'Example' -Url 'ws://example.com/some/socket' -FilePath './some/path/file.ps1' EXAMPLE 4 Connect-PodeWebSocket -Name 'Example' -Url 'ws://example.com/some/socket' -ScriptBlock { ... } -ContentType 'text/xml' PARAMETERS -ArgumentList AN optional array of extra arguments, that will be passed to the ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ContentType An optional ContentType for parsing/converting received/sent messages. (default: application/json) Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Application/json Accept pipeline input : False Accept wildcard characters : False -FilePath A literal, or relative, path to a file containing a ScriptBlock for the WebSocket's logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the WebSocket connection. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ScriptBlock The ScriptBlock to invoke for processing received messages from the WebSocket. The ScriptBlock will have access to a $WsEvent variable with details of the received message. Type : ScriptBlock Parameter Sets : Script Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Url The URL of the WebSocket. Should start with either ws:// or wss://. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Connect-PodeWebSocket"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#connect-podewebsocket","text":"","title":"Connect-PodeWebSocket"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#synopsis","text":"Connect to an external WebSocket.","title":"SYNOPSIS"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#syntax","text":"","title":"SYNTAX"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#script-default","text":"Connect-PodeWebSocket -Name <String> -Url <String> [-ScriptBlock <ScriptBlock>] [-ContentType <String>] [-ArgumentList <Object[]>] [<CommonParameters>]","title":"Script (Default)"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#file","text":"Connect-PodeWebSocket -Name <String> -Url <String> -FilePath <String> [-ContentType <String>] [-ArgumentList <Object[]>] [<CommonParameters>]","title":"File"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#description","text":"Connect to an external WebSocket.","title":"DESCRIPTION"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#example-1","text":"Connect-PodeWebSocket -Name 'Example' -Url 'ws://example.com/some/socket' -ScriptBlock { ... }","title":"EXAMPLE 1"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#example-2","text":"Connect-PodeWebSocket -Name 'Example' -Url 'ws://example.com/some/socket' -ScriptBlock { param($arg1, $arg2) ... } -ArgumentList 'arg1', 'arg2'","title":"EXAMPLE 2"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#example-3","text":"Connect-PodeWebSocket -Name 'Example' -Url 'ws://example.com/some/socket' -FilePath './some/path/file.ps1'","title":"EXAMPLE 3"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#example-4","text":"Connect-PodeWebSocket -Name 'Example' -Url 'ws://example.com/some/socket' -ScriptBlock { ... } -ContentType 'text/xml'","title":"EXAMPLE 4"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#-argumentlist","text":"AN optional array of extra arguments, that will be passed to the ScriptBlock. Type : Object[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ArgumentList"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#-contenttype","text":"An optional ContentType for parsing/converting received/sent messages. (default: application/json) Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Application/json Accept pipeline input : False Accept wildcard characters : False","title":"-ContentType"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#-filepath","text":"A literal, or relative, path to a file containing a ScriptBlock for the WebSocket's logic. Type : String Parameter Sets : File Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#-name","text":"The Name of the WebSocket connection. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#-scriptblock","text":"The ScriptBlock to invoke for processing received messages from the WebSocket. The ScriptBlock will have access to a $WsEvent variable with details of the received message. Type : ScriptBlock Parameter Sets : Script Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ScriptBlock"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#-url","text":"The URL of the WebSocket. Should start with either ws:// or wss://. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Url"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#inputs","text":"","title":"INPUTS"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#notes","text":"","title":"NOTES"},{"location":"Functions/WebSockets/Connect-PodeWebSocket/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/","text":"Disconnect-PodeWebSocket SYNOPSIS Disconnect from a WebSocket connection. SYNTAX Disconnect-PodeWebSocket [[-Name] <String>] [<CommonParameters>] DESCRIPTION Disconnect from a WebSocket connection. These connections can be reconnected later using Reset-PodeWebSocket EXAMPLES EXAMPLE 1 Disconnect-PodeWebSocket -Name 'Example' PARAMETERS -Name The Name of the WebSocket connection (optional if in the scope where $WsEvent is available). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Disconnect-PodeWebSocket"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#disconnect-podewebsocket","text":"","title":"Disconnect-PodeWebSocket"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#synopsis","text":"Disconnect from a WebSocket connection.","title":"SYNOPSIS"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#syntax","text":"Disconnect-PodeWebSocket [[-Name] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#description","text":"Disconnect from a WebSocket connection. These connections can be reconnected later using Reset-PodeWebSocket","title":"DESCRIPTION"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#example-1","text":"Disconnect-PodeWebSocket -Name 'Example'","title":"EXAMPLE 1"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#-name","text":"The Name of the WebSocket connection (optional if in the scope where $WsEvent is available). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#inputs","text":"","title":"INPUTS"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#notes","text":"","title":"NOTES"},{"location":"Functions/WebSockets/Disconnect-PodeWebSocket/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/","text":"Remove-PodeWebSocket SYNOPSIS Remove a WebSocket connection. SYNTAX Remove-PodeWebSocket [[-Name] <String>] [<CommonParameters>] DESCRIPTION Disconnects and then removes a WebSocket connection. EXAMPLES EXAMPLE 1 Remove-PodeWebSocket -Name 'Example' PARAMETERS -Name The Name of the WebSocket connection (optional if in the scope where $WsEvent is available). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Remove-PodeWebSocket"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#remove-podewebsocket","text":"","title":"Remove-PodeWebSocket"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#synopsis","text":"Remove a WebSocket connection.","title":"SYNOPSIS"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#syntax","text":"Remove-PodeWebSocket [[-Name] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#description","text":"Disconnects and then removes a WebSocket connection.","title":"DESCRIPTION"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#example-1","text":"Remove-PodeWebSocket -Name 'Example'","title":"EXAMPLE 1"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#-name","text":"The Name of the WebSocket connection (optional if in the scope where $WsEvent is available). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#inputs","text":"","title":"INPUTS"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#notes","text":"","title":"NOTES"},{"location":"Functions/WebSockets/Remove-PodeWebSocket/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/","text":"Reset-PodeWebSocket SYNOPSIS Reset an existing WebSocket connection. SYNTAX Reset-PodeWebSocket [[-Name] <String>] [[-Url] <String>] [<CommonParameters>] DESCRIPTION Reset an existing WebSocket connection, either using it's current URL or a new one. EXAMPLES EXAMPLE 1 Reset-PodeWebSocket -Name 'Example' EXAMPLE 2 Reset-PodeWebSocket -Name 'Example' -Url 'ws://example.com/some/socket' PARAMETERS -Name The Name of the WebSocket connection (optional if in the scope where $WsEvent is available). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Url An optional new URL to reset the connection to. If not supplied, the connection's original URL will be used. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Reset-PodeWebSocket"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#reset-podewebsocket","text":"","title":"Reset-PodeWebSocket"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#synopsis","text":"Reset an existing WebSocket connection.","title":"SYNOPSIS"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#syntax","text":"Reset-PodeWebSocket [[-Name] <String>] [[-Url] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#description","text":"Reset an existing WebSocket connection, either using it's current URL or a new one.","title":"DESCRIPTION"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#example-1","text":"Reset-PodeWebSocket -Name 'Example'","title":"EXAMPLE 1"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#example-2","text":"Reset-PodeWebSocket -Name 'Example' -Url 'ws://example.com/some/socket'","title":"EXAMPLE 2"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#-name","text":"The Name of the WebSocket connection (optional if in the scope where $WsEvent is available). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#-url","text":"An optional new URL to reset the connection to. If not supplied, the connection's original URL will be used. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Url"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#inputs","text":"","title":"INPUTS"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#notes","text":"","title":"NOTES"},{"location":"Functions/WebSockets/Reset-PodeWebSocket/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/WebSockets/Send-PodeWebSocket/","text":"Send-PodeWebSocket SYNOPSIS Send a message back to a WebSocket connection. SYNTAX Send-PodeWebSocket [[-Name] <String>] [[-Message] <Object>] [[-Depth] <Int32>] [[-Type] <String>] [<CommonParameters>] DESCRIPTION Send a message back to a WebSocket connection. EXAMPLES EXAMPLE 1 Send-PodeWebSocket -Name 'Example' -Message @{ message = 'Hello, there' } PARAMETERS -Depth An optional Depth to parse any JSON or XML messages. (default: 10) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : 10 Accept pipeline input : False Accept wildcard characters : False -Message The Message to send. Can either be a raw string, hashtable, or psobject. Non-strings will be parsed to JSON, or the WebSocket's ContentType. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name The Name of the WebSocket connection (optional if in the scope where $WsEvent is available). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Type An optional message Type. (default: Text) Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : Text Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Send-PodeWebSocket"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#send-podewebsocket","text":"","title":"Send-PodeWebSocket"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#synopsis","text":"Send a message back to a WebSocket connection.","title":"SYNOPSIS"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#syntax","text":"Send-PodeWebSocket [[-Name] <String>] [[-Message] <Object>] [[-Depth] <Int32>] [[-Type] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#description","text":"Send a message back to a WebSocket connection.","title":"DESCRIPTION"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#example-1","text":"Send-PodeWebSocket -Name 'Example' -Message @{ message = 'Hello, there' }","title":"EXAMPLE 1"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#-depth","text":"An optional Depth to parse any JSON or XML messages. (default: 10) Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : 10 Accept pipeline input : False Accept wildcard characters : False","title":"-Depth"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#-message","text":"The Message to send. Can either be a raw string, hashtable, or psobject. Non-strings will be parsed to JSON, or the WebSocket's ContentType. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Message"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#-name","text":"The Name of the WebSocket connection (optional if in the scope where $WsEvent is available). Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#-type","text":"An optional message Type. (default: Text) Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : Text Accept pipeline input : False Accept wildcard characters : False","title":"-Type"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#inputs","text":"","title":"INPUTS"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#notes","text":"","title":"NOTES"},{"location":"Functions/WebSockets/Send-PodeWebSocket/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/","text":"Set-PodeWebSocketConcurrency SYNOPSIS Set the maximum number of concurrent WebSocket connection threads. SYNTAX Set-PodeWebSocketConcurrency [-Maximum] <Int32> [<CommonParameters>] DESCRIPTION Set the maximum number of concurrent WebSocket connection threads. EXAMPLES EXAMPLE 1 Set-PodeWebSocketConcurrency -Maximum 5 PARAMETERS -Maximum The Maximum number of threads available to process WebSocket connection messages received. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : 0 Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Set-PodeWebSocketConcurrency"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#set-podewebsocketconcurrency","text":"","title":"Set-PodeWebSocketConcurrency"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#synopsis","text":"Set the maximum number of concurrent WebSocket connection threads.","title":"SYNOPSIS"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#syntax","text":"Set-PodeWebSocketConcurrency [-Maximum] <Int32> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#description","text":"Set the maximum number of concurrent WebSocket connection threads.","title":"DESCRIPTION"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#example-1","text":"Set-PodeWebSocketConcurrency -Maximum 5","title":"EXAMPLE 1"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#-maximum","text":"The Maximum number of threads available to process WebSocket connection messages received. Type : Int32 Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Maximum"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#inputs","text":"","title":"INPUTS"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#notes","text":"","title":"NOTES"},{"location":"Functions/WebSockets/Set-PodeWebSocketConcurrency/#related-links","text":"","title":"RELATED LINKS"},{"location":"Functions/WebSockets/Test-PodeWebSocket/","text":"Test-PodeWebSocket SYNOPSIS Test whether an WebSocket connection exists. SYNTAX Test-PodeWebSocket [-Name] <String> [<CommonParameters>] DESCRIPTION Test whether an WebSocket connection exists for the given Name. EXAMPLES EXAMPLE 1 Test-PodeWebSocket -Name 'Example' PARAMETERS -Name The Name of the WebSocket connection. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Test-PodeWebSocket"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#test-podewebsocket","text":"","title":"Test-PodeWebSocket"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#synopsis","text":"Test whether an WebSocket connection exists.","title":"SYNOPSIS"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#syntax","text":"Test-PodeWebSocket [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#description","text":"Test whether an WebSocket connection exists for the given Name.","title":"DESCRIPTION"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#examples","text":"","title":"EXAMPLES"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#example-1","text":"Test-PodeWebSocket -Name 'Example'","title":"EXAMPLE 1"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#parameters","text":"","title":"PARAMETERS"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#-name","text":"The Name of the WebSocket connection. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#inputs","text":"","title":"INPUTS"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#outputs","text":"","title":"OUTPUTS"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#notes","text":"","title":"NOTES"},{"location":"Functions/WebSockets/Test-PodeWebSocket/#related-links","text":"","title":"RELATED LINKS"},{"location":"Getting-Started/CLI/","text":"CLI Pode has some commands that you can utilise from a PowerShell terminal, or pwsh session. These commands help you to initialise, start, test, build, or install any packages for your repo/server. All of these commands are centered around the package.json format - similar to that of Node.js and Yarn. Info At the moment, Pode only uses the start , test , build and install properties of the scripts section in your package.json . You can still have others, like dependencies for Yarn Commands Build The build action will run the script found in the package.json file, at the scripts/build value: pode build Init The init action will help you create a new package.json file from scratch. It will ask a few questions, such as author/name/etc, and then create the file for you: pode init Tip By default, Pode will pre-populate the test , build and install values using yarn , psake and pester respectively Install The install action will run the script found in the package.json file, at the scripts/install value: pode install Start The start action will run the script found in the package.json file, at the scripts/start value. If this value is not set, then this action will instead run the value under main : pode start Test The test action will run the script found in the package.json file, at the scripts/test value: pode test Package File The following is an example of a package.json file: { \"name\" : \"example\" , \"description\" : \"\" , \"version\" : \"1.0.0\" , \"main\" : \"./server.ps1\" , \"scripts\" : { \"start\" : \"./server.ps1\" , \"test\" : \"invoke-pester ./tests/*.ps1\" , \"install\" : \"yarn install --force --ignore-scripts --modules-folder pode_modules\" , \"build\" : \"psake\" }, \"author\" : \"Rick Sanchez\" , \"license\" : \"MIT\" }","title":"CLI"},{"location":"Getting-Started/CLI/#cli","text":"Pode has some commands that you can utilise from a PowerShell terminal, or pwsh session. These commands help you to initialise, start, test, build, or install any packages for your repo/server. All of these commands are centered around the package.json format - similar to that of Node.js and Yarn. Info At the moment, Pode only uses the start , test , build and install properties of the scripts section in your package.json . You can still have others, like dependencies for Yarn","title":"CLI"},{"location":"Getting-Started/CLI/#commands","text":"","title":"Commands"},{"location":"Getting-Started/CLI/#build","text":"The build action will run the script found in the package.json file, at the scripts/build value: pode build","title":"Build"},{"location":"Getting-Started/CLI/#init","text":"The init action will help you create a new package.json file from scratch. It will ask a few questions, such as author/name/etc, and then create the file for you: pode init Tip By default, Pode will pre-populate the test , build and install values using yarn , psake and pester respectively","title":"Init"},{"location":"Getting-Started/CLI/#install","text":"The install action will run the script found in the package.json file, at the scripts/install value: pode install","title":"Install"},{"location":"Getting-Started/CLI/#start","text":"The start action will run the script found in the package.json file, at the scripts/start value. If this value is not set, then this action will instead run the value under main : pode start","title":"Start"},{"location":"Getting-Started/CLI/#test","text":"The test action will run the script found in the package.json file, at the scripts/test value: pode test","title":"Test"},{"location":"Getting-Started/CLI/#package-file","text":"The following is an example of a package.json file: { \"name\" : \"example\" , \"description\" : \"\" , \"version\" : \"1.0.0\" , \"main\" : \"./server.ps1\" , \"scripts\" : { \"start\" : \"./server.ps1\" , \"test\" : \"invoke-pester ./tests/*.ps1\" , \"install\" : \"yarn install --force --ignore-scripts --modules-folder pode_modules\" , \"build\" : \"psake\" }, \"author\" : \"Rick Sanchez\" , \"license\" : \"MIT\" }","title":"Package File"},{"location":"Getting-Started/FirstApp/","text":"Building your first Pode app Important Before starting, ensure you've installed Pode. The following steps will run you through creating your first Pode app, and give you an overview to some of the basic features. Setup First, create a /my-first-pode-app directory, this should be where ever you put your project/learning code. Open PowerShell, and navigate to the above directory. Run pode init in the console, this will create a basic package.json file for you - see the CLI reference for more information. The init action will ask for some input, leave everything as default (just press enter). PS > pode init name ( my-first-pode-app ): version ( 1 . 0 . 0 ): description : entry point (./ server . ps1 ): author : license ( MIT ): Success , saved package . json In your favourite text editor, create a server.ps1 file within the directory. REST Server Although not required, it is recommended to import the Pode module using a maximum version, to avoid any breaking changes from new major versions: Import-Module -Name Pode -MaximumVersion 2 . 99 . 99 Within your server.ps1 file, first you need to start the Server. This is where the main script will go that defines how the server should function: Start-PodeServer { # logic } Now we have our server, we need to get it to listen on an endpoint. This will allow us to receive requests and respond to them. The below tells your server to listen on localhost and port 8080 for HTTP requests: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http } Our simple server will have a single GET route ; it will be invoked when the root ( / ) of the server is called (ie: http://localhost:8080/ ). This route will respond with a simple JSON response: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'value' = 'Hello, world!' } } } Save the file, and run pode start (or just ./server.ps1 ) from the terminal. This will start the server listening on localhost:8080 . When http://localhost:8080/ is hit, the server will respond with: { \"value\" : \"Hello, world!\" } Note If you have issues with pode start , just invoke ./server.ps1 directly. More Tutorials To see how to create web pages using Pode, see here To see how to do basic login/logout pages, see here For more tutorials, see here","title":"Building your first Pode app"},{"location":"Getting-Started/FirstApp/#building-your-first-pode-app","text":"Important Before starting, ensure you've installed Pode. The following steps will run you through creating your first Pode app, and give you an overview to some of the basic features.","title":"Building your first Pode app"},{"location":"Getting-Started/FirstApp/#setup","text":"First, create a /my-first-pode-app directory, this should be where ever you put your project/learning code. Open PowerShell, and navigate to the above directory. Run pode init in the console, this will create a basic package.json file for you - see the CLI reference for more information. The init action will ask for some input, leave everything as default (just press enter). PS > pode init name ( my-first-pode-app ): version ( 1 . 0 . 0 ): description : entry point (./ server . ps1 ): author : license ( MIT ): Success , saved package . json In your favourite text editor, create a server.ps1 file within the directory.","title":"Setup"},{"location":"Getting-Started/FirstApp/#rest-server","text":"Although not required, it is recommended to import the Pode module using a maximum version, to avoid any breaking changes from new major versions: Import-Module -Name Pode -MaximumVersion 2 . 99 . 99 Within your server.ps1 file, first you need to start the Server. This is where the main script will go that defines how the server should function: Start-PodeServer { # logic } Now we have our server, we need to get it to listen on an endpoint. This will allow us to receive requests and respond to them. The below tells your server to listen on localhost and port 8080 for HTTP requests: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http } Our simple server will have a single GET route ; it will be invoked when the root ( / ) of the server is called (ie: http://localhost:8080/ ). This route will respond with a simple JSON response: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'value' = 'Hello, world!' } } } Save the file, and run pode start (or just ./server.ps1 ) from the terminal. This will start the server listening on localhost:8080 . When http://localhost:8080/ is hit, the server will respond with: { \"value\" : \"Hello, world!\" } Note If you have issues with pode start , just invoke ./server.ps1 directly.","title":"REST Server"},{"location":"Getting-Started/FirstApp/#more-tutorials","text":"To see how to create web pages using Pode, see here To see how to do basic login/logout pages, see here For more tutorials, see here","title":"More Tutorials"},{"location":"Getting-Started/Frontend/","text":"Frontend You can host web-pages using Pode, as well as also using package managers like yarn to install frontend libraries - like bootstrap, jQuery, etc. Using Pode.Web Don't know HTML, CSS, or JavaScript? No problem! Pode.Web is currently a work in progress, and lets you build web pages using purely PowerShell! Using Yarn The following will install Yarn onto your machine: choco install yarn -y yarn init Once installed, you can use Yarn to download frontend libraries. The libraries will be added to a package.json file - which if you're using the Pode CLI, you'll already have in place. To install frontend libraries, you could use the following: yarn add bootstrap yarn add lodash You don't have to use Yarn, you could also use NPM or anything other package manager of your choice. Pode Install Once you've added some libraries you can use pode install to trigger yarn . This will tell yarn to install the packages to a pode_modules directory. If you're using another package manager, you'll need to update the install property in the package.json file accordingly. Info Other useful packages could include gulp , jquery , moment , etc. Once these packages have been installed to pode_modules , this folder will contain other folders for the install libraries. In most cases, these library folders will contain a dist folder with files like *.min.css or *.min.js . You can then move these files into a /public folder at the root of your Pode server. For example, if you install bootstrap then your pode_modules will look something like: /pode_modules /bootstrap /dist bootstrap.min.css bootstrap.min.js You then take those min files, and move them into /public : /public bootstrap.min.css bootstrap.min.js You can then reference these files in your HTML pages as: < link rel = \"stylesheet\" type = \"text/css\" href = \"/bootstrap.min.css\" > < script src = \"/bootstrap.min.js\" ></ script > Instead of doing this manually, you could use tools like InvokeBuild or psake to automate moving the files.","title":"Frontend"},{"location":"Getting-Started/Frontend/#frontend","text":"You can host web-pages using Pode, as well as also using package managers like yarn to install frontend libraries - like bootstrap, jQuery, etc.","title":"Frontend"},{"location":"Getting-Started/Frontend/#using-podeweb","text":"Don't know HTML, CSS, or JavaScript? No problem! Pode.Web is currently a work in progress, and lets you build web pages using purely PowerShell!","title":"Using Pode.Web"},{"location":"Getting-Started/Frontend/#using-yarn","text":"The following will install Yarn onto your machine: choco install yarn -y yarn init Once installed, you can use Yarn to download frontend libraries. The libraries will be added to a package.json file - which if you're using the Pode CLI, you'll already have in place. To install frontend libraries, you could use the following: yarn add bootstrap yarn add lodash You don't have to use Yarn, you could also use NPM or anything other package manager of your choice.","title":"Using Yarn"},{"location":"Getting-Started/Frontend/#pode-install","text":"Once you've added some libraries you can use pode install to trigger yarn . This will tell yarn to install the packages to a pode_modules directory. If you're using another package manager, you'll need to update the install property in the package.json file accordingly. Info Other useful packages could include gulp , jquery , moment , etc. Once these packages have been installed to pode_modules , this folder will contain other folders for the install libraries. In most cases, these library folders will contain a dist folder with files like *.min.css or *.min.js . You can then move these files into a /public folder at the root of your Pode server. For example, if you install bootstrap then your pode_modules will look something like: /pode_modules /bootstrap /dist bootstrap.min.css bootstrap.min.js You then take those min files, and move them into /public : /public bootstrap.min.css bootstrap.min.js You can then reference these files in your HTML pages as: < link rel = \"stylesheet\" type = \"text/css\" href = \"/bootstrap.min.css\" > < script src = \"/bootstrap.min.js\" ></ script > Instead of doing this manually, you could use tools like InvokeBuild or psake to automate moving the files.","title":"Pode Install"},{"location":"Getting-Started/Installation/","text":"Installation Pode is a PowerShell module that can be installed from either Chocolatey, the PowerShell Gallery, or Docker. Once installed, you can use the module in your PowerShell scripts. Minimum Requirements Before installing Pode, the minimum requirements must be met: OS: Windows Linux MacOS Raspberry Pi PowerShell: Windows PowerShell 5+ PowerShell (Core) 6+ .NET Framework 4.7.2+ (For Windows PowerShell) Chocolatey To install Pode via Chocolatey, the following command can be used: choco install pode PowerShell Gallery To install Pode from the PowerShell Gallery, you can use the following: Install-Module -Name Pode Docker Pode can run on *nix environments, therefore it only makes sense for there to be Docker images for you to use! The images use PowerShell v7.2 on either an Ubuntu Focal image (default), an Alpine image, or an ARM32 image (for Raspberry Pis). To pull down the latest Pode image you can do: # for latest docker pull badgerati / pode : latest # or the following for a specific version: docker pull badgerati / pode : 2 . 2 . 2 To pull down the Alpine Pode image you can do: # for latest docker pull badgerati / pode : latest-alpine # or the following for a specific version: docker pull badgerati / pode : 2 . 2 . 2-alpine To pull down the ARM32 Pode image you can do: # for latest docker pull badgerati / pode : latest-arm32 # or the following for a specific version: docker pull badgerati / pode : 2 . 2 . 2-arm32 Once pulled, you can view here on how to use the image. GitHub Package Registry You can also get the Pode docker image from the GitHub Package Registry! The images are the same as the ones hosted in Docker. To pull down the latest Pode image you can do: # for latest docker pull docker . pkg . github . com / badgerati / pode / pode : latest # or the following for a specific version: docker pull docker . pkg . github . com / badgerati / pode / pode : 2 . 2 . 2 To pull down the Alpine Pode image you can do: # for latest docker pull docker . pkg . github . com / badgerati / pode / pode : latest-apline # or the following for a specific version: docker pull docker . pkg . github . com / badgerati / pode / pode : 2 . 2 . 2-alpine To pull down the ARM32 Pode image you can do: # for latest docker pull docker . pkg . github . com / badgerati / pode / pode : latest-arm32 # or the following for a specific version: docker pull docker . pkg . github . com / badgerati / pode / pode : 2 . 2 . 2-arm32 Once pulled, you can view here on how to use the image. Using the Module After you have installed the module all functions should be readily available to you. In the case of the Docker images, the module is pre-installed for you. If you have any issues then you can try and import the module into your server scripts: Import-Module Pode","title":"Installation"},{"location":"Getting-Started/Installation/#installation","text":"Pode is a PowerShell module that can be installed from either Chocolatey, the PowerShell Gallery, or Docker. Once installed, you can use the module in your PowerShell scripts.","title":"Installation"},{"location":"Getting-Started/Installation/#minimum-requirements","text":"Before installing Pode, the minimum requirements must be met: OS: Windows Linux MacOS Raspberry Pi PowerShell: Windows PowerShell 5+ PowerShell (Core) 6+ .NET Framework 4.7.2+ (For Windows PowerShell)","title":"Minimum Requirements"},{"location":"Getting-Started/Installation/#chocolatey","text":"To install Pode via Chocolatey, the following command can be used: choco install pode","title":"Chocolatey"},{"location":"Getting-Started/Installation/#powershell-gallery","text":"To install Pode from the PowerShell Gallery, you can use the following: Install-Module -Name Pode","title":"PowerShell Gallery"},{"location":"Getting-Started/Installation/#docker","text":"Pode can run on *nix environments, therefore it only makes sense for there to be Docker images for you to use! The images use PowerShell v7.2 on either an Ubuntu Focal image (default), an Alpine image, or an ARM32 image (for Raspberry Pis). To pull down the latest Pode image you can do: # for latest docker pull badgerati / pode : latest # or the following for a specific version: docker pull badgerati / pode : 2 . 2 . 2 To pull down the Alpine Pode image you can do: # for latest docker pull badgerati / pode : latest-alpine # or the following for a specific version: docker pull badgerati / pode : 2 . 2 . 2-alpine To pull down the ARM32 Pode image you can do: # for latest docker pull badgerati / pode : latest-arm32 # or the following for a specific version: docker pull badgerati / pode : 2 . 2 . 2-arm32 Once pulled, you can view here on how to use the image.","title":"Docker"},{"location":"Getting-Started/Installation/#github-package-registry","text":"You can also get the Pode docker image from the GitHub Package Registry! The images are the same as the ones hosted in Docker. To pull down the latest Pode image you can do: # for latest docker pull docker . pkg . github . com / badgerati / pode / pode : latest # or the following for a specific version: docker pull docker . pkg . github . com / badgerati / pode / pode : 2 . 2 . 2 To pull down the Alpine Pode image you can do: # for latest docker pull docker . pkg . github . com / badgerati / pode / pode : latest-apline # or the following for a specific version: docker pull docker . pkg . github . com / badgerati / pode / pode : 2 . 2 . 2-alpine To pull down the ARM32 Pode image you can do: # for latest docker pull docker . pkg . github . com / badgerati / pode / pode : latest-arm32 # or the following for a specific version: docker pull docker . pkg . github . com / badgerati / pode / pode : 2 . 2 . 2-arm32 Once pulled, you can view here on how to use the image.","title":"GitHub Package Registry"},{"location":"Getting-Started/Installation/#using-the-module","text":"After you have installed the module all functions should be readily available to you. In the case of the Docker images, the module is pre-installed for you. If you have any issues then you can try and import the module into your server scripts: Import-Module Pode","title":"Using the Module"},{"location":"Getting-Started/KnownIssues/","text":"Known Issues Below is a list of reported issues when using Pode and, if possible, how to resolve them: Long URL Segments Reported in issue #45 . On Windows systems there is a limit on the maximum length of URL segments. It's usually about 260 characters, and anything above this will cause Pode to throw a 400 Bad Request error. To resolve, you can set the UrlSegmentMaxLength registry setting to 0 (for unlimited), or any other value. The below PowerShell will set the value to unlimited: New-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Services\\HTTP\\Parameters' -Name 'UrlSegmentMaxLength' -Value 0 -PropertyType DWord -Force This is not an issue on Linux PowerShell Classes Pode uses Runspaces to deal with multithreading and other background tasks. Due to this, PowerShell classes do not work as intended, and are unsafe to use. You can find more information about this issue here on PowerShell . The crux of the issue is that if you create an instance of a class in one Runspace, then every time you try to use that instance again it will always be marshaled back to the original Runspace. This means Routes and Middleware can become contaminated. It's recommended to switch to either Hashtables or PSObjects, but if you need to use classes then the following should let classes work: Create a module (CreateClassInstanceHelper.psm1) with content: $Script:powershell = $null $Script:body = @' function New-UnboundClassInstance ([Type]$type, [object[]]$arguments) { [activator]::CreateInstance($type, $arguments) } '@ function Initialize { # A runspace is created and NO powershell class is defined in it $Script:powershell = [powershell] :: Create () # Define a function in that runspace to create an instance using the given type and arguments $Script:powershell . AddScript ( $Script:body ). Invoke () $Script:powershell . Commands . Clear () } function New-UnboundClassInstance ( [Type] $type , [object[]] $arguments = $null ) { if ( $null -eq $Script:powershell ) { Initialize } try { # Pass in the powershell class type and ctor arguments and run the helper function in the other runspace if ( $null -eq $arguments ) { $arguments = @() } $result = $Script:powershell . AddCommand ( \"New-UnboundClassInstance\" ). AddParameter ( \"type\" , $type ). AddParameter ( \"arguments\" , $arguments ). Invoke () return $result [ 0 ] } finally { $Script:powershell . Commands . Clear () } } Then when you need to create a PowerShell class instance, you can do the following from some Route or Middleware: Import-Module '<path>\\CreateClassInstanceHelper.psm1' New-UnboundClassInstance ( [Foo] , $argsForCtor ) Certificates For HTTPS there are a few issues you may run into, and to resolve them you can use the below: On Windows, you may need to install the certificate into your Trusted Root on the Local Machine (mostly for self-signed certificates). You may be required to run the following, to force TLS1.2, before making web requests: [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.SecurityProtocolType] :: Tls12 On *nix platforms, for self-signed certificates, you may need to use -SkipCertificateCheck on Invoke-WebRequest and Invoke-RestMethod . ActiveDirectory Module If you're using commands from the ActiveDirectory module - such as Get-ADUser - and they're not working as expected, you'll need to import the module first so it's loaded into the runspaces appropriately: Import-Module ActiveDirectory Start-PodeServer { # ... } Loader Errors / Pode Types If on importing the module you receive Loader Exceptions, or when starting your server you get an error similar to [PodeListener] not found , then you will need to update to .NET 4.7.2.","title":"Known Issues"},{"location":"Getting-Started/KnownIssues/#known-issues","text":"Below is a list of reported issues when using Pode and, if possible, how to resolve them:","title":"Known Issues"},{"location":"Getting-Started/KnownIssues/#long-url-segments","text":"Reported in issue #45 . On Windows systems there is a limit on the maximum length of URL segments. It's usually about 260 characters, and anything above this will cause Pode to throw a 400 Bad Request error. To resolve, you can set the UrlSegmentMaxLength registry setting to 0 (for unlimited), or any other value. The below PowerShell will set the value to unlimited: New-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Services\\HTTP\\Parameters' -Name 'UrlSegmentMaxLength' -Value 0 -PropertyType DWord -Force This is not an issue on Linux","title":"Long URL Segments"},{"location":"Getting-Started/KnownIssues/#powershell-classes","text":"Pode uses Runspaces to deal with multithreading and other background tasks. Due to this, PowerShell classes do not work as intended, and are unsafe to use. You can find more information about this issue here on PowerShell . The crux of the issue is that if you create an instance of a class in one Runspace, then every time you try to use that instance again it will always be marshaled back to the original Runspace. This means Routes and Middleware can become contaminated. It's recommended to switch to either Hashtables or PSObjects, but if you need to use classes then the following should let classes work: Create a module (CreateClassInstanceHelper.psm1) with content: $Script:powershell = $null $Script:body = @' function New-UnboundClassInstance ([Type]$type, [object[]]$arguments) { [activator]::CreateInstance($type, $arguments) } '@ function Initialize { # A runspace is created and NO powershell class is defined in it $Script:powershell = [powershell] :: Create () # Define a function in that runspace to create an instance using the given type and arguments $Script:powershell . AddScript ( $Script:body ). Invoke () $Script:powershell . Commands . Clear () } function New-UnboundClassInstance ( [Type] $type , [object[]] $arguments = $null ) { if ( $null -eq $Script:powershell ) { Initialize } try { # Pass in the powershell class type and ctor arguments and run the helper function in the other runspace if ( $null -eq $arguments ) { $arguments = @() } $result = $Script:powershell . AddCommand ( \"New-UnboundClassInstance\" ). AddParameter ( \"type\" , $type ). AddParameter ( \"arguments\" , $arguments ). Invoke () return $result [ 0 ] } finally { $Script:powershell . Commands . Clear () } } Then when you need to create a PowerShell class instance, you can do the following from some Route or Middleware: Import-Module '<path>\\CreateClassInstanceHelper.psm1' New-UnboundClassInstance ( [Foo] , $argsForCtor )","title":"PowerShell Classes"},{"location":"Getting-Started/KnownIssues/#certificates","text":"For HTTPS there are a few issues you may run into, and to resolve them you can use the below: On Windows, you may need to install the certificate into your Trusted Root on the Local Machine (mostly for self-signed certificates). You may be required to run the following, to force TLS1.2, before making web requests: [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.SecurityProtocolType] :: Tls12 On *nix platforms, for self-signed certificates, you may need to use -SkipCertificateCheck on Invoke-WebRequest and Invoke-RestMethod .","title":"Certificates"},{"location":"Getting-Started/KnownIssues/#activedirectory-module","text":"If you're using commands from the ActiveDirectory module - such as Get-ADUser - and they're not working as expected, you'll need to import the module first so it's loaded into the runspaces appropriately: Import-Module ActiveDirectory Start-PodeServer { # ... }","title":"ActiveDirectory Module"},{"location":"Getting-Started/KnownIssues/#loader-errors-pode-types","text":"If on importing the module you receive Loader Exceptions, or when starting your server you get an error similar to [PodeListener] not found , then you will need to update to .NET 4.7.2.","title":"Loader Errors / Pode Types"},{"location":"Getting-Started/LocalModules/","text":"Local Modules To save installing PowerShell modules globally, Pode allows you to specify modules in the package.json file. These modules will be downloaded into a ps_modules folder at the root of your server. Important Pode will only download modules from registered PowerShell Repositories - such as the PowerShell Gallery. This is only a basic implementation, if you wish to download from other locations, such as GitHub, we'd recommend looking at other tools such as Parcel , PSDepend or PSPM Package.json Within your server's package.json file, you can specify a modules and devModules section with a list of modules and their versions to download: { \"modules\" : { \"eps\" : \"0.5.0\" }, \"devModules\" : { \"pester\" : \"latest\" } } You can also use an expanded format where you can specify custom repositories as well. If you use this format, or the above, and don't specify a repository then the PSGallery is used by default: { \"modules\" : { \"eps\" : { \"version\" : \"0.5.0\" , \"repository\" : \"CustomGallery\" } }, \"devModules\" : { \"pester\" : { \"version\" : \"latest\" , \"repository\" : \"PSGallery\" } } } The \"latest\" version will always install the latest version of the module. When installing the modules, if Pode detects a different version is already downloaded then it will be removed. Pode Install When you have modules defined within your package.jon file, then calling pode install from the CLI will automatically download any defined modules. Using pode -d install will also install the modules, but will also install the dev-modules. These modules will be downloaded into a ps_modules directory at the root of your server. For example, using the above package.json and calling pode -d install will create the following directory structure: server.ps1 package.json /ps_modules /eps /0.5.0 /pester /4.6.0 Importing When the modules have been downloaded, you can import them using the Import-PodeModule function. Unlike Import-Module , Import-PodeModule will check if some module is within the ps_modules directory first, then it will check the global modules.","title":"Local Modules"},{"location":"Getting-Started/LocalModules/#local-modules","text":"To save installing PowerShell modules globally, Pode allows you to specify modules in the package.json file. These modules will be downloaded into a ps_modules folder at the root of your server. Important Pode will only download modules from registered PowerShell Repositories - such as the PowerShell Gallery. This is only a basic implementation, if you wish to download from other locations, such as GitHub, we'd recommend looking at other tools such as Parcel , PSDepend or PSPM","title":"Local Modules"},{"location":"Getting-Started/LocalModules/#packagejson","text":"Within your server's package.json file, you can specify a modules and devModules section with a list of modules and their versions to download: { \"modules\" : { \"eps\" : \"0.5.0\" }, \"devModules\" : { \"pester\" : \"latest\" } } You can also use an expanded format where you can specify custom repositories as well. If you use this format, or the above, and don't specify a repository then the PSGallery is used by default: { \"modules\" : { \"eps\" : { \"version\" : \"0.5.0\" , \"repository\" : \"CustomGallery\" } }, \"devModules\" : { \"pester\" : { \"version\" : \"latest\" , \"repository\" : \"PSGallery\" } } } The \"latest\" version will always install the latest version of the module. When installing the modules, if Pode detects a different version is already downloaded then it will be removed.","title":"Package.json"},{"location":"Getting-Started/LocalModules/#pode-install","text":"When you have modules defined within your package.jon file, then calling pode install from the CLI will automatically download any defined modules. Using pode -d install will also install the modules, but will also install the dev-modules. These modules will be downloaded into a ps_modules directory at the root of your server. For example, using the above package.json and calling pode -d install will create the following directory structure: server.ps1 package.json /ps_modules /eps /0.5.0 /pester /4.6.0","title":"Pode Install"},{"location":"Getting-Started/LocalModules/#importing","text":"When the modules have been downloaded, you can import them using the Import-PodeModule function. Unlike Import-Module , Import-PodeModule will check if some module is within the ps_modules directory first, then it will check the global modules.","title":"Importing"},{"location":"Getting-Started/Migrating/0X-to-1X/","text":"From v0.X to v1.X This is a brief guide on migrating from Pode v0.X to Pode v1.X. In Pode v1.X all functions were refactored from short syntax (ie, route ), to PowerShell syntax (ie, Add-PodeRoute ). This means some of the older functions, such as header have now been split out into 4, or more, different functions. Also being changed is the pode.json configuration file, which is now a server.<env>.psd1 file. Note With all the functions being refactored, the old syntax of not needing to supply parameter names (and relying on position) is gone - for a lot of cases. It's now worth referencing parameters by name ( -Name , -ScriptBlock , etc.). Authentication ( Tutorial ) The old auth use has been split into two to make it easier - there are now functions that define authentication types (which retrieve credentials from the request object), and validators (which take the credentials and ensure the user is valid). For auth check , this has now been replaced with Get-PodeAuthMiddleware , and the hashtable is now function parameters. Types Using inbuilt authentication types, and creating custom types, is now possible use the New-PodeAuthType function. This function will return valid Basic, Form, or Custom authentication types for use with Add-PodeAuth and Add-PodeAuthWindowsAd . Validators Configuring an authentication validator is now a case of using the Add-PodeAuth function with a -Name and a -ScriptBlock . For inbuilt validators, like Windows AD, you can use Add-PodeAuthWindowsAd . In both cases, the -Type parameter comes from using New-PodeAuthType . Functions Add-PodeAuth Add-PodeAuthWindowsAd Remove-PodeAuth Clear-PodeAuth Cookies Cookies use to be done via actions following the cookie function, such as cookie set . These actions are now the following functions: Action Function cookie check Test-PodeCookieSigned cookie exists Test-PodeCookie cookie extend Update-PodeCookieExpiry cookie get Get-PodeCookie cookie remove Remove-PodeCookie cookie secrets Get-PodeCookieSecret and Set-PodeCookieSecret cookie set Set-PodeCookie Configuration ( Tutorial ) The config function has simply been renamed to Get-PodeConfig . PSD1 The pode.<env>.json configuration files have been changed from json to psd1 format, and their name changed from pode to server . The structure of the file name still uses the environment format: server.<env>.psd1 . The structure of the file itself is basically a PowerShell hashtable, so the following: { \"server\" : { \"fileMonitor\" : { \"enable\" : true } } } would now be: @{ Server = @{ FileMonitor = @{ Enable = $true } } } Flash Messages ( Tutorial ) Flash messages use to be done via actions following flash function, such as flash add . These actions are now the following functions: Action Function flash add Add-PodeFlashMessage flash clear Clear-PodeFlashMessages flash get Get-PodeFlashMessage flash keys Get-PodeFlashMessageNames flash remove Remove-PodeFlashMessage flash test Test-PodeFlashMessage GUI ( Tutorial ) The gui function use to take a Name with a hashtable of options. This function has now been renamed to Show-PodeGui , and the options are all now function parameters. Handlers ( Tutorial ) The biggest change the Handlers is that you can now create multiple handlers for each of SMTP, TCP and Service - rather than just one. With this, the new Add-PodeHandler requires a -Name to be supplied. Functions Add-PodeHandler Remove-PodeHandler Clear-PodeHandlers Headers Headers use to be done via actions following the header function, such as header add . These actions are now the following functions: Action Function header add Add-PodeHeader header get Get-PodeHeader header set Set-PodeHeader header exists Test-PodeHeader Logging ( Tutorial ) Logging in Pode has had by far the biggest refactor, so big it's completely different - so it may just be worth looking at the tutorial. The old logging used to only support logging Requests, whereas now it can log Requests, Errors, and anything else you feel like! You can also write to a custom log using the new write function. Methods Logging methods define how a log item should be logged. The inbuilt File and Terminal logging methods are now reusable, with the ability to now more easily create custom logging methods using New-PodeLoggingMethod . The output from this function can be used when enabling or adding logging types, such as with Add-PodeLogger . Types Request and Error logging are inbuilt logging types that can be enabled using Enable-PodeRequestLogging and Enable-PodeErrorLogging . To create a custom logger you can use the Add-PodeLogger function. In each case, the -Method comes from using New-PodeLoggingMethod . Functions Enable-PodeRequestLogging Enable-PodeErrorLogging Add-PodeLogger Disable-PodeRequestLogging Disable-PodeErrorLogging Remove-PodeLogger Clear-PodeLoggers Writing Logs You can now write items from anywhere in your server to a custom logger, including the inbuilt Error log. Functions Write-PodeErrorLog Write-PodeLog Middleware ( Tutorial ) General Middleware has changed a fair bit, however, generally you'll just be using the Add-PodeMiddleware function with a -ScriptBlock which replaces the old middleware function. The only difference now is you're required to supply a -Name for the new Remove-PodeMiddleware function. There is a new New-PodeMiddleware function which wil return a valid middleware object to re-use - such as piping into Add-PodeMiddleware , or using as -Middleware for Routes. Functions Add-PodeMiddleware New-PodeMiddleware Remove-PodeMiddleware Clear-PodeMiddlewares Sessions ( Tutorial ) The session function has now been replaced by the new Enable-PodeSessionMiddleware function. With the new function, not only will it automatically enabled session middleware for you, but the old -Options hashtable has now been converted into proper function parameters. CSRF ( Tutorial ) The csrf function used to take actions that defined what it did, such as csrf token . Now, each of these actions has been split up into their own functions: Action Function csrf middleware Enable-PodeCsrfMiddleware csrf setup Initialize-PodeCsrf csrf check Get-PodeCsrfMiddleware csrf token New-PodeCsrfToken Note Similar to the old setup, the Initialize-PodeCsrf function must be called before you can use Get-PodeCsrfMiddleware or New-PodeCsrfToken . The Enable-PodeCsrfMiddleware does automatically call Initialize-PodeCsrf as well as configure CSRF globally. Importing Modules/Scripts ( Tutorial ) The functions to import and load Modules, Scripts and SnapIns have all changed to the following: Old Function import Import-PodeModule and Import-PodeSnapIn load Use-PodeScript Response Helpers The old response helpers have all been updated: Old Function engine Set-PodeViewEngine view Write-PodeViewResponse json Write-PodeJsonResponse text Write-PodeTextResponse xml Write-PodeXmlResponse csv Write-PodeCsvResponse html Write-PodeHtmlResponse file Write-PodeFileResponse attach Set-PodeResponseAttachment save Save-PodeRequestFile status Set-PodeResponseStatus include Use-PodePartialView redirect Move-PodeResponseUrl tcp Write-PodeTcpClient and Read-PodeTcpClient Routes ( Tutorial ) Normal Normal routes defined via route can now be done using Add-PodeRoute . The parameters are practically the same, such as -Method , -Path and -ScriptBlock . Functions Add-PodeRoute Remove-PodeRoute Clear-PodeRoutes Static Static routes that used to be setup using route static are now setup using the new Add-PodeStaticRoute . Functions Add-PodeStaticRoute Remove-PodeStaticRoute Clear-PodeStaticRoutes Schedules ( Tutorial ) Schedules haven't changed too much, though there are now some new functions to remove and clear schedules. The main one is that schedule has been changed to Add-PodeSchedule . Functions Add-PodeSchedule Remove-PodeSchedule Clear-PodeSchedules Server ( Tutorial ) The server function has had a fair overhaul. A lot of the parameters which were old/legacy have now been removed - such as -Port , -IP , and all of the -Http swicthes. The server function itself has been renamed to Start-PodeServer . State ( Tutorial ) The shared state use to be done via actions following the state function, such as state set . These actions are now the following functions: Action Function state set Set-PodeState state get Get-PodeState state remove Remove-PodeState state save Save-PodeState state restore Restore-PodeState state test Test-PodeState Timers ( Tutorial ) Timers haven't changed too much, though there are now some new functions to remove and clear timers. The main one is that timer has been changed to Add-PodeTimer . Functions Add-PodeTimer Remove-PodeTimer Clear-PodeTimers","title":"From v0.X to v1.X"},{"location":"Getting-Started/Migrating/0X-to-1X/#from-v0x-to-v1x","text":"This is a brief guide on migrating from Pode v0.X to Pode v1.X. In Pode v1.X all functions were refactored from short syntax (ie, route ), to PowerShell syntax (ie, Add-PodeRoute ). This means some of the older functions, such as header have now been split out into 4, or more, different functions. Also being changed is the pode.json configuration file, which is now a server.<env>.psd1 file. Note With all the functions being refactored, the old syntax of not needing to supply parameter names (and relying on position) is gone - for a lot of cases. It's now worth referencing parameters by name ( -Name , -ScriptBlock , etc.).","title":"From v0.X to v1.X"},{"location":"Getting-Started/Migrating/0X-to-1X/#authentication","text":"( Tutorial ) The old auth use has been split into two to make it easier - there are now functions that define authentication types (which retrieve credentials from the request object), and validators (which take the credentials and ensure the user is valid). For auth check , this has now been replaced with Get-PodeAuthMiddleware , and the hashtable is now function parameters.","title":"Authentication"},{"location":"Getting-Started/Migrating/0X-to-1X/#types","text":"Using inbuilt authentication types, and creating custom types, is now possible use the New-PodeAuthType function. This function will return valid Basic, Form, or Custom authentication types for use with Add-PodeAuth and Add-PodeAuthWindowsAd .","title":"Types"},{"location":"Getting-Started/Migrating/0X-to-1X/#validators","text":"Configuring an authentication validator is now a case of using the Add-PodeAuth function with a -Name and a -ScriptBlock . For inbuilt validators, like Windows AD, you can use Add-PodeAuthWindowsAd . In both cases, the -Type parameter comes from using New-PodeAuthType . Functions Add-PodeAuth Add-PodeAuthWindowsAd Remove-PodeAuth Clear-PodeAuth","title":"Validators"},{"location":"Getting-Started/Migrating/0X-to-1X/#cookies","text":"Cookies use to be done via actions following the cookie function, such as cookie set . These actions are now the following functions: Action Function cookie check Test-PodeCookieSigned cookie exists Test-PodeCookie cookie extend Update-PodeCookieExpiry cookie get Get-PodeCookie cookie remove Remove-PodeCookie cookie secrets Get-PodeCookieSecret and Set-PodeCookieSecret cookie set Set-PodeCookie","title":"Cookies"},{"location":"Getting-Started/Migrating/0X-to-1X/#configuration","text":"( Tutorial ) The config function has simply been renamed to Get-PodeConfig .","title":"Configuration"},{"location":"Getting-Started/Migrating/0X-to-1X/#psd1","text":"The pode.<env>.json configuration files have been changed from json to psd1 format, and their name changed from pode to server . The structure of the file name still uses the environment format: server.<env>.psd1 . The structure of the file itself is basically a PowerShell hashtable, so the following: { \"server\" : { \"fileMonitor\" : { \"enable\" : true } } } would now be: @{ Server = @{ FileMonitor = @{ Enable = $true } } }","title":"PSD1"},{"location":"Getting-Started/Migrating/0X-to-1X/#flash-messages","text":"( Tutorial ) Flash messages use to be done via actions following flash function, such as flash add . These actions are now the following functions: Action Function flash add Add-PodeFlashMessage flash clear Clear-PodeFlashMessages flash get Get-PodeFlashMessage flash keys Get-PodeFlashMessageNames flash remove Remove-PodeFlashMessage flash test Test-PodeFlashMessage","title":"Flash Messages"},{"location":"Getting-Started/Migrating/0X-to-1X/#gui","text":"( Tutorial ) The gui function use to take a Name with a hashtable of options. This function has now been renamed to Show-PodeGui , and the options are all now function parameters.","title":"GUI"},{"location":"Getting-Started/Migrating/0X-to-1X/#handlers","text":"( Tutorial ) The biggest change the Handlers is that you can now create multiple handlers for each of SMTP, TCP and Service - rather than just one. With this, the new Add-PodeHandler requires a -Name to be supplied. Functions Add-PodeHandler Remove-PodeHandler Clear-PodeHandlers","title":"Handlers"},{"location":"Getting-Started/Migrating/0X-to-1X/#headers","text":"Headers use to be done via actions following the header function, such as header add . These actions are now the following functions: Action Function header add Add-PodeHeader header get Get-PodeHeader header set Set-PodeHeader header exists Test-PodeHeader","title":"Headers"},{"location":"Getting-Started/Migrating/0X-to-1X/#logging","text":"( Tutorial ) Logging in Pode has had by far the biggest refactor, so big it's completely different - so it may just be worth looking at the tutorial. The old logging used to only support logging Requests, whereas now it can log Requests, Errors, and anything else you feel like! You can also write to a custom log using the new write function.","title":"Logging"},{"location":"Getting-Started/Migrating/0X-to-1X/#methods","text":"Logging methods define how a log item should be logged. The inbuilt File and Terminal logging methods are now reusable, with the ability to now more easily create custom logging methods using New-PodeLoggingMethod . The output from this function can be used when enabling or adding logging types, such as with Add-PodeLogger .","title":"Methods"},{"location":"Getting-Started/Migrating/0X-to-1X/#types_1","text":"Request and Error logging are inbuilt logging types that can be enabled using Enable-PodeRequestLogging and Enable-PodeErrorLogging . To create a custom logger you can use the Add-PodeLogger function. In each case, the -Method comes from using New-PodeLoggingMethod . Functions Enable-PodeRequestLogging Enable-PodeErrorLogging Add-PodeLogger Disable-PodeRequestLogging Disable-PodeErrorLogging Remove-PodeLogger Clear-PodeLoggers","title":"Types"},{"location":"Getting-Started/Migrating/0X-to-1X/#writing-logs","text":"You can now write items from anywhere in your server to a custom logger, including the inbuilt Error log. Functions Write-PodeErrorLog Write-PodeLog","title":"Writing Logs"},{"location":"Getting-Started/Migrating/0X-to-1X/#middleware","text":"( Tutorial )","title":"Middleware"},{"location":"Getting-Started/Migrating/0X-to-1X/#general","text":"Middleware has changed a fair bit, however, generally you'll just be using the Add-PodeMiddleware function with a -ScriptBlock which replaces the old middleware function. The only difference now is you're required to supply a -Name for the new Remove-PodeMiddleware function. There is a new New-PodeMiddleware function which wil return a valid middleware object to re-use - such as piping into Add-PodeMiddleware , or using as -Middleware for Routes. Functions Add-PodeMiddleware New-PodeMiddleware Remove-PodeMiddleware Clear-PodeMiddlewares","title":"General"},{"location":"Getting-Started/Migrating/0X-to-1X/#sessions","text":"( Tutorial ) The session function has now been replaced by the new Enable-PodeSessionMiddleware function. With the new function, not only will it automatically enabled session middleware for you, but the old -Options hashtable has now been converted into proper function parameters.","title":"Sessions"},{"location":"Getting-Started/Migrating/0X-to-1X/#csrf","text":"( Tutorial ) The csrf function used to take actions that defined what it did, such as csrf token . Now, each of these actions has been split up into their own functions: Action Function csrf middleware Enable-PodeCsrfMiddleware csrf setup Initialize-PodeCsrf csrf check Get-PodeCsrfMiddleware csrf token New-PodeCsrfToken Note Similar to the old setup, the Initialize-PodeCsrf function must be called before you can use Get-PodeCsrfMiddleware or New-PodeCsrfToken . The Enable-PodeCsrfMiddleware does automatically call Initialize-PodeCsrf as well as configure CSRF globally.","title":"CSRF"},{"location":"Getting-Started/Migrating/0X-to-1X/#importing-modulesscripts","text":"( Tutorial ) The functions to import and load Modules, Scripts and SnapIns have all changed to the following: Old Function import Import-PodeModule and Import-PodeSnapIn load Use-PodeScript","title":"Importing Modules/Scripts"},{"location":"Getting-Started/Migrating/0X-to-1X/#response-helpers","text":"The old response helpers have all been updated: Old Function engine Set-PodeViewEngine view Write-PodeViewResponse json Write-PodeJsonResponse text Write-PodeTextResponse xml Write-PodeXmlResponse csv Write-PodeCsvResponse html Write-PodeHtmlResponse file Write-PodeFileResponse attach Set-PodeResponseAttachment save Save-PodeRequestFile status Set-PodeResponseStatus include Use-PodePartialView redirect Move-PodeResponseUrl tcp Write-PodeTcpClient and Read-PodeTcpClient","title":"Response Helpers"},{"location":"Getting-Started/Migrating/0X-to-1X/#routes","text":"( Tutorial )","title":"Routes"},{"location":"Getting-Started/Migrating/0X-to-1X/#normal","text":"Normal routes defined via route can now be done using Add-PodeRoute . The parameters are practically the same, such as -Method , -Path and -ScriptBlock . Functions Add-PodeRoute Remove-PodeRoute Clear-PodeRoutes","title":"Normal"},{"location":"Getting-Started/Migrating/0X-to-1X/#static","text":"Static routes that used to be setup using route static are now setup using the new Add-PodeStaticRoute . Functions Add-PodeStaticRoute Remove-PodeStaticRoute Clear-PodeStaticRoutes","title":"Static"},{"location":"Getting-Started/Migrating/0X-to-1X/#schedules","text":"( Tutorial ) Schedules haven't changed too much, though there are now some new functions to remove and clear schedules. The main one is that schedule has been changed to Add-PodeSchedule . Functions Add-PodeSchedule Remove-PodeSchedule Clear-PodeSchedules","title":"Schedules"},{"location":"Getting-Started/Migrating/0X-to-1X/#server","text":"( Tutorial ) The server function has had a fair overhaul. A lot of the parameters which were old/legacy have now been removed - such as -Port , -IP , and all of the -Http swicthes. The server function itself has been renamed to Start-PodeServer .","title":"Server"},{"location":"Getting-Started/Migrating/0X-to-1X/#state","text":"( Tutorial ) The shared state use to be done via actions following the state function, such as state set . These actions are now the following functions: Action Function state set Set-PodeState state get Get-PodeState state remove Remove-PodeState state save Save-PodeState state restore Restore-PodeState state test Test-PodeState","title":"State"},{"location":"Getting-Started/Migrating/0X-to-1X/#timers","text":"( Tutorial ) Timers haven't changed too much, though there are now some new functions to remove and clear timers. The main one is that timer has been changed to Add-PodeTimer . Functions Add-PodeTimer Remove-PodeTimer Clear-PodeTimers","title":"Timers"},{"location":"Getting-Started/Migrating/1X-to-2X/","text":"From v1.X to v2.X This is a brief guide on migrating from Pode v1.X to Pode v2.X. In Pode v2.X the Server got the biggest overhaul with the dropping of HttpListener. Server If you were previously specifying -Type Pode on your Start-PodeServer , then you no longer need to - all servers now default to using Pode's new .NET Core socket listener. Furthermore, the -Type parameter has been renamed to -ServerlessType . Configuration Settings that use to be under Server > Pode are now just under Server . For example, SSL protocols have moved from: @{ Server = @{ Pode = @{ Ssl = @{ Protocols = @( 'TLS' , 'TLS11' , 'TLS12' ) } } } } to: @{ Server = @{ Ssl = @{ Protocols = @( 'TLS' , 'TLS11' , 'TLS12' ) } } } Web Event Originally the Web Event object was the first parameter supplied to the ScriptBlocks of Routes, Middleware, and Endware. These already all had access to the main $WebEvent object, including Authentication, without the need to supply it as a parameter. In 2.0, this first event parameter has been dropped, and you should now use the main $WebEvent object. So from the following: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { param ( $e ) Write-PodeJsonResponse -Value @{ Result = $e . Data [ 'value' ]} } To this: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeJsonResponse -Value @{ Result = $WebEvent . Data [ 'value' ]} } This also applies to Middleware, Endware, and Authentication. Endpoints With the dropping of HttpListener, the -Certificate parameter is now the old -CertificateFile parameter. The -RawCertificate parameter has been renamed, and it now called -X509Certificate . The -CertificateThumbprint parameter remains the same, and only works on Windows. The -Certificate parameter is now the -CertificateName parameter, and also only works on Windows. There is a new -Hostname parameter to specify a hostname for your endpoint. Using -Address still works for ease, and the IP for the hostname by default is 127.0.0.1 . If you used a host file/DNS entry for your hostname address, then supplying -LookupHostname will source the IP for your hostname appropriately. Authentication Authentication underwent a hefty change in 2.0, with Get-PodeAuthMiddleware being removed. First, New-PodeAuthType has been renamed to New-PodeAuthScheme - with its -Scheme parameter also being renamed to -Type . The old -AutoLogin (now just -Login ), and -Logout switches, from Get-PodeAuthMiddleware , have been moved onto the Add-PodeRoute function. The Add-PodeRoute function now also has a new -Authentication parameter, which accepts the name supplied to Add-PodeAuth ; this will automatically setup authentication middleware for that route. The old -Sessionless , -FailureUrl , -FailureMessage and -SuccessUrl parameters, from Get-PodeAuthMiddleware , have all been moved onto the Add-PodeAuth function. The old -EnableFlash switch has been removed (it's just enabled by default if sessions are enabled). There's also a new Add-PodeAuthMiddleware function, which will let you setup global authentication middleware. Furthermore, the OpenAPI functions for Set-PodeOAAuth and Set-PodeOAGlobalAuth have been removed. The new Add-PodeAuthMiddleware function and -Authentication parameter on Add-PodeRoute set these up for you automatically in OpenAPI. On Add-PodeAuth , Add-PodeAuthWindowsAd , and Add-PodeAuthUserFile the -Type parameter has been renamed to -Scheme . If you have always piped New-PodeAuthScheme (formally New-PodeAuthType ) into them, then this won't affect you. Endpoint and Protocol On the following functions: Add-PodeRoute Add-PodeStaticRoute Get-PodeRoute Get-PodeStaticRoute Remove-PodeRoute Remove-PodeStaticRoute The -Endpoint and -Protocol parameters have been removed in favour of -EndpointName . Further to this, if no -Name is supplied to Add-PodeEndpoint then a random GUID is used instead. To get the name back you can use -PassThru for the endpoint to be returned. Scoping and Auto-Importing The 2.0 release sees a big change to some scoping issues in Pode, around modules/snapins/functions and variables. For more information, see the new page on Scoping . Modules/Snapins You can now use the normal Import-Module , or Add-PSSnapin , and Pode will automatically import all loaded modules/snapins into its runspaces: Import-Module SomeModule Start-PodeServer -ScriptBlock { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Use-SomeModuleFunction } } Import-PodeModule still exists, as it supports the use of local modules in ps_modules . The only difference is that the -Now switch has been removed, and you can now use Import-PodeModule outside of the Start-PodeServer block. Import-PodeSnapin also still exists, and has the same differences as Import-PodeModule above. To disable the auto-import, you can do so via the server.psd1 configuration file. You can also set auto-imported modules to only used exported ones via Export-PodeModule / Export-PodeSnapin . @{ Server = @{ AutoImport = @{ Modules = @{ Enable = $false ExportOnly = $true } Snapins = @{ Enable = $false ExportOnly = $true } } } } Functions Local functions are now automatically imported into Pode's runspaces! This makes it a little simpler to use quick functions in Pode: function Write-HelloResponse { Write-PodeJsonResponse -Value @{ Message = 'Hello!' } } Start-PodeServer -ScriptBlock { function Write-ByeResponse { Write-PodeJsonResponse -Value @{ Message = 'Bye!' } } Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/hello' -ScriptBlock { Write-HelloResponse } Add-PodeRoute -Method Get -Path '/bye' -ScriptBlock { Write-ByeResponse } } If you store Routes/etc in other files, you can also have local functions in these files as well. However, for Pode to import them you must use Use-PodeScript to dot-source the scripts - this will trigger Pode to scan the file for functions. To disable the auto-import, you can do so via the server.psd1 configuration file. You can also set auto-imported modules to only used exported ones via Export-PodeFunction . @{ Server = @{ AutoImport = @{ Functions = @{ Enable = $false ExportOnly = $true } } } } Variables You can now define local variables, and use the $using: syntax in almost all -ScriptBlock parameters, like: Routes Middleware Authentication Logging Endware Timers Schedules Handlers This allows you to do something like: $outer_msg = 'Hello, there' Start-PodeServer -ScriptBlock { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http $inner_msg = 'General Kenobi' Add-PodeRoute -Method Get -Path '/random' -ScriptBlock { Write-PodeJsonResponse -Value @{ Message = \" $( $using : outer_msg ) ... $( $using : inner_msg ) \" } } } For more information, see the new page on Scoping . Test Functions If you're using any of the following: Test-IsEmpty Test-IsUnix Test-IsWindows Test-IsPSCore these have been updated to: Test-PodeIsEmpty Test-PodeIsUnix Test-PodeIsWindows Test-PodeIsPSCore","title":"From v1.X to v2.X"},{"location":"Getting-Started/Migrating/1X-to-2X/#from-v1x-to-v2x","text":"This is a brief guide on migrating from Pode v1.X to Pode v2.X. In Pode v2.X the Server got the biggest overhaul with the dropping of HttpListener.","title":"From v1.X to v2.X"},{"location":"Getting-Started/Migrating/1X-to-2X/#server","text":"If you were previously specifying -Type Pode on your Start-PodeServer , then you no longer need to - all servers now default to using Pode's new .NET Core socket listener. Furthermore, the -Type parameter has been renamed to -ServerlessType .","title":"Server"},{"location":"Getting-Started/Migrating/1X-to-2X/#configuration","text":"Settings that use to be under Server > Pode are now just under Server . For example, SSL protocols have moved from: @{ Server = @{ Pode = @{ Ssl = @{ Protocols = @( 'TLS' , 'TLS11' , 'TLS12' ) } } } } to: @{ Server = @{ Ssl = @{ Protocols = @( 'TLS' , 'TLS11' , 'TLS12' ) } } }","title":"Configuration"},{"location":"Getting-Started/Migrating/1X-to-2X/#web-event","text":"Originally the Web Event object was the first parameter supplied to the ScriptBlocks of Routes, Middleware, and Endware. These already all had access to the main $WebEvent object, including Authentication, without the need to supply it as a parameter. In 2.0, this first event parameter has been dropped, and you should now use the main $WebEvent object. So from the following: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { param ( $e ) Write-PodeJsonResponse -Value @{ Result = $e . Data [ 'value' ]} } To this: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeJsonResponse -Value @{ Result = $WebEvent . Data [ 'value' ]} } This also applies to Middleware, Endware, and Authentication.","title":"Web Event"},{"location":"Getting-Started/Migrating/1X-to-2X/#endpoints","text":"With the dropping of HttpListener, the -Certificate parameter is now the old -CertificateFile parameter. The -RawCertificate parameter has been renamed, and it now called -X509Certificate . The -CertificateThumbprint parameter remains the same, and only works on Windows. The -Certificate parameter is now the -CertificateName parameter, and also only works on Windows. There is a new -Hostname parameter to specify a hostname for your endpoint. Using -Address still works for ease, and the IP for the hostname by default is 127.0.0.1 . If you used a host file/DNS entry for your hostname address, then supplying -LookupHostname will source the IP for your hostname appropriately.","title":"Endpoints"},{"location":"Getting-Started/Migrating/1X-to-2X/#authentication","text":"Authentication underwent a hefty change in 2.0, with Get-PodeAuthMiddleware being removed. First, New-PodeAuthType has been renamed to New-PodeAuthScheme - with its -Scheme parameter also being renamed to -Type . The old -AutoLogin (now just -Login ), and -Logout switches, from Get-PodeAuthMiddleware , have been moved onto the Add-PodeRoute function. The Add-PodeRoute function now also has a new -Authentication parameter, which accepts the name supplied to Add-PodeAuth ; this will automatically setup authentication middleware for that route. The old -Sessionless , -FailureUrl , -FailureMessage and -SuccessUrl parameters, from Get-PodeAuthMiddleware , have all been moved onto the Add-PodeAuth function. The old -EnableFlash switch has been removed (it's just enabled by default if sessions are enabled). There's also a new Add-PodeAuthMiddleware function, which will let you setup global authentication middleware. Furthermore, the OpenAPI functions for Set-PodeOAAuth and Set-PodeOAGlobalAuth have been removed. The new Add-PodeAuthMiddleware function and -Authentication parameter on Add-PodeRoute set these up for you automatically in OpenAPI. On Add-PodeAuth , Add-PodeAuthWindowsAd , and Add-PodeAuthUserFile the -Type parameter has been renamed to -Scheme . If you have always piped New-PodeAuthScheme (formally New-PodeAuthType ) into them, then this won't affect you.","title":"Authentication"},{"location":"Getting-Started/Migrating/1X-to-2X/#endpoint-and-protocol","text":"On the following functions: Add-PodeRoute Add-PodeStaticRoute Get-PodeRoute Get-PodeStaticRoute Remove-PodeRoute Remove-PodeStaticRoute The -Endpoint and -Protocol parameters have been removed in favour of -EndpointName . Further to this, if no -Name is supplied to Add-PodeEndpoint then a random GUID is used instead. To get the name back you can use -PassThru for the endpoint to be returned.","title":"Endpoint and Protocol"},{"location":"Getting-Started/Migrating/1X-to-2X/#scoping-and-auto-importing","text":"The 2.0 release sees a big change to some scoping issues in Pode, around modules/snapins/functions and variables. For more information, see the new page on Scoping .","title":"Scoping and Auto-Importing"},{"location":"Getting-Started/Migrating/1X-to-2X/#modulessnapins","text":"You can now use the normal Import-Module , or Add-PSSnapin , and Pode will automatically import all loaded modules/snapins into its runspaces: Import-Module SomeModule Start-PodeServer -ScriptBlock { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Use-SomeModuleFunction } } Import-PodeModule still exists, as it supports the use of local modules in ps_modules . The only difference is that the -Now switch has been removed, and you can now use Import-PodeModule outside of the Start-PodeServer block. Import-PodeSnapin also still exists, and has the same differences as Import-PodeModule above. To disable the auto-import, you can do so via the server.psd1 configuration file. You can also set auto-imported modules to only used exported ones via Export-PodeModule / Export-PodeSnapin . @{ Server = @{ AutoImport = @{ Modules = @{ Enable = $false ExportOnly = $true } Snapins = @{ Enable = $false ExportOnly = $true } } } }","title":"Modules/Snapins"},{"location":"Getting-Started/Migrating/1X-to-2X/#functions","text":"Local functions are now automatically imported into Pode's runspaces! This makes it a little simpler to use quick functions in Pode: function Write-HelloResponse { Write-PodeJsonResponse -Value @{ Message = 'Hello!' } } Start-PodeServer -ScriptBlock { function Write-ByeResponse { Write-PodeJsonResponse -Value @{ Message = 'Bye!' } } Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/hello' -ScriptBlock { Write-HelloResponse } Add-PodeRoute -Method Get -Path '/bye' -ScriptBlock { Write-ByeResponse } } If you store Routes/etc in other files, you can also have local functions in these files as well. However, for Pode to import them you must use Use-PodeScript to dot-source the scripts - this will trigger Pode to scan the file for functions. To disable the auto-import, you can do so via the server.psd1 configuration file. You can also set auto-imported modules to only used exported ones via Export-PodeFunction . @{ Server = @{ AutoImport = @{ Functions = @{ Enable = $false ExportOnly = $true } } } }","title":"Functions"},{"location":"Getting-Started/Migrating/1X-to-2X/#variables","text":"You can now define local variables, and use the $using: syntax in almost all -ScriptBlock parameters, like: Routes Middleware Authentication Logging Endware Timers Schedules Handlers This allows you to do something like: $outer_msg = 'Hello, there' Start-PodeServer -ScriptBlock { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http $inner_msg = 'General Kenobi' Add-PodeRoute -Method Get -Path '/random' -ScriptBlock { Write-PodeJsonResponse -Value @{ Message = \" $( $using : outer_msg ) ... $( $using : inner_msg ) \" } } } For more information, see the new page on Scoping .","title":"Variables"},{"location":"Getting-Started/Migrating/1X-to-2X/#test-functions","text":"If you're using any of the following: Test-IsEmpty Test-IsUnix Test-IsWindows Test-IsPSCore these have been updated to: Test-PodeIsEmpty Test-PodeIsUnix Test-PodeIsWindows Test-PodeIsPSCore","title":"Test Functions"},{"location":"Hosting/AwsLambda/","text":"AWS Lambda Pode has support for being used within AWS Lambda PowerShell Functions, helping you with routing and responses, but also leveraging middleware, authentication, and other features of Pode. Overview When you use Pode in a serverless environment, the server logic is run once, and the route logic immediately parsed; any response is returned, and the server disposed. Unlike the normal web-server logic of Pode, when in serverless the server logic doesn't continually loop. Usage Module Your PowerShell Function script will need to have the Pode module imported, so it can be used. To do this, the following line is required at the top of your script (as well as the normal AWS module): #Requires -Modules @{ModuleName='AWSPowerShell.NetCore';ModuleVersion='3.3.509.0'} #Requires -Modules @{ModuleName='Pode';ModuleVersion='<version>'} Template One Function can accept many routes if you setup the template. Your SAM/serverless YAML template could look as follows: AWSTemplateFormatVersion : '2010-09-09' Transform : 'AWS::Serverless-2016-10-31' Resources : ExampleFunction : Type : 'AWS::Serverless::Function' Properties : Handler : 'Example::Example.Bootstrap::ExecuteFunction' Runtime : dotnetcore2.1 CodeUri : Example.zip Timeout : 60 MemorySize : 256 Events : Example : Type : Api Properties : Path : /{proxy+} Method : get Here, the /{proxy+} will enable one Function for all routes - which can be controlled via Pode within your Function. The Server With the above being done, your Pode server can be created as follows. The $LambdaInput is a parameter supplied to your Function by AWS: Start-PodeServer -Request $LambdaInput -ServerlessType AwsLambda { # logic } Routing Let's say for your Function you have it setup for multiple routes, and you've enabled the GET method. The following script would be a simple example of using Pode to aid with routing in this Function: #Requires -Modules @{ModuleName='AWSPowerShell.NetCore';ModuleVersion='3.3.509.0'} #Requires -Modules @{ModuleName='Pode';ModuleVersion='<version>'} Start-PodeServer -Request $LambdaInput -ServerlessType AwsLambda { # get some user data Add-PodeRoute -Method Get -Path '/users' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'Users' = @() } } # get some messages data Add-PodeRoute -Method Get -Path '/message' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'UserId' = 123 ; 'Messages' = @() } } } Websites You can render websites using Pode as well. To do this in Lambda Functions you'll need to upload your website files to some S3 bucket. In here you can place your normal /views , /public and /errors directories - as well as your server.psd1 file. Then within your Function script, you need to read in the data from your S3 bucket to some path your Function can access. Once read in, you need to then reference this directory as the root path for your server: #Requires -Modules @{ModuleName='AWSPowerShell.NetCore';ModuleVersion='3.3.509.0'} #Requires -Modules @{ModuleName='Pode';ModuleVersion='<version>'} Read-S3Object -BucketName '<bucket-name>' -KeyPrefix '<dir-name>' -Folder '/tmp/www' | Out-Null Start-PodeServer -Request $LambdaInput -ServerlessType AwsLambda -RootPath '/tmp/www' { # set your engine renderer Set-PodeViewEngine -Type Pode # get route for your 'index.pode' view Add-PodeRoute -Method Get -Path '/home' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } Static Content Unlike Azure Functions, static content in AWS Functions can be served up in the normal way - assuming your function can receive multiple routes. For example, if you have a CSS stylesheet at /tmp/www/styles/main.css.pode , then your index.pode view would get this as such: < html > < head > < title > Example </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css.pode\" > </ head > < body > < img src = \"/SomeImage.jpg\" /> </ body > </ html > Responses Pode will handle returning an appropriate response object for you, dealing with the Status Code, Body, Headers, etc. There's no need to return the normal hashtable from your Function. Unsupported Features Unfortunately not all the features of Pode can be used within a serverless environment. Below is a list of features in Pode that cannot be used when running in a serverless context: Access Middleware Limit Middleware Opening your server as a GUI TCP/Service Handler logic Listening on endpoints (as AWS Lambda does this for us) Schedules Timers File Monitoring Server Restarting","title":"AWS Lambda"},{"location":"Hosting/AwsLambda/#aws-lambda","text":"Pode has support for being used within AWS Lambda PowerShell Functions, helping you with routing and responses, but also leveraging middleware, authentication, and other features of Pode.","title":"AWS Lambda"},{"location":"Hosting/AwsLambda/#overview","text":"When you use Pode in a serverless environment, the server logic is run once, and the route logic immediately parsed; any response is returned, and the server disposed. Unlike the normal web-server logic of Pode, when in serverless the server logic doesn't continually loop.","title":"Overview"},{"location":"Hosting/AwsLambda/#usage","text":"","title":"Usage"},{"location":"Hosting/AwsLambda/#module","text":"Your PowerShell Function script will need to have the Pode module imported, so it can be used. To do this, the following line is required at the top of your script (as well as the normal AWS module): #Requires -Modules @{ModuleName='AWSPowerShell.NetCore';ModuleVersion='3.3.509.0'} #Requires -Modules @{ModuleName='Pode';ModuleVersion='<version>'}","title":"Module"},{"location":"Hosting/AwsLambda/#template","text":"One Function can accept many routes if you setup the template. Your SAM/serverless YAML template could look as follows: AWSTemplateFormatVersion : '2010-09-09' Transform : 'AWS::Serverless-2016-10-31' Resources : ExampleFunction : Type : 'AWS::Serverless::Function' Properties : Handler : 'Example::Example.Bootstrap::ExecuteFunction' Runtime : dotnetcore2.1 CodeUri : Example.zip Timeout : 60 MemorySize : 256 Events : Example : Type : Api Properties : Path : /{proxy+} Method : get Here, the /{proxy+} will enable one Function for all routes - which can be controlled via Pode within your Function.","title":"Template"},{"location":"Hosting/AwsLambda/#the-server","text":"With the above being done, your Pode server can be created as follows. The $LambdaInput is a parameter supplied to your Function by AWS: Start-PodeServer -Request $LambdaInput -ServerlessType AwsLambda { # logic }","title":"The Server"},{"location":"Hosting/AwsLambda/#routing","text":"Let's say for your Function you have it setup for multiple routes, and you've enabled the GET method. The following script would be a simple example of using Pode to aid with routing in this Function: #Requires -Modules @{ModuleName='AWSPowerShell.NetCore';ModuleVersion='3.3.509.0'} #Requires -Modules @{ModuleName='Pode';ModuleVersion='<version>'} Start-PodeServer -Request $LambdaInput -ServerlessType AwsLambda { # get some user data Add-PodeRoute -Method Get -Path '/users' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'Users' = @() } } # get some messages data Add-PodeRoute -Method Get -Path '/message' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'UserId' = 123 ; 'Messages' = @() } } }","title":"Routing"},{"location":"Hosting/AwsLambda/#websites","text":"You can render websites using Pode as well. To do this in Lambda Functions you'll need to upload your website files to some S3 bucket. In here you can place your normal /views , /public and /errors directories - as well as your server.psd1 file. Then within your Function script, you need to read in the data from your S3 bucket to some path your Function can access. Once read in, you need to then reference this directory as the root path for your server: #Requires -Modules @{ModuleName='AWSPowerShell.NetCore';ModuleVersion='3.3.509.0'} #Requires -Modules @{ModuleName='Pode';ModuleVersion='<version>'} Read-S3Object -BucketName '<bucket-name>' -KeyPrefix '<dir-name>' -Folder '/tmp/www' | Out-Null Start-PodeServer -Request $LambdaInput -ServerlessType AwsLambda -RootPath '/tmp/www' { # set your engine renderer Set-PodeViewEngine -Type Pode # get route for your 'index.pode' view Add-PodeRoute -Method Get -Path '/home' -ScriptBlock { Write-PodeViewResponse -Path 'index' } }","title":"Websites"},{"location":"Hosting/AwsLambda/#static-content","text":"Unlike Azure Functions, static content in AWS Functions can be served up in the normal way - assuming your function can receive multiple routes. For example, if you have a CSS stylesheet at /tmp/www/styles/main.css.pode , then your index.pode view would get this as such: < html > < head > < title > Example </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css.pode\" > </ head > < body > < img src = \"/SomeImage.jpg\" /> </ body > </ html >","title":"Static Content"},{"location":"Hosting/AwsLambda/#responses","text":"Pode will handle returning an appropriate response object for you, dealing with the Status Code, Body, Headers, etc. There's no need to return the normal hashtable from your Function.","title":"Responses"},{"location":"Hosting/AwsLambda/#unsupported-features","text":"Unfortunately not all the features of Pode can be used within a serverless environment. Below is a list of features in Pode that cannot be used when running in a serverless context: Access Middleware Limit Middleware Opening your server as a GUI TCP/Service Handler logic Listening on endpoints (as AWS Lambda does this for us) Schedules Timers File Monitoring Server Restarting","title":"Unsupported Features"},{"location":"Hosting/AzureFunctions/","text":"Azure Functions Pode has support for being used within HTTP Azure PowerShell Functions, helping you with routing and responses, but also leveraging middleware, authentication, and other features of Pode. Overview When you use Pode in a serverless environment, the server logic is run once, and the route logic immediately parsed; any response is returned, and the server disposed. Unlike the normal web-server logic of Pode, when in serverless the server logic doesn't continually loop. Setup First, you'll need to have the Pode module saved within your Azure Function. At the root of your Azure PowerShell Functions run the following: Save-Module -Name Pode -Path ./ Modules / -Force With this, the Pode module will be automatically loaded by Azure for your Functions. Usage Parameters Your PowerShell Function script has only one requirement, you need to have the $TriggerMetadata passed into your script: param ( $Request , $TriggerMetadata ) The metadata also contains the Request object, as well as other information required by Pode. Your Function's function.json will also need to contain at a minimum the Request and Response: { \"bindings\" : [ { \"authLevel\" : \"<anything>\" , \"type\" : \"httpTrigger\" , \"direction\" : \"in\" , \"name\" : \"Request\" , \"methods\" : [ \"<allowed-methods>\" ] }, { \"type\" : \"http\" , \"direction\" : \"out\" , \"name\" : \"Response\" } ] } The Server With the above being done, your Pode server can be created as follows: Start-PodeServer -Request $TriggerMetadata -ServerlessType AzureFunctions { # logic } Routing Typically your Azure Function will be located at the /api/<name> endpoint. Let's say you have some Function called MyFunc , and within its functions.json file you've enabled GET , POST , and PUT . The following run.ps1 would be a simple example of using Pode to aid with routing in this Function: param ( $Request , $TriggerMetadata ) $endpoint = '/api/MyFunc' Start-PodeServer -Request $TriggerMetadata -ServerlessType AzureFunctions { # get route that can return data Add-PodeRoute -Method Get -Path $endpoint -ScriptBlock { Write-PodeJsonResponse -Value @{ 'Data' = 'some random data' } } # post route to create some data Add-PodeRoute -Method Post -Path $endpoint -ScriptBlock { New-Thing -Name $WebEvent . Data [ 'Name' ] } # put route to update some data Add-PodeRoute -Method Put -Path $endpoint -ScriptBlock { Update-Thing -Name $WebEvent . Data [ 'Name' ] } } Websites You can render websites using Pode as well. Let's say you create a /www directory at the root of your project, within here you can place your normal /views , /public and /errors directories - as well as your server.psd1 file. All you need to do then is reference this directory as the root path for your server: param ( $Request , $TriggerMetadata ) $endpoint = '/api/MyFunc' Start-PodeServer -Request $TriggerMetadata -ServerlessType AzureFunctions -RootPath '../www' { # set your engine renderer Set-PodeViewEngine -Type Pode # get route for your 'index.pode' view Add-PodeRoute -Method Get -Path $endpoint -ScriptBlock { Write-PodeViewResponse -Path 'index' } } Static Content Serving up static content in Azure Functions is a little weird, as you have to reference the main endpoint but with a query of static-file and then the path. For example, if you have a CSS stylesheet at /www/styles/main.css.pode , then your index.pode view would get this as such: < html > < head > < title > Example </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/api/MyFunc?static-file=/styles/main.css.pode\" > </ head > < body > < img src = \"/api/MyFunc?static-file=/SomeImage.jpg\" /> </ body > </ html > Responses You've likely noticed that no reference to Azure PowerShell Function's Push-OutputBinding was made. This is because Pode will handle all of the responses for you, from the Status Code and Body, to Headers and Cookies. Unsupported Features Unfortunately not all the features of Pode can be used within a serverless environment. Below is a list of features in Pode that cannot be used when running in a serverless context: Access Middleware Limit Middleware Opening your server as a GUI TCP/Service Handler logic Listening on endpoints (as Azure Functions does this for us) Schedules Timers File Monitoring Server Restarting","title":"Azure Functions"},{"location":"Hosting/AzureFunctions/#azure-functions","text":"Pode has support for being used within HTTP Azure PowerShell Functions, helping you with routing and responses, but also leveraging middleware, authentication, and other features of Pode.","title":"Azure Functions"},{"location":"Hosting/AzureFunctions/#overview","text":"When you use Pode in a serverless environment, the server logic is run once, and the route logic immediately parsed; any response is returned, and the server disposed. Unlike the normal web-server logic of Pode, when in serverless the server logic doesn't continually loop.","title":"Overview"},{"location":"Hosting/AzureFunctions/#setup","text":"First, you'll need to have the Pode module saved within your Azure Function. At the root of your Azure PowerShell Functions run the following: Save-Module -Name Pode -Path ./ Modules / -Force With this, the Pode module will be automatically loaded by Azure for your Functions.","title":"Setup"},{"location":"Hosting/AzureFunctions/#usage","text":"","title":"Usage"},{"location":"Hosting/AzureFunctions/#parameters","text":"Your PowerShell Function script has only one requirement, you need to have the $TriggerMetadata passed into your script: param ( $Request , $TriggerMetadata ) The metadata also contains the Request object, as well as other information required by Pode. Your Function's function.json will also need to contain at a minimum the Request and Response: { \"bindings\" : [ { \"authLevel\" : \"<anything>\" , \"type\" : \"httpTrigger\" , \"direction\" : \"in\" , \"name\" : \"Request\" , \"methods\" : [ \"<allowed-methods>\" ] }, { \"type\" : \"http\" , \"direction\" : \"out\" , \"name\" : \"Response\" } ] }","title":"Parameters"},{"location":"Hosting/AzureFunctions/#the-server","text":"With the above being done, your Pode server can be created as follows: Start-PodeServer -Request $TriggerMetadata -ServerlessType AzureFunctions { # logic }","title":"The Server"},{"location":"Hosting/AzureFunctions/#routing","text":"Typically your Azure Function will be located at the /api/<name> endpoint. Let's say you have some Function called MyFunc , and within its functions.json file you've enabled GET , POST , and PUT . The following run.ps1 would be a simple example of using Pode to aid with routing in this Function: param ( $Request , $TriggerMetadata ) $endpoint = '/api/MyFunc' Start-PodeServer -Request $TriggerMetadata -ServerlessType AzureFunctions { # get route that can return data Add-PodeRoute -Method Get -Path $endpoint -ScriptBlock { Write-PodeJsonResponse -Value @{ 'Data' = 'some random data' } } # post route to create some data Add-PodeRoute -Method Post -Path $endpoint -ScriptBlock { New-Thing -Name $WebEvent . Data [ 'Name' ] } # put route to update some data Add-PodeRoute -Method Put -Path $endpoint -ScriptBlock { Update-Thing -Name $WebEvent . Data [ 'Name' ] } }","title":"Routing"},{"location":"Hosting/AzureFunctions/#websites","text":"You can render websites using Pode as well. Let's say you create a /www directory at the root of your project, within here you can place your normal /views , /public and /errors directories - as well as your server.psd1 file. All you need to do then is reference this directory as the root path for your server: param ( $Request , $TriggerMetadata ) $endpoint = '/api/MyFunc' Start-PodeServer -Request $TriggerMetadata -ServerlessType AzureFunctions -RootPath '../www' { # set your engine renderer Set-PodeViewEngine -Type Pode # get route for your 'index.pode' view Add-PodeRoute -Method Get -Path $endpoint -ScriptBlock { Write-PodeViewResponse -Path 'index' } }","title":"Websites"},{"location":"Hosting/AzureFunctions/#static-content","text":"Serving up static content in Azure Functions is a little weird, as you have to reference the main endpoint but with a query of static-file and then the path. For example, if you have a CSS stylesheet at /www/styles/main.css.pode , then your index.pode view would get this as such: < html > < head > < title > Example </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/api/MyFunc?static-file=/styles/main.css.pode\" > </ head > < body > < img src = \"/api/MyFunc?static-file=/SomeImage.jpg\" /> </ body > </ html >","title":"Static Content"},{"location":"Hosting/AzureFunctions/#responses","text":"You've likely noticed that no reference to Azure PowerShell Function's Push-OutputBinding was made. This is because Pode will handle all of the responses for you, from the Status Code and Body, to Headers and Cookies.","title":"Responses"},{"location":"Hosting/AzureFunctions/#unsupported-features","text":"Unfortunately not all the features of Pode can be used within a serverless environment. Below is a list of features in Pode that cannot be used when running in a serverless context: Access Middleware Limit Middleware Opening your server as a GUI TCP/Service Handler logic Listening on endpoints (as Azure Functions does this for us) Schedules Timers File Monitoring Server Restarting","title":"Unsupported Features"},{"location":"Hosting/Docker/","text":"Docker Pode has a Docker image that you can use to host your server, for instructions on pulling these images you can look here . The images use PowerShell v7.2 on either an Ubuntu Focal (default), Alpine, or ARM32 image. Images Info The server script used below can be found in the examples/web-pages-docker.ps1 directory in the repo. Default The default Pode image is an Ubuntu Focal image with PowerShell v7.2 and Pode installed. An example of using this image in your Dockerfile could be as follows: # pull down the pode image FROM badgerati/pode:latest # or use the following for GitHub # FROM docker.pkg.github.com/badgerati/pode/pode:latest # copy over the local files to the container COPY . /usr/src/app/ # expose the port EXPOSE 8085 # run the server CMD [ \"pwsh\" , \"-c\" , \"cd /usr/src/app; ./web-pages-docker.ps1\" ] Alpine Pode also has an image for Alpine, an example of using this image in your Dockerfile could be as follows: # pull down the pode image FROM badgerati/pode:latest-alpine # or use the following for GitHub # FROM docker.pkg.github.com/badgerati/pode/pode:latest-alpine # copy over the local files to the container COPY . /usr/src/app/ # expose the port EXPOSE 8085 # run the server CMD [ \"pwsh\" , \"-c\" , \"cd /usr/src/app; ./web-pages-docker.ps1\" ] ARM32 Pode also has an image for ARM32, meaning you can run Pode on Raspberry Pis. An example of using this image in your Dockerfile could be as follows: # pull down the pode image FROM badgerati/pode:latest-arm32 # or use the following for GitHub # FROM docker.pkg.github.com/badgerati/pode/pode:latest-arm32 # copy over the local files to the container COPY . /usr/src/app/ # expose the port EXPOSE 8085 # run the server CMD [ \"pwsh\" , \"-c\" , \"cd /usr/src/app; ./web-pages-docker.ps1\" ] Build and Run To build and run the above Dockerfiles, you can use the following commands: docker build -t pode/example . docker run -p 8085 :8085 -d pode/example Now try navigating to http://localhost:8085 (or calling curl http://localhost:8085 ) and you should be greeted with a \"Hello, world!\" page. Warning The ARM32 images will likely only work on Raspberry Pis, or an Operating System that supports ARM.","title":"Docker"},{"location":"Hosting/Docker/#docker","text":"Pode has a Docker image that you can use to host your server, for instructions on pulling these images you can look here . The images use PowerShell v7.2 on either an Ubuntu Focal (default), Alpine, or ARM32 image.","title":"Docker"},{"location":"Hosting/Docker/#images","text":"Info The server script used below can be found in the examples/web-pages-docker.ps1 directory in the repo.","title":"Images"},{"location":"Hosting/Docker/#default","text":"The default Pode image is an Ubuntu Focal image with PowerShell v7.2 and Pode installed. An example of using this image in your Dockerfile could be as follows: # pull down the pode image FROM badgerati/pode:latest # or use the following for GitHub # FROM docker.pkg.github.com/badgerati/pode/pode:latest # copy over the local files to the container COPY . /usr/src/app/ # expose the port EXPOSE 8085 # run the server CMD [ \"pwsh\" , \"-c\" , \"cd /usr/src/app; ./web-pages-docker.ps1\" ]","title":"Default"},{"location":"Hosting/Docker/#alpine","text":"Pode also has an image for Alpine, an example of using this image in your Dockerfile could be as follows: # pull down the pode image FROM badgerati/pode:latest-alpine # or use the following for GitHub # FROM docker.pkg.github.com/badgerati/pode/pode:latest-alpine # copy over the local files to the container COPY . /usr/src/app/ # expose the port EXPOSE 8085 # run the server CMD [ \"pwsh\" , \"-c\" , \"cd /usr/src/app; ./web-pages-docker.ps1\" ]","title":"Alpine"},{"location":"Hosting/Docker/#arm32","text":"Pode also has an image for ARM32, meaning you can run Pode on Raspberry Pis. An example of using this image in your Dockerfile could be as follows: # pull down the pode image FROM badgerati/pode:latest-arm32 # or use the following for GitHub # FROM docker.pkg.github.com/badgerati/pode/pode:latest-arm32 # copy over the local files to the container COPY . /usr/src/app/ # expose the port EXPOSE 8085 # run the server CMD [ \"pwsh\" , \"-c\" , \"cd /usr/src/app; ./web-pages-docker.ps1\" ]","title":"ARM32"},{"location":"Hosting/Docker/#build-and-run","text":"To build and run the above Dockerfiles, you can use the following commands: docker build -t pode/example . docker run -p 8085 :8085 -d pode/example Now try navigating to http://localhost:8085 (or calling curl http://localhost:8085 ) and you should be greeted with a \"Hello, world!\" page. Warning The ARM32 images will likely only work on Raspberry Pis, or an Operating System that supports ARM.","title":"Build and Run"},{"location":"Hosting/Heroku/","text":"Heroku Using Pode's docker image, you can host your Pode server in Heroku. Hosting your server in Heroku works in a similar fashion to IIS, in that Pode can detect when you're using Heroku and set the Address/Port appropriately. Furthermore, Heroku can deal with HTTPS for you, so your Pode server only needs to bind onto HTTP within the container. Requirements To get started you'll need the following software installed: Git Docker Heroku CLI You'll also need an account with Heroku . Server Your server will need a Dockerfile, such as the following: FROM badgerati/pode:latest COPY . /usr/src/app/ EXPOSE $PORT CMD [ \"pwsh\" , \"-c\" , \"cd /usr/src/app; ./server.ps1\" ] While Pode can detect that your server is running in Heroku, and can set your server's endpoints appropriately, the Dockerfile will need to use the $PORT variable that Heroku set. You can set this when testing locally as follows (assuming your server is listening on port 5000 locally): docker run -p 5000 : 5000 -e PORT = 5000 < image-name > The server script itself could look as follows: Start-PodeServer { Add-PodeEndpoint -Address 127 . 0 . 0 . 1 -Port 5000 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeJsonResponse -Value @{ Response = 'Hello, world!' } } } Here we have an endpoint on localhost and port 5000; but when in Heroku Pode will automatically change the address/port for you. Build and Push First, login to Heroku and then its Container Registry: heroku login heroku container : login Next, create an app - note that you'll need to get the app-name that is returned: heroku create $appName = '<app-name-from-above>' Then, push and release your server to the created app: heroku container : push web - -app $appName heroku container : release web - -app $appName Finally, you can open your server as follows: heroku open - -app $appName After this, you can view the logs of the server using: heroku logs - -tail - -app $appName Useful Links Building Docker Images with heroku.yml | Heroku Dev Center Container Registry & Runtime (Docker Deploys) | Heroku Dev Center","title":"Heroku"},{"location":"Hosting/Heroku/#heroku","text":"Using Pode's docker image, you can host your Pode server in Heroku. Hosting your server in Heroku works in a similar fashion to IIS, in that Pode can detect when you're using Heroku and set the Address/Port appropriately. Furthermore, Heroku can deal with HTTPS for you, so your Pode server only needs to bind onto HTTP within the container.","title":"Heroku"},{"location":"Hosting/Heroku/#requirements","text":"To get started you'll need the following software installed: Git Docker Heroku CLI You'll also need an account with Heroku .","title":"Requirements"},{"location":"Hosting/Heroku/#server","text":"Your server will need a Dockerfile, such as the following: FROM badgerati/pode:latest COPY . /usr/src/app/ EXPOSE $PORT CMD [ \"pwsh\" , \"-c\" , \"cd /usr/src/app; ./server.ps1\" ] While Pode can detect that your server is running in Heroku, and can set your server's endpoints appropriately, the Dockerfile will need to use the $PORT variable that Heroku set. You can set this when testing locally as follows (assuming your server is listening on port 5000 locally): docker run -p 5000 : 5000 -e PORT = 5000 < image-name > The server script itself could look as follows: Start-PodeServer { Add-PodeEndpoint -Address 127 . 0 . 0 . 1 -Port 5000 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeJsonResponse -Value @{ Response = 'Hello, world!' } } } Here we have an endpoint on localhost and port 5000; but when in Heroku Pode will automatically change the address/port for you.","title":"Server"},{"location":"Hosting/Heroku/#build-and-push","text":"First, login to Heroku and then its Container Registry: heroku login heroku container : login Next, create an app - note that you'll need to get the app-name that is returned: heroku create $appName = '<app-name-from-above>' Then, push and release your server to the created app: heroku container : push web - -app $appName heroku container : release web - -app $appName Finally, you can open your server as follows: heroku open - -app $appName After this, you can view the logs of the server using: heroku logs - -tail - -app $appName","title":"Build and Push"},{"location":"Hosting/Heroku/#useful-links","text":"Building Docker Images with heroku.yml | Heroku Dev Center Container Registry & Runtime (Docker Deploys) | Heroku Dev Center","title":"Useful Links"},{"location":"Hosting/IIS/","text":"IIS Pode has support for you to host your server via IIS! When you host your server through IIS, Pode will detect this and internally set the server type and endpoints to automatically work with IIS. This allows IIS to deal with binding, HTTPS and Certificates, as well as external traffic, etc. Important This being IIS, it is for Windows only! Requirements To start with you'll need to have IIS (or IIS Express) installed: Install-WindowsFeature -Name Web-Server -IncludeManagementTools -IncludeAllSubFeature At a minimum for IIS you need the following installed: $features = @( 'Web-Default-Doc' , 'Web-Dir-Browsing' , 'Web-Http-Errors' , 'Web-Static-Content' , 'Web-Http-Redirect' , 'Web-DAV-Publishing' , 'Web-Http-Logging' , 'Web-Stat-Compression' , 'Web-Filtering' , 'Web-Net-Ext' , 'Web-Net-Ext45' , 'Web-Asp-Net' , 'Web-Asp-Net45' , 'Web-CGI' , 'Web-ISAPI-Ext' , 'Web-ISAPI-Filter' , 'Web-Mgmt-Console' ) $features | ForEach -Object { Install-WindowsFeature -Name $_ } If you need to use Basic or Windows Authentication in IIS then you'll need either Web-Basic-Auth or Web-Windows-Auth respectively. If you're using WebSockets in Pode then you'll also need Web-WebSockets . Next you'll need to install ASP.NET Core Windows hosting : choco install dotnet-windowshosting -y You'll also need to use PowerShell Core ( not Windows PowerShell! ): choco install pwsh -y Finally, you'll need to have Pode installed under PowerShell Core: pwsh -c \"Install-Module Pode -Scope AllUsers\" Note Sometimes you may need to run iisreset (or restart the computer) after installing all of the above, otherwise IIS will return 502 errors. Configuration The first thing you'll need to do so IIS can host your server is, in the same directory as your Pode server's .ps1 root script, create a web.config file. This file should look as follows, but make sure you replace the .\\server.ps1 with the path to your actual server script: <configuration> <location path= \".\" inheritInChildApplications= \"false\" > <system.webServer> <handlers> <remove name= \"WebDAV\" /> <add name= \"aspNetCore\" path= \"*\" verb= \"*\" modules= \"AspNetCoreModuleV2\" resourceType= \"Unspecified\" /> <remove name= \"ExtensionlessUrlHandler-Integrated-4.0\" /> <add name= \"ExtensionlessUrlHandler-Integrated-4.0\" path= \"*.\" verb= \"*\" type= \"System.Web.Handlers.TransferRequestHandler\" preCondition= \"integratedMode,runtimeVersionv4.0\" /> <remove name= \"ExtensionlessUrl-Integrated-4.0\" /> <add name= \"ExtensionlessUrl-Integrated-4.0\" path= \"*.\" verb= \"*\" type= \"System.Web.Handlers.TransferRequestHandler\" preCondition= \"integratedMode,runtimeVersionv4.0\" /> </handlers> <modules> <remove name= \"WebDAVModule\" /> </modules> <aspNetCore processPath= \"pwsh.exe\" arguments= \".\\server.ps1\" stdoutLogEnabled= \"true\" stdoutLogFile= \".\\logs\\stdout\" hostingModel= \"OutOfProcess\" /> <security> <authorization> <remove users= \"*\" roles= \"\" verbs= \"\" /> <add accessType= \"Allow\" users= \"*\" verbs= \"GET,HEAD,POST,PUT,DELETE,DEBUG,OPTIONS\" /> </authorization> </security> </system.webServer> </location> </configuration> IIS Setup With the web.config file in place, it's then time to setup the site in IIS. The first thing to do is open up the IIS Manager, then once open, follow the below steps to setup your site: In the left pane, expand the Server and then the Sites folders Right click the \"Application Pools\" folder Enter a name for your Application Pool, just the name of your site will do, such as \"pode.example.com\" Select OK to create the Application Pool Right click the Sites folder, and select \"Add Website...\" Enter the name of your website, such as \"pode.example.com\" Select the Application Pool that we created above Set the Physical Path to the root directory of your Pode server's script (just the directory, not the ps1 itself) Select either HTTP or HTTPS for your binding i. If you're using WS or WSS, still select either HTTP or HTTPS respectively Leave IP Address as \"All Unassigned\", and either leave the Port as 80/443 or change to what you need Optionally enter the host name of your site, such as \"pode.example.com\" (usually required for HTTPS) If HTTPS, select \"Require SNI\" If HTTPS, select the required certificate from the dropdown Select OK to create the Site At this point, your site is now created in IIS, and you should be able to navigate to the hostname/IP and port combination you setup above for the IIS site. Pode automatically detects that it is running via IIS, and it changes certain attributes of your Pode server so they work with IIS: Endpoints have their Address set to 127.0.0.1 (IIS needs Pode to be on localhost) Endpoints have their Port set to ASPNETCORE_PORT Endpoints have their Protocol set to HTTP or WS (IIS deals with HTTPS/WSS for us) This allows you to write a Pode server that works locally, but will also automatically work under IIS without having to change anything! Note This does mean that Pode will force all endpoints to 127.0.0.1:PORT . So if you had two different IPs before, they'll be merged into one. Something to be aware of if you assign routes to specific endpoints, as under IIS this won't work. Advanced/Domain/Kerberos The above IIS site setup works, but only for simple sites. If you require the use of the Active Directory module, or your site to be running as a different user then follow the steps below. Active Directory By default a newly created site will be running as ApplicationPoolIdentity. In order to use the Active Directory module, your IIS site will need to be running as a domain user: Open IIS, and select the Application Pools folder Right click your Application Pool, and select \"Advanced Settings...\" Under \"Process Module\", click the \"...\" of the \"Identity\" setting Select \"Custom account\", and change the account to the credentials of a valid domain user Select OK If you've enabled Basic authentication in IIS for you site, you'll also need to edit the domain there as well: Open IIS, and expand the Sites folder Select your Site In the middle pane, under IIS, select \"Authentication\" Right click \"Basic Authentication\" (if it's enabled) Edit the domain to your domain Select OK Sometimes you might run into issues using the Active Directory module under IIS - such as the following error: Creating a new session for implicit remoting of \"Get-ADUser\" command... If this happens, you'll need to make your AD calls using Invoke-Command : Invoke-Command -ArgumentList $username -ScriptBlock { param ( $username ) Import-Module -Name ActiveDirectory Get-ADUser -Identity $username } Change User To change the user your site is running as: Open IIS, and select the Application Pools folder Right click your Application Pool, and select \"Advanced Settings...\" Under \"Process Module\", click the \"...\" of the \"Identity\" setting Change the user to either an inbuilt one, or a custom local/domain user Select OK IIS Application You can host your Pode server as an Application under another Website in IIS by doing the following: In IIS, right click the Website Select \"Add Application...\" Enter a name for your Application under \"Alias\" Set the Physical Path to the root directory of your Pode server's script (just the directory, not the ps1 itself) Select OK The website will be available at the same binding(s) as the main website, but the URL will need /<alias> appended. For example, if the website has the binding http://localhost:8080 and the alias of the application is api , then you can access the application at http://localhost:8080/api . The server will get a URL path of /api/etc , but you can keep your route paths as /etc , as Pode will automatically remove the /api from /api/etc . This lets you host the same server under any alias name. HTTPS/WSS Although Pode does have support for HTTPS/WSS, when running via IIS it takes control of HTTPS/WSS for us - this is why the endpoints are forced to HTTP/WS. You can setup a binding in IIS for HTTPS (still HTPPS for WSS) with a Certificate, and IIS will deal with SSL for you: Open IIS, and expand the Sites folder Right click your Site, and select \"Edit Bindings...\" Select \"Add...\" Select HTTPS for your binding (even if your endpoint in WSS) Leave IP Address as \"All Unassigned\", and either leave the Port as 443 or change to what you need Enter the host name of your site, such as \"pode.example.com\" Select \"Require SNI\" Select the required certificate from the dropdown Select OK to create the Binding Recycling By default, IIS has certain settings that will recycle/shutdown your Application Pools. This will cause some requests to \"spin-up\" the site for the first time, and go slow. To help prevent this, below are some of the common setting that can be altered to stop IIS recycling/shutting down your site: Open IIS, and select the Application Pools folder Right click your Application Pool, and select \"Advanced Settings...\" Under \"Process Model\", to stop IIS shutting down your site Set the \"Idle Time-out\" to 0 Under \"Recycling\", to stop IIS recycling your site Set the \"Regular Time Interval\" to 0 Remove all times from \"Specific Times\" This isn't bulletproof, and IIS can sometimes restart your site if it feels like it. Also make sure that there are no periodic processes anywhere that might recycle Application Pools, or run iisreset . When IIS does restart your site, the log file should show the usual Pode \"Terminating\" message, but preceded with \"(IIS Shutdown)\". Debug Line Whenever IIS recycles/shuts down your site, you may see a debug line in your logs if the initial HTTP shutdown request fails, such as: Entering debug mode. Use h or ? for help. At C:\\Program Files\\PowerShell\\Modules\\Pode\\2.0.3\\Public\\Core.ps1:176 char:13 + $key = Get-PodeConsoleKey + ~~~~~~~~~~~~~~~~~~~~~~~~~ [DBG]: PS D:\\wwwroot\\sitename>> This is nothing to worry about, and is purely just IIS terminating the PowerShell runspace to shutdown the Application Pool. ASP.NET Token When hosted via IIS, Pode inspects every request to make sure the mandatory MS-ASPNETCORE-TOKEN header is present. This is a token supplied by IIS, and if it's missing Pode will reject the request with a 400 response. There's nothing you need to do, IIS informs Pode about the token for you, and IIS will add the header to the requests automatically for you as well. IIS Authentication If you decide to use IIS for Windows Authentication, then you can retrieve the authenticated user in Pode. This is done using the Add-PodeAuthIIS function, and it will check for the MS-ASPNETCORE-WINAUTHTOKEN header from IIS. The function creates a custom Authentication Type and Method, and can be used on Routes like other authentications in Pode: Start-PodeServer { Add-PodeEndpoint -Address 127 . 0 . 0 . 1 -Protocol Http Enable-PodeSessionMiddleware -Duration 120 -Extend Add-PodeAuthIIS -Name 'IISAuth' Add-PodeRoute -Method Get -Path '/test' -Authentication 'IISAuth' -ScriptBlock { Write-PodeJsonResponse -Value @{ User = $WebEvent . Auth . User } } } If the required header is missing, then Pode responds with a 401. The retrieved user, like other authentication, is set on the web event 's $WebEvent.Auth.User property, and contains the same information as Pode's inbuilt Windows AD authenticator: Name Type Description UserType string Specifies if the user is a Domain or Local user Identity System.Security.Principal.WindowsIdentity Returns the WindowsIdentity which can be used for Impersonation AuthenticationType string Value is fixed to LDAP DistinguishedName string The distinguished name of the user Username string The user's username (without domain) Name string The user's fullname Email string The user's email address FQDN string The FQDN of the AD server Domain string The domain part of the user's username Groups string[] All groups of which the the user is a member Note If the authenticated user is a Local User, then the following properties will be empty: FQDN, Email, and DistinguishedName Groups Similar to Windows AD authentication, Pode by default will retrieve all groups that a user is a member of, recursively. This can at times cause performance issues if you have a lot of groups in your domain. If you need groups, but you only need the direct groups a user is a member of then you can specify -DirectGroups . Or, if you don't need the groups at all, you can specify -NoGroups : # direct groups only Add-PodeAuthIIS -Name 'IISAuth' -DirectGroups # no groups Add-PodeAuthIIS -Name 'IISAuth' -NoGroups Client Certificates You can enable Pode to get client certificates from IIS by passing -AllowClientCertificate to your Add-PodeEndpoint . Pode will check for either the MS-ASPNETCORE-CLIENTCERT or X-ARR-ClientCert headers, and if either is present they'll be used to set the certificate against $WebEvent.Request.ClientCertificate . This also allows for using Client Certificate authentication in Pode, even when behind IIS. Additional Validation Similar to the normal Add-PodeAuth , Add-PodeAuthIIS can be supplied can an optional ScriptBlock parameter. This ScriptBlock is supplied the found User object as a parameter, structured as details above. You can then use this to further check the user, or load additional user information from another storage. The ScriptBlock has the same return rules as Add-PodeAuth , as can be seen in the Overview . For example, to return the user back: Add-PodeAuthIIS -Name 'IISAuth' -ScriptBlock { param ( $user ) # check or load extra data return @{ User = $user } } Or to fail authentication with an error message: Add-PodeAuthIIS -Name 'IISAuth' -ScriptBlock { param ( $user ) return @{ Message = 'Authorization failed' } } IIS Advanced Kerberos Kerberos Authentication can be configured using Active Directory account and Group Managed Service Account (gMSA) gMSA allows automatic password management, if you have more than 1 IIS server running Pode better to use gMSA for IIS AppPool Identity Use case scenario Two Pode servers behind Load Balancer Kerberos Authentication is used to authenticate users (with optional Impersonation) Infrastructure setup Tested on Windows Server 2022 IIS Server with machine name IIS1$ IIS Server with machine name IIS2$ Both VMs behind Load Balancer Pode deployed to both IIS servers using documentation Pode address https://PodeServer.Contoso.com web.config file: <configuration> <location path= \".\" inheritInChildApplications= \"false\" > <system.webServer> <validation validateIntegratedModeConfiguration= \"true\" /> <handlers> <remove name= \"WebDAV\" /> <add name= \"aspNetCore\" path= \"*\" verb= \"*\" modules= \"AspNetCoreModuleV2\" resourceType= \"Unspecified\" /> <remove name= \"ExtensionlessUrlHandler-Integrated-4.0\" /> <add name= \"ExtensionlessUrlHandler-Integrated-4.0\" path= \"*.\" verb= \"*\" type= \"System.Web.Handlers.TransferRequestHandler\" preCondition= \"integratedMode,runtimeVersionv4.0\" /> <remove name= \"ExtensionlessUrl-Integrated-4.0\" /> <add name= \"ExtensionlessUrl-Integrated-4.0\" path= \"*.\" verb= \"*\" type= \"System.Web.Handlers.TransferRequestHandler\" preCondition= \"integratedMode,runtimeVersionv4.0\" /> </handlers> <modules> <remove name= \"WebDAVModule\" /> </modules> <aspNetCore processPath= \"pwsh.exe\" arguments= \".\\Pode\\server.ps1\" stdoutLogEnabled= \"true\" stdoutLogFile= \".\\Pode\\logs\\stdout\" hostingModel= \"OutOfProcess\" /> <security> <authorization> <remove users= \"*\" roles= \"\" verbs= \"\" /> <add accessType= \"Allow\" users= \"*\" verbs= \"GET,HEAD,POST,PUT,DELETE,DEBUG,OPTIONS\" /> </authorization> </security> </system.webServer> </location> <system.web> <identity impersonate= \"false\" /> </system.web> </configuration> Test deployment using Server.ps1 content: Import-Module Pode Start-PodeServer -StatusPageExceptions Show { # add a simple endpoint Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http # Create IIS Pode authentication method Add-PodeAuthIIS -Name 'IISAuth' -Sessionless # Test Kerberos authentication Add-PodeRoute -Method Get -Path '/test-kerberos' -Authentication 'IISAuth' -ScriptBlock { Write-PodeJsonResponse -Value @{ User = $WebEvent . Auth . User } } # Test Kerberos Impersonation Add-PodeRoute -Method Get -Path '/test-kerberos-impersonation' -Authentication 'IISAuth' -ScriptBlock { [System.Security.Principal.WindowsIdentity] :: RunImpersonated ( $WebEvent . Auth . User . Identity . AccessToken , { $newIdentity = [Security.Principal.WindowsIdentity] :: GetCurrent () | Select-Object -ExpandProperty 'Name' Write-PodeTextResponse -Value \"You are running this command as the server user $newIdentity\" }) } } IIS Site Authentication settings Configuration steps for Domain Account : Create Domain Users in AD for Pode AppPool - Pode.Svc Create SPNs: setspn -d HTTP/PodeServer Contoso\\pode.svc setspn -d HTTP/PodeServer.Contoso.com Contoso\\pode.svc Configure Pode.Svc user Delegation - Trust this user for delegation ... Configure Pode Website to use PodeServer.Contoso.com as Host Name Configure Pode Website AppPool to use Contoso\\pode.svc as Identity Give write permissions to Contoso\\gmsaPodeSvc$ on Pode folder !!! Important !!! Add PTR DNS record PodeServer.Contoso.com pointing to Load Balancer IP. If you have only one server and want to test, replace PTR record for iis1.Contoso.com to PodeServer.Contoso.com Open URLs: https://PodeServer.Contoso.com/ https://PodeServer.Contoso.com/test-kerberos https://PodeServer.Contoso.com/test-kerberos-impersonation Configuration steps for Group Managed Service Account Create the KDS Root Key (only once per forest). This is used by the KDS service on DCs (along with other information) to generate passwords. Execute on Domain Controller # Once per domain, effective date -10 hours to start using keys immediately Add-KdsRootKey ?? ? EffectiveTime (( get-date ). addhours (- 10 )) # Force AD Replication ( Get-ADDomainController -Filter *). Name | Foreach -Object { repadmin / syncall $_ ( Get-ADDomain ). DistinguishedName / e / A | Out-Null }; Start-Sleep 10 ; Get-ADReplicationPartnerMetadata -Target \"$env:userdnsdomain\" -Scope Domain | Select-Object Server , LastReplicationSuccess Create Group Managed Service Account , configure SPNs and Delegation # Create Authorized host group New-ADGroup -Name \"Pode Authorized Hosts\" -SamAccountName \"pode.hosts\" -GroupScope Global # Create gMSA Account New-ADServiceAccount -Name \"gmsaPodeSvc\" -DnsHostName \"PodeServer.Contoso.com\" ` -ServicePrincipalNames \"host/PodeServer\" , \"host/PodeServer.Contoso.com\" , \"http/PodeServer\" , \"http/PodeServer.Contoso.com\" ` -PrincipalsAllowedToRetrieveManagedPassword \"pode.hosts\" # Configure for Impersonation Set-ADAccountControl -Identity gmsaPodeSvc $ -TrustedForDelegation $true -TrustedToAuthForDelegation $false # Add IIS servers to group Add-ADGroupMember -Identity \"pode.hosts\" -Members \"iis1$\" , \"iis2$\" # Reboot IIS servers to update hosts group membership! Restart-Computer -ComputerName \"iis1\" , \"iis2\" -force !!! Important !!! Both IIS Servers must be rebooted to update Group Membership On both IIS Servers: Add-WindowsFeature RSAT-AD-PowerShell Install-ADServiceAccount gmsaPodeSvc # Next line should return $True Test-ADServiceAccount gmsaPodeSvc Configure Pode Website to use PodeServer.Contoso.com as Host Name Configure Pode Website AppPool to use Contoso\\gmsaPodeSvc$ as Identity Give write permissions to Contoso\\gmsaPodeSvc$ on Pode folder !!! Important !!! Add PTR DNS record PodeServer.Contoso.com pointing to Load Balancer IP. If you have only one server and want to test, replace PTR record for iis1.Contoso.com to PodeServer.Contoso.com Open URLs: https://PodeServer.Contoso.com/ https://PodeServer.Contoso.com/test-kerberos https://PodeServer.Contoso.com/test-kerberos-impersonation Kerberos Impersonate Pode can impersonate the user that requests the web page using Kerberos Constrained Delegation (KCD). Requirements: The use of KCD requires additional configuration in Active Directory (read up on PrincipalsAllowedToDelegateToAccount) No Session middleware configured ( -Sessionless switch on authentication setup) This can be done using the following example: [System.Security.Principal.WindowsIdentity] :: RunImpersonated ( $WebEvent . Auth . User . Identity . AccessToken , { $newIdentity = [Security.Principal.WindowsIdentity] :: GetCurrent () | Select-Object -ExpandProperty 'Name' Write-PodeTextResponse -Value \"You are running this command as the server user $newIdentity\" }) Azure Web Apps To host your Pode server under IIS using Azure Web Apps, ensure the OS type is Windows and the framework is .NET Core 2.1/3.0. Your web.config's processPath will also need to reference powershell.exe not pwsh.exe . Pode can auto-detect if you're using an Azure Web App, but if you're having issues trying setting the -DisableTermination and -Quiet switches on your Start-PodeServer . Useful Links Host ASP.NET Core on Windows with IIS | Microsoft Docs Group Managed Service Accounts | Microsoft Docs Kerberos Authentication | Microsoft Docs","title":"IIS"},{"location":"Hosting/IIS/#iis","text":"Pode has support for you to host your server via IIS! When you host your server through IIS, Pode will detect this and internally set the server type and endpoints to automatically work with IIS. This allows IIS to deal with binding, HTTPS and Certificates, as well as external traffic, etc. Important This being IIS, it is for Windows only!","title":"IIS"},{"location":"Hosting/IIS/#requirements","text":"To start with you'll need to have IIS (or IIS Express) installed: Install-WindowsFeature -Name Web-Server -IncludeManagementTools -IncludeAllSubFeature At a minimum for IIS you need the following installed: $features = @( 'Web-Default-Doc' , 'Web-Dir-Browsing' , 'Web-Http-Errors' , 'Web-Static-Content' , 'Web-Http-Redirect' , 'Web-DAV-Publishing' , 'Web-Http-Logging' , 'Web-Stat-Compression' , 'Web-Filtering' , 'Web-Net-Ext' , 'Web-Net-Ext45' , 'Web-Asp-Net' , 'Web-Asp-Net45' , 'Web-CGI' , 'Web-ISAPI-Ext' , 'Web-ISAPI-Filter' , 'Web-Mgmt-Console' ) $features | ForEach -Object { Install-WindowsFeature -Name $_ } If you need to use Basic or Windows Authentication in IIS then you'll need either Web-Basic-Auth or Web-Windows-Auth respectively. If you're using WebSockets in Pode then you'll also need Web-WebSockets . Next you'll need to install ASP.NET Core Windows hosting : choco install dotnet-windowshosting -y You'll also need to use PowerShell Core ( not Windows PowerShell! ): choco install pwsh -y Finally, you'll need to have Pode installed under PowerShell Core: pwsh -c \"Install-Module Pode -Scope AllUsers\" Note Sometimes you may need to run iisreset (or restart the computer) after installing all of the above, otherwise IIS will return 502 errors.","title":"Requirements"},{"location":"Hosting/IIS/#configuration","text":"The first thing you'll need to do so IIS can host your server is, in the same directory as your Pode server's .ps1 root script, create a web.config file. This file should look as follows, but make sure you replace the .\\server.ps1 with the path to your actual server script: <configuration> <location path= \".\" inheritInChildApplications= \"false\" > <system.webServer> <handlers> <remove name= \"WebDAV\" /> <add name= \"aspNetCore\" path= \"*\" verb= \"*\" modules= \"AspNetCoreModuleV2\" resourceType= \"Unspecified\" /> <remove name= \"ExtensionlessUrlHandler-Integrated-4.0\" /> <add name= \"ExtensionlessUrlHandler-Integrated-4.0\" path= \"*.\" verb= \"*\" type= \"System.Web.Handlers.TransferRequestHandler\" preCondition= \"integratedMode,runtimeVersionv4.0\" /> <remove name= \"ExtensionlessUrl-Integrated-4.0\" /> <add name= \"ExtensionlessUrl-Integrated-4.0\" path= \"*.\" verb= \"*\" type= \"System.Web.Handlers.TransferRequestHandler\" preCondition= \"integratedMode,runtimeVersionv4.0\" /> </handlers> <modules> <remove name= \"WebDAVModule\" /> </modules> <aspNetCore processPath= \"pwsh.exe\" arguments= \".\\server.ps1\" stdoutLogEnabled= \"true\" stdoutLogFile= \".\\logs\\stdout\" hostingModel= \"OutOfProcess\" /> <security> <authorization> <remove users= \"*\" roles= \"\" verbs= \"\" /> <add accessType= \"Allow\" users= \"*\" verbs= \"GET,HEAD,POST,PUT,DELETE,DEBUG,OPTIONS\" /> </authorization> </security> </system.webServer> </location> </configuration>","title":"Configuration"},{"location":"Hosting/IIS/#iis-setup","text":"With the web.config file in place, it's then time to setup the site in IIS. The first thing to do is open up the IIS Manager, then once open, follow the below steps to setup your site: In the left pane, expand the Server and then the Sites folders Right click the \"Application Pools\" folder Enter a name for your Application Pool, just the name of your site will do, such as \"pode.example.com\" Select OK to create the Application Pool Right click the Sites folder, and select \"Add Website...\" Enter the name of your website, such as \"pode.example.com\" Select the Application Pool that we created above Set the Physical Path to the root directory of your Pode server's script (just the directory, not the ps1 itself) Select either HTTP or HTTPS for your binding i. If you're using WS or WSS, still select either HTTP or HTTPS respectively Leave IP Address as \"All Unassigned\", and either leave the Port as 80/443 or change to what you need Optionally enter the host name of your site, such as \"pode.example.com\" (usually required for HTTPS) If HTTPS, select \"Require SNI\" If HTTPS, select the required certificate from the dropdown Select OK to create the Site At this point, your site is now created in IIS, and you should be able to navigate to the hostname/IP and port combination you setup above for the IIS site. Pode automatically detects that it is running via IIS, and it changes certain attributes of your Pode server so they work with IIS: Endpoints have their Address set to 127.0.0.1 (IIS needs Pode to be on localhost) Endpoints have their Port set to ASPNETCORE_PORT Endpoints have their Protocol set to HTTP or WS (IIS deals with HTTPS/WSS for us) This allows you to write a Pode server that works locally, but will also automatically work under IIS without having to change anything! Note This does mean that Pode will force all endpoints to 127.0.0.1:PORT . So if you had two different IPs before, they'll be merged into one. Something to be aware of if you assign routes to specific endpoints, as under IIS this won't work.","title":"IIS Setup"},{"location":"Hosting/IIS/#advanceddomainkerberos","text":"The above IIS site setup works, but only for simple sites. If you require the use of the Active Directory module, or your site to be running as a different user then follow the steps below.","title":"Advanced/Domain/Kerberos"},{"location":"Hosting/IIS/#active-directory","text":"By default a newly created site will be running as ApplicationPoolIdentity. In order to use the Active Directory module, your IIS site will need to be running as a domain user: Open IIS, and select the Application Pools folder Right click your Application Pool, and select \"Advanced Settings...\" Under \"Process Module\", click the \"...\" of the \"Identity\" setting Select \"Custom account\", and change the account to the credentials of a valid domain user Select OK If you've enabled Basic authentication in IIS for you site, you'll also need to edit the domain there as well: Open IIS, and expand the Sites folder Select your Site In the middle pane, under IIS, select \"Authentication\" Right click \"Basic Authentication\" (if it's enabled) Edit the domain to your domain Select OK Sometimes you might run into issues using the Active Directory module under IIS - such as the following error: Creating a new session for implicit remoting of \"Get-ADUser\" command... If this happens, you'll need to make your AD calls using Invoke-Command : Invoke-Command -ArgumentList $username -ScriptBlock { param ( $username ) Import-Module -Name ActiveDirectory Get-ADUser -Identity $username }","title":"Active Directory"},{"location":"Hosting/IIS/#change-user","text":"To change the user your site is running as: Open IIS, and select the Application Pools folder Right click your Application Pool, and select \"Advanced Settings...\" Under \"Process Module\", click the \"...\" of the \"Identity\" setting Change the user to either an inbuilt one, or a custom local/domain user Select OK","title":"Change User"},{"location":"Hosting/IIS/#iis-application","text":"You can host your Pode server as an Application under another Website in IIS by doing the following: In IIS, right click the Website Select \"Add Application...\" Enter a name for your Application under \"Alias\" Set the Physical Path to the root directory of your Pode server's script (just the directory, not the ps1 itself) Select OK The website will be available at the same binding(s) as the main website, but the URL will need /<alias> appended. For example, if the website has the binding http://localhost:8080 and the alias of the application is api , then you can access the application at http://localhost:8080/api . The server will get a URL path of /api/etc , but you can keep your route paths as /etc , as Pode will automatically remove the /api from /api/etc . This lets you host the same server under any alias name.","title":"IIS Application"},{"location":"Hosting/IIS/#httpswss","text":"Although Pode does have support for HTTPS/WSS, when running via IIS it takes control of HTTPS/WSS for us - this is why the endpoints are forced to HTTP/WS. You can setup a binding in IIS for HTTPS (still HTPPS for WSS) with a Certificate, and IIS will deal with SSL for you: Open IIS, and expand the Sites folder Right click your Site, and select \"Edit Bindings...\" Select \"Add...\" Select HTTPS for your binding (even if your endpoint in WSS) Leave IP Address as \"All Unassigned\", and either leave the Port as 443 or change to what you need Enter the host name of your site, such as \"pode.example.com\" Select \"Require SNI\" Select the required certificate from the dropdown Select OK to create the Binding","title":"HTTPS/WSS"},{"location":"Hosting/IIS/#recycling","text":"By default, IIS has certain settings that will recycle/shutdown your Application Pools. This will cause some requests to \"spin-up\" the site for the first time, and go slow. To help prevent this, below are some of the common setting that can be altered to stop IIS recycling/shutting down your site: Open IIS, and select the Application Pools folder Right click your Application Pool, and select \"Advanced Settings...\" Under \"Process Model\", to stop IIS shutting down your site Set the \"Idle Time-out\" to 0 Under \"Recycling\", to stop IIS recycling your site Set the \"Regular Time Interval\" to 0 Remove all times from \"Specific Times\" This isn't bulletproof, and IIS can sometimes restart your site if it feels like it. Also make sure that there are no periodic processes anywhere that might recycle Application Pools, or run iisreset . When IIS does restart your site, the log file should show the usual Pode \"Terminating\" message, but preceded with \"(IIS Shutdown)\".","title":"Recycling"},{"location":"Hosting/IIS/#debug-line","text":"Whenever IIS recycles/shuts down your site, you may see a debug line in your logs if the initial HTTP shutdown request fails, such as: Entering debug mode. Use h or ? for help. At C:\\Program Files\\PowerShell\\Modules\\Pode\\2.0.3\\Public\\Core.ps1:176 char:13 + $key = Get-PodeConsoleKey + ~~~~~~~~~~~~~~~~~~~~~~~~~ [DBG]: PS D:\\wwwroot\\sitename>> This is nothing to worry about, and is purely just IIS terminating the PowerShell runspace to shutdown the Application Pool.","title":"Debug Line"},{"location":"Hosting/IIS/#aspnet-token","text":"When hosted via IIS, Pode inspects every request to make sure the mandatory MS-ASPNETCORE-TOKEN header is present. This is a token supplied by IIS, and if it's missing Pode will reject the request with a 400 response. There's nothing you need to do, IIS informs Pode about the token for you, and IIS will add the header to the requests automatically for you as well.","title":"ASP.NET Token"},{"location":"Hosting/IIS/#iis-authentication","text":"If you decide to use IIS for Windows Authentication, then you can retrieve the authenticated user in Pode. This is done using the Add-PodeAuthIIS function, and it will check for the MS-ASPNETCORE-WINAUTHTOKEN header from IIS. The function creates a custom Authentication Type and Method, and can be used on Routes like other authentications in Pode: Start-PodeServer { Add-PodeEndpoint -Address 127 . 0 . 0 . 1 -Protocol Http Enable-PodeSessionMiddleware -Duration 120 -Extend Add-PodeAuthIIS -Name 'IISAuth' Add-PodeRoute -Method Get -Path '/test' -Authentication 'IISAuth' -ScriptBlock { Write-PodeJsonResponse -Value @{ User = $WebEvent . Auth . User } } } If the required header is missing, then Pode responds with a 401. The retrieved user, like other authentication, is set on the web event 's $WebEvent.Auth.User property, and contains the same information as Pode's inbuilt Windows AD authenticator: Name Type Description UserType string Specifies if the user is a Domain or Local user Identity System.Security.Principal.WindowsIdentity Returns the WindowsIdentity which can be used for Impersonation AuthenticationType string Value is fixed to LDAP DistinguishedName string The distinguished name of the user Username string The user's username (without domain) Name string The user's fullname Email string The user's email address FQDN string The FQDN of the AD server Domain string The domain part of the user's username Groups string[] All groups of which the the user is a member Note If the authenticated user is a Local User, then the following properties will be empty: FQDN, Email, and DistinguishedName","title":"IIS Authentication"},{"location":"Hosting/IIS/#groups","text":"Similar to Windows AD authentication, Pode by default will retrieve all groups that a user is a member of, recursively. This can at times cause performance issues if you have a lot of groups in your domain. If you need groups, but you only need the direct groups a user is a member of then you can specify -DirectGroups . Or, if you don't need the groups at all, you can specify -NoGroups : # direct groups only Add-PodeAuthIIS -Name 'IISAuth' -DirectGroups # no groups Add-PodeAuthIIS -Name 'IISAuth' -NoGroups","title":"Groups"},{"location":"Hosting/IIS/#client-certificates","text":"You can enable Pode to get client certificates from IIS by passing -AllowClientCertificate to your Add-PodeEndpoint . Pode will check for either the MS-ASPNETCORE-CLIENTCERT or X-ARR-ClientCert headers, and if either is present they'll be used to set the certificate against $WebEvent.Request.ClientCertificate . This also allows for using Client Certificate authentication in Pode, even when behind IIS.","title":"Client Certificates"},{"location":"Hosting/IIS/#additional-validation","text":"Similar to the normal Add-PodeAuth , Add-PodeAuthIIS can be supplied can an optional ScriptBlock parameter. This ScriptBlock is supplied the found User object as a parameter, structured as details above. You can then use this to further check the user, or load additional user information from another storage. The ScriptBlock has the same return rules as Add-PodeAuth , as can be seen in the Overview . For example, to return the user back: Add-PodeAuthIIS -Name 'IISAuth' -ScriptBlock { param ( $user ) # check or load extra data return @{ User = $user } } Or to fail authentication with an error message: Add-PodeAuthIIS -Name 'IISAuth' -ScriptBlock { param ( $user ) return @{ Message = 'Authorization failed' } }","title":"Additional Validation"},{"location":"Hosting/IIS/#iis-advanced-kerberos","text":"Kerberos Authentication can be configured using Active Directory account and Group Managed Service Account (gMSA) gMSA allows automatic password management, if you have more than 1 IIS server running Pode better to use gMSA for IIS AppPool Identity","title":"IIS Advanced Kerberos"},{"location":"Hosting/IIS/#use-case-scenario","text":"Two Pode servers behind Load Balancer Kerberos Authentication is used to authenticate users (with optional Impersonation)","title":"Use case scenario"},{"location":"Hosting/IIS/#infrastructure-setup","text":"Tested on Windows Server 2022 IIS Server with machine name IIS1$ IIS Server with machine name IIS2$ Both VMs behind Load Balancer Pode deployed to both IIS servers using documentation Pode address https://PodeServer.Contoso.com web.config file: <configuration> <location path= \".\" inheritInChildApplications= \"false\" > <system.webServer> <validation validateIntegratedModeConfiguration= \"true\" /> <handlers> <remove name= \"WebDAV\" /> <add name= \"aspNetCore\" path= \"*\" verb= \"*\" modules= \"AspNetCoreModuleV2\" resourceType= \"Unspecified\" /> <remove name= \"ExtensionlessUrlHandler-Integrated-4.0\" /> <add name= \"ExtensionlessUrlHandler-Integrated-4.0\" path= \"*.\" verb= \"*\" type= \"System.Web.Handlers.TransferRequestHandler\" preCondition= \"integratedMode,runtimeVersionv4.0\" /> <remove name= \"ExtensionlessUrl-Integrated-4.0\" /> <add name= \"ExtensionlessUrl-Integrated-4.0\" path= \"*.\" verb= \"*\" type= \"System.Web.Handlers.TransferRequestHandler\" preCondition= \"integratedMode,runtimeVersionv4.0\" /> </handlers> <modules> <remove name= \"WebDAVModule\" /> </modules> <aspNetCore processPath= \"pwsh.exe\" arguments= \".\\Pode\\server.ps1\" stdoutLogEnabled= \"true\" stdoutLogFile= \".\\Pode\\logs\\stdout\" hostingModel= \"OutOfProcess\" /> <security> <authorization> <remove users= \"*\" roles= \"\" verbs= \"\" /> <add accessType= \"Allow\" users= \"*\" verbs= \"GET,HEAD,POST,PUT,DELETE,DEBUG,OPTIONS\" /> </authorization> </security> </system.webServer> </location> <system.web> <identity impersonate= \"false\" /> </system.web> </configuration> Test deployment using Server.ps1 content: Import-Module Pode Start-PodeServer -StatusPageExceptions Show { # add a simple endpoint Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http # Create IIS Pode authentication method Add-PodeAuthIIS -Name 'IISAuth' -Sessionless # Test Kerberos authentication Add-PodeRoute -Method Get -Path '/test-kerberos' -Authentication 'IISAuth' -ScriptBlock { Write-PodeJsonResponse -Value @{ User = $WebEvent . Auth . User } } # Test Kerberos Impersonation Add-PodeRoute -Method Get -Path '/test-kerberos-impersonation' -Authentication 'IISAuth' -ScriptBlock { [System.Security.Principal.WindowsIdentity] :: RunImpersonated ( $WebEvent . Auth . User . Identity . AccessToken , { $newIdentity = [Security.Principal.WindowsIdentity] :: GetCurrent () | Select-Object -ExpandProperty 'Name' Write-PodeTextResponse -Value \"You are running this command as the server user $newIdentity\" }) } } IIS Site Authentication settings","title":"Infrastructure setup"},{"location":"Hosting/IIS/#configuration-steps-for-domain-account","text":"Create Domain Users in AD for Pode AppPool - Pode.Svc Create SPNs: setspn -d HTTP/PodeServer Contoso\\pode.svc setspn -d HTTP/PodeServer.Contoso.com Contoso\\pode.svc Configure Pode.Svc user Delegation - Trust this user for delegation ... Configure Pode Website to use PodeServer.Contoso.com as Host Name Configure Pode Website AppPool to use Contoso\\pode.svc as Identity Give write permissions to Contoso\\gmsaPodeSvc$ on Pode folder !!! Important !!! Add PTR DNS record PodeServer.Contoso.com pointing to Load Balancer IP. If you have only one server and want to test, replace PTR record for iis1.Contoso.com to PodeServer.Contoso.com Open URLs: https://PodeServer.Contoso.com/ https://PodeServer.Contoso.com/test-kerberos https://PodeServer.Contoso.com/test-kerberos-impersonation","title":"Configuration steps for Domain Account:"},{"location":"Hosting/IIS/#configuration-steps-for-group-managed-service-account","text":"Create the KDS Root Key (only once per forest). This is used by the KDS service on DCs (along with other information) to generate passwords. Execute on Domain Controller # Once per domain, effective date -10 hours to start using keys immediately Add-KdsRootKey ?? ? EffectiveTime (( get-date ). addhours (- 10 )) # Force AD Replication ( Get-ADDomainController -Filter *). Name | Foreach -Object { repadmin / syncall $_ ( Get-ADDomain ). DistinguishedName / e / A | Out-Null }; Start-Sleep 10 ; Get-ADReplicationPartnerMetadata -Target \"$env:userdnsdomain\" -Scope Domain | Select-Object Server , LastReplicationSuccess Create Group Managed Service Account , configure SPNs and Delegation # Create Authorized host group New-ADGroup -Name \"Pode Authorized Hosts\" -SamAccountName \"pode.hosts\" -GroupScope Global # Create gMSA Account New-ADServiceAccount -Name \"gmsaPodeSvc\" -DnsHostName \"PodeServer.Contoso.com\" ` -ServicePrincipalNames \"host/PodeServer\" , \"host/PodeServer.Contoso.com\" , \"http/PodeServer\" , \"http/PodeServer.Contoso.com\" ` -PrincipalsAllowedToRetrieveManagedPassword \"pode.hosts\" # Configure for Impersonation Set-ADAccountControl -Identity gmsaPodeSvc $ -TrustedForDelegation $true -TrustedToAuthForDelegation $false # Add IIS servers to group Add-ADGroupMember -Identity \"pode.hosts\" -Members \"iis1$\" , \"iis2$\" # Reboot IIS servers to update hosts group membership! Restart-Computer -ComputerName \"iis1\" , \"iis2\" -force !!! Important !!! Both IIS Servers must be rebooted to update Group Membership On both IIS Servers: Add-WindowsFeature RSAT-AD-PowerShell Install-ADServiceAccount gmsaPodeSvc # Next line should return $True Test-ADServiceAccount gmsaPodeSvc Configure Pode Website to use PodeServer.Contoso.com as Host Name Configure Pode Website AppPool to use Contoso\\gmsaPodeSvc$ as Identity Give write permissions to Contoso\\gmsaPodeSvc$ on Pode folder !!! Important !!! Add PTR DNS record PodeServer.Contoso.com pointing to Load Balancer IP. If you have only one server and want to test, replace PTR record for iis1.Contoso.com to PodeServer.Contoso.com Open URLs: https://PodeServer.Contoso.com/ https://PodeServer.Contoso.com/test-kerberos https://PodeServer.Contoso.com/test-kerberos-impersonation","title":"Configuration steps for Group Managed Service Account"},{"location":"Hosting/IIS/#kerberos-impersonate","text":"Pode can impersonate the user that requests the web page using Kerberos Constrained Delegation (KCD). Requirements: The use of KCD requires additional configuration in Active Directory (read up on PrincipalsAllowedToDelegateToAccount) No Session middleware configured ( -Sessionless switch on authentication setup) This can be done using the following example: [System.Security.Principal.WindowsIdentity] :: RunImpersonated ( $WebEvent . Auth . User . Identity . AccessToken , { $newIdentity = [Security.Principal.WindowsIdentity] :: GetCurrent () | Select-Object -ExpandProperty 'Name' Write-PodeTextResponse -Value \"You are running this command as the server user $newIdentity\" })","title":"Kerberos Impersonate"},{"location":"Hosting/IIS/#azure-web-apps","text":"To host your Pode server under IIS using Azure Web Apps, ensure the OS type is Windows and the framework is .NET Core 2.1/3.0. Your web.config's processPath will also need to reference powershell.exe not pwsh.exe . Pode can auto-detect if you're using an Azure Web App, but if you're having issues trying setting the -DisableTermination and -Quiet switches on your Start-PodeServer .","title":"Azure Web Apps"},{"location":"Hosting/IIS/#useful-links","text":"Host ASP.NET Core on Windows with IIS | Microsoft Docs Group Managed Service Accounts | Microsoft Docs Kerberos Authentication | Microsoft Docs","title":"Useful Links"},{"location":"Hosting/RunAsService/","text":"Service Rather than having to manually invoke your Pode server script each time, it's best if you can have it start automatically when your computer/server starts. Below you'll see how to set your script to run as either a Windows or a Linux service. Windows To run your Pode server as a Windows service, we recommend using the NSSM tool. To install on Windows you can use Chocolatey: choco install nssm -y Once installed, you'll need to set the location of the pwsh or powershell executables as a variable: $exe = ( Get-Command pwsh . exe ). Source # or $exe = ( Get-Command powershell . exe ). Source Next, define the name of the Windows service; as well as the full file path to your Pode server script, and the arguments to be supplied to PowerShell: $name = 'Pode Web Server' $file = 'C:\\Pode\\Server.ps1' $arg = \"-ExecutionPolicy Bypass -NoProfile -Command `\" $( $file ) `\" \" Finally, install and start the service: nssm install $name $exe $arg nssm start $name Info You can now navigate to your server, ie: http://localhost:8080 . To stop (or remove) the service afterwards, you can use the following: nssm stop $name nssm remove $name confirm Linux To run your Pode server as a Linux service you just need to create a <name>.service file at /etc/systemd/system . The following is example content for an example pode-server.service file, which run PowerShell Core ( pwsh ), as well as you script: sudo vim /etc/systemd/system/pode-server.service [ Unit ] Description = Pode Web Server After = network.target [ Service ] ExecStart = /usr/bin/pwsh -c /usr/src/pode/server.ps1 -nop -ep Bypass Restart = always [ Install ] WantedBy = multi-user.target Alias = pode-server.service Finally, start the service: sudo systemctl start pode-server Info You can now navigate to your server, ie: http://localhost:8080 . To stop the service afterwards, you can use the following: sudo systemctl stop pode-server","title":"Service"},{"location":"Hosting/RunAsService/#service","text":"Rather than having to manually invoke your Pode server script each time, it's best if you can have it start automatically when your computer/server starts. Below you'll see how to set your script to run as either a Windows or a Linux service.","title":"Service"},{"location":"Hosting/RunAsService/#windows","text":"To run your Pode server as a Windows service, we recommend using the NSSM tool. To install on Windows you can use Chocolatey: choco install nssm -y Once installed, you'll need to set the location of the pwsh or powershell executables as a variable: $exe = ( Get-Command pwsh . exe ). Source # or $exe = ( Get-Command powershell . exe ). Source Next, define the name of the Windows service; as well as the full file path to your Pode server script, and the arguments to be supplied to PowerShell: $name = 'Pode Web Server' $file = 'C:\\Pode\\Server.ps1' $arg = \"-ExecutionPolicy Bypass -NoProfile -Command `\" $( $file ) `\" \" Finally, install and start the service: nssm install $name $exe $arg nssm start $name Info You can now navigate to your server, ie: http://localhost:8080 . To stop (or remove) the service afterwards, you can use the following: nssm stop $name nssm remove $name confirm","title":"Windows"},{"location":"Hosting/RunAsService/#linux","text":"To run your Pode server as a Linux service you just need to create a <name>.service file at /etc/systemd/system . The following is example content for an example pode-server.service file, which run PowerShell Core ( pwsh ), as well as you script: sudo vim /etc/systemd/system/pode-server.service [ Unit ] Description = Pode Web Server After = network.target [ Service ] ExecStart = /usr/bin/pwsh -c /usr/src/pode/server.ps1 -nop -ep Bypass Restart = always [ Install ] WantedBy = multi-user.target Alias = pode-server.service Finally, start the service: sudo systemctl start pode-server Info You can now navigate to your server, ie: http://localhost:8080 . To stop the service afterwards, you can use the following: sudo systemctl stop pode-server","title":"Linux"},{"location":"Listeners/Kestrel/","text":"Kestrel Starting from Pode 2.0, there is now support for Kestrel as a custom listener for Pode. This Kestrel listener can be found in the Pode.Kestrel module. The Kestrel listener, at present, only supports HTTP/HTTPS. Important The Kestrel listener only works in PowerShell 6.0+ Usage To begin using the Kestrel listener, you'll first need to install the module: Install-Module -Name Pode . Kestrel then, in your main server script, you'll need to import the module and set the -ListenerType : Import-Module -Name Pode . Kestrel Start-PodeServer -ListenerType Kestrel { # endpoints, routes, etc } and that's it!","title":"Kestrel"},{"location":"Listeners/Kestrel/#kestrel","text":"Starting from Pode 2.0, there is now support for Kestrel as a custom listener for Pode. This Kestrel listener can be found in the Pode.Kestrel module. The Kestrel listener, at present, only supports HTTP/HTTPS. Important The Kestrel listener only works in PowerShell 6.0+","title":"Kestrel"},{"location":"Listeners/Kestrel/#usage","text":"To begin using the Kestrel listener, you'll first need to install the module: Install-Module -Name Pode . Kestrel then, in your main server script, you'll need to import the module and set the -ListenerType : Import-Module -Name Pode . Kestrel Start-PodeServer -ListenerType Kestrel { # endpoints, routes, etc } and that's it!","title":"Usage"},{"location":"Listeners/Pode/","text":"Pode Pode has an inbuilt .NET cross-platform socket listener that is used by default. You don't need to do anything special outside of using Pode normally. Pode's default listener supports HTTP/HTTPS, WS/WSS, SMTP and TCP.","title":"Pode"},{"location":"Listeners/Pode/#pode","text":"Pode has an inbuilt .NET cross-platform socket listener that is used by default. You don't need to do anything special outside of using Pode normally. Pode's default listener supports HTTP/HTTPS, WS/WSS, SMTP and TCP.","title":"Pode"},{"location":"Servers/SMTP/","text":"SMTP Pode has an inbuilt SMTP server for receiving emails, with support for non-TLS as well as implicit and explicit TLS. Unlike with web servers that use the Route functions, an SMTP server use the Handler functions, which let you specify logic for handling responses from TCP streams. Tip You can setup multiple different Handlers to run different logic for one email. Usage To create a Handler for the SMTP server you can use the following example: Start-PodeServer { Add-PodeEndpoint -Address * -Port 25 -Protocol Smtp Add-PodeHandler -Type Smtp -Name 'Main' -ScriptBlock { Write-Host $SmtpEvent . Email . From Write-Host $SmtpEvent . Email . To Write-Host $SmtpEvent . Email . Body } } Starting this server will listen for incoming email on localhost:25 . The Handler will have access to an $SmtpEvent object (see below), which contains information about the received email. An example of sending an email to the above server via Send-MailMessage : Send-MailMessage -SmtpServer localhost -To 'to@example.com' -From 'from@example.com' -Body 'Hello' -Subject 'Hi there' -Port 25 TLS You can enable TLS for your endpoints by supplying the normal relevant certificates parameters on Add-PodeEndpoint , and setting the -Protocol to Smtps . You can also toggle between implicit and explicit TLS by using the -TlsMode parameter. By default the TLS mode is implicit, and the default port for implicit TLS is 465; for explicit TLS it's 587. These can of course be customised using -Port . Start-PodeServer { Add-PodeEndpoint -Address * -Protocol Smtps -SelfSigned -TlsMode Explicit Add-PodeEndpoint -Address * -Protocol Smtps -SelfSigned -TlsMode Implicit Add-PodeHandler -Type Smtp -Name 'Main' -ScriptBlock { Write-Host $SmtpEvent . Email . From Write-Host $SmtpEvent . Email . To Write-Host $SmtpEvent . Email . Body } } .NET only supports explicit TLS, so an example of sending an email to the explicit TLS endpoint, on port 587, is as follows: # if using a self signed cert, make sure to run the below [System.Net.ServicePointManager] :: ServerCertificateValidationCallback = { return $true } # send the email Send-MailMessage -SmtpServer localhost -To 'to@pode.com' -From 'from@pode.com' -Body 'Hello' -Subject 'Hi there' -Port 587 -UseSSL Attachments The SMTP server also accepts attachments, which are available in a Handler via $SmtpEvent.Email.Attachments . This property contains a list of available attachments on the Email, each attachment has a Name and Bytes properties - the latter being the raw byte content of the attachment. An attachment also has a .Save(<path>) method. For example, if the Email has an a single attachment: an example.png file, and you wish to save it, then the following will save the file to C:\\temp\\example.png : Add-PodeHandler -Type Smtp -Name 'Main' -ScriptBlock { $SmtpEvent . Email . Attachments [ 0 ]. Save ( 'C:\\temp' ) } Objects SmtpEvent The SMTP Handler will be passed the $SmtpEvent object, that contains the Request, Response, and Email properties: Name Type Description Request object The raw Request object Response object The raw Response object Lockable hashtable A synchronized hashtable that can be used with Lock-PodeObject Email hashtable An object containing data from the email, as seen below Endpoint hashtable Contains the Address and Protocol of the endpoint being hit - such as \"pode.example.com\" or \"127.0.0.2\", or HTTP or HTTPS for the Protocol Timestamp datetime The current date and time of the Request Email The Email property contains the following properties: Name Type Description From string The email address of the person sending the email To string[] The email addresses receiving the email (this is to, cc, and bcc) Subject string The subject of the email Body string The body of the email, decoded depending on content type/encoding IsUrgent boolean This will be true if the Priority/Importance of the email is High, otherwise false ContentType string The content type of the original email body ContentEncoding string The content encoding of the original email body Headers hashtable A list of all the headers received for the email Data string The full raw data of the email Attachments PodeSmtpAttachment[] An list of SMTP attachments, containing the Name and Bytes of the attachment","title":"SMTP"},{"location":"Servers/SMTP/#smtp","text":"Pode has an inbuilt SMTP server for receiving emails, with support for non-TLS as well as implicit and explicit TLS. Unlike with web servers that use the Route functions, an SMTP server use the Handler functions, which let you specify logic for handling responses from TCP streams. Tip You can setup multiple different Handlers to run different logic for one email.","title":"SMTP"},{"location":"Servers/SMTP/#usage","text":"To create a Handler for the SMTP server you can use the following example: Start-PodeServer { Add-PodeEndpoint -Address * -Port 25 -Protocol Smtp Add-PodeHandler -Type Smtp -Name 'Main' -ScriptBlock { Write-Host $SmtpEvent . Email . From Write-Host $SmtpEvent . Email . To Write-Host $SmtpEvent . Email . Body } } Starting this server will listen for incoming email on localhost:25 . The Handler will have access to an $SmtpEvent object (see below), which contains information about the received email. An example of sending an email to the above server via Send-MailMessage : Send-MailMessage -SmtpServer localhost -To 'to@example.com' -From 'from@example.com' -Body 'Hello' -Subject 'Hi there' -Port 25","title":"Usage"},{"location":"Servers/SMTP/#tls","text":"You can enable TLS for your endpoints by supplying the normal relevant certificates parameters on Add-PodeEndpoint , and setting the -Protocol to Smtps . You can also toggle between implicit and explicit TLS by using the -TlsMode parameter. By default the TLS mode is implicit, and the default port for implicit TLS is 465; for explicit TLS it's 587. These can of course be customised using -Port . Start-PodeServer { Add-PodeEndpoint -Address * -Protocol Smtps -SelfSigned -TlsMode Explicit Add-PodeEndpoint -Address * -Protocol Smtps -SelfSigned -TlsMode Implicit Add-PodeHandler -Type Smtp -Name 'Main' -ScriptBlock { Write-Host $SmtpEvent . Email . From Write-Host $SmtpEvent . Email . To Write-Host $SmtpEvent . Email . Body } } .NET only supports explicit TLS, so an example of sending an email to the explicit TLS endpoint, on port 587, is as follows: # if using a self signed cert, make sure to run the below [System.Net.ServicePointManager] :: ServerCertificateValidationCallback = { return $true } # send the email Send-MailMessage -SmtpServer localhost -To 'to@pode.com' -From 'from@pode.com' -Body 'Hello' -Subject 'Hi there' -Port 587 -UseSSL","title":"TLS"},{"location":"Servers/SMTP/#attachments","text":"The SMTP server also accepts attachments, which are available in a Handler via $SmtpEvent.Email.Attachments . This property contains a list of available attachments on the Email, each attachment has a Name and Bytes properties - the latter being the raw byte content of the attachment. An attachment also has a .Save(<path>) method. For example, if the Email has an a single attachment: an example.png file, and you wish to save it, then the following will save the file to C:\\temp\\example.png : Add-PodeHandler -Type Smtp -Name 'Main' -ScriptBlock { $SmtpEvent . Email . Attachments [ 0 ]. Save ( 'C:\\temp' ) }","title":"Attachments"},{"location":"Servers/SMTP/#objects","text":"","title":"Objects"},{"location":"Servers/SMTP/#smtpevent","text":"The SMTP Handler will be passed the $SmtpEvent object, that contains the Request, Response, and Email properties: Name Type Description Request object The raw Request object Response object The raw Response object Lockable hashtable A synchronized hashtable that can be used with Lock-PodeObject Email hashtable An object containing data from the email, as seen below Endpoint hashtable Contains the Address and Protocol of the endpoint being hit - such as \"pode.example.com\" or \"127.0.0.2\", or HTTP or HTTPS for the Protocol Timestamp datetime The current date and time of the Request","title":"SmtpEvent"},{"location":"Servers/SMTP/#email","text":"The Email property contains the following properties: Name Type Description From string The email address of the person sending the email To string[] The email addresses receiving the email (this is to, cc, and bcc) Subject string The subject of the email Body string The body of the email, decoded depending on content type/encoding IsUrgent boolean This will be true if the Priority/Importance of the email is High, otherwise false ContentType string The content type of the original email body ContentEncoding string The content encoding of the original email body Headers hashtable A list of all the headers received for the email Data string The full raw data of the email Attachments PodeSmtpAttachment[] An list of SMTP attachments, containing the Name and Bytes of the attachment","title":"Email"},{"location":"Servers/TCP/","text":"TCP Pode has a generic TCP server type inbuilt. Unlike the other server types, the TCP server lets you build pretty much anything over TCP. The TCP server supports non-TLS, as well as implicit and explicit TLS endpoints. Where a web server using Routes, a TCP server uses Verbs - think of them like \"commands\" or \"phrases\". Requests sent will be matched to a Verb, and that Verb's logic invoked (more info below). Important This server type is still in the early days, so if you find any bugs or have any suggestions, please feel free to raise them over on GitHub or Discord ! \ud83d\ude04 Usage To create a TCP server you need to create an appropriate Endpoint with the TCP protocol, plus some Verbs . The following example will create a TCP endpoint listening on localhost:9000 , and creates a simple Verb to respond back to a connected client: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Tcp -CRLFMessageEnd -Acknowledge 'Welcome!' Add-PodeVerb -Verb 'HELLO' -ScriptBlock { Write-PodeTcpClient -Message 'HI' } } Note If you use telnet to test/send data to a TCP server, ensure that the Endpoint has the -CRLFMessageEnd switch. If missed, the server will receive data in single characters. Start the above server, and then in a different terminal start telnet and send \"HELLO\" - pressing Enter to send: $> telnet localhost 9000 S > Welcome ! C > HELLO S > HI When you send \"HELLO\", the server will respond with \"HI\". If you can't use telnet, then there's a quick test script below to use. Important If you're using telnet to send data, backspaces will be recorded as sent data. Acknowledge If you'd like to send an initial message to clients as soon as they connect, you can set an -Acknowledge message on the Endpoint: Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Tcp -CRLFMessageEnd -Acknowledge 'Welcome!' If you connect via telnet now: $> telnet localhost 9000 S > Welcome ! Verbs Verbs work like Routes, whereby you can setup many of them and Pode will invoke the Verb's logic that best matches the data sent. Data sent usually should be in a structured format, such as <COMMAND> <PARAMETERS> - akin to SMTP and FTP. However, data can be unstructured, and this is where the wildcard Verb comes in handy. To create a Verb you use Add-PodeVerb : Add-PodeVerb -Verb 'HELLO' -ScriptBlock { Write-PodeTcpClient -Message 'HI' } Parameters Also similar to Routes, Verbs support parameters in the format :<name> . These parameters will be available in $TcpEvent.Parameters : Add-PodeVerb -Verb 'HELLO :username' -ScriptBlock { Write-PodeTcpClient -Message \"HI, $( $TcpEvent . Parameters . username ) \" } Wildcard The wildcard Verb, denoted via -Verb * , is a catch-all for any data that doesn't match other defined Verbs. You could use this Verb to write back to the client that they sent invalid data: Add-PodeVerb -Verb * -ScriptBlock { Write-PodeTcpClient -Message 'Unrecognised verb sent' } Or, you can access the data sent by the client via either $TcpEvent.Request.RawBody or $TcpEvent.Request.Body . RawBody is a byte array of the data, where as Body is a UTF8 decoded string of the RawBody. This should allow you to then parse any freestyle data as you see fit, such as a simple web server: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Tcp Add-PodeVerb -Verb * -Close -ScriptBlock { $TcpEvent . Request . Body | Out-Default Write-PodeTcpClient -Message \"HTTP/1.1 200 `r`n Connection: close `r`n`r`n <b>Hello, there</b>\" } } Running the above server and navigating to http://localhost:9000 will greet you with a message. The raw data sent by the browser will be display on the terminal; this could be parsed to do different things. SSL Upgrade If you're using explicit TLS on your TCP server, then at some point you'll want to upgrade the connection to using SSL. There are two ways of achieving this; one is to use a simple command verb, and the -UpgradeToSsl switch: Add-PodeVerb -Verb 'STARTTLS' -UpgradeToSsl The second way is to call the upgrade method directly: Add-PodeVerb -Verb 'STARTTLS' -ScriptBlock { Write-PodeTcpClient -Message 'TLS GO AHEAD' $TcpEvent . Request . UpgradeToSSL () } Close At some point you'll likely need to close the connection from the server side. There are two ways of achieving this; one is to use a simple command verb, and the -Close switch: Add-PodeVerb -Verb 'QUIT' -Close The second way is to call Close-PodeTcpClient directly: Add-PodeVerb -Verb 'QUIT' -ScriptBlock { Write-PodeTcpClient -Message 'Bye!' Close-PodeTcpClient } Read Data In the above examples you've seen Write-PodeTcpClient being used. This function simply sends data back to a connected client, but what if we want to read data? Sometimes, instead of ending a Verb's logic and letting Pode wait for the next data, you might want to receive this data yourself in a Verb. For this there is Read-PodeTcpClient : Add-PodeVerb -Verb 'HELLO' -ScriptBlock { Write-PodeTcpClient -Message \"Hi! What's your name?\" $name = Read-PodeTcpClient -CRLFMessageEnd Write-PodeTcpClient -Message \"Hi, $( $name ) !\" } TLS You can enable TLS for your endpoints by supplying the normal relevant certificates parameters on Add-PodeEndpoint , and setting the -Protocol to Tcps . You can also toggle between implicit and explicit TLS by using the -TlsMode parameter. By default the TLS mode is implicit, and the default port for implicit TLS is 9002; for explicit TLS it's 9003. These can of course be customised using -Port . Start-PodeServer { Add-PodeEndpoint -Address * -Protocol Tcps -SelfSigned -TlsMode Explicit Add-PodeEndpoint -Address * -Protocol Tcps -SelfSigned -TlsMode Implicit Add-PodeVerb -Verb 'HELLO' -ScriptBlock { Write-PodeTcpClient -Message 'HI' } } Objects TcpEvent Verbs will be passed the $TcpEvent object, that contains the Request, Response, and other properties: Name Type Description Request object The raw Request object Response object The raw Response object Lockable hashtable A synchronized hashtable that can be used with Lock-PodeObject Endpoint hashtable Contains the Address and Protocol of the endpoint being hit - such as \"pode.example.com\" or \"127.0.0.2\", or HTTP or HTTPS for the Protocol Parameters hashtable Contains the parsed parameter values from the Verb's path Timestamp datetime The current date and time of the Request Test Send The following function can be used to test sending messages to a TCP server. This is a modified version of the function found here . function Send-TCPMessage ( $Endpoint , $Port , $Message ) { # Setup connection $Address = [System.Net.IPAddress] :: Parse ( [System.Net.Dns] :: GetHostAddresses ( $EndPoint )) $Socket = New-Object System . Net . Sockets . TCPClient ( $Address , $Port ) # Setup stream wrtier $Stream = $Socket . GetStream () $Writer = New-Object System . IO . StreamWriter ( $Stream ) # Write message to stream $Writer . WriteLine ( $Message ) $Writer . Flush () # Close connection and stream Start-Sleep -Seconds 1 $Stream . Close () $Socket . Close () } ie: Send-TCPMessage -Port 9000 -EndPoint 127 . 0 . 0 . 1 -Message \"HELLO\" Note If you have the -CRLFMessageEnd switch specified, you'll need to add `r`n to the end of the -Message","title":"TCP"},{"location":"Servers/TCP/#tcp","text":"Pode has a generic TCP server type inbuilt. Unlike the other server types, the TCP server lets you build pretty much anything over TCP. The TCP server supports non-TLS, as well as implicit and explicit TLS endpoints. Where a web server using Routes, a TCP server uses Verbs - think of them like \"commands\" or \"phrases\". Requests sent will be matched to a Verb, and that Verb's logic invoked (more info below). Important This server type is still in the early days, so if you find any bugs or have any suggestions, please feel free to raise them over on GitHub or Discord ! \ud83d\ude04","title":"TCP"},{"location":"Servers/TCP/#usage","text":"To create a TCP server you need to create an appropriate Endpoint with the TCP protocol, plus some Verbs . The following example will create a TCP endpoint listening on localhost:9000 , and creates a simple Verb to respond back to a connected client: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Tcp -CRLFMessageEnd -Acknowledge 'Welcome!' Add-PodeVerb -Verb 'HELLO' -ScriptBlock { Write-PodeTcpClient -Message 'HI' } } Note If you use telnet to test/send data to a TCP server, ensure that the Endpoint has the -CRLFMessageEnd switch. If missed, the server will receive data in single characters. Start the above server, and then in a different terminal start telnet and send \"HELLO\" - pressing Enter to send: $> telnet localhost 9000 S > Welcome ! C > HELLO S > HI When you send \"HELLO\", the server will respond with \"HI\". If you can't use telnet, then there's a quick test script below to use. Important If you're using telnet to send data, backspaces will be recorded as sent data.","title":"Usage"},{"location":"Servers/TCP/#acknowledge","text":"If you'd like to send an initial message to clients as soon as they connect, you can set an -Acknowledge message on the Endpoint: Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Tcp -CRLFMessageEnd -Acknowledge 'Welcome!' If you connect via telnet now: $> telnet localhost 9000 S > Welcome !","title":"Acknowledge"},{"location":"Servers/TCP/#verbs","text":"Verbs work like Routes, whereby you can setup many of them and Pode will invoke the Verb's logic that best matches the data sent. Data sent usually should be in a structured format, such as <COMMAND> <PARAMETERS> - akin to SMTP and FTP. However, data can be unstructured, and this is where the wildcard Verb comes in handy. To create a Verb you use Add-PodeVerb : Add-PodeVerb -Verb 'HELLO' -ScriptBlock { Write-PodeTcpClient -Message 'HI' }","title":"Verbs"},{"location":"Servers/TCP/#parameters","text":"Also similar to Routes, Verbs support parameters in the format :<name> . These parameters will be available in $TcpEvent.Parameters : Add-PodeVerb -Verb 'HELLO :username' -ScriptBlock { Write-PodeTcpClient -Message \"HI, $( $TcpEvent . Parameters . username ) \" }","title":"Parameters"},{"location":"Servers/TCP/#wildcard","text":"The wildcard Verb, denoted via -Verb * , is a catch-all for any data that doesn't match other defined Verbs. You could use this Verb to write back to the client that they sent invalid data: Add-PodeVerb -Verb * -ScriptBlock { Write-PodeTcpClient -Message 'Unrecognised verb sent' } Or, you can access the data sent by the client via either $TcpEvent.Request.RawBody or $TcpEvent.Request.Body . RawBody is a byte array of the data, where as Body is a UTF8 decoded string of the RawBody. This should allow you to then parse any freestyle data as you see fit, such as a simple web server: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Tcp Add-PodeVerb -Verb * -Close -ScriptBlock { $TcpEvent . Request . Body | Out-Default Write-PodeTcpClient -Message \"HTTP/1.1 200 `r`n Connection: close `r`n`r`n <b>Hello, there</b>\" } } Running the above server and navigating to http://localhost:9000 will greet you with a message. The raw data sent by the browser will be display on the terminal; this could be parsed to do different things.","title":"Wildcard"},{"location":"Servers/TCP/#ssl-upgrade","text":"If you're using explicit TLS on your TCP server, then at some point you'll want to upgrade the connection to using SSL. There are two ways of achieving this; one is to use a simple command verb, and the -UpgradeToSsl switch: Add-PodeVerb -Verb 'STARTTLS' -UpgradeToSsl The second way is to call the upgrade method directly: Add-PodeVerb -Verb 'STARTTLS' -ScriptBlock { Write-PodeTcpClient -Message 'TLS GO AHEAD' $TcpEvent . Request . UpgradeToSSL () }","title":"SSL Upgrade"},{"location":"Servers/TCP/#close","text":"At some point you'll likely need to close the connection from the server side. There are two ways of achieving this; one is to use a simple command verb, and the -Close switch: Add-PodeVerb -Verb 'QUIT' -Close The second way is to call Close-PodeTcpClient directly: Add-PodeVerb -Verb 'QUIT' -ScriptBlock { Write-PodeTcpClient -Message 'Bye!' Close-PodeTcpClient }","title":"Close"},{"location":"Servers/TCP/#read-data","text":"In the above examples you've seen Write-PodeTcpClient being used. This function simply sends data back to a connected client, but what if we want to read data? Sometimes, instead of ending a Verb's logic and letting Pode wait for the next data, you might want to receive this data yourself in a Verb. For this there is Read-PodeTcpClient : Add-PodeVerb -Verb 'HELLO' -ScriptBlock { Write-PodeTcpClient -Message \"Hi! What's your name?\" $name = Read-PodeTcpClient -CRLFMessageEnd Write-PodeTcpClient -Message \"Hi, $( $name ) !\" }","title":"Read Data"},{"location":"Servers/TCP/#tls","text":"You can enable TLS for your endpoints by supplying the normal relevant certificates parameters on Add-PodeEndpoint , and setting the -Protocol to Tcps . You can also toggle between implicit and explicit TLS by using the -TlsMode parameter. By default the TLS mode is implicit, and the default port for implicit TLS is 9002; for explicit TLS it's 9003. These can of course be customised using -Port . Start-PodeServer { Add-PodeEndpoint -Address * -Protocol Tcps -SelfSigned -TlsMode Explicit Add-PodeEndpoint -Address * -Protocol Tcps -SelfSigned -TlsMode Implicit Add-PodeVerb -Verb 'HELLO' -ScriptBlock { Write-PodeTcpClient -Message 'HI' } }","title":"TLS"},{"location":"Servers/TCP/#objects","text":"","title":"Objects"},{"location":"Servers/TCP/#tcpevent","text":"Verbs will be passed the $TcpEvent object, that contains the Request, Response, and other properties: Name Type Description Request object The raw Request object Response object The raw Response object Lockable hashtable A synchronized hashtable that can be used with Lock-PodeObject Endpoint hashtable Contains the Address and Protocol of the endpoint being hit - such as \"pode.example.com\" or \"127.0.0.2\", or HTTP or HTTPS for the Protocol Parameters hashtable Contains the parsed parameter values from the Verb's path Timestamp datetime The current date and time of the Request","title":"TcpEvent"},{"location":"Servers/TCP/#test-send","text":"The following function can be used to test sending messages to a TCP server. This is a modified version of the function found here . function Send-TCPMessage ( $Endpoint , $Port , $Message ) { # Setup connection $Address = [System.Net.IPAddress] :: Parse ( [System.Net.Dns] :: GetHostAddresses ( $EndPoint )) $Socket = New-Object System . Net . Sockets . TCPClient ( $Address , $Port ) # Setup stream wrtier $Stream = $Socket . GetStream () $Writer = New-Object System . IO . StreamWriter ( $Stream ) # Write message to stream $Writer . WriteLine ( $Message ) $Writer . Flush () # Close connection and stream Start-Sleep -Seconds 1 $Stream . Close () $Socket . Close () } ie: Send-TCPMessage -Port 9000 -EndPoint 127 . 0 . 0 . 1 -Message \"HELLO\" Note If you have the -CRLFMessageEnd switch specified, you'll need to add `r`n to the end of the -Message","title":"Test Send"},{"location":"Tutorials/Basics/","text":"Basics Warning You can only start one server in your script Although not required, it is recommended to import the Pode module using a maximum version, to avoid any breaking changes from new major versions: Import-Module -Name Pode -MaximumVersion 2 . 99 . 99 The script for your server should be set in the Start-PodeServer function, via the -ScriptBlock parameter. The following example will listen over HTTP on port 8080, and expose a simple HTML page of running processes at http://localhost:8080/processes : Start-PodeServer { # attach to port 8080 for http Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # a simple page for displaying services Add-PodePage -Name 'processes' -ScriptBlock { Get-Process } } To start the server you can either: Directly run the ./server.ps1 script, or If you've created a package.json file, ensure the ./server.ps1 script is set as your main or scripts/start , then just run pode start (more here ) Terminating Once your Pode server has started, you can terminate it at any time using Ctrl+C . If you want to disable your server from being terminated then use the -DisableTermination switch on the Start-PodeServer function. Restarting You can restart your Pode server by using Ctrl+R , or on Unix you can also use Shift+C and Shift+R as well. When the server restarts it will only re-invoke the initial -ScriptBlock , so any changes made to this main scriptblock will not be reflected - you'll need to terminate and start your server again. Script from File You can also define your server's scriptblock in a separate file, and use it via the -FilePath parameter on the Start-PodeServer function. Using this approach there are 2 ways to start you server: You can put your scriptblock into a separate file, and put your Start-PodeServer call into another script. This other script is then what you call on the CLI. You can directly call Start-PodeServer on the CLI. When you call Start-PodeServer directly on the CLI, then your server's root path will be set to directory of that file. You can override this behaviour by either defining a path via -RootPath , or by telling the server to use the current working path as root via -CurrentPath . For example, the following is a file that contains the same scriptblock for the server at the top of this page. Following that are the two ways to run the server - the first is via another script, and the second is directly from the CLI: File.ps1 { # attach to port 8080 for http Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # a simple page for displaying services Add-PodePage -Name 'processes' -ScriptBlock { Get-Process } } Server.ps1 (start via script) Start-PodeServer -FilePath './File.ps1' then use ./Server.ps1 on the CLI. CLI (start from CLI) PS > Start-PodeServer -FilePath './File.ps1' Tip Normally when you restart your Pode server any changes to the main scriptblock don't reflect. However, if you reference a file instead, then restarting the server will reload the scriptblock from that file - so any changes will reflect.","title":"Basics"},{"location":"Tutorials/Basics/#basics","text":"Warning You can only start one server in your script Although not required, it is recommended to import the Pode module using a maximum version, to avoid any breaking changes from new major versions: Import-Module -Name Pode -MaximumVersion 2 . 99 . 99 The script for your server should be set in the Start-PodeServer function, via the -ScriptBlock parameter. The following example will listen over HTTP on port 8080, and expose a simple HTML page of running processes at http://localhost:8080/processes : Start-PodeServer { # attach to port 8080 for http Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # a simple page for displaying services Add-PodePage -Name 'processes' -ScriptBlock { Get-Process } } To start the server you can either: Directly run the ./server.ps1 script, or If you've created a package.json file, ensure the ./server.ps1 script is set as your main or scripts/start , then just run pode start (more here )","title":"Basics"},{"location":"Tutorials/Basics/#terminating","text":"Once your Pode server has started, you can terminate it at any time using Ctrl+C . If you want to disable your server from being terminated then use the -DisableTermination switch on the Start-PodeServer function.","title":"Terminating"},{"location":"Tutorials/Basics/#restarting","text":"You can restart your Pode server by using Ctrl+R , or on Unix you can also use Shift+C and Shift+R as well. When the server restarts it will only re-invoke the initial -ScriptBlock , so any changes made to this main scriptblock will not be reflected - you'll need to terminate and start your server again.","title":"Restarting"},{"location":"Tutorials/Basics/#script-from-file","text":"You can also define your server's scriptblock in a separate file, and use it via the -FilePath parameter on the Start-PodeServer function. Using this approach there are 2 ways to start you server: You can put your scriptblock into a separate file, and put your Start-PodeServer call into another script. This other script is then what you call on the CLI. You can directly call Start-PodeServer on the CLI. When you call Start-PodeServer directly on the CLI, then your server's root path will be set to directory of that file. You can override this behaviour by either defining a path via -RootPath , or by telling the server to use the current working path as root via -CurrentPath . For example, the following is a file that contains the same scriptblock for the server at the top of this page. Following that are the two ways to run the server - the first is via another script, and the second is directly from the CLI: File.ps1 { # attach to port 8080 for http Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # a simple page for displaying services Add-PodePage -Name 'processes' -ScriptBlock { Get-Process } } Server.ps1 (start via script) Start-PodeServer -FilePath './File.ps1' then use ./Server.ps1 on the CLI. CLI (start from CLI) PS > Start-PodeServer -FilePath './File.ps1' Tip Normally when you restart your Pode server any changes to the main scriptblock don't reflect. However, if you reference a file instead, then restarting the server will reload the scriptblock from that file - so any changes will reflect.","title":"Script from File"},{"location":"Tutorials/Certificates/","text":"Certificates Pode has the ability to generate and bind self-signed certificates (for dev/testing), as well as the ability to bind existing certificates for HTTPS. There are 8 ways to setup HTTPS on Add-PodeEndpoint : Supplying just the -Certificate , which is the path to files such as a .cer or .pem file. Supplying both the -Certificate and -CertificatePassword , which is the path to a .pfx file and its password. Supplying both the -Certificate and -CertificateKey , which is the paths to certificate/key PEM file pairs. Supplying all of -Certificate , -CertificateKey , and -CertificatePassword , which is the paths to certificate/key PEM file pairs and the password for an encrypted key. Supplying a -CertificateThumbprint for a certificate installed at Cert:\\CurrentUser\\My on Windows. Supplying a -CertificateName for a certificate installed at Cert:\\CurrentUser\\My on Windows. Supplying -X509Certificate of type X509Certificate . Supplying the -SelfSigned switch, to generate a quick self-signed X509Certificate . Note: for 5. and 6. you can change the certificate store used by supplying -CertificateStoreName and/or -CertificateStoreLocation . Usage File PFX To bind a certificate PFX file, you use the -Certificate parameter, along with the -CertificatePassword parameter for the PFX certificate. The following example supplies the path to some .pfx to enable HTTPS support: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8090 -Protocol Https -Certificate './cert.pfx' -CertificatePassword 'Hunter2' } PEM Pode has support for binding certificate/key PEM file pairs, on PowerShell 7+ this works out-of-the-box. However, for PowerShell 5/6 you are required to have OpenSSL installed. To bind a certificate/key PEM file pairs generated via LetsEncrypt or OpenSSL, you supply their paths to the -Certificate and -CertificateKey parameters. For example, if you generate the certificate/key using the following: openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes Then your endpoint would be created as: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8090 -Protocol Https -Certificate './cert.pem' -CertificateKey './key.pem' } However, if you generate the certificate/key and encrypt the key with a passphrase: openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 Then the endpoint is created as follows: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8090 -Protocol Https -Certificate './cert.pem' -CertificateKey './key.pem' -CertificatePassword '<passphrase>' } Depending on how you generated the certificate, especially if you used the above openssl, you might have to install the certificate to your local certificate store for it to be trusted. If you're using Invoke-WebRequest or Invoke-RestMethod on PowerShell 6+ you can supply the -SkipCertificateCheck switch. Thumbprint On Windows only, you can use a certificate that is installed at Cert:\\CurrentUser\\My using its thumbprint: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8090 -Protocol Https -CertificateThumbprint '2A623A8DC46ED42A13B27DD045BFC91FDDAEB957' } Note: You can change the certificate store used by supplying -CertificateStoreName and/or -CertificateStoreLocation . Name On Windows only, you can use a certificate that is installed at Cert:\\CurrentUser\\My using its subject name: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8090 -Protocol Https -CertificateName '*.example.com' } Note: You can change the certificate store used by supplying -CertificateStoreName and/or -CertificateStoreLocation . X509 The following will instead create an X509Certificate, and pass that to the endpoint instead: $cert = [System.Security.Cryptography.X509Certificates.X509Certificate2] :: new ( './certs/example.cer' ) Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -X509Certificate $cert Self-Signed If you are developing/testing a site on HTTPS then Pode can generate and bind quick self-signed certificates. To do this you can pass the -SelfSigned switch: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -SelfSigned } You might get a warning in the browser about the certificate, and this is fine. If you're using Invoke-WebRequest or Invoke-RestMethod on PowerShell 6+ you can supply the -SkipCertificateCheck switch. SSL Protocols The default allowed SSL protocols are SSL3 and TLS1.2 (or just TLS1.2 on MacOS), but you can change these to any of: SSL2, SSL3, TLS, TLS11, TLS12, TLS13. This is specified in your server.psd1 configuration file: @{ Server = @{ Ssl = @{ Protocols = @( 'TLS' , 'TLS11' , 'TLS12' ) } } }","title":"Certificates"},{"location":"Tutorials/Certificates/#certificates","text":"Pode has the ability to generate and bind self-signed certificates (for dev/testing), as well as the ability to bind existing certificates for HTTPS. There are 8 ways to setup HTTPS on Add-PodeEndpoint : Supplying just the -Certificate , which is the path to files such as a .cer or .pem file. Supplying both the -Certificate and -CertificatePassword , which is the path to a .pfx file and its password. Supplying both the -Certificate and -CertificateKey , which is the paths to certificate/key PEM file pairs. Supplying all of -Certificate , -CertificateKey , and -CertificatePassword , which is the paths to certificate/key PEM file pairs and the password for an encrypted key. Supplying a -CertificateThumbprint for a certificate installed at Cert:\\CurrentUser\\My on Windows. Supplying a -CertificateName for a certificate installed at Cert:\\CurrentUser\\My on Windows. Supplying -X509Certificate of type X509Certificate . Supplying the -SelfSigned switch, to generate a quick self-signed X509Certificate . Note: for 5. and 6. you can change the certificate store used by supplying -CertificateStoreName and/or -CertificateStoreLocation .","title":"Certificates"},{"location":"Tutorials/Certificates/#usage","text":"","title":"Usage"},{"location":"Tutorials/Certificates/#file","text":"","title":"File"},{"location":"Tutorials/Certificates/#pfx","text":"To bind a certificate PFX file, you use the -Certificate parameter, along with the -CertificatePassword parameter for the PFX certificate. The following example supplies the path to some .pfx to enable HTTPS support: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8090 -Protocol Https -Certificate './cert.pfx' -CertificatePassword 'Hunter2' }","title":"PFX"},{"location":"Tutorials/Certificates/#pem","text":"Pode has support for binding certificate/key PEM file pairs, on PowerShell 7+ this works out-of-the-box. However, for PowerShell 5/6 you are required to have OpenSSL installed. To bind a certificate/key PEM file pairs generated via LetsEncrypt or OpenSSL, you supply their paths to the -Certificate and -CertificateKey parameters. For example, if you generate the certificate/key using the following: openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes Then your endpoint would be created as: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8090 -Protocol Https -Certificate './cert.pem' -CertificateKey './key.pem' } However, if you generate the certificate/key and encrypt the key with a passphrase: openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 Then the endpoint is created as follows: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8090 -Protocol Https -Certificate './cert.pem' -CertificateKey './key.pem' -CertificatePassword '<passphrase>' } Depending on how you generated the certificate, especially if you used the above openssl, you might have to install the certificate to your local certificate store for it to be trusted. If you're using Invoke-WebRequest or Invoke-RestMethod on PowerShell 6+ you can supply the -SkipCertificateCheck switch.","title":"PEM"},{"location":"Tutorials/Certificates/#thumbprint","text":"On Windows only, you can use a certificate that is installed at Cert:\\CurrentUser\\My using its thumbprint: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8090 -Protocol Https -CertificateThumbprint '2A623A8DC46ED42A13B27DD045BFC91FDDAEB957' } Note: You can change the certificate store used by supplying -CertificateStoreName and/or -CertificateStoreLocation .","title":"Thumbprint"},{"location":"Tutorials/Certificates/#name","text":"On Windows only, you can use a certificate that is installed at Cert:\\CurrentUser\\My using its subject name: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8090 -Protocol Https -CertificateName '*.example.com' } Note: You can change the certificate store used by supplying -CertificateStoreName and/or -CertificateStoreLocation .","title":"Name"},{"location":"Tutorials/Certificates/#x509","text":"The following will instead create an X509Certificate, and pass that to the endpoint instead: $cert = [System.Security.Cryptography.X509Certificates.X509Certificate2] :: new ( './certs/example.cer' ) Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -X509Certificate $cert","title":"X509"},{"location":"Tutorials/Certificates/#self-signed","text":"If you are developing/testing a site on HTTPS then Pode can generate and bind quick self-signed certificates. To do this you can pass the -SelfSigned switch: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -SelfSigned } You might get a warning in the browser about the certificate, and this is fine. If you're using Invoke-WebRequest or Invoke-RestMethod on PowerShell 6+ you can supply the -SkipCertificateCheck switch.","title":"Self-Signed"},{"location":"Tutorials/Certificates/#ssl-protocols","text":"The default allowed SSL protocols are SSL3 and TLS1.2 (or just TLS1.2 on MacOS), but you can change these to any of: SSL2, SSL3, TLS, TLS11, TLS12, TLS13. This is specified in your server.psd1 configuration file: @{ Server = @{ Ssl = @{ Protocols = @( 'TLS' , 'TLS11' , 'TLS12' ) } } }","title":"SSL Protocols"},{"location":"Tutorials/Configuration/","text":"Configuration There is an optional configuration file that can be used with Pode called server.psd1 , and should be located at the root directory of your server script. Note When a server restart occurs, the server.psd1 file will always be reloaded. Structure The configuration file is basically just a hashtable , so normal hashtable syntax applies. Within the file you can put any settings you want however, there are 5 defined sections that should ideally be left for Pode: @{ Server = @{ } Service = @{ } Web = @{ } Smtp = @{ } Tcp = @{ } } These 5 sections apply to the different server types you can build with Pode, and could be used for later inbuilt options (such as the current Web/Static/Defaults for defining default static pages ). After this, you can put whatever else you want into the configuration file. Usage The configuration file is automatically loaded when you start your server. Pode will look in the root directory of your server for a server.psd1 file, and if found it will be loaded internally. Within your scripts you can use the Get-PodeConfig function, which will return the values of the configuration file. For example, say you have the following server.psd1 : @{ Port = 8080 } Then you can get and use the port number via: Start-PodeServer { $port = ( Get-PodeConfig ). Port Add-PodeEndpoint -Address * -Port $port -Protocol Http } Environments Besides the default server.psd1 file, Pode also supports environmental files based on the $env:PODE_ENVIRONMENT environment variable. For example, if you set the PODE_ENVIRONMENT variable to dev , then Pode will look for server.dev.psd1 first. If server.dev.psd1 does not exist, then the default server.psd1 is loaded instead. Options The following table details all of the currently available, inbuilt, server.psd1 options that can be used. A \"path\" like Server.Ssl.Protocols looks like the below in the file: @{ Server = @{ Ssl = @{ Protocols = @( 'TLS' , 'TLS11' , 'TLS12' ) } } } Path Description Docs Server.Ssl.Protocols Indicates the SSL Protocols that should be used link Server.Request Defines request timeout and maximum body size link Server.AutoImport Defines the AutoImport scoping rules for Modules, SnapIns and Functions link Server.Logging Defines extra configuration for Logging, like masking sensitive data link Server.Root Overrides root path of the server link Server.Restart Defines configuration for automatically restarting the server link Server.FileMonitor Defines configuration for restarting the server based on file updates link Web.TransferEncoding Sets the Request TransferEncoding link Web.Compression Sets any compression to use on the Response link Web.ContentType Define expected Content Types for certain Routes link Web.ErrorPages Defines configuration for custom error pages link Web.Static Defines configuration for static content, such as caching link","title":"Configuration"},{"location":"Tutorials/Configuration/#configuration","text":"There is an optional configuration file that can be used with Pode called server.psd1 , and should be located at the root directory of your server script. Note When a server restart occurs, the server.psd1 file will always be reloaded.","title":"Configuration"},{"location":"Tutorials/Configuration/#structure","text":"The configuration file is basically just a hashtable , so normal hashtable syntax applies. Within the file you can put any settings you want however, there are 5 defined sections that should ideally be left for Pode: @{ Server = @{ } Service = @{ } Web = @{ } Smtp = @{ } Tcp = @{ } } These 5 sections apply to the different server types you can build with Pode, and could be used for later inbuilt options (such as the current Web/Static/Defaults for defining default static pages ). After this, you can put whatever else you want into the configuration file.","title":"Structure"},{"location":"Tutorials/Configuration/#usage","text":"The configuration file is automatically loaded when you start your server. Pode will look in the root directory of your server for a server.psd1 file, and if found it will be loaded internally. Within your scripts you can use the Get-PodeConfig function, which will return the values of the configuration file. For example, say you have the following server.psd1 : @{ Port = 8080 } Then you can get and use the port number via: Start-PodeServer { $port = ( Get-PodeConfig ). Port Add-PodeEndpoint -Address * -Port $port -Protocol Http }","title":"Usage"},{"location":"Tutorials/Configuration/#environments","text":"Besides the default server.psd1 file, Pode also supports environmental files based on the $env:PODE_ENVIRONMENT environment variable. For example, if you set the PODE_ENVIRONMENT variable to dev , then Pode will look for server.dev.psd1 first. If server.dev.psd1 does not exist, then the default server.psd1 is loaded instead.","title":"Environments"},{"location":"Tutorials/Configuration/#options","text":"The following table details all of the currently available, inbuilt, server.psd1 options that can be used. A \"path\" like Server.Ssl.Protocols looks like the below in the file: @{ Server = @{ Ssl = @{ Protocols = @( 'TLS' , 'TLS11' , 'TLS12' ) } } } Path Description Docs Server.Ssl.Protocols Indicates the SSL Protocols that should be used link Server.Request Defines request timeout and maximum body size link Server.AutoImport Defines the AutoImport scoping rules for Modules, SnapIns and Functions link Server.Logging Defines extra configuration for Logging, like masking sensitive data link Server.Root Overrides root path of the server link Server.Restart Defines configuration for automatically restarting the server link Server.FileMonitor Defines configuration for restarting the server based on file updates link Web.TransferEncoding Sets the Request TransferEncoding link Web.Compression Sets any compression to use on the Response link Web.ContentType Define expected Content Types for certain Routes link Web.ErrorPages Defines configuration for custom error pages link Web.Static Defines configuration for static content, such as caching link","title":"Options"},{"location":"Tutorials/Cookies/","text":"Cookies In Pode you can add/retrieve cookies for the Request/Response of the current web event. Using the cookie functions has to be done within the context of a web event, such as in Routes/Middleware/Authentication/Logging/Endware. Adding Cookies You can add a cookie to the response by using Set-PodeCookie , passing the Name and Value of cookie: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Set-PodeCookie -Name Cookie1 -Value Value1 } You can set a duration for the cookie, in seconds, using -Duration , or as an explicit expiry date using -ExpiryDate . For example, to set a cookie to expire after 1 minute: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Set-PodeCookie -Name Cookie1 -Value Value1 -Duration 60 } Getting Cookies To retrieve a cookie on the request, you can use Get-PodeCookie : Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Get-PodeCookie -Name 'CookieName' } This will return a cookie object with value, duration, etc. To retrieve just the value of a cookie use Get-PodeCookieValue Removing Cookies To flag a cookie for removal on the user's browser you can use Remove-PodeCookie , which force the cookie to expire: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Remove-PodeCookie -Name 'CookieName' } Signing Cookies You can sign a cookie by supplying a -Secret to any of the cookie functions; supplying it to Get-PodeCookie will attempt to unsign the cookie for the raw value. Expiry Dates To update the expiry of a cookie, you can set a duration, in seconds, or as an explicit expiry date using Update-PodeCookieExpiry .","title":"Cookies"},{"location":"Tutorials/Cookies/#cookies","text":"In Pode you can add/retrieve cookies for the Request/Response of the current web event. Using the cookie functions has to be done within the context of a web event, such as in Routes/Middleware/Authentication/Logging/Endware.","title":"Cookies"},{"location":"Tutorials/Cookies/#adding-cookies","text":"You can add a cookie to the response by using Set-PodeCookie , passing the Name and Value of cookie: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Set-PodeCookie -Name Cookie1 -Value Value1 } You can set a duration for the cookie, in seconds, using -Duration , or as an explicit expiry date using -ExpiryDate . For example, to set a cookie to expire after 1 minute: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Set-PodeCookie -Name Cookie1 -Value Value1 -Duration 60 }","title":"Adding Cookies"},{"location":"Tutorials/Cookies/#getting-cookies","text":"To retrieve a cookie on the request, you can use Get-PodeCookie : Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Get-PodeCookie -Name 'CookieName' } This will return a cookie object with value, duration, etc. To retrieve just the value of a cookie use Get-PodeCookieValue","title":"Getting Cookies"},{"location":"Tutorials/Cookies/#removing-cookies","text":"To flag a cookie for removal on the user's browser you can use Remove-PodeCookie , which force the cookie to expire: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Remove-PodeCookie -Name 'CookieName' }","title":"Removing Cookies"},{"location":"Tutorials/Cookies/#signing-cookies","text":"You can sign a cookie by supplying a -Secret to any of the cookie functions; supplying it to Get-PodeCookie will attempt to unsign the cookie for the raw value.","title":"Signing Cookies"},{"location":"Tutorials/Cookies/#expiry-dates","text":"To update the expiry of a cookie, you can set a duration, in seconds, or as an explicit expiry date using Update-PodeCookieExpiry .","title":"Expiry Dates"},{"location":"Tutorials/Endware/","text":"Endware Endware in Pode is like Middleware , but it runs after a Route. Endware will also run regardless the state of any prior Middleware or Route logic; if a either throws an error (ie: HTTP 500 or 404), then the Endware will still run. Also, if you have multiple Endwares configured, then each will be invoked inturn, but independently of each other - should one of the Endwares fail, the others will still be invoked. Pode has some inbuilt Endware, namely: Any configured Logging is invoked as Endware. If Sessions are enabled, then session data is persisted as Endware. Creating Endware To add a new Endware script you can use Add-PodeEndware , and supply a -ScriptBlock : Add-PodeEndware -ScriptBlock { # logic } The scriptblock for Endware also has access to the WebEvent variable.","title":"Endware"},{"location":"Tutorials/Endware/#endware","text":"Endware in Pode is like Middleware , but it runs after a Route. Endware will also run regardless the state of any prior Middleware or Route logic; if a either throws an error (ie: HTTP 500 or 404), then the Endware will still run. Also, if you have multiple Endwares configured, then each will be invoked inturn, but independently of each other - should one of the Endwares fail, the others will still be invoked. Pode has some inbuilt Endware, namely: Any configured Logging is invoked as Endware. If Sessions are enabled, then session data is persisted as Endware.","title":"Endware"},{"location":"Tutorials/Endware/#creating-endware","text":"To add a new Endware script you can use Add-PodeEndware , and supply a -ScriptBlock : Add-PodeEndware -ScriptBlock { # logic } The scriptblock for Endware also has access to the WebEvent variable.","title":"Creating Endware"},{"location":"Tutorials/Events/","text":"Events Pode lets you register scripts to be run when certain server events are triggered. The following types of events can have scripts registered: Start Terminate Restart Browser Crash Stop Overview You can use Register-PodeEvent to register a script that can be run when an event within Pode is triggered. Each event can have multiple scripts registered, and you can unregister a script at any point using Unregister-PodeEvent : # register: Register-PodeEvent -Type Start -Name '<name>' -ScriptBlock { # inform a portal, write a log, etc } # unregister: Unregister-PodeEvent -Type Start -Name '<name>' The scriptblock supplied to Register-PodeEvent also supports $using: variables. You can retrieve a registered script using Get-PodeEvent : $evt = Get-PodeEvent -Type Start -Name '<name>' Types Start Scripts registered to the Start event will all be invoked just after the server's main scriptblock has been invoked - ie: the -ScriptBlock supplied to Start-PodeServer . These scripts will also be re-invoked after a server restart has occurred. Terminate Scripts registered to the Terminate event will all be invoked just before the server terminates. Ie, when the Terminating... message usually appears in the terminal, the script will run just after this and just before the Done message. These script will not run when a Restart is triggered. Restart Scripts registered to the Restart event will all be invoked whenever an internal server restart occurs. This could be due to file monitoring, auto-restarting, Ctrl+R , or Restart-PodeServer . They will be invoked just after the Restarting... message appears in the terminal, and just before the Done message. Browser Scripts registered to the Browser event will all be invoked whenever the server is told to open a browser, ie: when Ctrl+B is pressed. Crash Scripts registered to the Crash event will all be invoked if the server ever terminates due to an exception being thrown. If a Crash event it triggered, then Terminate will not be triggered. Stop Scripts registered to the Stop event will all be invoked when the server stops and closes. This event will be fired after either the Terminate or Crash events - which ever one causes the server to ultimately stop.","title":"Events"},{"location":"Tutorials/Events/#events","text":"Pode lets you register scripts to be run when certain server events are triggered. The following types of events can have scripts registered: Start Terminate Restart Browser Crash Stop","title":"Events"},{"location":"Tutorials/Events/#overview","text":"You can use Register-PodeEvent to register a script that can be run when an event within Pode is triggered. Each event can have multiple scripts registered, and you can unregister a script at any point using Unregister-PodeEvent : # register: Register-PodeEvent -Type Start -Name '<name>' -ScriptBlock { # inform a portal, write a log, etc } # unregister: Unregister-PodeEvent -Type Start -Name '<name>' The scriptblock supplied to Register-PodeEvent also supports $using: variables. You can retrieve a registered script using Get-PodeEvent : $evt = Get-PodeEvent -Type Start -Name '<name>'","title":"Overview"},{"location":"Tutorials/Events/#types","text":"","title":"Types"},{"location":"Tutorials/Events/#start","text":"Scripts registered to the Start event will all be invoked just after the server's main scriptblock has been invoked - ie: the -ScriptBlock supplied to Start-PodeServer . These scripts will also be re-invoked after a server restart has occurred.","title":"Start"},{"location":"Tutorials/Events/#terminate","text":"Scripts registered to the Terminate event will all be invoked just before the server terminates. Ie, when the Terminating... message usually appears in the terminal, the script will run just after this and just before the Done message. These script will not run when a Restart is triggered.","title":"Terminate"},{"location":"Tutorials/Events/#restart","text":"Scripts registered to the Restart event will all be invoked whenever an internal server restart occurs. This could be due to file monitoring, auto-restarting, Ctrl+R , or Restart-PodeServer . They will be invoked just after the Restarting... message appears in the terminal, and just before the Done message.","title":"Restart"},{"location":"Tutorials/Events/#browser","text":"Scripts registered to the Browser event will all be invoked whenever the server is told to open a browser, ie: when Ctrl+B is pressed.","title":"Browser"},{"location":"Tutorials/Events/#crash","text":"Scripts registered to the Crash event will all be invoked if the server ever terminates due to an exception being thrown. If a Crash event it triggered, then Terminate will not be triggered.","title":"Crash"},{"location":"Tutorials/Events/#stop","text":"Scripts registered to the Stop event will all be invoked when the server stops and closes. This event will be fired after either the Terminate or Crash events - which ever one causes the server to ultimately stop.","title":"Stop"},{"location":"Tutorials/Headers/","text":"Headers In Pode you can add/retrieve headers for the Request/Response of the current web event. Using the header functions has to be done within the context of a web event, such as in Routes/Middleware/Authentication/Logging/Endware. Setting Headers There are 2 ways of setting headers on a response: Add-PodeHeader and Set-PodeHeader . Add-PodeHeader will append multiple values for one header on the response - such as the Set-Cookie header of which there can be multiple of on a response. The following will add 2 of the same header on the response: Add-PodeMiddleware -Name Example -ScriptBlock { Add-PodeHeader -Name Name1 -Value Value1 Add-PodeHeader -Name Name1 -Value Value2 } Set-PodeHeader will clear all current values for a header on the response, and reset it to one value. The following will add 2 of the same header to the response, but then override that to 1 header: Add-PodeMiddleware -Name Example -ScriptBlock { Add-PodeHeader -Name Name1 -Value Value1 Add-PodeHeader -Name Name1 -Value Value2 Set-PodeHeader -Name Name1 -Value Value3 } Getting Headers To retrieve the value of a header on the request, you can use Get-PodeHeader : Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Get-PodeHeader -Name 'X-Header-Name' } Signing Headers You can sign a header by supplying a -Secret to any of the header functions; supplying it to Get-PodeHeader will attempt to unsign the header for the raw value.","title":"Headers"},{"location":"Tutorials/Headers/#headers","text":"In Pode you can add/retrieve headers for the Request/Response of the current web event. Using the header functions has to be done within the context of a web event, such as in Routes/Middleware/Authentication/Logging/Endware.","title":"Headers"},{"location":"Tutorials/Headers/#setting-headers","text":"There are 2 ways of setting headers on a response: Add-PodeHeader and Set-PodeHeader . Add-PodeHeader will append multiple values for one header on the response - such as the Set-Cookie header of which there can be multiple of on a response. The following will add 2 of the same header on the response: Add-PodeMiddleware -Name Example -ScriptBlock { Add-PodeHeader -Name Name1 -Value Value1 Add-PodeHeader -Name Name1 -Value Value2 } Set-PodeHeader will clear all current values for a header on the response, and reset it to one value. The following will add 2 of the same header to the response, but then override that to 1 header: Add-PodeMiddleware -Name Example -ScriptBlock { Add-PodeHeader -Name Name1 -Value Value1 Add-PodeHeader -Name Name1 -Value Value2 Set-PodeHeader -Name Name1 -Value Value3 }","title":"Setting Headers"},{"location":"Tutorials/Headers/#getting-headers","text":"To retrieve the value of a header on the request, you can use Get-PodeHeader : Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Get-PodeHeader -Name 'X-Header-Name' }","title":"Getting Headers"},{"location":"Tutorials/Headers/#signing-headers","text":"You can sign a header by supplying a -Secret to any of the header functions; supplying it to Get-PodeHeader will attempt to unsign the header for the raw value.","title":"Signing Headers"},{"location":"Tutorials/ImportingModules/","text":"Importing Modules/Snapins Modules/Snapins in Pode have recently undergone a change, making them easier to use with Pode's many runspaces. This change means you can use the normal Import-Module / Add-PSSnapin at the top of your scripts, and Pode will automatically import them into its runspaces. For more information, see the Scoping page. The older Import-PodeModule and Import-PodeSnapin still exist - but now mostly just directly call the main module/snapin functions. Important Snapins are only supported in Windows PowerShell. Modules Modules in Pode can be imported in the normal manor using Import-Module . The Import-PodeModule function can now be used inside and outside of Start-PodeServer , and should be used if you're using local modules via ps_modules . Import via Path The following example will tell Pode that the tools.psm1 module needs to be imported. This will allow the functions defined within the module to be accessible to all other functions within your server. Import-PodeModule -Path './path/to/tools.psm1' Import via Name The following example will tell Pode to import the EPS module into all runspaces. If you're using local modules in your package.json file, then Pode will first check to see if the EPS module is in the ps_modules directory. When Pode can't find the EPS module within the ps_modules directory, then it will attempt to import a globally installed version of the EPS module. # if using local modules: Import-PodeModule -Name EPS # if using global modules Import-Module -Name EPS Snapins Import via Name The following example will tell Pode to import the WDeploySnapin3.0 snap-in into all runspaces: Import-PodeSnapin -Name 'WDeploySnapin3.0' # or just: Add-PSSnapin -Name 'WDeploySnapin3.0'","title":"Importing Modules/Snapins"},{"location":"Tutorials/ImportingModules/#importing-modulessnapins","text":"Modules/Snapins in Pode have recently undergone a change, making them easier to use with Pode's many runspaces. This change means you can use the normal Import-Module / Add-PSSnapin at the top of your scripts, and Pode will automatically import them into its runspaces. For more information, see the Scoping page. The older Import-PodeModule and Import-PodeSnapin still exist - but now mostly just directly call the main module/snapin functions. Important Snapins are only supported in Windows PowerShell.","title":"Importing Modules/Snapins"},{"location":"Tutorials/ImportingModules/#modules","text":"Modules in Pode can be imported in the normal manor using Import-Module . The Import-PodeModule function can now be used inside and outside of Start-PodeServer , and should be used if you're using local modules via ps_modules .","title":"Modules"},{"location":"Tutorials/ImportingModules/#import-via-path","text":"The following example will tell Pode that the tools.psm1 module needs to be imported. This will allow the functions defined within the module to be accessible to all other functions within your server. Import-PodeModule -Path './path/to/tools.psm1'","title":"Import via Path"},{"location":"Tutorials/ImportingModules/#import-via-name","text":"The following example will tell Pode to import the EPS module into all runspaces. If you're using local modules in your package.json file, then Pode will first check to see if the EPS module is in the ps_modules directory. When Pode can't find the EPS module within the ps_modules directory, then it will attempt to import a globally installed version of the EPS module. # if using local modules: Import-PodeModule -Name EPS # if using global modules Import-Module -Name EPS","title":"Import via Name"},{"location":"Tutorials/ImportingModules/#snapins","text":"","title":"Snapins"},{"location":"Tutorials/ImportingModules/#import-via-name_1","text":"The following example will tell Pode to import the WDeploySnapin3.0 snap-in into all runspaces: Import-PodeSnapin -Name 'WDeploySnapin3.0' # or just: Add-PSSnapin -Name 'WDeploySnapin3.0'","title":"Import via Name"},{"location":"Tutorials/OpenAPI/","text":"OpenAPI Pode has inbuilt support for converting your routes into OpenAPI 3.0 definitions. There is also support for a enabling simple Swagger and/or ReDoc viewers. You can simply enable OpenAPI in Pode, and a very simple definition will be generated. However, to get a more complex definition with request bodies, parameters and response payloads, you'll need to use the relevant OpenAPI functions detailed below. Enabling OpenAPI To enable support for generating OpenAPI definitions you'll need to use the Enable-PodeOpenApi function. This will allow you to set a title and version for your API. You can also set a default route to retrieve the OpenAPI definition for tools like Swagger or ReDoc, the default is at /openapi . You can also set a route filter (such as /api/* , the default is /* for everything), so only those routes are included in the definition. An example of enabling OpenAPI is a follows: Enable-PodeOpenApi -Title 'My Awesome API' -Version 9 . 0 . 0 . 1 An example of setting the OpenAPI route is a follows. This will create a route accessible at /docs/openapi : Enable-PodeOpenApi -Path '/docs/openapi' -Title 'My Awesome API' -Version 9 . 0 . 0 . 1 Default Setup In the very simplest of scenarios, just enabling OpenAPI will generate a minimal definition. It can be viewed in Swagger/ReDoc etc, but won't be usable for trying calls. When you enable OpenAPI, and don't set any other OpenAPI data, the following is the minimal data that is included: Every route will have a 200 and Default response Although routes will be included, no request bodies, parameters or response payloads will be defined If you have multiple endpoints, then the servers section will be included Any authentication will be included Get Definition Instead of defining a route to return the definition, you can write the definition to the response whenever you want, and in any route, using the Get-PodeOpenApiDefinition function. This could be useful in certain scenarios like in Azure Functions, where you can enable OpenAPI, and then write the definition to the response of a GET request if some query parameter is set; eg: ?openapi=1 . For example: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { if ( $WebEvent . Query . openapi -eq 1 ) { Get-PodeOpenApiDefinition | Write-PodeJsonResponse } } Authentication Any authentication defined, either by Add-PodeAuthMiddleware , or using the -Authentication parameter on Routes, will be automatically added to the security section of the OpenAPI definition. Routes To extend the definition of a route, you can use the -PassThru switch on the Add-PodeRoute function. This will cause the route that was created to be returned, so you can pass it down the pipe into more OpenAPI functions. To add metadata to a route's definition you can use the Set-PodeOARouteInfo function. This will allow you to define a summary/description for the route, as well as tags for grouping: Add-PodeRoute -Method Get -Path \"/api/resources\" -ScriptBlock { Set-PodeResponseStatus -Code 200 } -PassThru | Set-PodeOARouteInfo -Summary 'Retrieve some resources' -Tags 'Resources' Each of the following OpenAPI functions have a -PassThru switch, allowing you to chain many of them together. Responses You can define multiple responses for a route, but only one of each status code, using the Add-PodeOAResponse function. You can either just define the response and status code, with a custom description, or with a schema defining the payload of the response. The following is an example of defining simple 200 and 404 responses on a route: Add-PodeRoute -Method Get -Path \"/api/user/:userId\" -ScriptBlock { # logic } -PassThru | Add-PodeOAResponse -StatusCode 200 -PassThru | Add-PodeOAResponse -StatusCode 404 -Description 'User not found' Whereas the following is a more complex definition, which also defines the responses JSON payload. This payload is defined as an object with a string Name, and integer UserId: Add-PodeRoute -Method Get -Path '/api/users/:userId' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = 'Rick' UserId = $WebEvent . Parameters [ 'userId' ] } } -PassThru | Add-PodeOAResponse -StatusCode 200 -Description 'A user object' -ContentSchemas @{ 'application/json' = ( New-PodeOAObjectProperty -Properties @( ( New-PodeOAStringProperty -Name 'Name' ), ( New-PodeOAIntProperty -Name 'UserId' ) )) } the JSON response payload defined is as follows: { \"Name\" : [ s tr i n g ], \"UserId\" : [ i nte ger ] } Internally, each route is created with an empty default 200 and 500 response. You can remove these, or other added responses, by using Remove-PodeOAResponse : Add-PodeRoute -Method Get -Path \"/api/user/:userId\" -ScriptBlock { # logic } -PassThru | Remove-PodeOAResponse -StatusCode 200 Requests Parameters You can set route parameter definitions, such as parameters passed in the path/query, by using the Set-PodeOARequest function with the -Parameters parameter. The parameter takes an array of properties converted into parameters, using the ConvertTo-PodeOAParameter function. For example, to create some integer userId parameter that is supplied in the path of the request, the following will work: Add-PodeRoute -Method Get -Path '/api/users/:userId' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = 'Rick' UserId = $WebEvent . Parameters [ 'userId' ] } } -PassThru | Set-PodeOARequest -Parameters @( ( New-PodeOAIntProperty -Name 'userId' -Required | ConvertTo-PodeOAParameter -In Path ) ) Whereas you could use the next example to define 2 query parameters, both strings: Add-PodeRoute -Method Get -Path '/api/users' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = 'Rick' UserId = $WebEvent . Query [ 'name' ] } } -PassThru | Set-PodeOARequest -Parameters @( ( New-PodeOAStringProperty -Name 'name' -Required | ConvertTo-PodeOAParameter -In Query ), ( New-PodeOAStringProperty -Name 'city' -Required | ConvertTo-PodeOAParameter -In Query ) ) Payload You can set request payload schemas by using the Set-PodeOARequest function, with the -RequestBody parameter. The request body can be defined using the New-PodeOARequestBody function, and supplying schema definitions for content types - this works in very much a similar way to defining responses above. For example, to define a request JSON payload of some userId and name you could use the following: Add-PodeRoute -Method Patch -Path '/api/users' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = $WebEvent . Data . name UserId = $WebEvent . Data . userId } } -PassThru | Set-PodeOARequest -RequestBody ( New-PodeOARequestBody -Required -ContentSchemas @{ 'application/json' = ( New-PodeOAObjectProperty -Properties @( ( New-PodeOAStringProperty -Name 'name' ), ( New-PodeOAIntProperty -Name 'userId' ) )) } ) The expected payload would look as follows: { \"name\" : [ s tr i n g ], \"userId\" : [ i nte ger ] } Components You can define reusable OpenAPI components in Pode. Currently supported are Schemas, Parameters, Request Bodies, and Responses. Schemas To define a reusable schema that can be used in request bodies, and responses, you can use the Add-PodeOAComponentSchema function. You'll need to supply a Name, and a Schema that can be reused. The following is an example of defining a schema which is a object of Name, UserId, and Age: # define a reusable schema user object Add-PodeOAComponentSchema -Name 'UserSchema' -Schema ( New-PodeOAObjectProperty -Properties @( ( New-PodeOAStringProperty -Name 'Name' ), ( New-PodeOAIntProperty -Name 'UserId' ), ( New-PodeOAIntProperty -Name 'Age' ) ) ) # reuse the above schema in a response Add-PodeRoute -Method Get -Path '/api/users/:userId' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = 'Rick' UserId = $WebEvent . Parameters [ 'userId' ] Age = 42 } } -PassThru | Add-PodeOAResponse -StatusCode 200 -Description 'A list of users' -ContentSchemas @{ 'application/json' = 'UserSchema' } Request Bodies To define a reusable request bodies you can use the Add-PodeOAComponentRequestBody function. You'll need to supply a Name, as well as the needed schemas for each content type. The following is an example of defining a JSON object that a Name, UserId, and an Enable flag: # define a reusable request body Add-PodeOAComponentRequestBody -Name 'UserBody' -Required -ContentSchemas @{ 'application/json' = ( New-PodeOAObjectProperty -Properties @( ( New-PodeOAStringProperty -Name 'Name' ), ( New-PodeOAIntProperty -Name 'UserId' ), ( New-PodeOABoolProperty -Name 'Enabled' ) )) } # use the request body in a route Add-PodeRoute -Method Patch -Path '/api/users' -ScriptBlock { Set-PodeResponseStatus -StatusCode 200 } -PassThru | Set-PodeOARequest -RequestBody ( New-PodeOARequestBody -Reference 'UserBody' ) The JSON payload expected is of the format: { \"Name\" : [ s tr i n g ], \"UserId\" : [ i nte ger ], \"Enabled\" : [ boolea n ] } Parameters To define reusable parameters that are used on requests, you can use the Add-PodeOAComponentParameter function. You'll need to supply a Name and the Parameter definition. The following is an example of defining an integer path parameter for a userId , and then using that parameter on a route. # define a reusable {userid} path parameter New-PodeOAIntProperty -Name 'userId' -Required | ConvertTo-PodeOAParameter -In Path | Add-PodeOAComponentParameter -Name 'UserId' # use this parameter in a route Add-PodeRoute -Method Get -Path '/api/users/:userId' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = 'Rick' UserId = $WebEvent . Parameters [ 'userId' ] } } -PassThru | Set-PodeOARequest -Parameters @( ConvertTo-PodeOAParameter -Reference 'UserId' ) Responses To define a reusable response definition you can use the Add-PodeOAComponentResponse function. You'll need to supply a Name, and optionally any Content/Header schemas that define the responses payload. The following is an example of defining a 200 response, that has a JSON payload of an array of objects for Name/UserId. This can then be used by name on a route: # defines a response with a json payload Add-PodeOAComponentResponse -Name 'OK' -Description 'A user object' -ContentSchemas @{ 'application/json' = ( New-PodeOAObjectProperty -Array -Properties @( ( New-PodeOAStringProperty -Name 'Name' ), ( New-PodeOAIntProperty -Name 'UserId' ) )) } # reuses the above response on a route using its \"OK\" name Add-PodeRoute -Method Get -Path \"/api/users\" -ScriptBlock { Write-PodeJsonResponse -Value @( @{ Name = 'Rick' ; UserId = 123 }, @{ Name = 'Geralt' ; UserId = 124 } ) } -PassThru | Add-PodeOAResponse -StatusCode 200 -Reference 'OK' the JSON response payload defined is as follows: [ { \"Name\" : [ s tr i n g ], \"UserId\" : [ i nte ger ] } ] Properties Properties are used to create all Parameters and Schemas in OpenAPI. You can use the simple types on their own, or you can combine multiple of them together to form complex objects. Simple Types There are 5 simple property types: Integers, Numbers, Strings, Booleans, and Schemas. Each of which can be created using the following functions: New-PodeOAIntProperty New-PodeOANumberProperty New-PodeOAStringProperty New-PodeOABoolProperty New-PodeOASchemaProperty These properties can be created with a Name, and other flags such as Required and/or a Description: # simple integer New-PodeOAIntProperty -Name 'userId' # a float number with a max value of 100 New-PodeOANumberProperty -Name 'ratio' -Format Float -Maximum 100 # a string with a default value, and enum of options New-PodeOAStringProperty -Name 'type' -Default 'admin' -Enum @( 'admin' , 'user' ) # a boolean that's required New-PodeOABoolProperty -Name 'enabled' -Required # a schema property that references another component schema New-PodeOASchemaProperty -Name 'Config' -Reference 'ConfigSchema' On their own, like above, the simple properties don't really do much. However, you can combine that together to make complex objects/arrays as defined below. Arrays There isn't a dedicated function to create an array property, instead there is an -Array switch on each of the property functions - both Object and the above simple properties. If you supply the -Array switch to any of the above simple properties, this will define an array of that type - the -Name parameter can also be omitted if only a simple array if required. For example, the below will define an integer array: New-PodeOAIntProperty -Array When used in a Response, this could return the following JSON example: [ 0 , 1 , 2 ] Objects An object property is a combination of multiple other properties - both simple, array of more objects. There are two ways to define objects: Similar to arrays, you can use the -Object switch on the simple properties. You can use the New-PodeOAObjectProperty function to combine multiple properties. Simple If you use the -Object switch on the simple property function, this will automatically wrap the property as an object. The Name for this is required. For example, the below will define a simple userId integer object: New-PodeOAIntProperty -Name 'userId' -Object In a response as JSON, this could look as follows: { \"userId\" : 0 } Furthermore, you can also supply both -Array and -Object switches: New-PodeOAIntProperty -Name 'userId' -Object -Array This wil result in something like the following JSON: { \"userId\" : [ 0 , 1 , 2 ] } Complex Unlike the -Object switch that simply converts a single property into an object, the New-PodeOAObjectProperty function can combine and convert multiple properties. For example, the following will create an object using an Integer, String, and a Boolean: New-PodeOAObjectProperty -Properties @( ( New-PodeOAIntProperty -Name 'userId' ), ( New-PodeOAStringProperty -Name 'name' ), ( New-PodeOABoolProperty -Name 'enabled' ) ) As JSON, this could look as follows: { \"userId\" : 0 , \"name\" : \"Gary Goodspeed\" , \"enabled\" : true } You can also supply the -Array switch to the New-PodeOAObjectProperty function. This will result in an array of objects. For example, if we took the above: New-PodeOAObjectProperty -Array -Properties @( ( New-PodeOAIntProperty -Name 'userId' ), ( New-PodeOAStringProperty -Name 'name' ), ( New-PodeOABoolProperty -Name 'enabled' ) ) As JSON, this could look as follows: [ { \"userId\" : 0 , \"name\" : \"Gary Goodspeed\" , \"enabled\" : true }, { \"userId\" : 1 , \"name\" : \"Kevin\" , \"enabled\" : false } ] You can also combine objects into other objects: $usersArray = New-PodeOAObjectProperty -Name 'users' -Array -Properties @( ( New-PodeOAIntProperty -Name 'userId' ), ( New-PodeOAStringProperty -Name 'name' ), ( New-PodeOABoolProperty -Name 'enabled' ) ) New-PodeOAObjectProperty -Properties @( ( New-PodeOAIntProperty -Name 'found' ), $usersArray ) As JSON, this could look as follows: { \"found\" : 2 , \"users\" : [ { \"userId\" : 0 , \"name\" : \"Gary Goodspeed\" , \"enabled\" : true }, { \"userId\" : 1 , \"name\" : \"Kevin\" , \"enabled\" : false } ] } Swagger and ReDoc If you're not using a custom OpenAPI viewer, then you can use one of the inbuilt ones with Pode - either Swagger and ReDoc, or both! For both you can customise the path to access the page on, but by default Swagger is at /swagger and ReDoc is at /redoc . If you've written your own custom OpenAPI definition then you can also set a custom path to fetch the definition. To enable either you can use the Enable-PodeOpenApiViewer function: # for swagger at \"/docs/swagger\" Enable-PodeOpenApiViewer -Type Swagger -Path '/docs/swagger' -DarkMode # or ReDoc at the default \"/redoc\" Enable-PodeOpenApiViewer -Type ReDoc","title":"OpenAPI"},{"location":"Tutorials/OpenAPI/#openapi","text":"Pode has inbuilt support for converting your routes into OpenAPI 3.0 definitions. There is also support for a enabling simple Swagger and/or ReDoc viewers. You can simply enable OpenAPI in Pode, and a very simple definition will be generated. However, to get a more complex definition with request bodies, parameters and response payloads, you'll need to use the relevant OpenAPI functions detailed below.","title":"OpenAPI"},{"location":"Tutorials/OpenAPI/#enabling-openapi","text":"To enable support for generating OpenAPI definitions you'll need to use the Enable-PodeOpenApi function. This will allow you to set a title and version for your API. You can also set a default route to retrieve the OpenAPI definition for tools like Swagger or ReDoc, the default is at /openapi . You can also set a route filter (such as /api/* , the default is /* for everything), so only those routes are included in the definition. An example of enabling OpenAPI is a follows: Enable-PodeOpenApi -Title 'My Awesome API' -Version 9 . 0 . 0 . 1 An example of setting the OpenAPI route is a follows. This will create a route accessible at /docs/openapi : Enable-PodeOpenApi -Path '/docs/openapi' -Title 'My Awesome API' -Version 9 . 0 . 0 . 1","title":"Enabling OpenAPI"},{"location":"Tutorials/OpenAPI/#default-setup","text":"In the very simplest of scenarios, just enabling OpenAPI will generate a minimal definition. It can be viewed in Swagger/ReDoc etc, but won't be usable for trying calls. When you enable OpenAPI, and don't set any other OpenAPI data, the following is the minimal data that is included: Every route will have a 200 and Default response Although routes will be included, no request bodies, parameters or response payloads will be defined If you have multiple endpoints, then the servers section will be included Any authentication will be included","title":"Default Setup"},{"location":"Tutorials/OpenAPI/#get-definition","text":"Instead of defining a route to return the definition, you can write the definition to the response whenever you want, and in any route, using the Get-PodeOpenApiDefinition function. This could be useful in certain scenarios like in Azure Functions, where you can enable OpenAPI, and then write the definition to the response of a GET request if some query parameter is set; eg: ?openapi=1 . For example: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { if ( $WebEvent . Query . openapi -eq 1 ) { Get-PodeOpenApiDefinition | Write-PodeJsonResponse } }","title":"Get Definition"},{"location":"Tutorials/OpenAPI/#authentication","text":"Any authentication defined, either by Add-PodeAuthMiddleware , or using the -Authentication parameter on Routes, will be automatically added to the security section of the OpenAPI definition.","title":"Authentication"},{"location":"Tutorials/OpenAPI/#routes","text":"To extend the definition of a route, you can use the -PassThru switch on the Add-PodeRoute function. This will cause the route that was created to be returned, so you can pass it down the pipe into more OpenAPI functions. To add metadata to a route's definition you can use the Set-PodeOARouteInfo function. This will allow you to define a summary/description for the route, as well as tags for grouping: Add-PodeRoute -Method Get -Path \"/api/resources\" -ScriptBlock { Set-PodeResponseStatus -Code 200 } -PassThru | Set-PodeOARouteInfo -Summary 'Retrieve some resources' -Tags 'Resources' Each of the following OpenAPI functions have a -PassThru switch, allowing you to chain many of them together.","title":"Routes"},{"location":"Tutorials/OpenAPI/#responses","text":"You can define multiple responses for a route, but only one of each status code, using the Add-PodeOAResponse function. You can either just define the response and status code, with a custom description, or with a schema defining the payload of the response. The following is an example of defining simple 200 and 404 responses on a route: Add-PodeRoute -Method Get -Path \"/api/user/:userId\" -ScriptBlock { # logic } -PassThru | Add-PodeOAResponse -StatusCode 200 -PassThru | Add-PodeOAResponse -StatusCode 404 -Description 'User not found' Whereas the following is a more complex definition, which also defines the responses JSON payload. This payload is defined as an object with a string Name, and integer UserId: Add-PodeRoute -Method Get -Path '/api/users/:userId' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = 'Rick' UserId = $WebEvent . Parameters [ 'userId' ] } } -PassThru | Add-PodeOAResponse -StatusCode 200 -Description 'A user object' -ContentSchemas @{ 'application/json' = ( New-PodeOAObjectProperty -Properties @( ( New-PodeOAStringProperty -Name 'Name' ), ( New-PodeOAIntProperty -Name 'UserId' ) )) } the JSON response payload defined is as follows: { \"Name\" : [ s tr i n g ], \"UserId\" : [ i nte ger ] } Internally, each route is created with an empty default 200 and 500 response. You can remove these, or other added responses, by using Remove-PodeOAResponse : Add-PodeRoute -Method Get -Path \"/api/user/:userId\" -ScriptBlock { # logic } -PassThru | Remove-PodeOAResponse -StatusCode 200","title":"Responses"},{"location":"Tutorials/OpenAPI/#requests","text":"","title":"Requests"},{"location":"Tutorials/OpenAPI/#parameters","text":"You can set route parameter definitions, such as parameters passed in the path/query, by using the Set-PodeOARequest function with the -Parameters parameter. The parameter takes an array of properties converted into parameters, using the ConvertTo-PodeOAParameter function. For example, to create some integer userId parameter that is supplied in the path of the request, the following will work: Add-PodeRoute -Method Get -Path '/api/users/:userId' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = 'Rick' UserId = $WebEvent . Parameters [ 'userId' ] } } -PassThru | Set-PodeOARequest -Parameters @( ( New-PodeOAIntProperty -Name 'userId' -Required | ConvertTo-PodeOAParameter -In Path ) ) Whereas you could use the next example to define 2 query parameters, both strings: Add-PodeRoute -Method Get -Path '/api/users' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = 'Rick' UserId = $WebEvent . Query [ 'name' ] } } -PassThru | Set-PodeOARequest -Parameters @( ( New-PodeOAStringProperty -Name 'name' -Required | ConvertTo-PodeOAParameter -In Query ), ( New-PodeOAStringProperty -Name 'city' -Required | ConvertTo-PodeOAParameter -In Query ) )","title":"Parameters"},{"location":"Tutorials/OpenAPI/#payload","text":"You can set request payload schemas by using the Set-PodeOARequest function, with the -RequestBody parameter. The request body can be defined using the New-PodeOARequestBody function, and supplying schema definitions for content types - this works in very much a similar way to defining responses above. For example, to define a request JSON payload of some userId and name you could use the following: Add-PodeRoute -Method Patch -Path '/api/users' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = $WebEvent . Data . name UserId = $WebEvent . Data . userId } } -PassThru | Set-PodeOARequest -RequestBody ( New-PodeOARequestBody -Required -ContentSchemas @{ 'application/json' = ( New-PodeOAObjectProperty -Properties @( ( New-PodeOAStringProperty -Name 'name' ), ( New-PodeOAIntProperty -Name 'userId' ) )) } ) The expected payload would look as follows: { \"name\" : [ s tr i n g ], \"userId\" : [ i nte ger ] }","title":"Payload"},{"location":"Tutorials/OpenAPI/#components","text":"You can define reusable OpenAPI components in Pode. Currently supported are Schemas, Parameters, Request Bodies, and Responses.","title":"Components"},{"location":"Tutorials/OpenAPI/#schemas","text":"To define a reusable schema that can be used in request bodies, and responses, you can use the Add-PodeOAComponentSchema function. You'll need to supply a Name, and a Schema that can be reused. The following is an example of defining a schema which is a object of Name, UserId, and Age: # define a reusable schema user object Add-PodeOAComponentSchema -Name 'UserSchema' -Schema ( New-PodeOAObjectProperty -Properties @( ( New-PodeOAStringProperty -Name 'Name' ), ( New-PodeOAIntProperty -Name 'UserId' ), ( New-PodeOAIntProperty -Name 'Age' ) ) ) # reuse the above schema in a response Add-PodeRoute -Method Get -Path '/api/users/:userId' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = 'Rick' UserId = $WebEvent . Parameters [ 'userId' ] Age = 42 } } -PassThru | Add-PodeOAResponse -StatusCode 200 -Description 'A list of users' -ContentSchemas @{ 'application/json' = 'UserSchema' }","title":"Schemas"},{"location":"Tutorials/OpenAPI/#request-bodies","text":"To define a reusable request bodies you can use the Add-PodeOAComponentRequestBody function. You'll need to supply a Name, as well as the needed schemas for each content type. The following is an example of defining a JSON object that a Name, UserId, and an Enable flag: # define a reusable request body Add-PodeOAComponentRequestBody -Name 'UserBody' -Required -ContentSchemas @{ 'application/json' = ( New-PodeOAObjectProperty -Properties @( ( New-PodeOAStringProperty -Name 'Name' ), ( New-PodeOAIntProperty -Name 'UserId' ), ( New-PodeOABoolProperty -Name 'Enabled' ) )) } # use the request body in a route Add-PodeRoute -Method Patch -Path '/api/users' -ScriptBlock { Set-PodeResponseStatus -StatusCode 200 } -PassThru | Set-PodeOARequest -RequestBody ( New-PodeOARequestBody -Reference 'UserBody' ) The JSON payload expected is of the format: { \"Name\" : [ s tr i n g ], \"UserId\" : [ i nte ger ], \"Enabled\" : [ boolea n ] }","title":"Request Bodies"},{"location":"Tutorials/OpenAPI/#parameters_1","text":"To define reusable parameters that are used on requests, you can use the Add-PodeOAComponentParameter function. You'll need to supply a Name and the Parameter definition. The following is an example of defining an integer path parameter for a userId , and then using that parameter on a route. # define a reusable {userid} path parameter New-PodeOAIntProperty -Name 'userId' -Required | ConvertTo-PodeOAParameter -In Path | Add-PodeOAComponentParameter -Name 'UserId' # use this parameter in a route Add-PodeRoute -Method Get -Path '/api/users/:userId' -ScriptBlock { Write-PodeJsonResponse -Value @{ Name = 'Rick' UserId = $WebEvent . Parameters [ 'userId' ] } } -PassThru | Set-PodeOARequest -Parameters @( ConvertTo-PodeOAParameter -Reference 'UserId' )","title":"Parameters"},{"location":"Tutorials/OpenAPI/#responses_1","text":"To define a reusable response definition you can use the Add-PodeOAComponentResponse function. You'll need to supply a Name, and optionally any Content/Header schemas that define the responses payload. The following is an example of defining a 200 response, that has a JSON payload of an array of objects for Name/UserId. This can then be used by name on a route: # defines a response with a json payload Add-PodeOAComponentResponse -Name 'OK' -Description 'A user object' -ContentSchemas @{ 'application/json' = ( New-PodeOAObjectProperty -Array -Properties @( ( New-PodeOAStringProperty -Name 'Name' ), ( New-PodeOAIntProperty -Name 'UserId' ) )) } # reuses the above response on a route using its \"OK\" name Add-PodeRoute -Method Get -Path \"/api/users\" -ScriptBlock { Write-PodeJsonResponse -Value @( @{ Name = 'Rick' ; UserId = 123 }, @{ Name = 'Geralt' ; UserId = 124 } ) } -PassThru | Add-PodeOAResponse -StatusCode 200 -Reference 'OK' the JSON response payload defined is as follows: [ { \"Name\" : [ s tr i n g ], \"UserId\" : [ i nte ger ] } ]","title":"Responses"},{"location":"Tutorials/OpenAPI/#properties","text":"Properties are used to create all Parameters and Schemas in OpenAPI. You can use the simple types on their own, or you can combine multiple of them together to form complex objects.","title":"Properties"},{"location":"Tutorials/OpenAPI/#simple-types","text":"There are 5 simple property types: Integers, Numbers, Strings, Booleans, and Schemas. Each of which can be created using the following functions: New-PodeOAIntProperty New-PodeOANumberProperty New-PodeOAStringProperty New-PodeOABoolProperty New-PodeOASchemaProperty These properties can be created with a Name, and other flags such as Required and/or a Description: # simple integer New-PodeOAIntProperty -Name 'userId' # a float number with a max value of 100 New-PodeOANumberProperty -Name 'ratio' -Format Float -Maximum 100 # a string with a default value, and enum of options New-PodeOAStringProperty -Name 'type' -Default 'admin' -Enum @( 'admin' , 'user' ) # a boolean that's required New-PodeOABoolProperty -Name 'enabled' -Required # a schema property that references another component schema New-PodeOASchemaProperty -Name 'Config' -Reference 'ConfigSchema' On their own, like above, the simple properties don't really do much. However, you can combine that together to make complex objects/arrays as defined below.","title":"Simple Types"},{"location":"Tutorials/OpenAPI/#arrays","text":"There isn't a dedicated function to create an array property, instead there is an -Array switch on each of the property functions - both Object and the above simple properties. If you supply the -Array switch to any of the above simple properties, this will define an array of that type - the -Name parameter can also be omitted if only a simple array if required. For example, the below will define an integer array: New-PodeOAIntProperty -Array When used in a Response, this could return the following JSON example: [ 0 , 1 , 2 ]","title":"Arrays"},{"location":"Tutorials/OpenAPI/#objects","text":"An object property is a combination of multiple other properties - both simple, array of more objects. There are two ways to define objects: Similar to arrays, you can use the -Object switch on the simple properties. You can use the New-PodeOAObjectProperty function to combine multiple properties.","title":"Objects"},{"location":"Tutorials/OpenAPI/#simple","text":"If you use the -Object switch on the simple property function, this will automatically wrap the property as an object. The Name for this is required. For example, the below will define a simple userId integer object: New-PodeOAIntProperty -Name 'userId' -Object In a response as JSON, this could look as follows: { \"userId\" : 0 } Furthermore, you can also supply both -Array and -Object switches: New-PodeOAIntProperty -Name 'userId' -Object -Array This wil result in something like the following JSON: { \"userId\" : [ 0 , 1 , 2 ] }","title":"Simple"},{"location":"Tutorials/OpenAPI/#complex","text":"Unlike the -Object switch that simply converts a single property into an object, the New-PodeOAObjectProperty function can combine and convert multiple properties. For example, the following will create an object using an Integer, String, and a Boolean: New-PodeOAObjectProperty -Properties @( ( New-PodeOAIntProperty -Name 'userId' ), ( New-PodeOAStringProperty -Name 'name' ), ( New-PodeOABoolProperty -Name 'enabled' ) ) As JSON, this could look as follows: { \"userId\" : 0 , \"name\" : \"Gary Goodspeed\" , \"enabled\" : true } You can also supply the -Array switch to the New-PodeOAObjectProperty function. This will result in an array of objects. For example, if we took the above: New-PodeOAObjectProperty -Array -Properties @( ( New-PodeOAIntProperty -Name 'userId' ), ( New-PodeOAStringProperty -Name 'name' ), ( New-PodeOABoolProperty -Name 'enabled' ) ) As JSON, this could look as follows: [ { \"userId\" : 0 , \"name\" : \"Gary Goodspeed\" , \"enabled\" : true }, { \"userId\" : 1 , \"name\" : \"Kevin\" , \"enabled\" : false } ] You can also combine objects into other objects: $usersArray = New-PodeOAObjectProperty -Name 'users' -Array -Properties @( ( New-PodeOAIntProperty -Name 'userId' ), ( New-PodeOAStringProperty -Name 'name' ), ( New-PodeOABoolProperty -Name 'enabled' ) ) New-PodeOAObjectProperty -Properties @( ( New-PodeOAIntProperty -Name 'found' ), $usersArray ) As JSON, this could look as follows: { \"found\" : 2 , \"users\" : [ { \"userId\" : 0 , \"name\" : \"Gary Goodspeed\" , \"enabled\" : true }, { \"userId\" : 1 , \"name\" : \"Kevin\" , \"enabled\" : false } ] }","title":"Complex"},{"location":"Tutorials/OpenAPI/#swagger-and-redoc","text":"If you're not using a custom OpenAPI viewer, then you can use one of the inbuilt ones with Pode - either Swagger and ReDoc, or both! For both you can customise the path to access the page on, but by default Swagger is at /swagger and ReDoc is at /redoc . If you've written your own custom OpenAPI definition then you can also set a custom path to fetch the definition. To enable either you can use the Enable-PodeOpenApiViewer function: # for swagger at \"/docs/swagger\" Enable-PodeOpenApiViewer -Type Swagger -Path '/docs/swagger' -DarkMode # or ReDoc at the default \"/redoc\" Enable-PodeOpenApiViewer -Type ReDoc","title":"Swagger and ReDoc"},{"location":"Tutorials/RequestLimits/","text":"Request Limits When making requests to the server, there are some limits that will cause the request to fail. These limits mostly cover web requests, and can be altered in the server.psd1 configuration file. Timeout There is a default request timeout of 30 seconds, exceeding this will force the connection to close. In the case of a web request, a 408 HTTP status code will be returned. You can edit the timeout in the server.psd1 file: @{ Server = @{ Request = @{ Timeout = 30 } } } The value supplied should be in seconds. Body Size On web requests there is a default max request body size of 100MB, exceeding this will cause a 413 HTTP status code to be returned. You can edit the max body size in the server.psd1 file: @{ Server = @{ Request = @{ BodySize = 100MB } } } The value supplied should be in bytes, or using the PowerShell notation 100MB .","title":"Request Limits"},{"location":"Tutorials/RequestLimits/#request-limits","text":"When making requests to the server, there are some limits that will cause the request to fail. These limits mostly cover web requests, and can be altered in the server.psd1 configuration file.","title":"Request Limits"},{"location":"Tutorials/RequestLimits/#timeout","text":"There is a default request timeout of 30 seconds, exceeding this will force the connection to close. In the case of a web request, a 408 HTTP status code will be returned. You can edit the timeout in the server.psd1 file: @{ Server = @{ Request = @{ Timeout = 30 } } } The value supplied should be in seconds.","title":"Timeout"},{"location":"Tutorials/RequestLimits/#body-size","text":"On web requests there is a default max request body size of 100MB, exceeding this will cause a 413 HTTP status code to be returned. You can edit the max body size in the server.psd1 file: @{ Server = @{ Request = @{ BodySize = 100MB } } } The value supplied should be in bytes, or using the PowerShell notation 100MB .","title":"Body Size"},{"location":"Tutorials/Schedules/","text":"Schedules A Schedule in Pode is a long-running async task, and unlike timers, when they trigger they are run in their own separate runspace - so they don't affect each other if they take a while to process. By default up to a maximum of 10 schedules can run concurrently, but this can be changed by using Set-PodeScheduleConcurrency . Schedule triggers are defined using cron expressions , basic syntax is supported as well as some predefined expressions. Schedules can start immediately, have a delayed start time, and also have a defined end time. Create a Schedule You can create a new schedule using Add-PodeSchedule . To create a basic Schedule, the following example will work; this will trigger at '00:05' every Tuesday outputting the current date/time: Add-PodeSchedule -Name 'date' -Cron '5 0 * * TUE' -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } Whereas the following will create the same schedule, but will only trigger the schedule 4 times due to the -Limit value supplied: Add-PodeSchedule -Name 'date' -Cron '5 0 * * TUE' -Limit 4 -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } You can also supply multiple cron expressions for the same Schedule. For example, the following will trigger the same schedule every minute and every hour: Add-PodeSchedule -Name 'date' -Cron @( '@minutely' , '@hourly' ) -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } Usually all schedules are created within the main Start-PodeServer scope, however it is possible to create adhoc schedules with routes/etc. If you create adhoc schedules in this manor, you might notice that they don't run; this is because the Runspace that schedules use to run won't have been configured. You can configure by using -EnablePool on Start-PodeServer : Start-PodeServer -EnablePool Schedules { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/create-schedule' -ScriptBlock { Add-PodeSchedule -Name 'example' -Cron '@minutely' -ScriptBlock { # logic } } } Arguments You can supply custom arguments to your schedules by using the -ArgumentList parameter. Unlike other features, for schedules the -ArgumentList is a hashtable; this is done because parameters to the -ScriptBlock are splatted in, and the parameter names are literal. For example, the first parameter to a schedule is always $Event - this contains the .Lockable object. Other parameters come from any Key/Values contained with the optional -ArgumentList : Add-PodeSchedule -Name 'date' -Cron '@minutely' -ArgumentList @{ Name = 'Rick' ; Environment = 'Multiverse' } -ScriptBlock { param ( $Event , $Name , $Environment ) } Important In schedules, your scriptblock parameter names must be exact - including case-sensitivity. This is because the arguments are splatted into a runspace. If you pass in an argument called \"Names\", the param-block must have $Names exactly. Furthermore, the event parameter must be called $Event . Delayed Start The -StartTime <datetime> parameter will cause the Schedule to only be triggered after the date/time defined. For example, if you have a schedule set to trigger at 00:05 every Tuesday, and you pass -StartTime [DateTime]::Now.AddMonths(2) , then the schedule will only start trigger on Tuesdays in 2 months time. The following will create a Schedule that triggers at 16:00 every Friday, and is delayed by 1 year: $start = [DateTime] :: Now . AddYears ( 1 ) Add-PodeSchedule -Name 'date' -Cron '0 16 * * FRI' -StartTime $start -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } Defined End The -EndTime <datetime> parameter will cause the Schedule to cease triggering after the date/time defined. For example, if you have a schedule set to trigger at 00:05 every Tuesday, and you pass -EndTime [DateTime]::Now.AddMonths(2) , then the schedule will stop triggering in 2 months time. The following will create a Schedule that triggers at 16:00 every Friday, and stops triggering in 1 year: $end = [DateTime] :: Now . AddYears ( 1 ) Add-PodeSchedule -Name 'date' -Cron '0 16 * * FRI' -EndTime $end -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } Script from File You normally define a schedule's script using the -ScriptBlock parameter however, you can also reference a file with the required scriptblock using -FilePath . Using the -FilePath parameter will dot-source a scriptblock from the file, and set it as the schedule's script. For example, to create a schedule from a file that will output Hello, world every minute: File.ps1 { 'Hello, world!' | Out-PodeHost } Schedule Add-PodeSchedule -Name 'from-file' -Cron '@minutely' -FilePath './Schedules/File.ps1' Getting Schedules The Get-PodeSchedule helper function will allow you to retrieve a list of schedules configured within Pode. You can use it to retrieve all of the schedules, or supply filters to retrieve specific ones. To retrieve all of the schedules, you can call the function will no parameters. To filter, here are some examples: # one schedule by name Get-PodeSchedule -Name Name1 # multiple schedules by name Get-PodeSchedule -Name Name1 , Name2 Next Trigger Time When you retrieve a Schedule using Get-PodeSchedule , each Schedule object will already have its next trigger time as NextTriggerTime . However, if you want to get a trigger time further ino the future than this, then you can use the Get-PodeScheduleNextTrigger function. This function takes the Name of a Schedule, as well as a custom DateTime and will return the next trigger time after that DateTime. If no DateTime is supplied, then the Schedule's StartTime is used (or the current time if no StartTime). # just get the next time $time = Get-PodeScheduleNextTrigger -Name Schedule1 # get the next time after a date $time = Get-PodeScheduleTriggerTime -Name Schedule1 -DateTime [datetime] :: new ( 2020 , 3 , 20 ) Manual Trigger You can manually trigger a schedule by using Invoke-PodeSchedule . This will run the schedule immediately, and will not count towards a schedule's run limit: Invoke-PodeSchedule -Name 'schedule-name' You can also pass further optional arguments that will be supplied to the schedules's scriptblock by using -ArgumentList , which is a hashtable of parameters that will be supplied: Add-PodeSchedule -Name 'date' -Cron '@minutely' -ScriptBlock { param ( $Date ) Write-Host $Date } Invoke-PodeSchedule -Name 'date' -ArgumentList @{ Date = [DateTime] :: Now } Note Remember that names of items in the hashtable, and the name of the parameter in the scriptblock must be identical. Schedule Object Warning Be careful if you choose to edit these objects, as they will affect the server. The following is the structure of the Schedule object internally, as well as the object that is returned from Get-PodeSchedule : Name Type Description Name string The name of the Schedule StartTime datetime The delayed start time of the Schedule EndTime datetime The end time of the Schedule Crons hashtable[] The cron expressions of the Schedule, but parsed into an internal format CronsRaw string[] The raw cron expressions that were supplied Limit int The number of times the Schedule should run - 0 if running infinitely Count int The number of times the Schedule has run LastTriggerTime datetime The datetime the Schedule was last triggered NextTriggerTime datetime The datetime the Schedule will next be triggered Script scriptblock The scriptblock of the Schedule Arguments hashtable The arguments supplied from ArgumentList OnStart bool Should the Schedule run once when the server is starting, or once the server has fully loaded Completed bool Has the Schedule completed all of its runs","title":"Schedules"},{"location":"Tutorials/Schedules/#schedules","text":"A Schedule in Pode is a long-running async task, and unlike timers, when they trigger they are run in their own separate runspace - so they don't affect each other if they take a while to process. By default up to a maximum of 10 schedules can run concurrently, but this can be changed by using Set-PodeScheduleConcurrency . Schedule triggers are defined using cron expressions , basic syntax is supported as well as some predefined expressions. Schedules can start immediately, have a delayed start time, and also have a defined end time.","title":"Schedules"},{"location":"Tutorials/Schedules/#create-a-schedule","text":"You can create a new schedule using Add-PodeSchedule . To create a basic Schedule, the following example will work; this will trigger at '00:05' every Tuesday outputting the current date/time: Add-PodeSchedule -Name 'date' -Cron '5 0 * * TUE' -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } Whereas the following will create the same schedule, but will only trigger the schedule 4 times due to the -Limit value supplied: Add-PodeSchedule -Name 'date' -Cron '5 0 * * TUE' -Limit 4 -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } You can also supply multiple cron expressions for the same Schedule. For example, the following will trigger the same schedule every minute and every hour: Add-PodeSchedule -Name 'date' -Cron @( '@minutely' , '@hourly' ) -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } Usually all schedules are created within the main Start-PodeServer scope, however it is possible to create adhoc schedules with routes/etc. If you create adhoc schedules in this manor, you might notice that they don't run; this is because the Runspace that schedules use to run won't have been configured. You can configure by using -EnablePool on Start-PodeServer : Start-PodeServer -EnablePool Schedules { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/create-schedule' -ScriptBlock { Add-PodeSchedule -Name 'example' -Cron '@minutely' -ScriptBlock { # logic } } }","title":"Create a Schedule"},{"location":"Tutorials/Schedules/#arguments","text":"You can supply custom arguments to your schedules by using the -ArgumentList parameter. Unlike other features, for schedules the -ArgumentList is a hashtable; this is done because parameters to the -ScriptBlock are splatted in, and the parameter names are literal. For example, the first parameter to a schedule is always $Event - this contains the .Lockable object. Other parameters come from any Key/Values contained with the optional -ArgumentList : Add-PodeSchedule -Name 'date' -Cron '@minutely' -ArgumentList @{ Name = 'Rick' ; Environment = 'Multiverse' } -ScriptBlock { param ( $Event , $Name , $Environment ) } Important In schedules, your scriptblock parameter names must be exact - including case-sensitivity. This is because the arguments are splatted into a runspace. If you pass in an argument called \"Names\", the param-block must have $Names exactly. Furthermore, the event parameter must be called $Event .","title":"Arguments"},{"location":"Tutorials/Schedules/#delayed-start","text":"The -StartTime <datetime> parameter will cause the Schedule to only be triggered after the date/time defined. For example, if you have a schedule set to trigger at 00:05 every Tuesday, and you pass -StartTime [DateTime]::Now.AddMonths(2) , then the schedule will only start trigger on Tuesdays in 2 months time. The following will create a Schedule that triggers at 16:00 every Friday, and is delayed by 1 year: $start = [DateTime] :: Now . AddYears ( 1 ) Add-PodeSchedule -Name 'date' -Cron '0 16 * * FRI' -StartTime $start -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" }","title":"Delayed Start"},{"location":"Tutorials/Schedules/#defined-end","text":"The -EndTime <datetime> parameter will cause the Schedule to cease triggering after the date/time defined. For example, if you have a schedule set to trigger at 00:05 every Tuesday, and you pass -EndTime [DateTime]::Now.AddMonths(2) , then the schedule will stop triggering in 2 months time. The following will create a Schedule that triggers at 16:00 every Friday, and stops triggering in 1 year: $end = [DateTime] :: Now . AddYears ( 1 ) Add-PodeSchedule -Name 'date' -Cron '0 16 * * FRI' -EndTime $end -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" }","title":"Defined End"},{"location":"Tutorials/Schedules/#script-from-file","text":"You normally define a schedule's script using the -ScriptBlock parameter however, you can also reference a file with the required scriptblock using -FilePath . Using the -FilePath parameter will dot-source a scriptblock from the file, and set it as the schedule's script. For example, to create a schedule from a file that will output Hello, world every minute: File.ps1 { 'Hello, world!' | Out-PodeHost } Schedule Add-PodeSchedule -Name 'from-file' -Cron '@minutely' -FilePath './Schedules/File.ps1'","title":"Script from File"},{"location":"Tutorials/Schedules/#getting-schedules","text":"The Get-PodeSchedule helper function will allow you to retrieve a list of schedules configured within Pode. You can use it to retrieve all of the schedules, or supply filters to retrieve specific ones. To retrieve all of the schedules, you can call the function will no parameters. To filter, here are some examples: # one schedule by name Get-PodeSchedule -Name Name1 # multiple schedules by name Get-PodeSchedule -Name Name1 , Name2","title":"Getting Schedules"},{"location":"Tutorials/Schedules/#next-trigger-time","text":"When you retrieve a Schedule using Get-PodeSchedule , each Schedule object will already have its next trigger time as NextTriggerTime . However, if you want to get a trigger time further ino the future than this, then you can use the Get-PodeScheduleNextTrigger function. This function takes the Name of a Schedule, as well as a custom DateTime and will return the next trigger time after that DateTime. If no DateTime is supplied, then the Schedule's StartTime is used (or the current time if no StartTime). # just get the next time $time = Get-PodeScheduleNextTrigger -Name Schedule1 # get the next time after a date $time = Get-PodeScheduleTriggerTime -Name Schedule1 -DateTime [datetime] :: new ( 2020 , 3 , 20 )","title":"Next Trigger Time"},{"location":"Tutorials/Schedules/#manual-trigger","text":"You can manually trigger a schedule by using Invoke-PodeSchedule . This will run the schedule immediately, and will not count towards a schedule's run limit: Invoke-PodeSchedule -Name 'schedule-name' You can also pass further optional arguments that will be supplied to the schedules's scriptblock by using -ArgumentList , which is a hashtable of parameters that will be supplied: Add-PodeSchedule -Name 'date' -Cron '@minutely' -ScriptBlock { param ( $Date ) Write-Host $Date } Invoke-PodeSchedule -Name 'date' -ArgumentList @{ Date = [DateTime] :: Now } Note Remember that names of items in the hashtable, and the name of the parameter in the scriptblock must be identical.","title":"Manual Trigger"},{"location":"Tutorials/Schedules/#schedule-object","text":"Warning Be careful if you choose to edit these objects, as they will affect the server. The following is the structure of the Schedule object internally, as well as the object that is returned from Get-PodeSchedule : Name Type Description Name string The name of the Schedule StartTime datetime The delayed start time of the Schedule EndTime datetime The end time of the Schedule Crons hashtable[] The cron expressions of the Schedule, but parsed into an internal format CronsRaw string[] The raw cron expressions that were supplied Limit int The number of times the Schedule should run - 0 if running infinitely Count int The number of times the Schedule has run LastTriggerTime datetime The datetime the Schedule was last triggered NextTriggerTime datetime The datetime the Schedule will next be triggered Script scriptblock The scriptblock of the Schedule Arguments hashtable The arguments supplied from ArgumentList OnStart bool Should the Schedule run once when the server is starting, or once the server has fully loaded Completed bool Has the Schedule completed all of its runs","title":"Schedule Object"},{"location":"Tutorials/Scoping/","text":"Scoping Scoping in Pode can be a little confusing at times, with everything running in different runspaces it can be hard to keep track of what's available, and what's not. In 2.0 work was done to help alleviate some of this confusion, mostly around modules; snapins; functions, and variables. Modules Prior to 2.0 you had to use the Import-PodeModule function; but now, you can use the normal Import-Module function. Pode will automatically import all currently loaded modules into its runspaces. The Import-PodeModule function still exists though, for support with local modules via ps_modules - under the hood however, it now just calls Import-Module . Below, SomeModule1 and SomeModule2 will be automatically imported into all of Pode's runspaces, and their functions readily available: Import-Module SomeModule1 , SomeModule2 Start-PodeServer -ScriptBlock { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Use-SomeModule1Function } } Note If you're starting your server with pode start , you'll need to use -Scope Global on Import-Module . Disable If you don't need any modules, or want to stop the auto-importing from occurring, you can use disable it via the server.psd1 configuration file : @{ Server = @{ AutoImport = @{ Modules = @{ Enable = $false } } } } Export If you want finer control over which modules are auto-imported, then you can set the auto-import to use an export list. To do so, you set Pode to only import exported modules: @{ Server = @{ AutoImport = @{ Modules = @{ Enable = $true ExportOnly = $true } } } } Then you can \"export\" modules that Pode should import by using Export-PodeModule . Below only SomeModule2 will be auto-imported into all of Pode's runspaces. Import-Module SomeModule1 , SomeModule2 Start-PodeServer -ScriptBlock { Export-PodeModule SomeModule2 } Snapins Important Snapins are only supported on Windows PowerShell. Prior to 2.0 you had to use the Import-PodeSnapin function; but now, you can use the normal Add-PSSnapin function. Pode will automatically import all currently loaded snapins into its runspaces. The Import-PodeSnapin function still exists though, just to make transition to 2.0 a little easier - under the hood however, it now just calls Add-PSSnapin . Below, Some.Snapin.1 and Some.Snapin.2 will be automatically imported into all of Pode's runspaces, and their functions readily available: Add-PSSnapin Some . Snapin . 1 Add-PSSnapin Some . Snapin . 2 Start-PodeServer -ScriptBlock { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Use-SomeSnapinFunction } } Disable If you don't need any snapins, or want to stop the auto-importing from occurring, you can use disable it via the server.psd1 configuration file : @{ Server = @{ AutoImport = @{ Snapins = @{ Enable = $false } } } } Export If you want finer control over which snapins are auto-imported, then you can set the auto-import to use an export list. To do so, you set Pode to only import exported snapins: @{ Server = @{ AutoImport = @{ Snapins = @{ Enable = $true ExportOnly = $true } } } } Then you can \"export\" snapins that Pode should import by using Export-PodeSnapin . Below only Some.Snapin.2 will be auto-imported into all of Pode's runspaces. Add-PSSnapin 'Some.Snapin.1' Add-PSSnapin 'Some.Snapin.2' Start-PodeServer -ScriptBlock { Export-PodeSnapin 'Some.Snapin.2' } Functions Prior to 2.0 if you wanted to use quick local functions in your Routes/etc, you would have needed to put them all into a module file, and then use Import-PodeSnapin to load them. But now you can just define your functions in the same ps1 file, and Pode will auto-import them for you. Below, Write-HelloResponse and Write-ByeResponse will be automatically imported into all of Pode's runspaces, ready for use: function Write-HelloResponse { Write-PodeJsonResponse -Value @{ Message = 'Hello!' } } Start-PodeServer -ScriptBlock { function Write-ByeResponse { Write-PodeJsonResponse -Value @{ Message = 'Bye!' } } Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/hello' -ScriptBlock { Write-HelloResponse } Add-PodeRoute -Method Get -Path '/bye' -ScriptBlock { Write-ByeResponse } } If you store Routes/etc in other files, you can also have local functions in these files as well. However, for Pode to import them you must use Use-PodeScript to dot-source the scripts - this will trigger Pode to scan the file for functions. Disable If you don't need any functions, or want to stop the auto-importing from occurring, you can use disable it via the server.psd1 configuration file : @{ Server = @{ AutoImport = @{ Functions = @{ Enable = $false } } } } Export If you want finer control over which functions are auto-imported, then you can set the auto-import to use an export list. To do so, you set Pode to only import exported modules: @{ Server = @{ AutoImport = @{ Functions = @{ Enable = $true ExportOnly = $true } } } } Then you can \"export\" functions that Pode should import by using Export-PodeFunction . Below only Write-HelloResponse will be auto-imported into all of Pode's runspaces. function Write-HelloResponse { Write-PodeJsonResponse -Value @{ Message = 'Hello!' } } Start-PodeServer -ScriptBlock { function Write-ByeResponse { Write-PodeJsonResponse -Value @{ Message = 'Bye!' } } Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/hello' -ScriptBlock { Write-HelloResponse } Add-PodeRoute -Method Get -Path '/bye' -ScriptBlock { # this would fail Write-ByeResponse } Export-PodeFunction 'Write-HelloResponse' } Variables Prior to 2.0 if you wanted to use quick local variables in your Routes/etc, you would have needed to use the Set-PodeState / Get-PodeState functions. But now you can just define your variables in the same ps1 file, and then reference them in your Routes/etc via the $using: syntax. The $using: syntax is supported in almost all -ScriptBlock parameters for the likes of: Authentication Endware Handlers Logging Middleware Routes Schedules Timers Below, the $outer_msg and $inner_msg variables can now be more simply referenced in a Route: $outer_msg = 'Hello, there' Start-PodeServer -ScriptBlock { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http $inner_msg = 'General Kenobi' Add-PodeRoute -Method Get -Path '/random' -ScriptBlock { Write-PodeJsonResponse -Value @{ Message = \" $( $using : outer_msg ) ... $( $using : inner_msg ) \" } } }","title":"Scoping"},{"location":"Tutorials/Scoping/#scoping","text":"Scoping in Pode can be a little confusing at times, with everything running in different runspaces it can be hard to keep track of what's available, and what's not. In 2.0 work was done to help alleviate some of this confusion, mostly around modules; snapins; functions, and variables.","title":"Scoping"},{"location":"Tutorials/Scoping/#modules","text":"Prior to 2.0 you had to use the Import-PodeModule function; but now, you can use the normal Import-Module function. Pode will automatically import all currently loaded modules into its runspaces. The Import-PodeModule function still exists though, for support with local modules via ps_modules - under the hood however, it now just calls Import-Module . Below, SomeModule1 and SomeModule2 will be automatically imported into all of Pode's runspaces, and their functions readily available: Import-Module SomeModule1 , SomeModule2 Start-PodeServer -ScriptBlock { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Use-SomeModule1Function } } Note If you're starting your server with pode start , you'll need to use -Scope Global on Import-Module .","title":"Modules"},{"location":"Tutorials/Scoping/#disable","text":"If you don't need any modules, or want to stop the auto-importing from occurring, you can use disable it via the server.psd1 configuration file : @{ Server = @{ AutoImport = @{ Modules = @{ Enable = $false } } } }","title":"Disable"},{"location":"Tutorials/Scoping/#export","text":"If you want finer control over which modules are auto-imported, then you can set the auto-import to use an export list. To do so, you set Pode to only import exported modules: @{ Server = @{ AutoImport = @{ Modules = @{ Enable = $true ExportOnly = $true } } } } Then you can \"export\" modules that Pode should import by using Export-PodeModule . Below only SomeModule2 will be auto-imported into all of Pode's runspaces. Import-Module SomeModule1 , SomeModule2 Start-PodeServer -ScriptBlock { Export-PodeModule SomeModule2 }","title":"Export"},{"location":"Tutorials/Scoping/#snapins","text":"Important Snapins are only supported on Windows PowerShell. Prior to 2.0 you had to use the Import-PodeSnapin function; but now, you can use the normal Add-PSSnapin function. Pode will automatically import all currently loaded snapins into its runspaces. The Import-PodeSnapin function still exists though, just to make transition to 2.0 a little easier - under the hood however, it now just calls Add-PSSnapin . Below, Some.Snapin.1 and Some.Snapin.2 will be automatically imported into all of Pode's runspaces, and their functions readily available: Add-PSSnapin Some . Snapin . 1 Add-PSSnapin Some . Snapin . 2 Start-PodeServer -ScriptBlock { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Use-SomeSnapinFunction } }","title":"Snapins"},{"location":"Tutorials/Scoping/#disable_1","text":"If you don't need any snapins, or want to stop the auto-importing from occurring, you can use disable it via the server.psd1 configuration file : @{ Server = @{ AutoImport = @{ Snapins = @{ Enable = $false } } } }","title":"Disable"},{"location":"Tutorials/Scoping/#export_1","text":"If you want finer control over which snapins are auto-imported, then you can set the auto-import to use an export list. To do so, you set Pode to only import exported snapins: @{ Server = @{ AutoImport = @{ Snapins = @{ Enable = $true ExportOnly = $true } } } } Then you can \"export\" snapins that Pode should import by using Export-PodeSnapin . Below only Some.Snapin.2 will be auto-imported into all of Pode's runspaces. Add-PSSnapin 'Some.Snapin.1' Add-PSSnapin 'Some.Snapin.2' Start-PodeServer -ScriptBlock { Export-PodeSnapin 'Some.Snapin.2' }","title":"Export"},{"location":"Tutorials/Scoping/#functions","text":"Prior to 2.0 if you wanted to use quick local functions in your Routes/etc, you would have needed to put them all into a module file, and then use Import-PodeSnapin to load them. But now you can just define your functions in the same ps1 file, and Pode will auto-import them for you. Below, Write-HelloResponse and Write-ByeResponse will be automatically imported into all of Pode's runspaces, ready for use: function Write-HelloResponse { Write-PodeJsonResponse -Value @{ Message = 'Hello!' } } Start-PodeServer -ScriptBlock { function Write-ByeResponse { Write-PodeJsonResponse -Value @{ Message = 'Bye!' } } Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/hello' -ScriptBlock { Write-HelloResponse } Add-PodeRoute -Method Get -Path '/bye' -ScriptBlock { Write-ByeResponse } } If you store Routes/etc in other files, you can also have local functions in these files as well. However, for Pode to import them you must use Use-PodeScript to dot-source the scripts - this will trigger Pode to scan the file for functions.","title":"Functions"},{"location":"Tutorials/Scoping/#disable_2","text":"If you don't need any functions, or want to stop the auto-importing from occurring, you can use disable it via the server.psd1 configuration file : @{ Server = @{ AutoImport = @{ Functions = @{ Enable = $false } } } }","title":"Disable"},{"location":"Tutorials/Scoping/#export_2","text":"If you want finer control over which functions are auto-imported, then you can set the auto-import to use an export list. To do so, you set Pode to only import exported modules: @{ Server = @{ AutoImport = @{ Functions = @{ Enable = $true ExportOnly = $true } } } } Then you can \"export\" functions that Pode should import by using Export-PodeFunction . Below only Write-HelloResponse will be auto-imported into all of Pode's runspaces. function Write-HelloResponse { Write-PodeJsonResponse -Value @{ Message = 'Hello!' } } Start-PodeServer -ScriptBlock { function Write-ByeResponse { Write-PodeJsonResponse -Value @{ Message = 'Bye!' } } Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http Add-PodeRoute -Method Get -Path '/hello' -ScriptBlock { Write-HelloResponse } Add-PodeRoute -Method Get -Path '/bye' -ScriptBlock { # this would fail Write-ByeResponse } Export-PodeFunction 'Write-HelloResponse' }","title":"Export"},{"location":"Tutorials/Scoping/#variables","text":"Prior to 2.0 if you wanted to use quick local variables in your Routes/etc, you would have needed to use the Set-PodeState / Get-PodeState functions. But now you can just define your variables in the same ps1 file, and then reference them in your Routes/etc via the $using: syntax. The $using: syntax is supported in almost all -ScriptBlock parameters for the likes of: Authentication Endware Handlers Logging Middleware Routes Schedules Timers Below, the $outer_msg and $inner_msg variables can now be more simply referenced in a Route: $outer_msg = 'Hello, there' Start-PodeServer -ScriptBlock { Add-PodeEndpoint -Address localhost -Port 9000 -Protocol Http $inner_msg = 'General Kenobi' Add-PodeRoute -Method Get -Path '/random' -ScriptBlock { Write-PodeJsonResponse -Value @{ Message = \" $( $using : outer_msg ) ... $( $using : inner_msg ) \" } } }","title":"Variables"},{"location":"Tutorials/SharedState/","text":"Shared State Most things in Pode run in isolated runspaces: routes, middleware, schedules - to name a few. This means you can't create a variable in a timer, and then access that variable in a route. To overcome this limitation you can use the Shared State feature within Pode, which allows you to set/get variables on a state shared between all runspaces. This lets you can create a variable in a timer and store it within the shared state; then you can retrieve the variable from the state in a route. You also have the option of saving the current state to a file, and then restoring the state back on server start. This way you won't lose state between server restarts. You can also use the State in combination with Lock-PodeObject to ensure thread safety - if needed. Tip It's wise to use the State in conjunction with Lock-PodeObject , to ensure thread safety between runspaces. Warning If you omit the use of Lock-PodeObject , you might run into errors due to multi-threading. Only omit if you are absolutely confident you do not need locking. (ie: you set in state once and then only ever retrieve, never updating the variable). Usage Where possible use the same casing for the -Name of state keys. When using Restore-PodeState the state will become case-sensitive due to the nature of how ConvertFrom-Json works. Set The Set-PodeState function will create/update a variable in the state. You need to supply a name and a value to set on the state, there's also an optional scope that can be supplied - which lets you save specific state objects with a certain scope. An example of setting a hashtable variable in the state is as follows: Start-PodeServer { Add-PodeTimer -Name 'do-something' -Interval 5 -ScriptBlock { Lock-PodeObject -ScriptBlock { Set-PodeState -Name 'data' -Value @{ 'Name' = 'Rick Sanchez' } | Out-Null } } } Alternatively you could use the $state: variable scope to set a variable in state. This variable will be scopeless, so if you need scope then use Set-PodeState . $state: can be used anywhere, but keep in mind that like $session: Pode can only remap the this in scriptblocks it's aware of; so using it in a function of a custom module won't work. Similar to the example above: Start-PodeServer { Add-PodeTimer -Name 'do-something' -Interval 5 -ScriptBlock { Lock-PodeObject -ScriptBlock { $state : data = @{ 'Name' = 'Rick Sanchez' } } } } Get The Get-PodeState function will return the value currently stored in the state for a variable. If the variable doesn't exist then $null is returned. An example of retrieving a value from the state is as follows: Start-PodeServer { Add-PodeTimer -Name 'do-something' -Interval 5 -ScriptBlock { $value = $null Lock-PodeObject -ScriptBlock { $value = ( Get-PodeState -Name 'data' ) } # do something with $value } } Alternatively you could use the $state: variable scope to get a variable in state. $state: can be used anywhere, but keep in mind that like $session: Pode can only remap the this in scriptblocks it's aware of; so using it in a function of a custom module won't work. Similar to the example above: Start-PodeServer { Add-PodeTimer -Name 'do-something' -Interval 5 -ScriptBlock { $value = $null Lock-PodeObject -ScriptBlock { $value = $state : data } # do something with $value } } Remove The Remove-PodeState function will remove a variable from the state. It will also return the value stored in the state before removing the variable. An example of removing a variable from the state is as follows: Start-PodeServer { Add-PodeTimer -Name 'do-something' -Interval 5 -ScriptBlock { Lock-PodeObject -ScriptBlock { Remove-PodeState -Name 'data' | Out-Null } } } Save The Save-PodeState function will save the current state, as JSON, to the specified file. The file path can either be relative, or literal. When saving the state, it's recommended to wrap the function within Lock-PodeObject . An example of saving the current state every hour is as follows: Start-PodeServer { Add-PodeSchedule -Name 'save-state' -Cron '@hourly' -ScriptBlock { Lock-PodeObject -ScriptBlock { Save-PodeState -Path './state.json' } } } When saving the state, you can also use the -Exclude or -Include parameters to exclude/include certain state objects from being saved. Saving also has a -Scope parameter, which allows you so save only state objects created with the specified scope(s). You can use all the above 3 parameter in conjunction, with -Exclude having the highest precedence and -Scope having the lowest. By default the JSON will be saved expanded, but you can saved the JSON as compressed by supplying the -Compress switch. Restore The Restore-PodeState function will restore the current state from the specified file. The file path can either be relative, or a literal path. if you're restoring the state immediately on server start, you don't need to use Lock-PodeObject . An example of restore the current state on server start is as follows: Start-PodeServer { Restore-PodeState './state.json' } By default, restoring from a state file will overwrite the current state. You can change this so the restored state is merged instead by using the -Merge switch. (Note: if you restore a key that already exists in state, this will still overwrite that key). Full Example The following is a full example of using the State functions. It is a simple Timer that creates and updates a hashtable variable, and then a Route is used to retrieve that variable. There is also another route that will remove the variable from the state. The state is also saved on every iteration of the timer, and restored on server start: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # create the shared variable Set-PodeState -Name 'hash' -Value @{ 'values' = @(); } | Out-Null # attempt to re-initialise the state (will do nothing if the file doesn't exist) Restore-PodeState -Path './state.json' # timer to add a random number to the shared state Add-PodeTimer -Name 'forever' -Interval 2 -ScriptBlock { # ensure we're thread safe Lock-PodeObject -ScriptBlock { # attempt to get the hashtable from the state $hash = ( Get-PodeState -Name 'hash' ) # add a random number $hash . values += ( Get-Random -Minimum 0 -Maximum 10 ) # save the state to file Save-PodeState -Path './state.json' } } # route to return the value of the hashtable from shared state Add-PodeRoute -Method Get -Path '/' -ScriptBlock { # again, ensure we're thread safe Lock-PodeObject -ScriptBlock { # get the hashtable from the state and return it $hash = ( Get-PodeState -Name 'hash' ) Write-PodeJsonResponse -Value $hash } } # route to remove the hashtable from shared state Add-PodeRoute -Method Delete -Path '/' -ScriptBlock { # ensure we're thread safe Lock-PodeObject -ScriptBlock { # remove the hashtable from the state Remove-PodeState -Name 'hash' | Out-Null } } }","title":"Shared State"},{"location":"Tutorials/SharedState/#shared-state","text":"Most things in Pode run in isolated runspaces: routes, middleware, schedules - to name a few. This means you can't create a variable in a timer, and then access that variable in a route. To overcome this limitation you can use the Shared State feature within Pode, which allows you to set/get variables on a state shared between all runspaces. This lets you can create a variable in a timer and store it within the shared state; then you can retrieve the variable from the state in a route. You also have the option of saving the current state to a file, and then restoring the state back on server start. This way you won't lose state between server restarts. You can also use the State in combination with Lock-PodeObject to ensure thread safety - if needed. Tip It's wise to use the State in conjunction with Lock-PodeObject , to ensure thread safety between runspaces. Warning If you omit the use of Lock-PodeObject , you might run into errors due to multi-threading. Only omit if you are absolutely confident you do not need locking. (ie: you set in state once and then only ever retrieve, never updating the variable).","title":"Shared State"},{"location":"Tutorials/SharedState/#usage","text":"Where possible use the same casing for the -Name of state keys. When using Restore-PodeState the state will become case-sensitive due to the nature of how ConvertFrom-Json works.","title":"Usage"},{"location":"Tutorials/SharedState/#set","text":"The Set-PodeState function will create/update a variable in the state. You need to supply a name and a value to set on the state, there's also an optional scope that can be supplied - which lets you save specific state objects with a certain scope. An example of setting a hashtable variable in the state is as follows: Start-PodeServer { Add-PodeTimer -Name 'do-something' -Interval 5 -ScriptBlock { Lock-PodeObject -ScriptBlock { Set-PodeState -Name 'data' -Value @{ 'Name' = 'Rick Sanchez' } | Out-Null } } } Alternatively you could use the $state: variable scope to set a variable in state. This variable will be scopeless, so if you need scope then use Set-PodeState . $state: can be used anywhere, but keep in mind that like $session: Pode can only remap the this in scriptblocks it's aware of; so using it in a function of a custom module won't work. Similar to the example above: Start-PodeServer { Add-PodeTimer -Name 'do-something' -Interval 5 -ScriptBlock { Lock-PodeObject -ScriptBlock { $state : data = @{ 'Name' = 'Rick Sanchez' } } } }","title":"Set"},{"location":"Tutorials/SharedState/#get","text":"The Get-PodeState function will return the value currently stored in the state for a variable. If the variable doesn't exist then $null is returned. An example of retrieving a value from the state is as follows: Start-PodeServer { Add-PodeTimer -Name 'do-something' -Interval 5 -ScriptBlock { $value = $null Lock-PodeObject -ScriptBlock { $value = ( Get-PodeState -Name 'data' ) } # do something with $value } } Alternatively you could use the $state: variable scope to get a variable in state. $state: can be used anywhere, but keep in mind that like $session: Pode can only remap the this in scriptblocks it's aware of; so using it in a function of a custom module won't work. Similar to the example above: Start-PodeServer { Add-PodeTimer -Name 'do-something' -Interval 5 -ScriptBlock { $value = $null Lock-PodeObject -ScriptBlock { $value = $state : data } # do something with $value } }","title":"Get"},{"location":"Tutorials/SharedState/#remove","text":"The Remove-PodeState function will remove a variable from the state. It will also return the value stored in the state before removing the variable. An example of removing a variable from the state is as follows: Start-PodeServer { Add-PodeTimer -Name 'do-something' -Interval 5 -ScriptBlock { Lock-PodeObject -ScriptBlock { Remove-PodeState -Name 'data' | Out-Null } } }","title":"Remove"},{"location":"Tutorials/SharedState/#save","text":"The Save-PodeState function will save the current state, as JSON, to the specified file. The file path can either be relative, or literal. When saving the state, it's recommended to wrap the function within Lock-PodeObject . An example of saving the current state every hour is as follows: Start-PodeServer { Add-PodeSchedule -Name 'save-state' -Cron '@hourly' -ScriptBlock { Lock-PodeObject -ScriptBlock { Save-PodeState -Path './state.json' } } } When saving the state, you can also use the -Exclude or -Include parameters to exclude/include certain state objects from being saved. Saving also has a -Scope parameter, which allows you so save only state objects created with the specified scope(s). You can use all the above 3 parameter in conjunction, with -Exclude having the highest precedence and -Scope having the lowest. By default the JSON will be saved expanded, but you can saved the JSON as compressed by supplying the -Compress switch.","title":"Save"},{"location":"Tutorials/SharedState/#restore","text":"The Restore-PodeState function will restore the current state from the specified file. The file path can either be relative, or a literal path. if you're restoring the state immediately on server start, you don't need to use Lock-PodeObject . An example of restore the current state on server start is as follows: Start-PodeServer { Restore-PodeState './state.json' } By default, restoring from a state file will overwrite the current state. You can change this so the restored state is merged instead by using the -Merge switch. (Note: if you restore a key that already exists in state, this will still overwrite that key).","title":"Restore"},{"location":"Tutorials/SharedState/#full-example","text":"The following is a full example of using the State functions. It is a simple Timer that creates and updates a hashtable variable, and then a Route is used to retrieve that variable. There is also another route that will remove the variable from the state. The state is also saved on every iteration of the timer, and restored on server start: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # create the shared variable Set-PodeState -Name 'hash' -Value @{ 'values' = @(); } | Out-Null # attempt to re-initialise the state (will do nothing if the file doesn't exist) Restore-PodeState -Path './state.json' # timer to add a random number to the shared state Add-PodeTimer -Name 'forever' -Interval 2 -ScriptBlock { # ensure we're thread safe Lock-PodeObject -ScriptBlock { # attempt to get the hashtable from the state $hash = ( Get-PodeState -Name 'hash' ) # add a random number $hash . values += ( Get-Random -Minimum 0 -Maximum 10 ) # save the state to file Save-PodeState -Path './state.json' } } # route to return the value of the hashtable from shared state Add-PodeRoute -Method Get -Path '/' -ScriptBlock { # again, ensure we're thread safe Lock-PodeObject -ScriptBlock { # get the hashtable from the state and return it $hash = ( Get-PodeState -Name 'hash' ) Write-PodeJsonResponse -Value $hash } } # route to remove the hashtable from shared state Add-PodeRoute -Method Delete -Path '/' -ScriptBlock { # ensure we're thread safe Lock-PodeObject -ScriptBlock { # remove the hashtable from the state Remove-PodeState -Name 'hash' | Out-Null } } }","title":"Full Example"},{"location":"Tutorials/Tasks/","text":"Tasks A Task in Pode is a script that you can later invoke either asynchronously, or synchronously. They can be invoked many times, and they also support returning values from them for later use. Similar to Schedules , Tasks also run in their own separate runspaces; meaning you can have long or short running tasks. By default up to a maximum of 2 tasks can run concurrently, but this can be changed by using Set-PodeTaskConcurrency . Behind the scenes there is a a Timer created that will automatically clean-up any completed tasks. Any task that has been completed for 1+ minutes will be disposed of to free up resources - there are functions which will let you clean-up tasks more quickly. Create a Task You can create a new task by using Add-PodeTask , this will let you define a name for the task and set the scriptblock: Add-PodeTask -Name 'Example' -ScriptBlock { # logic } A task's scriptblock can also return values, that can be retrieved later on (see Invoking ): Add-PodeTask -Name 'Example' -ScriptBlock { # logic return $result } Usually all tasks are created within the main Start-PodeServer scope, however it is possible to create adhoc tasks with routes/etc. If you create adhoc tasks in this manor, you might notice that they don't run when invoked; this is because the Runspace that tasks use to run won't have been configured. You can configure by using -EnablePool on Start-PodeServer : Start-PodeServer -EnablePool Tasks { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/create-task' -ScriptBlock { Add-PodeTask -Name 'example' -ScriptBlock { # logic } } } Arguments You can supply custom arguments to your tasks by using the -ArgumentList parameter. Similar to schedules, for tasks the -ArgumentList is a hashtable; this is done because parameters to the -ScriptBlock are splatted in, and the parameter names are literal. For example, the first parameter to a task is always $Event - this contains the .Lockable object. Other parameters come from any Key/Values contained with the optional -ArgumentList : Add-PodeTask -Name 'Example' -ArgumentList @{ Name = 'Rick' ; Environment = 'Multiverse' } -ScriptBlock { param ( $Event , $Name , $Environment ) } Important In tasks, your scriptblock parameter names must be exact - including case-sensitivity. This is because the arguments are splatted into a runspace. If you pass in an argument called \"Names\", the param-block must have $Names exactly. Furthermore, the event parameter must be called $Event . Invoking You can invoke a task to run from anywhere, be it a route, schedule, middleware, or another task! To do so you use Invoke-PodeTask and this will either return the running task, or the result of running the task if used with -Wait . Asynchronously When you use Invoke-PodeTask with just the name of the task, this will trigger a task to run asynchrounsly by default: $task = Invoke-PodeTask -Name 'Example' # or Invoke-PodeTask -Name 'Example' | Out-Null The task will continue to run in the background even if, for example, the route you invoked it from as finished processing. Running tasks like this will be automatically cleaned-up once they've finished running for 1+ minutes. If your task does some work, and then you want to run some extra logic while it runs, and then get some value back (or just wait for it do be done), you can use Wait-PodeTask : Add-PodeTask -Name 'Example' -ScriptBlock { # do some work return $user } Add-PodeRoute -Method Get -Path '/run-task' -ScriptBlock { $task = Invoke-PodeTask -Name 'Example' # do some other work here, while the task runs $user = $task | Wait-PodeTask Write-PodeJsonResponse -Value @{ User = $user } } Synchronously To run a task synchronously you use Invoke-PodeTask with the -Wait switch, and this will: run the task; wait for it to complete; clean-up the task; and then return any result: Add-PodeTask -Name 'Example' -ScriptBlock { # do some work return $user } Add-PodeRoute -Method Get -Path '/run-task' -ScriptBlock { $user = Invoke-PodeTask -Name 'Example' -Wait Write-PodeJsonResponse -Value @{ User = $user } } Timeout By default all tasks run for as long as they need until completion. You can set a timeout on the task by supplying the -Timeout parameter, in seconds, on Invoke-PodeTask or Wait-PodeTask . For example, to timeout a task running for longer than 5 seconds: $task = Invoke-PodeTask -Name 'Example' -Timeout 5 $user = $task | Wait-PodeTask -Timeout 5 Setting -Timeout on Invoke-PodeTask when not using -Wait will set an expiry time on the task. Clean-up When you use the -Wait switch on Invoke-PodeEvent , or if you use Wait-PodeEvent , both of these will automatically clean-up the task immediately. However, if you run a task async without waiting for it to finish, then it will be left running in the background. When this happens, Pode will automatically dispose of completed tasks after 1+ minutes. You can force a task to be cleaned-up by using Close-PodeTask , and this will dispose and remove a running task regardless of completion status: $task = Invoke-PodeTask -Name 'Example' $task | Close-PodeTask or, to cleverly clean-up early if the task has finished you can use Test-PodeTaskCompleted : $task = Invoke-PodeTask -Name 'Example' if ( Test-PodeTaskCompleted -Task $task ) { $task | Close-PodeTask } Script from File You normally define a task's script using the -ScriptBlock parameter however, you can also reference a file with the required scriptblock using -FilePath . Using the -FilePath parameter will dot-source a scriptblock from the file, and set it as the task's script. For example, to create a task from a file that will output Hello, world : File.ps1 { 'Hello, world!' | Out-PodeHost } Task Add-PodeTask -Name 'from-file' -FilePath './Tasks/File.ps1' Getting Tasks The Get-PodeTask helper function will allow you to retrieve a list of tasks configured within Pode. You can use it to retrieve all of the tasks, or supply filters to retrieve specific ones. To retrieve all of the tasks, you can call the function will no parameters. To filter, here are some examples: # one tasks by name Get-PodeTask -Name Example1 # multiple tasks by name Get-PodeTask -Name Example1 , Example2 Task Object Warning Be careful if you choose to edit these objects, as they will affect the server. The following is the structure of the Task object internally, as well as the object that is returned from Get-PodeTask : Name Type Description Name string The name of the Task Script scriptblock The scriptblock of the Task Arguments hashtable The arguments supplied from ArgumentList","title":"Tasks"},{"location":"Tutorials/Tasks/#tasks","text":"A Task in Pode is a script that you can later invoke either asynchronously, or synchronously. They can be invoked many times, and they also support returning values from them for later use. Similar to Schedules , Tasks also run in their own separate runspaces; meaning you can have long or short running tasks. By default up to a maximum of 2 tasks can run concurrently, but this can be changed by using Set-PodeTaskConcurrency . Behind the scenes there is a a Timer created that will automatically clean-up any completed tasks. Any task that has been completed for 1+ minutes will be disposed of to free up resources - there are functions which will let you clean-up tasks more quickly.","title":"Tasks"},{"location":"Tutorials/Tasks/#create-a-task","text":"You can create a new task by using Add-PodeTask , this will let you define a name for the task and set the scriptblock: Add-PodeTask -Name 'Example' -ScriptBlock { # logic } A task's scriptblock can also return values, that can be retrieved later on (see Invoking ): Add-PodeTask -Name 'Example' -ScriptBlock { # logic return $result } Usually all tasks are created within the main Start-PodeServer scope, however it is possible to create adhoc tasks with routes/etc. If you create adhoc tasks in this manor, you might notice that they don't run when invoked; this is because the Runspace that tasks use to run won't have been configured. You can configure by using -EnablePool on Start-PodeServer : Start-PodeServer -EnablePool Tasks { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/create-task' -ScriptBlock { Add-PodeTask -Name 'example' -ScriptBlock { # logic } } }","title":"Create a Task"},{"location":"Tutorials/Tasks/#arguments","text":"You can supply custom arguments to your tasks by using the -ArgumentList parameter. Similar to schedules, for tasks the -ArgumentList is a hashtable; this is done because parameters to the -ScriptBlock are splatted in, and the parameter names are literal. For example, the first parameter to a task is always $Event - this contains the .Lockable object. Other parameters come from any Key/Values contained with the optional -ArgumentList : Add-PodeTask -Name 'Example' -ArgumentList @{ Name = 'Rick' ; Environment = 'Multiverse' } -ScriptBlock { param ( $Event , $Name , $Environment ) } Important In tasks, your scriptblock parameter names must be exact - including case-sensitivity. This is because the arguments are splatted into a runspace. If you pass in an argument called \"Names\", the param-block must have $Names exactly. Furthermore, the event parameter must be called $Event .","title":"Arguments"},{"location":"Tutorials/Tasks/#invoking","text":"You can invoke a task to run from anywhere, be it a route, schedule, middleware, or another task! To do so you use Invoke-PodeTask and this will either return the running task, or the result of running the task if used with -Wait .","title":"Invoking"},{"location":"Tutorials/Tasks/#asynchronously","text":"When you use Invoke-PodeTask with just the name of the task, this will trigger a task to run asynchrounsly by default: $task = Invoke-PodeTask -Name 'Example' # or Invoke-PodeTask -Name 'Example' | Out-Null The task will continue to run in the background even if, for example, the route you invoked it from as finished processing. Running tasks like this will be automatically cleaned-up once they've finished running for 1+ minutes. If your task does some work, and then you want to run some extra logic while it runs, and then get some value back (or just wait for it do be done), you can use Wait-PodeTask : Add-PodeTask -Name 'Example' -ScriptBlock { # do some work return $user } Add-PodeRoute -Method Get -Path '/run-task' -ScriptBlock { $task = Invoke-PodeTask -Name 'Example' # do some other work here, while the task runs $user = $task | Wait-PodeTask Write-PodeJsonResponse -Value @{ User = $user } }","title":"Asynchronously"},{"location":"Tutorials/Tasks/#synchronously","text":"To run a task synchronously you use Invoke-PodeTask with the -Wait switch, and this will: run the task; wait for it to complete; clean-up the task; and then return any result: Add-PodeTask -Name 'Example' -ScriptBlock { # do some work return $user } Add-PodeRoute -Method Get -Path '/run-task' -ScriptBlock { $user = Invoke-PodeTask -Name 'Example' -Wait Write-PodeJsonResponse -Value @{ User = $user } }","title":"Synchronously"},{"location":"Tutorials/Tasks/#timeout","text":"By default all tasks run for as long as they need until completion. You can set a timeout on the task by supplying the -Timeout parameter, in seconds, on Invoke-PodeTask or Wait-PodeTask . For example, to timeout a task running for longer than 5 seconds: $task = Invoke-PodeTask -Name 'Example' -Timeout 5 $user = $task | Wait-PodeTask -Timeout 5 Setting -Timeout on Invoke-PodeTask when not using -Wait will set an expiry time on the task.","title":"Timeout"},{"location":"Tutorials/Tasks/#clean-up","text":"When you use the -Wait switch on Invoke-PodeEvent , or if you use Wait-PodeEvent , both of these will automatically clean-up the task immediately. However, if you run a task async without waiting for it to finish, then it will be left running in the background. When this happens, Pode will automatically dispose of completed tasks after 1+ minutes. You can force a task to be cleaned-up by using Close-PodeTask , and this will dispose and remove a running task regardless of completion status: $task = Invoke-PodeTask -Name 'Example' $task | Close-PodeTask or, to cleverly clean-up early if the task has finished you can use Test-PodeTaskCompleted : $task = Invoke-PodeTask -Name 'Example' if ( Test-PodeTaskCompleted -Task $task ) { $task | Close-PodeTask }","title":"Clean-up"},{"location":"Tutorials/Tasks/#script-from-file","text":"You normally define a task's script using the -ScriptBlock parameter however, you can also reference a file with the required scriptblock using -FilePath . Using the -FilePath parameter will dot-source a scriptblock from the file, and set it as the task's script. For example, to create a task from a file that will output Hello, world : File.ps1 { 'Hello, world!' | Out-PodeHost } Task Add-PodeTask -Name 'from-file' -FilePath './Tasks/File.ps1'","title":"Script from File"},{"location":"Tutorials/Tasks/#getting-tasks","text":"The Get-PodeTask helper function will allow you to retrieve a list of tasks configured within Pode. You can use it to retrieve all of the tasks, or supply filters to retrieve specific ones. To retrieve all of the tasks, you can call the function will no parameters. To filter, here are some examples: # one tasks by name Get-PodeTask -Name Example1 # multiple tasks by name Get-PodeTask -Name Example1 , Example2","title":"Getting Tasks"},{"location":"Tutorials/Tasks/#task-object","text":"Warning Be careful if you choose to edit these objects, as they will affect the server. The following is the structure of the Task object internally, as well as the object that is returned from Get-PodeTask : Name Type Description Name string The name of the Task Script scriptblock The scriptblock of the Task Arguments hashtable The arguments supplied from ArgumentList","title":"Task Object"},{"location":"Tutorials/Threading/","text":"Threading By default Pode deals with incoming requests synchronously in a single thread. You can increase the number of threads/runspaces that Pode uses to handle requests by using the -Threads parameter on Start-PodeServer : Start-PodeServer -Threads 2 { # logic } The number of threads supplied only applies to Web, SMTP, and TCP servers. If -Threads is not supplied, or is <=0 then the number of threads is forced to the default of 1. Locking When using multi-threading in Pode at times you'll want to ensure certain functions run thread-safe. To do this you can use Lock-PodeObject which will lock an object cross-thread. Global In event objects, like $WebEvent , there is a global Lockable object that you can use - this object is synchronized across every thread, so locking it on one will lock it on all: Add-PodeRoute -Method Get -Path '/save' -ScriptBlock { Lock-PodeObject -ScriptBlock { Save-PodeState -Path './state.json' } } Custom The global lockable is good, but at times you will have separate processes where they can use different lockables objects - rather than sharing a global one and locking each other out needlessly. To create a custom lockable object you can use New-PodeLockable , and this will create a synchronized object across all threads that you can use. You cna then use this object via Get-PodeLockable and pipe it into Lock-PodeObject : New-PodeLockable -Name 'Lock1' Add-PodeRoute -Method Get -Path '/save' -ScriptBlock { Get-PodeLockable -Name 'Lock1' | Lock-PodeObject -ScriptBlock { Save-PodeState -Path './state.json' } } On Lock-PodeObject there's also a -CheckGlobal switch. This switch will check if the global lockable is locked, and wait for it to free up before locking the specified object and running the script. This is useful if you have a number of custom lockables, and then when saving the current state you lock the global. Every other process could lock their custom lockables, but then also check the global lockable and block until saving state is finished. For example, the following has two routes. The first route locks the global lockable and sleeps for 10 seconds, whereas the second route locks the custom object but checks the global for locking. Calling the first route then the second straight after, they will both return after 10 seconds: Start-PodeServer -Threads 2 { Add-PodeEndpoint -Address * -Port 8090 -Protocol Http New-PodeLockable -Name 'TestLock' # lock global, sleep for 10secs Add-PodeRoute -Method Get -Path '/route1' -ScriptBlock { Lock-PodeObject -ScriptBlock { Start-Sleep -Seconds 10 } Write-PodeJsonResponse -Value @{ Route = 1 ; Thread = $ThreadId } } # lock custom, but check global Add-PodeRoute -Method Get -Path '/route2' -ScriptBlock { Get-PodeLockable -Name 'TestLock' | Lock-PodeObject -CheckGlobal -ScriptBlock {} Write-PodeJsonResponse -Value @{ Route = 2 ; Thread = $ThreadId } } }","title":"Threading"},{"location":"Tutorials/Threading/#threading","text":"By default Pode deals with incoming requests synchronously in a single thread. You can increase the number of threads/runspaces that Pode uses to handle requests by using the -Threads parameter on Start-PodeServer : Start-PodeServer -Threads 2 { # logic } The number of threads supplied only applies to Web, SMTP, and TCP servers. If -Threads is not supplied, or is <=0 then the number of threads is forced to the default of 1.","title":"Threading"},{"location":"Tutorials/Threading/#locking","text":"When using multi-threading in Pode at times you'll want to ensure certain functions run thread-safe. To do this you can use Lock-PodeObject which will lock an object cross-thread.","title":"Locking"},{"location":"Tutorials/Threading/#global","text":"In event objects, like $WebEvent , there is a global Lockable object that you can use - this object is synchronized across every thread, so locking it on one will lock it on all: Add-PodeRoute -Method Get -Path '/save' -ScriptBlock { Lock-PodeObject -ScriptBlock { Save-PodeState -Path './state.json' } }","title":"Global"},{"location":"Tutorials/Threading/#custom","text":"The global lockable is good, but at times you will have separate processes where they can use different lockables objects - rather than sharing a global one and locking each other out needlessly. To create a custom lockable object you can use New-PodeLockable , and this will create a synchronized object across all threads that you can use. You cna then use this object via Get-PodeLockable and pipe it into Lock-PodeObject : New-PodeLockable -Name 'Lock1' Add-PodeRoute -Method Get -Path '/save' -ScriptBlock { Get-PodeLockable -Name 'Lock1' | Lock-PodeObject -ScriptBlock { Save-PodeState -Path './state.json' } } On Lock-PodeObject there's also a -CheckGlobal switch. This switch will check if the global lockable is locked, and wait for it to free up before locking the specified object and running the script. This is useful if you have a number of custom lockables, and then when saving the current state you lock the global. Every other process could lock their custom lockables, but then also check the global lockable and block until saving state is finished. For example, the following has two routes. The first route locks the global lockable and sleeps for 10 seconds, whereas the second route locks the custom object but checks the global for locking. Calling the first route then the second straight after, they will both return after 10 seconds: Start-PodeServer -Threads 2 { Add-PodeEndpoint -Address * -Port 8090 -Protocol Http New-PodeLockable -Name 'TestLock' # lock global, sleep for 10secs Add-PodeRoute -Method Get -Path '/route1' -ScriptBlock { Lock-PodeObject -ScriptBlock { Start-Sleep -Seconds 10 } Write-PodeJsonResponse -Value @{ Route = 1 ; Thread = $ThreadId } } # lock custom, but check global Add-PodeRoute -Method Get -Path '/route2' -ScriptBlock { Get-PodeLockable -Name 'TestLock' | Lock-PodeObject -CheckGlobal -ScriptBlock {} Write-PodeJsonResponse -Value @{ Route = 2 ; Thread = $ThreadId } } }","title":"Custom"},{"location":"Tutorials/Timers/","text":"Timers A Timer in Pode is a short-running async task. All timers in Pode run in the same runspace along side your main server logic - so aim to keep them as short running as possible. Timers have unique names, and iterate on a defined number of seconds. Warning Since all timers are run within the same runspace, it is wise to keep them as short running as possible. If you require a long-running task it's recommend to use Schedules instead. Create a Timer You can create a new timer using Add-PodeTimer . To create a basic Timer, the following example will work; this will loop every 5 seconds outputting the date/time: Add-PodeTimer -Name 'date' -Interval 5 -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } Usually all timers are created within the main Start-PodeServer scope, however it is possible to create adhoc timers with routes/etc. If you create adhoc timers in this manor, you might notice that they don't run; this is because the Runspace that timers use to run won't have been configured. You can configure by using -EnablePool on Start-PodeServer : Start-PodeServer -EnablePool Timers { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/create-timer' -ScriptBlock { Add-PodeTimer -Name 'example' -Interval 5 -ScriptBlock { # logic } } } Arguments You can supply custom arguments to be passed to your timers by using the -ArgumentList parameter. This parameter takes an array of objects, which will be splatted onto the timer's scriptblock: Add-PodeTimer -Name 'example' -Interval 5 -ArgumentList 'Item1' , 'Item2' -ScriptBlock { param ( $i1 , $i2 ) # $i1 will be 'Item1' } Delayed Start The -Skip <int> parameter will cause the Timer to skip its first initial triggers. For example, if you have a Timer run every 10 seconds, and you pass -Skip 5 , then the timer will first run after 50 seconds (10secs * skip 5). The following will create a Timer that runs every 10 seconds, and skips the first 5 iterations: Add-PodeTimer -Name 'date' -Interval 10 -Skip 5 -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } Run X Times Normally a Timer will run forever, or at least until you terminate the server. Sometimes you might want a Timer to end early, or only run once. To do this you use the -Limit <int> parameter, which defines the number of times the Timer should execute. The following will run every 20 seconds, and will only run 3 times: Add-PodeTimer -Name 'date' -Interval 20 -Limit 3 -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } Script from File You normally define a timer's script using the -ScriptBlock parameter however, you can also reference a file with the required scriptblock using -FilePath . Using the -FilePath parameter will dot-source a scriptblock from the file, and set it as the timer's script. For example, to create a timer from a file that will output Hello, world every 2secs: File.ps1 { 'Hello, world!' | Out-PodeHost } Timer Add-PodeTimer -Name 'from-file' -Interval 2 -FilePath './Timers/File.ps1' Getting Timers The Get-PodeTimer helper function will allow you to retrieve a list of timers configured within Pode. You can use it to retrieve all of the timers, or supply filters to retrieve specific ones. To retrieve all of the timers, you can call the function will no parameters. To filter, here are some examples: # one timer by name Get-PodeTimer -Name Name1 # multiple timers by name Get-PodeTimer -Name Name1 , Name2 Manual Trigger You can manually trigger a timer by using Invoke-PodeTimer . This will run the timer immediately, and will not count towards a timer's run limit: Invoke-PodeTimer -Name 'timer-name' You can also pass further optional arguments that will be supplied to the timer's scriptblock by using -ArgumentList , which is an array of objects that will be splatted: Add-PodeTimer -Name 'date' -Interval 5 -ScriptBlock { param ( $date ) Write-Host $date } Invoke-PodeTimer -Name 'date' -ArgumentList ( [DateTime] :: Now ) If you supply an -ArgumentList on Add-PodeTimer and on Invoke-PodeTimer , then the main timer arguments are splatted first: Add-PodeTimer -Name 'example' -Interval 5 -ArgumentList 'Item1' , 'Item2' -ScriptBlock { param ( $i1 , $i2 , $a1 , $a2 ) # $i1 will be 'Item1' # $a1 will be 'Arg1' } Invoke-PodeTimer -Name 'date' -ArgumentList 'Arg1' , 'Arg2' Timer Object Warning Be careful if you choose to edit these objects, as they will affect the server. The following is the structure of the Timer object internally, as well as the object that is returned from Get-PodeTimer : Name Type Description Name string The name of the Timer Interval int How often the Timer runs, defined in seconds Limit int The number of times the Timer should run - 0 if running forever Skip int The number of times the Timer should skip being triggered Count int The number of times the Timer has run LastTriggerTime datetime The datetime the Timer was last triggered NextTriggerTime datetime The datetime the Timer will next be triggered Script scriptblock The scriptblock of the Timer Arguments object[] The arguments supplied from ArgumentList OnStart bool Should the Timer run once when the server is starting, or once the server has fully loaded Completed bool Has the Timer completed all of its runs","title":"Timers"},{"location":"Tutorials/Timers/#timers","text":"A Timer in Pode is a short-running async task. All timers in Pode run in the same runspace along side your main server logic - so aim to keep them as short running as possible. Timers have unique names, and iterate on a defined number of seconds. Warning Since all timers are run within the same runspace, it is wise to keep them as short running as possible. If you require a long-running task it's recommend to use Schedules instead.","title":"Timers"},{"location":"Tutorials/Timers/#create-a-timer","text":"You can create a new timer using Add-PodeTimer . To create a basic Timer, the following example will work; this will loop every 5 seconds outputting the date/time: Add-PodeTimer -Name 'date' -Interval 5 -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" } Usually all timers are created within the main Start-PodeServer scope, however it is possible to create adhoc timers with routes/etc. If you create adhoc timers in this manor, you might notice that they don't run; this is because the Runspace that timers use to run won't have been configured. You can configure by using -EnablePool on Start-PodeServer : Start-PodeServer -EnablePool Timers { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/create-timer' -ScriptBlock { Add-PodeTimer -Name 'example' -Interval 5 -ScriptBlock { # logic } } }","title":"Create a Timer"},{"location":"Tutorials/Timers/#arguments","text":"You can supply custom arguments to be passed to your timers by using the -ArgumentList parameter. This parameter takes an array of objects, which will be splatted onto the timer's scriptblock: Add-PodeTimer -Name 'example' -Interval 5 -ArgumentList 'Item1' , 'Item2' -ScriptBlock { param ( $i1 , $i2 ) # $i1 will be 'Item1' }","title":"Arguments"},{"location":"Tutorials/Timers/#delayed-start","text":"The -Skip <int> parameter will cause the Timer to skip its first initial triggers. For example, if you have a Timer run every 10 seconds, and you pass -Skip 5 , then the timer will first run after 50 seconds (10secs * skip 5). The following will create a Timer that runs every 10 seconds, and skips the first 5 iterations: Add-PodeTimer -Name 'date' -Interval 10 -Skip 5 -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" }","title":"Delayed Start"},{"location":"Tutorials/Timers/#run-x-times","text":"Normally a Timer will run forever, or at least until you terminate the server. Sometimes you might want a Timer to end early, or only run once. To do this you use the -Limit <int> parameter, which defines the number of times the Timer should execute. The following will run every 20 seconds, and will only run 3 times: Add-PodeTimer -Name 'date' -Interval 20 -Limit 3 -ScriptBlock { Write-Host \" $( [DateTime] :: Now ) \" }","title":"Run X Times"},{"location":"Tutorials/Timers/#script-from-file","text":"You normally define a timer's script using the -ScriptBlock parameter however, you can also reference a file with the required scriptblock using -FilePath . Using the -FilePath parameter will dot-source a scriptblock from the file, and set it as the timer's script. For example, to create a timer from a file that will output Hello, world every 2secs: File.ps1 { 'Hello, world!' | Out-PodeHost } Timer Add-PodeTimer -Name 'from-file' -Interval 2 -FilePath './Timers/File.ps1'","title":"Script from File"},{"location":"Tutorials/Timers/#getting-timers","text":"The Get-PodeTimer helper function will allow you to retrieve a list of timers configured within Pode. You can use it to retrieve all of the timers, or supply filters to retrieve specific ones. To retrieve all of the timers, you can call the function will no parameters. To filter, here are some examples: # one timer by name Get-PodeTimer -Name Name1 # multiple timers by name Get-PodeTimer -Name Name1 , Name2","title":"Getting Timers"},{"location":"Tutorials/Timers/#manual-trigger","text":"You can manually trigger a timer by using Invoke-PodeTimer . This will run the timer immediately, and will not count towards a timer's run limit: Invoke-PodeTimer -Name 'timer-name' You can also pass further optional arguments that will be supplied to the timer's scriptblock by using -ArgumentList , which is an array of objects that will be splatted: Add-PodeTimer -Name 'date' -Interval 5 -ScriptBlock { param ( $date ) Write-Host $date } Invoke-PodeTimer -Name 'date' -ArgumentList ( [DateTime] :: Now ) If you supply an -ArgumentList on Add-PodeTimer and on Invoke-PodeTimer , then the main timer arguments are splatted first: Add-PodeTimer -Name 'example' -Interval 5 -ArgumentList 'Item1' , 'Item2' -ScriptBlock { param ( $i1 , $i2 , $a1 , $a2 ) # $i1 will be 'Item1' # $a1 will be 'Arg1' } Invoke-PodeTimer -Name 'date' -ArgumentList 'Arg1' , 'Arg2'","title":"Manual Trigger"},{"location":"Tutorials/Timers/#timer-object","text":"Warning Be careful if you choose to edit these objects, as they will affect the server. The following is the structure of the Timer object internally, as well as the object that is returned from Get-PodeTimer : Name Type Description Name string The name of the Timer Interval int How often the Timer runs, defined in seconds Limit int The number of times the Timer should run - 0 if running forever Skip int The number of times the Timer should skip being triggered Count int The number of times the Timer has run LastTriggerTime datetime The datetime the Timer was last triggered NextTriggerTime datetime The datetime the Timer will next be triggered Script scriptblock The scriptblock of the Timer Arguments object[] The arguments supplied from ArgumentList OnStart bool Should the Timer run once when the server is starting, or once the server has fully loaded Completed bool Has the Timer completed all of its runs","title":"Timer Object"},{"location":"Tutorials/WebEvent/","text":"Web Event When a request is made to your server, a \"web event\" object is created. This object contains a lot of useful information about the request, and the response. This web event is a normal HashTable, and is always accessible from your Routes, Middleware, Endware, and Authentication ScriptBlocks as the $WebEvent variable: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { $WebEvent | Out-Default } Properties Warning It is advised not to directly alter these values, other than the ones through the documentation that say you can - such as Session Data. Name Type Description Docs Auth hashtable Contains the information on the currently authenticated user from the Add-PodeAuth methods - the user's details can be further accessed in the sub .User property link ContentType string The content type of the data in the Request's payload n/a Cookies hashtable Contains all cookies parsed from the Request's headers - it's best to use Pode's Cookie functions to access/change Cookies link Data hashtable Contains the parsed items from the Request's payload link Endpoint hashtable Contains the Address and Protocol of the endpoint being hit - such as \"pode.example.com\" or \"127.0.0.2\", or HTTP or HTTPS for the Protocol link , properties ErrorType string Set by the current Route being hit, this is the content type of the Error Page that will be used if an error occurs link Files hashtable Contains any file data from the Request's payload link Lockable hashtable A synchronized hashtable that can be used with Lock-PodeObject n/a Method string The current HTTP method of the Request link OnEnd array An array of extra Endware scriptblocks link Parameters hashtable Contains the parsed parameter values from the Route's path link Path string The current path of the Request, after the endpoint - such as \"/about\" link PendingCookies hashtable Contains cookies that will be written back on the Response - it's best to use Pode's Cookies functions to access/change Cookies link Query hashtable Contains the parsed items from the Request's query string link Request object The raw Request object properties Response object The raw Response object properties Route hashtable The current Route that is being invoked - the properties here are the same as called Get-PodeRoute link Session hashtable Contains details about, and any data stored in the current session - this data can be accessed in the sub .Data property link StaticContent hashtable Contains details about the source path, if the route is a custom Static Route link , properties Streamed bool Specifies whether the current server type uses streams for the Request/Response, or raw strings n/a Timestamp datetime The current date and time of the Request n/a Endpoints These are the properties available for $WebEvent.Endpoint Name Type Description Docs Address string The ip/hostname being used for the Request. ie: 127.0.0.1 or example.com n/a Name string The name of the Pode Endpoint being used for the Request link Protocol string The protocol being used for the Request. ie: HTTP, HTTPS, WS, WSS, etc. n/a Static Content These are the properties available for $WebEvent.StaticContent Name Type Description Docs IsCachable bool Whether or not the file should be cached on the client side n/a IsDownload bool Whether or not the file should be attached or rendered n/a Source string The local path, using PSDrives, to the file on the server n/a Request These are the properties available for $WebEvent.Request Warning This is an internal .NET Pode object. While you can use the properties on this object, try to refrain from relying on them heavily as they could change in future updates from refactoring. If there's a property you find yourself using a lot, and there's not a direct WebEvent property or function to access it, feel free to raise an Enhancement request! Warning Changing properties on this object could cause errors, unwanted behaviour, or a full server crash. Only edit them if you know what you're doing. Same for calling any methods. Name Type Description Example Address string The address being used by the Request. This will favour hostnames over IPs - AllowClientCertificate bool Whether Pode should expect, and process, and client certificates - AwaitingBody bool If the request is chunked, this flags if Pode is still awaiting for the whole body to be sent - Body string The textually encoded version of the RawBody - Certificate X509Certificate The certificate being used for SSL connections. Usually defined from Add-PodeEndpoint - ClientCertificate X509Certificate2 If being used, the client certificate supplied on the Request - ClientCertificateErrors SslPolicyErrors Contains any errors that might have occurred while validating the client certificate. Pode ignores these by default, so they will need checking the Client Certificate Authenication - CloseImmediately bool Whether this Request should be closed immediately. Used internally, you'll likely never see this set to true - ContentEncoding Encoding The encoding used for the content UTF8 ContentLength int The size of the content in the Request's payload - ContentType string The type of content being supplied in the Request's payload application/json Error HttpRequestException Contains any errors thrown internally, that will be bubbled back up to Pode for logging Form PodeForm Contains information about any form elements sent in the Request - Headers Hashtable A collectio of every header sent in the Request - Host string The ip/hostname used for the Request 127.0.0.1, example.com HttpMethod string The HTTP method of the current Request GET, POST, etc. InputStream Stream The stream used to read the inbound connection's data - IsAborted bool Whether the Request should be aborted. Used internally, you'll likely never see this set to true - IsDisposed bool Whether the current Request is disposed - IsProcessable bool Whether this Request should be processed. Used internally, you'll likely never see this set to false - IsSsl bool Whether the connection is currently over SSL or not - KeepAlive bool Whether the connection should be kept alive, or terminated after use - LocalEndPoint EndPoint Details about the local connection - Protocol string The protocol type being used HTTP/1.1 Protocols SslProtocols The SSL protocols allowed to be used for connections SSL3, TLS1.2 ProtocolVersion string The protocol version of the protocol type 1.1 QueryString NameValueCollection A collection of the key/values supplied on the Request's query string - RawBody byte[] The raw bytes of the Request's payload - RemoteEndPoint EndPoint Details about the remote connection - Scheme string The connection scheme being used HTTP, HTTPS, etc. SslUpgraded bool Whether this connection has been upgraded to SSL. Used for implicit connections - TlsMode PodeTlsMode Whether the connection is using implicit or explicit TLS - TransferEncoding string The transfer encoding used for the content gzip, chunked, identity Url Uri The whole Request URL that was made http://example.com?name=value UrlReferrer string The referred of the Request - UserAgent string The user agent of where the Request originated - Response These are the properties available for $WebEvent.Response Warning This is an internal .NET Pode object. While you can use the properties on this object, try to refrain from relying on them heavily as they could change in future updates from refactoring. If there's a property you find yourself using a lot, and there's not a direct WebEvent property or function to access it, feel free to raise an Enhancement request! Warning Changing properties on this object could cause errors, unwanted behaviour, or a full server crash. Only edit them if you know what you're doing. Same for calling any methods. Name Type Description Example ContentLength64 long The length of the data that is being sent back - ContentType string The content type of the data that's being sent back application/json Headers PodeResponseHeaders A collection of headers that should be sent back to the client - HttpResponseLine string Internal Only. This is just a prebuilt value, which represents the first line of a raw HTTP Response - IsDisposed bool Whether the current Response is disposed - OutputStream MemoryStream The stream that's used to write data back to the client - SendChunked bool Whether or not the response should be sent back in chunks - Sent bool Whether or not this Response has already been sent tot the client - StatusCode int The status code to send back to the client 200, 401, 500, etc. StatusDescription string The statuc description to send back, based on the status code OK, Not Found, etc. Customise The web event itself is just a HashTable, which means you can add your own properties to it within Middleware for further use in other Middleware down the flow, or in the Route itself. Make sure these custom properties have a unique name, so as to not clash with already existing properties.","title":"Web Event"},{"location":"Tutorials/WebEvent/#web-event","text":"When a request is made to your server, a \"web event\" object is created. This object contains a lot of useful information about the request, and the response. This web event is a normal HashTable, and is always accessible from your Routes, Middleware, Endware, and Authentication ScriptBlocks as the $WebEvent variable: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { $WebEvent | Out-Default }","title":"Web Event"},{"location":"Tutorials/WebEvent/#properties","text":"Warning It is advised not to directly alter these values, other than the ones through the documentation that say you can - such as Session Data. Name Type Description Docs Auth hashtable Contains the information on the currently authenticated user from the Add-PodeAuth methods - the user's details can be further accessed in the sub .User property link ContentType string The content type of the data in the Request's payload n/a Cookies hashtable Contains all cookies parsed from the Request's headers - it's best to use Pode's Cookie functions to access/change Cookies link Data hashtable Contains the parsed items from the Request's payload link Endpoint hashtable Contains the Address and Protocol of the endpoint being hit - such as \"pode.example.com\" or \"127.0.0.2\", or HTTP or HTTPS for the Protocol link , properties ErrorType string Set by the current Route being hit, this is the content type of the Error Page that will be used if an error occurs link Files hashtable Contains any file data from the Request's payload link Lockable hashtable A synchronized hashtable that can be used with Lock-PodeObject n/a Method string The current HTTP method of the Request link OnEnd array An array of extra Endware scriptblocks link Parameters hashtable Contains the parsed parameter values from the Route's path link Path string The current path of the Request, after the endpoint - such as \"/about\" link PendingCookies hashtable Contains cookies that will be written back on the Response - it's best to use Pode's Cookies functions to access/change Cookies link Query hashtable Contains the parsed items from the Request's query string link Request object The raw Request object properties Response object The raw Response object properties Route hashtable The current Route that is being invoked - the properties here are the same as called Get-PodeRoute link Session hashtable Contains details about, and any data stored in the current session - this data can be accessed in the sub .Data property link StaticContent hashtable Contains details about the source path, if the route is a custom Static Route link , properties Streamed bool Specifies whether the current server type uses streams for the Request/Response, or raw strings n/a Timestamp datetime The current date and time of the Request n/a","title":"Properties"},{"location":"Tutorials/WebEvent/#endpoints","text":"These are the properties available for $WebEvent.Endpoint Name Type Description Docs Address string The ip/hostname being used for the Request. ie: 127.0.0.1 or example.com n/a Name string The name of the Pode Endpoint being used for the Request link Protocol string The protocol being used for the Request. ie: HTTP, HTTPS, WS, WSS, etc. n/a","title":"Endpoints"},{"location":"Tutorials/WebEvent/#static-content","text":"These are the properties available for $WebEvent.StaticContent Name Type Description Docs IsCachable bool Whether or not the file should be cached on the client side n/a IsDownload bool Whether or not the file should be attached or rendered n/a Source string The local path, using PSDrives, to the file on the server n/a","title":"Static Content"},{"location":"Tutorials/WebEvent/#request","text":"These are the properties available for $WebEvent.Request Warning This is an internal .NET Pode object. While you can use the properties on this object, try to refrain from relying on them heavily as they could change in future updates from refactoring. If there's a property you find yourself using a lot, and there's not a direct WebEvent property or function to access it, feel free to raise an Enhancement request! Warning Changing properties on this object could cause errors, unwanted behaviour, or a full server crash. Only edit them if you know what you're doing. Same for calling any methods. Name Type Description Example Address string The address being used by the Request. This will favour hostnames over IPs - AllowClientCertificate bool Whether Pode should expect, and process, and client certificates - AwaitingBody bool If the request is chunked, this flags if Pode is still awaiting for the whole body to be sent - Body string The textually encoded version of the RawBody - Certificate X509Certificate The certificate being used for SSL connections. Usually defined from Add-PodeEndpoint - ClientCertificate X509Certificate2 If being used, the client certificate supplied on the Request - ClientCertificateErrors SslPolicyErrors Contains any errors that might have occurred while validating the client certificate. Pode ignores these by default, so they will need checking the Client Certificate Authenication - CloseImmediately bool Whether this Request should be closed immediately. Used internally, you'll likely never see this set to true - ContentEncoding Encoding The encoding used for the content UTF8 ContentLength int The size of the content in the Request's payload - ContentType string The type of content being supplied in the Request's payload application/json Error HttpRequestException Contains any errors thrown internally, that will be bubbled back up to Pode for logging Form PodeForm Contains information about any form elements sent in the Request - Headers Hashtable A collectio of every header sent in the Request - Host string The ip/hostname used for the Request 127.0.0.1, example.com HttpMethod string The HTTP method of the current Request GET, POST, etc. InputStream Stream The stream used to read the inbound connection's data - IsAborted bool Whether the Request should be aborted. Used internally, you'll likely never see this set to true - IsDisposed bool Whether the current Request is disposed - IsProcessable bool Whether this Request should be processed. Used internally, you'll likely never see this set to false - IsSsl bool Whether the connection is currently over SSL or not - KeepAlive bool Whether the connection should be kept alive, or terminated after use - LocalEndPoint EndPoint Details about the local connection - Protocol string The protocol type being used HTTP/1.1 Protocols SslProtocols The SSL protocols allowed to be used for connections SSL3, TLS1.2 ProtocolVersion string The protocol version of the protocol type 1.1 QueryString NameValueCollection A collection of the key/values supplied on the Request's query string - RawBody byte[] The raw bytes of the Request's payload - RemoteEndPoint EndPoint Details about the remote connection - Scheme string The connection scheme being used HTTP, HTTPS, etc. SslUpgraded bool Whether this connection has been upgraded to SSL. Used for implicit connections - TlsMode PodeTlsMode Whether the connection is using implicit or explicit TLS - TransferEncoding string The transfer encoding used for the content gzip, chunked, identity Url Uri The whole Request URL that was made http://example.com?name=value UrlReferrer string The referred of the Request - UserAgent string The user agent of where the Request originated -","title":"Request"},{"location":"Tutorials/WebEvent/#response","text":"These are the properties available for $WebEvent.Response Warning This is an internal .NET Pode object. While you can use the properties on this object, try to refrain from relying on them heavily as they could change in future updates from refactoring. If there's a property you find yourself using a lot, and there's not a direct WebEvent property or function to access it, feel free to raise an Enhancement request! Warning Changing properties on this object could cause errors, unwanted behaviour, or a full server crash. Only edit them if you know what you're doing. Same for calling any methods. Name Type Description Example ContentLength64 long The length of the data that is being sent back - ContentType string The content type of the data that's being sent back application/json Headers PodeResponseHeaders A collection of headers that should be sent back to the client - HttpResponseLine string Internal Only. This is just a prebuilt value, which represents the first line of a raw HTTP Response - IsDisposed bool Whether the current Response is disposed - OutputStream MemoryStream The stream that's used to write data back to the client - SendChunked bool Whether or not the response should be sent back in chunks - Sent bool Whether or not this Response has already been sent tot the client - StatusCode int The status code to send back to the client 200, 401, 500, etc. StatusDescription string The statuc description to send back, based on the status code OK, Not Found, etc.","title":"Response"},{"location":"Tutorials/WebEvent/#customise","text":"The web event itself is just a HashTable, which means you can add your own properties to it within Middleware for further use in other Middleware down the flow, or in the Route itself. Make sure these custom properties have a unique name, so as to not clash with already existing properties.","title":"Customise"},{"location":"Tutorials/Authentication/Overview/","text":"Overview Authentication can either be sessionless (requiring validation on every request), or session-persistent (only requiring validation once, and then checks against a session signed-cookie/header). Info To use session-persistent authentication you will also need to use Session Middleware . To setup and use authentication in Pode you need to use the New-PodeAuthScheme and Add-PodeAuth functions. Usage Schemes The New-PodeAuthScheme function allows you to create and configure authentication schemes, or you can create your own Custom authentication schemes. These schemes can then be piped into Add-PodeAuth . The role of a scheme is to parse the request for any user credentials, or other information, that is required for a user to be authenticated. The following schemes are supported: API Key Azure AD Basic Bearer Client Certificate Digest Form JWT (Done using Bearer or API Key ) OAuth2 Or you can define a custom scheme: Custom Validators The Add-PodeAuth function allows you to add authentication validators to your server. You can have many methods configured, defining which one to validate against using the -Authentication parameter on Routes. Their job is to validate the information parsed from the supplied scheme to ensure a user is valid. An example of using Add-PodeAuth for Basic sessionless authentication is as follows: Start-PodeServer { New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $username , $pass ) # logic to check user return @{ 'user' = $user } } } The -Name of the authentication method must be unique. The -Scheme comes from the object returned via the New-PodeAuthScheme function, and can also be piped in. The -ScriptBlock is used to validate a user, checking if they exist and the password is correct (or checking if they exist in some data store). If the ScriptBlock succeeds, then a User object needs to be returned from the script as @{ User = $user } . If $null , or a null user, is returned then the script is assumed to have failed - meaning the user will have failed authentication, and a 401 response is returned. Custom Status and Headers When authenticating a user in Pode, any failures will return a 401 response with a generic message. You can inform Pode to return a custom message/status from Add-PodeAuth by returning the relevant hashtable values. You can return a custom status code as follows: New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { return @{ Code = 403 } } or a custom message (the status description) as follows, which can be used with a custom status code or on its own: New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { return @{ Message = 'Custom authentication failed message' } } You can also set custom headers on the response; these will be set regardless if authentication fails or succeeds: New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { return @{ Headers = @{ HeaderName = 'HeaderValue' } } } If you're defining an authenticator that needs to send back a Challenge, then you can also do this by setting the response Code property to 401, and/or by also supplying a Challenge property. This Challenge property is a string, and will be automatically appended onto the WWW-Authenticate Header. It does not need to include the Authentication Type or Realm (these will be added for you). For example, in Digest you could return: return @{ Code = 401 Challenge = 'qop=\"auth\", nonce=\"<some-random-guid>\"' } Authenticate Type/Realm When authentication fails, and a 401 response is returned, then Pode will also attempt to Response back to the client with a WWW-Authenticate header (if you've manually set this header using the custom headers from above, then the custom header will be used instead). For the inbuilt types, such as Basic, this Header will always be returned on a 401 response. You can set the -Name and -Realm of the header using the New-PodeAuthScheme function. If no Name is supplied, then the header will not be returned - also if there is no Realm, then this will not be added onto the header. For example, if you setup Basic authenticate with a custom Realm as follows: New-PodeAuthScheme -Basic -Realm 'Enter creds to access site' Then on a 401 response the WWW-Authenticate header will look as follows: WWW-Authenticate: Basic realm=\"Enter creds to access site\" Note If no Realm was set then it would just look as follows: WWW-Authenticate: Basic Redirecting When building custom authenticators, it might be required that you have to redirect mid-auth and stop processing the current request. To achieve this you can return the following from the scriptblock of New-PodeAuthScheme or Add-PodeAuth : return @{ IsRedirected = $true } Routes/Middleware To use an authentication on a specific route, you can use the -Authentication parameter on the Add-PodeRoute function; this takes the Name supplied to the -Name parameter on Add-PodeAuth . This will set the authentication up to run before other route middleware. An example of using some Basic authentication on a REST API route is as follows: Start-PodeServer { Add-PodeRoute -Method Get -Path '/api/users' -Authentication 'BasicAuth' -ScriptBlock { # route logic } } The Add-PodeAuthMiddleware function lets you setup authentication as global middleware - so it will run against all routes. An example of using some Basic authentication on all REST API routes is as follows: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuth' -Authentication 'BasicAuth' -Route '/api/*' } If any of the authentication middleware fails, then a 401 response is returned for the route. On success, it will allow the Route logic to be invoked. If Session Middleware has been configured then an authenticated session is also created for future requests, using a signed session cookie/header. When the user makes another call using the same authenticated session and that cookie/header is present, then the authentication middleware will detect the already authenticated session and skip validation. If you're using sessions and you don't want to check the session, or store the user against a session, then use the -Sessionless switch on Add-PodeAuth . Users After successful validation, an Auth object will be created for use against the current web event . This Auth object will be accessible via the argument supplied to Routes and Middleware. The Auth object will also contain: Name Description User Details about the authenticated user IsAuthenticated States if the request is for an authenticated user, can be $true , $false or $null Store States whether the authentication is for a session, and will be stored as a cookie The following example get the user's name from the Auth object: Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -Login -ScriptBlock { Write-PodeViewResponse -Path 'index' -Data @{ 'Username' = $WebEvent . Auth . User . Name } } Inbuilt Authenticators Overtime Pode will start to support inbuilt authentication methods - such as Windows Active Directory . More information can be found in the Inbuilt section. For example, the below would use the inbuilt Windows AD authentication method: Start-PodeServer { New-PodeAuthScheme -Basic | Add-PodeAuthWindowsAd -Name 'Login' }","title":"Overview"},{"location":"Tutorials/Authentication/Overview/#overview","text":"Authentication can either be sessionless (requiring validation on every request), or session-persistent (only requiring validation once, and then checks against a session signed-cookie/header). Info To use session-persistent authentication you will also need to use Session Middleware . To setup and use authentication in Pode you need to use the New-PodeAuthScheme and Add-PodeAuth functions.","title":"Overview"},{"location":"Tutorials/Authentication/Overview/#usage","text":"","title":"Usage"},{"location":"Tutorials/Authentication/Overview/#schemes","text":"The New-PodeAuthScheme function allows you to create and configure authentication schemes, or you can create your own Custom authentication schemes. These schemes can then be piped into Add-PodeAuth . The role of a scheme is to parse the request for any user credentials, or other information, that is required for a user to be authenticated. The following schemes are supported: API Key Azure AD Basic Bearer Client Certificate Digest Form JWT (Done using Bearer or API Key ) OAuth2 Or you can define a custom scheme: Custom","title":"Schemes"},{"location":"Tutorials/Authentication/Overview/#validators","text":"The Add-PodeAuth function allows you to add authentication validators to your server. You can have many methods configured, defining which one to validate against using the -Authentication parameter on Routes. Their job is to validate the information parsed from the supplied scheme to ensure a user is valid. An example of using Add-PodeAuth for Basic sessionless authentication is as follows: Start-PodeServer { New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $username , $pass ) # logic to check user return @{ 'user' = $user } } } The -Name of the authentication method must be unique. The -Scheme comes from the object returned via the New-PodeAuthScheme function, and can also be piped in. The -ScriptBlock is used to validate a user, checking if they exist and the password is correct (or checking if they exist in some data store). If the ScriptBlock succeeds, then a User object needs to be returned from the script as @{ User = $user } . If $null , or a null user, is returned then the script is assumed to have failed - meaning the user will have failed authentication, and a 401 response is returned.","title":"Validators"},{"location":"Tutorials/Authentication/Overview/#custom-status-and-headers","text":"When authenticating a user in Pode, any failures will return a 401 response with a generic message. You can inform Pode to return a custom message/status from Add-PodeAuth by returning the relevant hashtable values. You can return a custom status code as follows: New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { return @{ Code = 403 } } or a custom message (the status description) as follows, which can be used with a custom status code or on its own: New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { return @{ Message = 'Custom authentication failed message' } } You can also set custom headers on the response; these will be set regardless if authentication fails or succeeds: New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { return @{ Headers = @{ HeaderName = 'HeaderValue' } } } If you're defining an authenticator that needs to send back a Challenge, then you can also do this by setting the response Code property to 401, and/or by also supplying a Challenge property. This Challenge property is a string, and will be automatically appended onto the WWW-Authenticate Header. It does not need to include the Authentication Type or Realm (these will be added for you). For example, in Digest you could return: return @{ Code = 401 Challenge = 'qop=\"auth\", nonce=\"<some-random-guid>\"' }","title":"Custom Status and Headers"},{"location":"Tutorials/Authentication/Overview/#authenticate-typerealm","text":"When authentication fails, and a 401 response is returned, then Pode will also attempt to Response back to the client with a WWW-Authenticate header (if you've manually set this header using the custom headers from above, then the custom header will be used instead). For the inbuilt types, such as Basic, this Header will always be returned on a 401 response. You can set the -Name and -Realm of the header using the New-PodeAuthScheme function. If no Name is supplied, then the header will not be returned - also if there is no Realm, then this will not be added onto the header. For example, if you setup Basic authenticate with a custom Realm as follows: New-PodeAuthScheme -Basic -Realm 'Enter creds to access site' Then on a 401 response the WWW-Authenticate header will look as follows: WWW-Authenticate: Basic realm=\"Enter creds to access site\" Note If no Realm was set then it would just look as follows: WWW-Authenticate: Basic","title":"Authenticate Type/Realm"},{"location":"Tutorials/Authentication/Overview/#redirecting","text":"When building custom authenticators, it might be required that you have to redirect mid-auth and stop processing the current request. To achieve this you can return the following from the scriptblock of New-PodeAuthScheme or Add-PodeAuth : return @{ IsRedirected = $true }","title":"Redirecting"},{"location":"Tutorials/Authentication/Overview/#routesmiddleware","text":"To use an authentication on a specific route, you can use the -Authentication parameter on the Add-PodeRoute function; this takes the Name supplied to the -Name parameter on Add-PodeAuth . This will set the authentication up to run before other route middleware. An example of using some Basic authentication on a REST API route is as follows: Start-PodeServer { Add-PodeRoute -Method Get -Path '/api/users' -Authentication 'BasicAuth' -ScriptBlock { # route logic } } The Add-PodeAuthMiddleware function lets you setup authentication as global middleware - so it will run against all routes. An example of using some Basic authentication on all REST API routes is as follows: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuth' -Authentication 'BasicAuth' -Route '/api/*' } If any of the authentication middleware fails, then a 401 response is returned for the route. On success, it will allow the Route logic to be invoked. If Session Middleware has been configured then an authenticated session is also created for future requests, using a signed session cookie/header. When the user makes another call using the same authenticated session and that cookie/header is present, then the authentication middleware will detect the already authenticated session and skip validation. If you're using sessions and you don't want to check the session, or store the user against a session, then use the -Sessionless switch on Add-PodeAuth .","title":"Routes/Middleware"},{"location":"Tutorials/Authentication/Overview/#users","text":"After successful validation, an Auth object will be created for use against the current web event . This Auth object will be accessible via the argument supplied to Routes and Middleware. The Auth object will also contain: Name Description User Details about the authenticated user IsAuthenticated States if the request is for an authenticated user, can be $true , $false or $null Store States whether the authentication is for a session, and will be stored as a cookie The following example get the user's name from the Auth object: Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -Login -ScriptBlock { Write-PodeViewResponse -Path 'index' -Data @{ 'Username' = $WebEvent . Auth . User . Name } }","title":"Users"},{"location":"Tutorials/Authentication/Overview/#inbuilt-authenticators","text":"Overtime Pode will start to support inbuilt authentication methods - such as Windows Active Directory . More information can be found in the Inbuilt section. For example, the below would use the inbuilt Windows AD authentication method: Start-PodeServer { New-PodeAuthScheme -Basic | Add-PodeAuthWindowsAd -Name 'Login' }","title":"Inbuilt Authenticators"},{"location":"Tutorials/Authentication/Inbuilt/AzureAD/","text":"Azure AD The Azure AD authentication is just a wrapper around the inbuilt OAuth2 authentication. Both the authorization_code and password grant types are supported. The password type is only supported on Work/School accounts, and on accounts with MFA disabled. There is also support for PKCE, via -UsePKCE if sessions are enabled. Setup Before using Azure AD authentication in Pode, you first need to register a new app within Azure: In the Azure Portal, open up the Azure Active Directory Then select \"App Registrations\" in the menu, followed by \"New Registration\" at the top Enter a name for the app, followed by the redirect URL Platform should be \"Web\" The default redirect is <host>/oauth2/callback (such as http://localhost:8080/oauth2/callback ) Click create Make a note of the \"Client ID\" and \"Tenant\" Then select \"Certificates & Secrets\" Click \"New Client Secret\" Make a note of the generate secret With the Client and Tenant ID, plus the Client Secret, you can now setup Azure AD authentication in Pode. PKCE If you're using PKCE, then the flow changes a little bit: In the Azure Portal, open up the Azure Active Directory Then select \"App Registrations\" in the menu, followed by \"New Registration\" at the top Enter a name for the app, followed by the redirect URL Platform should be \"Single-page application\" The default redirect is <host>/oauth2/callback (such as http://localhost:8080/oauth2/callback ) Click create Make a note of the \"Client ID\" and \"Tenant\" With just the Client and Tenant ID you're good to go; PKCE doesn't require a Client Secret to work. Authorisation Code To setup and start using Azure AD authentication in Pode you use New-PodeAuthAzureADScheme , and then pipe this into the Add-PodeAuth function: Start-PodeServer { $scheme = New-PodeAuthAzureADScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' -Tenant '<tenant>' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } } If you don't specify a -RedirectUrl , then an internal default one is created as /oauth2/callback on the first endpoint. When a user accesses your site unauthenticated, they will be to Azure to login, and then redirected back to your site. Password To setup Azure AD authentcation, but using your own Form login, then you can use the -InnerScheme parameter on New-PodeAuthAzureADScheme : Start-PodeServer { $form = New-PodeAuthScheme -Form $scheme = New-PodeAuthAzureADScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' -Tenant '<tenant>' -InnerScheme $form $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } } Requests using Basic Authentication To authenticate against Azure Active Directory with Applications that do not support Modern authentication (for example PowerShell Invoke-RestMethod), you will need to use Basic authentication. This method only works if you're either using Password Hash Sync (PHS), Pass-through authentication (PTA) or both. If you're using claim based authentication against another IdP like Active Directory Federation Services (ADFS) then this will not work as the Azure AD does not know the users' credentials. The client side may look like this: $res = Invoke-RestMethod -Url 'http://localhost:8080' -SessionVariable session $res . Form [ 0 ]. username = 'username' $res . Form [ 0 ]. password = 'password' Invoke-RestMethod -Url 'http://localhost:8080' -WebSession $session -Body $res . Form [ 0 ] The Pode side needs to be configured to allow basic authentication as well. This can be done side by side with Form based authentication using this example $form = New-PodeAuthScheme -Form $schemeForm = New-PodeAuthAzureADScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' -Tenant '<tenant>' -InnerScheme $form $basic = New-PodeAuthSceme -Basic $schemeBasic = New-PodeAuthAzureADScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' -Tenant '<tenant>' -InnerScheme $basic $authLogin = { param ( $user , $accessToken , $refreshToken , $response ) # check user } $schemeForm | Add-PodeAuth -Name 'LoginForm' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock $authLogic $schemeBasic | Add-PodeAuth -Name 'LoginBasic' -ScriptBlock $authLogic Middleware Once configured you can start using Azure AD Authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Azure AD Authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Azure AD Authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/about' -Authentication 'Login' -ScriptBlock { # logic } } Full Example The following full example of Azure AD authentication. This will setup and configure authentication, redirect a user to Azure for validation, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Set-PodeViewEngine -Type Pode # setup session details Enable-PodeSessionMiddleware -Duration 120 -Extend # setup authentication to validate a user $scheme = New-PodeAuthAzureADScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' -Tenant '<tenant>' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } # home page: # redirects to login page if not authenticated Add-PodeRoute -Method Get -Path '/' -Authentication Login -ScriptBlock { Write-PodeViewResponse -Path 'home' -Data @{ Username = $WebEvent . Auth . User . name } } # login - this will just redirect to azure # NOTE: you do not need the -Login switch Add-PodeRoute -Method Get -Path '/login' -Authentication Login # logout Add-PodeRoute -Method Post -Path '/logout' -Authentication Login -Logout }","title":"Azure AD"},{"location":"Tutorials/Authentication/Inbuilt/AzureAD/#azure-ad","text":"The Azure AD authentication is just a wrapper around the inbuilt OAuth2 authentication. Both the authorization_code and password grant types are supported. The password type is only supported on Work/School accounts, and on accounts with MFA disabled. There is also support for PKCE, via -UsePKCE if sessions are enabled.","title":"Azure AD"},{"location":"Tutorials/Authentication/Inbuilt/AzureAD/#setup","text":"Before using Azure AD authentication in Pode, you first need to register a new app within Azure: In the Azure Portal, open up the Azure Active Directory Then select \"App Registrations\" in the menu, followed by \"New Registration\" at the top Enter a name for the app, followed by the redirect URL Platform should be \"Web\" The default redirect is <host>/oauth2/callback (such as http://localhost:8080/oauth2/callback ) Click create Make a note of the \"Client ID\" and \"Tenant\" Then select \"Certificates & Secrets\" Click \"New Client Secret\" Make a note of the generate secret With the Client and Tenant ID, plus the Client Secret, you can now setup Azure AD authentication in Pode.","title":"Setup"},{"location":"Tutorials/Authentication/Inbuilt/AzureAD/#pkce","text":"If you're using PKCE, then the flow changes a little bit: In the Azure Portal, open up the Azure Active Directory Then select \"App Registrations\" in the menu, followed by \"New Registration\" at the top Enter a name for the app, followed by the redirect URL Platform should be \"Single-page application\" The default redirect is <host>/oauth2/callback (such as http://localhost:8080/oauth2/callback ) Click create Make a note of the \"Client ID\" and \"Tenant\" With just the Client and Tenant ID you're good to go; PKCE doesn't require a Client Secret to work.","title":"PKCE"},{"location":"Tutorials/Authentication/Inbuilt/AzureAD/#authorisation-code","text":"To setup and start using Azure AD authentication in Pode you use New-PodeAuthAzureADScheme , and then pipe this into the Add-PodeAuth function: Start-PodeServer { $scheme = New-PodeAuthAzureADScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' -Tenant '<tenant>' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } } If you don't specify a -RedirectUrl , then an internal default one is created as /oauth2/callback on the first endpoint. When a user accesses your site unauthenticated, they will be to Azure to login, and then redirected back to your site.","title":"Authorisation Code"},{"location":"Tutorials/Authentication/Inbuilt/AzureAD/#password","text":"To setup Azure AD authentcation, but using your own Form login, then you can use the -InnerScheme parameter on New-PodeAuthAzureADScheme : Start-PodeServer { $form = New-PodeAuthScheme -Form $scheme = New-PodeAuthAzureADScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' -Tenant '<tenant>' -InnerScheme $form $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } }","title":"Password"},{"location":"Tutorials/Authentication/Inbuilt/AzureAD/#requests-using-basic-authentication","text":"To authenticate against Azure Active Directory with Applications that do not support Modern authentication (for example PowerShell Invoke-RestMethod), you will need to use Basic authentication. This method only works if you're either using Password Hash Sync (PHS), Pass-through authentication (PTA) or both. If you're using claim based authentication against another IdP like Active Directory Federation Services (ADFS) then this will not work as the Azure AD does not know the users' credentials. The client side may look like this: $res = Invoke-RestMethod -Url 'http://localhost:8080' -SessionVariable session $res . Form [ 0 ]. username = 'username' $res . Form [ 0 ]. password = 'password' Invoke-RestMethod -Url 'http://localhost:8080' -WebSession $session -Body $res . Form [ 0 ] The Pode side needs to be configured to allow basic authentication as well. This can be done side by side with Form based authentication using this example $form = New-PodeAuthScheme -Form $schemeForm = New-PodeAuthAzureADScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' -Tenant '<tenant>' -InnerScheme $form $basic = New-PodeAuthSceme -Basic $schemeBasic = New-PodeAuthAzureADScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' -Tenant '<tenant>' -InnerScheme $basic $authLogin = { param ( $user , $accessToken , $refreshToken , $response ) # check user } $schemeForm | Add-PodeAuth -Name 'LoginForm' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock $authLogic $schemeBasic | Add-PodeAuth -Name 'LoginBasic' -ScriptBlock $authLogic","title":"Requests using Basic Authentication"},{"location":"Tutorials/Authentication/Inbuilt/AzureAD/#middleware","text":"Once configured you can start using Azure AD Authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Azure AD Authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Azure AD Authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/about' -Authentication 'Login' -ScriptBlock { # logic } }","title":"Middleware"},{"location":"Tutorials/Authentication/Inbuilt/AzureAD/#full-example","text":"The following full example of Azure AD authentication. This will setup and configure authentication, redirect a user to Azure for validation, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Set-PodeViewEngine -Type Pode # setup session details Enable-PodeSessionMiddleware -Duration 120 -Extend # setup authentication to validate a user $scheme = New-PodeAuthAzureADScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' -Tenant '<tenant>' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } # home page: # redirects to login page if not authenticated Add-PodeRoute -Method Get -Path '/' -Authentication Login -ScriptBlock { Write-PodeViewResponse -Path 'home' -Data @{ Username = $WebEvent . Auth . User . name } } # login - this will just redirect to azure # NOTE: you do not need the -Login switch Add-PodeRoute -Method Get -Path '/login' -Authentication Login # logout Add-PodeRoute -Method Post -Path '/logout' -Authentication Login -Logout }","title":"Full Example"},{"location":"Tutorials/Authentication/Inbuilt/Twitter/","text":"Twitter The Twitter authentication is just a wrapper around the inbuilt OAuth2 authentication. Only the authorization_code grant type is supported, and there's also support for PKCE, via -UsePKCE if sessions are enabled. Setup Before using Twitter authentication in Pode, you first need to register a new app within Twitter: Make sure to have a Twitter Developer account, and open the Developer Portal Create a new, or select an existing app In the app's settings, select \"Edit\" on OAuth2 under \"User authentication settings\" Enable \"OAuth 2.0\" Set the Type of App to \"Web App\" The default redirect is <host>/oauth2/callback (such as http://localhost:8080/oauth2/callback ) Enter some Website URL Click \"Save\" Make a note of the Client ID and Secret presented With the Client ID and Secret, you can now setup Twitter authentication in Pode. PKCE If you're using PKCE, then the flow changes a little bit: Make sure to have a Twitter Developer account, and open the Developer Portal Create a new, or select an existing app In the app's settings, select \"Edit\" on OAuth2 under \"User authentication settings\" Enable \"OAuth 2.0\" Set the Type of App to \"Single page App\" The default redirect is <host>/oauth2/callback (such as http://localhost:8080/oauth2/callback ) Enter some Website URL Click \"Save\" Make a note of the Client ID presented With just the Client ID you're good to go; PKCE doesn't require a Client Secret to work. Authorisation Code To setup and start using Twitter authentication in Pode you use New-PodeAuthTwitterScheme , and then pipe this into the Add-PodeAuth function: Start-PodeServer { $scheme = New-PodeAuthTwitterScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user . data } } } If you don't specify a -RedirectUrl , then an internal default one is created as /oauth2/callback on the first endpoint. When a user accesses your site unauthenticated, they will be to Twitter to login and approve your app, and then redirected back to your site. Middleware Once configured you can start using Twitter Authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Twitter Authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Twitter Authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/about' -Authentication 'Login' -ScriptBlock { # logic } } Full Example The following full example of Twitter authentication. This will setup and configure authentication, redirect a user to Twitter for validation and approval, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Set-PodeViewEngine -Type Pode # setup authentication to validate a user $scheme = New-PodeAuthTwitterScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user . data } } # home page: # redirects to login page if not authenticated Add-PodeRoute -Method Get -Path '/' -Authentication Login -ScriptBlock { Write-PodeViewResponse -Path 'home' -Data @{ Username = $WebEvent . Auth . User . name } } # login - this will just redirect to twitter # NOTE: you do not need the -Login switch Add-PodeRoute -Method Get -Path '/login' -Authentication Login # logout Add-PodeRoute -Method Post -Path '/logout' -Authentication Login -Logout }","title":"Twitter"},{"location":"Tutorials/Authentication/Inbuilt/Twitter/#twitter","text":"The Twitter authentication is just a wrapper around the inbuilt OAuth2 authentication. Only the authorization_code grant type is supported, and there's also support for PKCE, via -UsePKCE if sessions are enabled.","title":"Twitter"},{"location":"Tutorials/Authentication/Inbuilt/Twitter/#setup","text":"Before using Twitter authentication in Pode, you first need to register a new app within Twitter: Make sure to have a Twitter Developer account, and open the Developer Portal Create a new, or select an existing app In the app's settings, select \"Edit\" on OAuth2 under \"User authentication settings\" Enable \"OAuth 2.0\" Set the Type of App to \"Web App\" The default redirect is <host>/oauth2/callback (such as http://localhost:8080/oauth2/callback ) Enter some Website URL Click \"Save\" Make a note of the Client ID and Secret presented With the Client ID and Secret, you can now setup Twitter authentication in Pode.","title":"Setup"},{"location":"Tutorials/Authentication/Inbuilt/Twitter/#pkce","text":"If you're using PKCE, then the flow changes a little bit: Make sure to have a Twitter Developer account, and open the Developer Portal Create a new, or select an existing app In the app's settings, select \"Edit\" on OAuth2 under \"User authentication settings\" Enable \"OAuth 2.0\" Set the Type of App to \"Single page App\" The default redirect is <host>/oauth2/callback (such as http://localhost:8080/oauth2/callback ) Enter some Website URL Click \"Save\" Make a note of the Client ID presented With just the Client ID you're good to go; PKCE doesn't require a Client Secret to work.","title":"PKCE"},{"location":"Tutorials/Authentication/Inbuilt/Twitter/#authorisation-code","text":"To setup and start using Twitter authentication in Pode you use New-PodeAuthTwitterScheme , and then pipe this into the Add-PodeAuth function: Start-PodeServer { $scheme = New-PodeAuthTwitterScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user . data } } } If you don't specify a -RedirectUrl , then an internal default one is created as /oauth2/callback on the first endpoint. When a user accesses your site unauthenticated, they will be to Twitter to login and approve your app, and then redirected back to your site.","title":"Authorisation Code"},{"location":"Tutorials/Authentication/Inbuilt/Twitter/#middleware","text":"Once configured you can start using Twitter Authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Twitter Authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Twitter Authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/about' -Authentication 'Login' -ScriptBlock { # logic } }","title":"Middleware"},{"location":"Tutorials/Authentication/Inbuilt/Twitter/#full-example","text":"The following full example of Twitter authentication. This will setup and configure authentication, redirect a user to Twitter for validation and approval, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Set-PodeViewEngine -Type Pode # setup authentication to validate a user $scheme = New-PodeAuthTwitterScheme -ClientID '<clientId>' -ClientSecret '<clientSecret>' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user . data } } # home page: # redirects to login page if not authenticated Add-PodeRoute -Method Get -Path '/' -Authentication Login -ScriptBlock { Write-PodeViewResponse -Path 'home' -Data @{ Username = $WebEvent . Auth . User . name } } # login - this will just redirect to twitter # NOTE: you do not need the -Login switch Add-PodeRoute -Method Get -Path '/login' -Authentication Login # logout Add-PodeRoute -Method Post -Path '/logout' -Authentication Login -Logout }","title":"Full Example"},{"location":"Tutorials/Authentication/Inbuilt/UserFile/","text":"User File Pode's inbuilt user file authentication works cross-platform, relying just on a JSON file with an array of valid users. This authenticator can only be used with Basic and Form. Custom is also supported, but a username and password must be supplied. Usage To use user file authentication you can use the Add-PodeAuthUserFile function. The following example will validate a user's credentials, supplied via a web-form, against the default user file at ./users.json from the server's root: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' } File Format The default users file is ./users.json at the root of the server. You can supply a custom file path using the -FilePath parameter. The users file is a JSON array of user objects, each user object must contain the following (metadata is optional): Name Type Description Username string The user's username Name string The user's fullname Email string The user's email address Password string Either a SHA256 or an HMAC SHA256 of the user's password Groups string[] An array of groups which the the user is a member Metadata psobject Custom metadata for the user For example: [ { \"Name\" : \"Joe Bloggs\" , \"Username\" : \"j.bloggs\" , \"Email\" : \"j.bloggs@company.com\" , \"Password\" : \"XohImNooBHFR0OVvjcYpJ3NgPQ1qq73WKhHvch0VQtg=\" , \"Groups\" : [ \"Admin\" , \"Developer\" ], \"Metadata\" : { \"Created\" : \"2001-01-01\" } } ] HMAC Passwords The password is normally a standard SHA256 hash, but Pode does support HMAC SHA256 hashes as well. If you use an HMAC hash, you can specify the secret used as follows: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -HmacSecret '<some-secret>' } User Object The User object returned, and accessible on Routes, and other functions via the web event 's $WebEvent.Auth.User property, will contain the following information: Name Type Description Username string The user's username Name string The user's fullname Email string The user's email address Groups string[] An array of groups which the the user is a member Metadata psobject Custom metadata for the user Such as: Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { Write-Host $WebEvent . Auth . User . Username } Groups You can supply a list of group names to validate that users are a member of them. If you supply multiple group names, the user only needs to be a of one of the groups. You can supply the list of groups to the function's -Groups parameter as an array - the list is not case-sensitive: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -Groups @( 'admins' , 'devops' ) } If an user being authenticated is not in one of these groups, then a 401 is returned. Users You can supply a list of authorised usernames to validate a user's access, after credentials are validated, and instead of of checking AD groups. You can supply the list of usernames to the function's -Users parameter as an array - the list is not case-sensitive: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -Users @( 'jsnow' , 'rsanchez' ) } If an user being authenticated is not one of the allowed users, then a 401 is returned. Additional Validation Similar to the normal Add-PodeAuth , Add-PodeAuthUserFile can be supplied can an optional ScriptBlock parameter. This ScriptBlock is supplied the found User object as a parameter, structured as details above. You can then use this to further check the user, or load additional user information from another storage. The ScriptBlock has the same return rules as Add-PodeAuth , as can be seen in the Overview . For example, to return the user back: New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -ScriptBlock { param ( $user ) # check or load extra data return @{ User = $user } } Or to fail authentication with an error message: New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -ScriptBlock { param ( $user ) return @{ Message = 'Authorisation failed' } }","title":"User File"},{"location":"Tutorials/Authentication/Inbuilt/UserFile/#user-file","text":"Pode's inbuilt user file authentication works cross-platform, relying just on a JSON file with an array of valid users. This authenticator can only be used with Basic and Form. Custom is also supported, but a username and password must be supplied.","title":"User File"},{"location":"Tutorials/Authentication/Inbuilt/UserFile/#usage","text":"To use user file authentication you can use the Add-PodeAuthUserFile function. The following example will validate a user's credentials, supplied via a web-form, against the default user file at ./users.json from the server's root: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' }","title":"Usage"},{"location":"Tutorials/Authentication/Inbuilt/UserFile/#file-format","text":"The default users file is ./users.json at the root of the server. You can supply a custom file path using the -FilePath parameter. The users file is a JSON array of user objects, each user object must contain the following (metadata is optional): Name Type Description Username string The user's username Name string The user's fullname Email string The user's email address Password string Either a SHA256 or an HMAC SHA256 of the user's password Groups string[] An array of groups which the the user is a member Metadata psobject Custom metadata for the user For example: [ { \"Name\" : \"Joe Bloggs\" , \"Username\" : \"j.bloggs\" , \"Email\" : \"j.bloggs@company.com\" , \"Password\" : \"XohImNooBHFR0OVvjcYpJ3NgPQ1qq73WKhHvch0VQtg=\" , \"Groups\" : [ \"Admin\" , \"Developer\" ], \"Metadata\" : { \"Created\" : \"2001-01-01\" } } ]","title":"File Format"},{"location":"Tutorials/Authentication/Inbuilt/UserFile/#hmac-passwords","text":"The password is normally a standard SHA256 hash, but Pode does support HMAC SHA256 hashes as well. If you use an HMAC hash, you can specify the secret used as follows: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -HmacSecret '<some-secret>' }","title":"HMAC Passwords"},{"location":"Tutorials/Authentication/Inbuilt/UserFile/#user-object","text":"The User object returned, and accessible on Routes, and other functions via the web event 's $WebEvent.Auth.User property, will contain the following information: Name Type Description Username string The user's username Name string The user's fullname Email string The user's email address Groups string[] An array of groups which the the user is a member Metadata psobject Custom metadata for the user Such as: Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { Write-Host $WebEvent . Auth . User . Username }","title":"User Object"},{"location":"Tutorials/Authentication/Inbuilt/UserFile/#groups","text":"You can supply a list of group names to validate that users are a member of them. If you supply multiple group names, the user only needs to be a of one of the groups. You can supply the list of groups to the function's -Groups parameter as an array - the list is not case-sensitive: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -Groups @( 'admins' , 'devops' ) } If an user being authenticated is not in one of these groups, then a 401 is returned.","title":"Groups"},{"location":"Tutorials/Authentication/Inbuilt/UserFile/#users","text":"You can supply a list of authorised usernames to validate a user's access, after credentials are validated, and instead of of checking AD groups. You can supply the list of usernames to the function's -Users parameter as an array - the list is not case-sensitive: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -Users @( 'jsnow' , 'rsanchez' ) } If an user being authenticated is not one of the allowed users, then a 401 is returned.","title":"Users"},{"location":"Tutorials/Authentication/Inbuilt/UserFile/#additional-validation","text":"Similar to the normal Add-PodeAuth , Add-PodeAuthUserFile can be supplied can an optional ScriptBlock parameter. This ScriptBlock is supplied the found User object as a parameter, structured as details above. You can then use this to further check the user, or load additional user information from another storage. The ScriptBlock has the same return rules as Add-PodeAuth , as can be seen in the Overview . For example, to return the user back: New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -ScriptBlock { param ( $user ) # check or load extra data return @{ User = $user } } Or to fail authentication with an error message: New-PodeAuthScheme -Form | Add-PodeAuthUserFile -Name 'Login' -ScriptBlock { param ( $user ) return @{ Message = 'Authorisation failed' } }","title":"Additional Validation"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/","text":"Windows AD Pode's inbuilt Windows AD authentication works cross-platform, using OpenLDAP to work in *nix environments. This authenticator can only be used with the Basic and Form schemes. Custom is also supported, but a username and password must be supplied. Usage To enable Windows AD authentication you can use the Add-PodeAuthWindowsAd function. The following example will validate a user's credentials, supplied via a web-form, against the default AD the current server is joined to: Start-PodeServer { Enable-PodeSessionMiddleware -Duration 120 -Extend New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' } Tip The authenticating user's credentials are disposed of after authentication. If you need to use the credentials for later use in routes from $WebEvent.Auth.User , pass the -KeepCredential switch on Add-PodeAuthWindowsAd . User Object The User object returned, and accessible on Routes, and other functions via $WebEvent.Auth.User , will contain the following information: Name Type Description UserType string Value is fixed to Domain AuthenticationType string Value is fixed to LDAP DistinguishedName string The distinguished name of the user Username string The user's username (without domain) Name string The user's fullname Email string The user's email address FQDN string The FQDN of the AD server Domain string The domain part of the user's username Groups string[] All groups, and nested groups, of which the the user is a member Credential pscredential The credentials of the authenticating user, if -KeepCredential was supplied Such as: Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { Write-Host $WebEvent . Auth . User . Username } Providers The default Provider which Pode uses for Windows AD is Directory Services on Windows, or OpenLDAP on *nix environments. However, you can force OpenLDAP or Windows, or you can specify to use the ActiveDirectory module on Windows using the -OpenLDAP or -ADModule switches: # force OpenLDAP New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -OpenLDAP # force ActiveDirectory New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -ADModule When you use -ADModule switch, Pode will automatically import the module for you. Groups By default Pode will retrieve all groups that a user is a member of, recursively. This can at times cause performance issues if you have a lot of groups in your domain. If you need groups, but you only need the direct groups a user is a member of then you can specify -DirectGroups . Or, if you don't need the groups at all, you can specify -NoGroups : # direct groups only New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -DirectGroups # no groups New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -NoGroups Server If you want to supply a custom DNS domain, then you can supply the -Fqdn parameter: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -Fqdn 'test.example.com' Domain For OpenLDAP Pode will automatically retrieve the NetBIOS to be prepended on the username, ie: <domain>\\<username> . This is automatically generate by used the first part of the DNS server's FQDN, for example if your server's FQDN was test.example.com then Pode would set the NetBIOS as test . You can use a custom domain NetBIOS by suppliying the -Domain parameter: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -Fqdn 'test.example.com' -Domain 'testdomain' SearchBase When authenticating users via OpenLDAP, the default base distinguished name searched from will be the server root, ie: DC=test,DC=example,DC=com . You can refine this by supplying an optional -SearchBase , that should be the full distinguished name: For example, the below will search in OU=CustomUsers,DC=test,DC=example,DC=com : New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -SearchBase 'OU=CustomUsers,DC=test,DC=example,DC=com' Allow You can supply an optional array of either User/Group names, or both; and if the user being authenticated is in the list (or on of their groups are) they will be allowed. Groups You can supply a list of group names to validate that users are a member of them in AD. If you supply multiple group names, the user only needs to be a member of one of the groups. You can supply the list of groups to the function's -Groups parameter as an array - the list is not case-sensitive: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -Groups @( 'admins' , 'devops' ) If an user being authenticated is not in one of these groups, then a 401 is returned. Users You can supply a list of authorised usernames to validate a user's access, after credentials are validated, and instead of of checking AD groups. You can supply the list of usernames to the function's -Users parameter as an array - the list is not case-sensitive: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -Users @( 'jsnow' , 'rsanchez' ) If an user being authenticated is not one of the allowed users, then a 401 is returned. Additional Validation Similar to the normal Add-PodeAuth , Add-PodeAuthWindowsAd can be supplied can an optional ScriptBlock parameter. This ScriptBlock is supplied the found User object as a parameter, structured as details above. You can then use this to further check the user, or load additional user information from another storage. The ScriptBlock has the same return rules as Add-PodeAuth , as can be seen in the Overview . For example, to return the user back: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -ScriptBlock { param ( $user ) # check or load extra data return @{ User = $user } } Or to fail authentication with an error message: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -ScriptBlock { param ( $user ) return @{ Message = 'Authorisation failed' } }","title":"Windows AD"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#windows-ad","text":"Pode's inbuilt Windows AD authentication works cross-platform, using OpenLDAP to work in *nix environments. This authenticator can only be used with the Basic and Form schemes. Custom is also supported, but a username and password must be supplied.","title":"Windows AD"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#usage","text":"To enable Windows AD authentication you can use the Add-PodeAuthWindowsAd function. The following example will validate a user's credentials, supplied via a web-form, against the default AD the current server is joined to: Start-PodeServer { Enable-PodeSessionMiddleware -Duration 120 -Extend New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' } Tip The authenticating user's credentials are disposed of after authentication. If you need to use the credentials for later use in routes from $WebEvent.Auth.User , pass the -KeepCredential switch on Add-PodeAuthWindowsAd .","title":"Usage"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#user-object","text":"The User object returned, and accessible on Routes, and other functions via $WebEvent.Auth.User , will contain the following information: Name Type Description UserType string Value is fixed to Domain AuthenticationType string Value is fixed to LDAP DistinguishedName string The distinguished name of the user Username string The user's username (without domain) Name string The user's fullname Email string The user's email address FQDN string The FQDN of the AD server Domain string The domain part of the user's username Groups string[] All groups, and nested groups, of which the the user is a member Credential pscredential The credentials of the authenticating user, if -KeepCredential was supplied Such as: Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { Write-Host $WebEvent . Auth . User . Username }","title":"User Object"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#providers","text":"The default Provider which Pode uses for Windows AD is Directory Services on Windows, or OpenLDAP on *nix environments. However, you can force OpenLDAP or Windows, or you can specify to use the ActiveDirectory module on Windows using the -OpenLDAP or -ADModule switches: # force OpenLDAP New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -OpenLDAP # force ActiveDirectory New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -ADModule When you use -ADModule switch, Pode will automatically import the module for you.","title":"Providers"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#groups","text":"By default Pode will retrieve all groups that a user is a member of, recursively. This can at times cause performance issues if you have a lot of groups in your domain. If you need groups, but you only need the direct groups a user is a member of then you can specify -DirectGroups . Or, if you don't need the groups at all, you can specify -NoGroups : # direct groups only New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -DirectGroups # no groups New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -NoGroups","title":"Groups"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#server","text":"If you want to supply a custom DNS domain, then you can supply the -Fqdn parameter: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -Fqdn 'test.example.com'","title":"Server"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#domain","text":"For OpenLDAP Pode will automatically retrieve the NetBIOS to be prepended on the username, ie: <domain>\\<username> . This is automatically generate by used the first part of the DNS server's FQDN, for example if your server's FQDN was test.example.com then Pode would set the NetBIOS as test . You can use a custom domain NetBIOS by suppliying the -Domain parameter: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -Fqdn 'test.example.com' -Domain 'testdomain'","title":"Domain"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#searchbase","text":"When authenticating users via OpenLDAP, the default base distinguished name searched from will be the server root, ie: DC=test,DC=example,DC=com . You can refine this by supplying an optional -SearchBase , that should be the full distinguished name: For example, the below will search in OU=CustomUsers,DC=test,DC=example,DC=com : New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -SearchBase 'OU=CustomUsers,DC=test,DC=example,DC=com'","title":"SearchBase"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#allow","text":"You can supply an optional array of either User/Group names, or both; and if the user being authenticated is in the list (or on of their groups are) they will be allowed.","title":"Allow"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#groups_1","text":"You can supply a list of group names to validate that users are a member of them in AD. If you supply multiple group names, the user only needs to be a member of one of the groups. You can supply the list of groups to the function's -Groups parameter as an array - the list is not case-sensitive: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -Groups @( 'admins' , 'devops' ) If an user being authenticated is not in one of these groups, then a 401 is returned.","title":"Groups"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#users","text":"You can supply a list of authorised usernames to validate a user's access, after credentials are validated, and instead of of checking AD groups. You can supply the list of usernames to the function's -Users parameter as an array - the list is not case-sensitive: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -Users @( 'jsnow' , 'rsanchez' ) If an user being authenticated is not one of the allowed users, then a 401 is returned.","title":"Users"},{"location":"Tutorials/Authentication/Inbuilt/WindowsAD/#additional-validation","text":"Similar to the normal Add-PodeAuth , Add-PodeAuthWindowsAd can be supplied can an optional ScriptBlock parameter. This ScriptBlock is supplied the found User object as a parameter, structured as details above. You can then use this to further check the user, or load additional user information from another storage. The ScriptBlock has the same return rules as Add-PodeAuth , as can be seen in the Overview . For example, to return the user back: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -ScriptBlock { param ( $user ) # check or load extra data return @{ User = $user } } Or to fail authentication with an error message: New-PodeAuthScheme -Form | Add-PodeAuthWindowsAd -Name 'Login' -ScriptBlock { param ( $user ) return @{ Message = 'Authorisation failed' } }","title":"Additional Validation"},{"location":"Tutorials/Authentication/Inbuilt/WindowsLocal/","text":"Windows Local Users Pode's inbuilt Windows local user authentication works only on Windows. This authenticator can only be used with the Basic and Form schemes. Custom is also supported, but a username and password must be supplied. Usage To enable Windows local user authentication you can use the Add-PodeAuthWindowsLocal function. The following example will validate a user's credentials, supplied via a web-form, against the local users: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'Login' } User Object The User object returned, and accessible on Routes, and other functions via $WebEvent.Auth.User , will contain the following information: Name Type Description UserType string Value is fixed to Local AuthenticationType string Value is fixed to WinNT Username string The user's username Name string The user's fullname FQDN string The Computer Name Domain string Value is fixed to localhost Groups string[] All groups of which the the user is a member Such as: Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { Write-Host $WebEvent . Auth . User . Username } Groups You can supply a list of group names to validate that users are a member of them. If you supply multiple group names, the user only needs to be a member of one of the groups. You can supply the list of groups to the function's -Groups parameter as an array - the list is not case-sensitive: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'Login' -Groups @( 'admins' , 'devops' ) } If an user being authenticated is not in one of these groups, then a 401 is returned. Users You can supply a list of authorised usernames to validate a user's access, after credentials are validated, and instead of of checking groups. You can supply the list of usernames to the function's -Users parameter as an array - the list is not case-sensitive: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'Login' -Users @( 'jsnow' , 'rsanchez' ) } If an user being authenticated is not one of the allowed users, then a 401 is returned. Additional Validation Similar to the normal Add-PodeAuth , Add-PodeAuthWindowsLocal can be supplied can an optional ScriptBlock parameter. This ScriptBlock is supplied the found User object as a parameter, structured as details above. You can then use this to further check the user, or load additional user information from another storage. The ScriptBlock has the same return rules as Add-PodeAuth , as can be seen in the Overview . For example, to return the user back: New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'Login' -ScriptBlock { param ( $user ) # check or load extra data return @{ User = $user } } Or to fail authentication with an error message: New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'Login' -ScriptBlock { param ( $user ) return @{ Message = 'Authorisation failed' } }","title":"Windows Local Users"},{"location":"Tutorials/Authentication/Inbuilt/WindowsLocal/#windows-local-users","text":"Pode's inbuilt Windows local user authentication works only on Windows. This authenticator can only be used with the Basic and Form schemes. Custom is also supported, but a username and password must be supplied.","title":"Windows Local Users"},{"location":"Tutorials/Authentication/Inbuilt/WindowsLocal/#usage","text":"To enable Windows local user authentication you can use the Add-PodeAuthWindowsLocal function. The following example will validate a user's credentials, supplied via a web-form, against the local users: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'Login' }","title":"Usage"},{"location":"Tutorials/Authentication/Inbuilt/WindowsLocal/#user-object","text":"The User object returned, and accessible on Routes, and other functions via $WebEvent.Auth.User , will contain the following information: Name Type Description UserType string Value is fixed to Local AuthenticationType string Value is fixed to WinNT Username string The user's username Name string The user's fullname FQDN string The Computer Name Domain string Value is fixed to localhost Groups string[] All groups of which the the user is a member Such as: Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { Write-Host $WebEvent . Auth . User . Username }","title":"User Object"},{"location":"Tutorials/Authentication/Inbuilt/WindowsLocal/#groups","text":"You can supply a list of group names to validate that users are a member of them. If you supply multiple group names, the user only needs to be a member of one of the groups. You can supply the list of groups to the function's -Groups parameter as an array - the list is not case-sensitive: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'Login' -Groups @( 'admins' , 'devops' ) } If an user being authenticated is not in one of these groups, then a 401 is returned.","title":"Groups"},{"location":"Tutorials/Authentication/Inbuilt/WindowsLocal/#users","text":"You can supply a list of authorised usernames to validate a user's access, after credentials are validated, and instead of of checking groups. You can supply the list of usernames to the function's -Users parameter as an array - the list is not case-sensitive: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'Login' -Users @( 'jsnow' , 'rsanchez' ) } If an user being authenticated is not one of the allowed users, then a 401 is returned.","title":"Users"},{"location":"Tutorials/Authentication/Inbuilt/WindowsLocal/#additional-validation","text":"Similar to the normal Add-PodeAuth , Add-PodeAuthWindowsLocal can be supplied can an optional ScriptBlock parameter. This ScriptBlock is supplied the found User object as a parameter, structured as details above. You can then use this to further check the user, or load additional user information from another storage. The ScriptBlock has the same return rules as Add-PodeAuth , as can be seen in the Overview . For example, to return the user back: New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'Login' -ScriptBlock { param ( $user ) # check or load extra data return @{ User = $user } } Or to fail authentication with an error message: New-PodeAuthScheme -Form | Add-PodeAuthWindowsLocal -Name 'Login' -ScriptBlock { param ( $user ) return @{ Message = 'Authorisation failed' } }","title":"Additional Validation"},{"location":"Tutorials/Authentication/Methods/ApiKey/","text":"API Key API key authentication lets you authenticate a user based on an API key in either the header, a cookie, or in the query string. Depending on the location, Pode looks for an API key in the default location names: Header: X-API-KEY Cookie: X-API-KEY Query: api_key Pode looks for the Header by default, and these can be changed as shown below. Setup To setup and start using API key authentication in Pode you can use New-PodeAuthScheme -ApiKey , and then pipe the returned object into Add-PodeAuth . The parameter supplied to the Add-PodeAuth function's ScriptBlock is the $key that Pode found in either the header, cookie or query string: Start-PodeServer { New-PodeAuthScheme -ApiKey | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $key ) # check if the key is valid, and get user return @{ User = $user } } } By default, Pode will look for an X-API-KEY header in the request. You can change this to Cookie or Query by using the -Location parameter. To change the name of what Pode looks for, you can use -LocationName . For example, to look for an appId query value: Start-PodeServer { New-PodeAuthScheme -ApiKey -Location Query -LocationName 'appId' | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $key ) # check if the key is valid, and get user return @{ User = $user } } } If the API key can't be found, then a 401 response will be returned. Middleware Once configured you can start using API key authentication to validate incoming requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use API key authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Authenticate' } Whereas the following example will use API key authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Authenticate' -ScriptBlock { # logic } } JWT You can supply a JWT using API key authentication, for more details see here . Full Example The following full example of API key authentication will setup and configure authentication, validate the key from the X-API-KEY header, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # setup apikey authentication to validate a user New-PodeAuthScheme -ApiKey | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $key ) # here you'd check a real storage, this is just for example if ( $key -eq 'test-key' ) { return @{ User = @{ 'ID' = 'M0R7Y302' 'Name' = 'Morty' 'Type' = 'Human' } } } # authentication failed return $null } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Authenticate' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } }","title":"API Key"},{"location":"Tutorials/Authentication/Methods/ApiKey/#api-key","text":"API key authentication lets you authenticate a user based on an API key in either the header, a cookie, or in the query string. Depending on the location, Pode looks for an API key in the default location names: Header: X-API-KEY Cookie: X-API-KEY Query: api_key Pode looks for the Header by default, and these can be changed as shown below.","title":"API Key"},{"location":"Tutorials/Authentication/Methods/ApiKey/#setup","text":"To setup and start using API key authentication in Pode you can use New-PodeAuthScheme -ApiKey , and then pipe the returned object into Add-PodeAuth . The parameter supplied to the Add-PodeAuth function's ScriptBlock is the $key that Pode found in either the header, cookie or query string: Start-PodeServer { New-PodeAuthScheme -ApiKey | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $key ) # check if the key is valid, and get user return @{ User = $user } } } By default, Pode will look for an X-API-KEY header in the request. You can change this to Cookie or Query by using the -Location parameter. To change the name of what Pode looks for, you can use -LocationName . For example, to look for an appId query value: Start-PodeServer { New-PodeAuthScheme -ApiKey -Location Query -LocationName 'appId' | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $key ) # check if the key is valid, and get user return @{ User = $user } } } If the API key can't be found, then a 401 response will be returned.","title":"Setup"},{"location":"Tutorials/Authentication/Methods/ApiKey/#middleware","text":"Once configured you can start using API key authentication to validate incoming requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use API key authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Authenticate' } Whereas the following example will use API key authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Authenticate' -ScriptBlock { # logic } }","title":"Middleware"},{"location":"Tutorials/Authentication/Methods/ApiKey/#jwt","text":"You can supply a JWT using API key authentication, for more details see here .","title":"JWT"},{"location":"Tutorials/Authentication/Methods/ApiKey/#full-example","text":"The following full example of API key authentication will setup and configure authentication, validate the key from the X-API-KEY header, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # setup apikey authentication to validate a user New-PodeAuthScheme -ApiKey | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $key ) # here you'd check a real storage, this is just for example if ( $key -eq 'test-key' ) { return @{ User = @{ 'ID' = 'M0R7Y302' 'Name' = 'Morty' 'Type' = 'Human' } } } # authentication failed return $null } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Authenticate' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } }","title":"Full Example"},{"location":"Tutorials/Authentication/Methods/Basic/","text":"Basic Basic authentication is when you pass an encoded username:password value in the Authorization header of your requests: Authorization: Basic <base64 encoded username:password> Setup To start using Basic authentication in Pode you can use New-PodeAuthScheme -Basic , and then pipe the object returned into Add-PodeAuth . The Add-PodeAuth function's ScriptBlock is supplied the username and password parsed from the Authorization header: Start-PodeServer { New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $username , $password ) # check if the user is valid return @{ User = $user } } } By default, Pode will check if the request's headers contains an Authorization key, and whether the value of that key starts with Basic tag. The New-PodeAuthScheme -Basic function can be supplied parameters to customise the tag using -HeaderTag , as well as the -Encoding . For example, to use ASCII encoding rather than the default ISO-8859-1 you could do: Start-PodeServer { New-PodeAuthScheme -Basic -Encoding 'ASCII' | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock {} } The credentials supplied to Add-PodeAuth 's scriptblock are, by default, the username and password. This can be changed to a pscredential object instead by suppling -AsCredential on New-PodeAuthScheme : Start-PodeServer { New-PodeAuthScheme -Basic -AsCredential | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $creds ) # check if the user is valid return @{ User = $user } } } Middleware Once configured you can start using Basic authentication to validate incoming requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Basic authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Basic authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { # logic } } Full Example The following full example of Basic authentication will setup and configure authentication, validate that a users username/password is valid, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # setup basic authentication to validate a user New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ User = @{ 'ID' = 'M0R7Y302' 'Name' = 'Morty' ; 'Type' = 'Human' ; } } } # authentication failed return $null } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Login' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } }","title":"Basic"},{"location":"Tutorials/Authentication/Methods/Basic/#basic","text":"Basic authentication is when you pass an encoded username:password value in the Authorization header of your requests: Authorization: Basic <base64 encoded username:password>","title":"Basic"},{"location":"Tutorials/Authentication/Methods/Basic/#setup","text":"To start using Basic authentication in Pode you can use New-PodeAuthScheme -Basic , and then pipe the object returned into Add-PodeAuth . The Add-PodeAuth function's ScriptBlock is supplied the username and password parsed from the Authorization header: Start-PodeServer { New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $username , $password ) # check if the user is valid return @{ User = $user } } } By default, Pode will check if the request's headers contains an Authorization key, and whether the value of that key starts with Basic tag. The New-PodeAuthScheme -Basic function can be supplied parameters to customise the tag using -HeaderTag , as well as the -Encoding . For example, to use ASCII encoding rather than the default ISO-8859-1 you could do: Start-PodeServer { New-PodeAuthScheme -Basic -Encoding 'ASCII' | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock {} } The credentials supplied to Add-PodeAuth 's scriptblock are, by default, the username and password. This can be changed to a pscredential object instead by suppling -AsCredential on New-PodeAuthScheme : Start-PodeServer { New-PodeAuthScheme -Basic -AsCredential | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $creds ) # check if the user is valid return @{ User = $user } } }","title":"Setup"},{"location":"Tutorials/Authentication/Methods/Basic/#middleware","text":"Once configured you can start using Basic authentication to validate incoming requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Basic authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Basic authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { # logic } }","title":"Middleware"},{"location":"Tutorials/Authentication/Methods/Basic/#full-example","text":"The following full example of Basic authentication will setup and configure authentication, validate that a users username/password is valid, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # setup basic authentication to validate a user New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ User = @{ 'ID' = 'M0R7Y302' 'Name' = 'Morty' ; 'Type' = 'Human' ; } } } # authentication failed return $null } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Login' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } }","title":"Full Example"},{"location":"Tutorials/Authentication/Methods/Bearer/","text":"Bearer Bearer authentication lets you authenticate a user based on a token, with optional support for scopes: Authorization: Bearer <token> Setup To start using Bearer authentication in Pode you can use New-PodeAuthScheme -Bearer , and then pipe the returned object into Add-PodeAuth . The parameter supplied to the Add-PodeAuth function's ScriptBlock is the $token from the Authorization token: Start-PodeServer { New-PodeAuthScheme -Bearer | Add-PodeAuth -Name 'Authenticate' -ScriptBlock { param ( $token ) # check if the token is valid, and get user return @{ User = $user } } } By default, Pode will check if the request's header contains an Authorization key, and whether the value of that key starts with Bearer tag. The New-PodeAuthScheme -Bearer function can be supplied parameters to customise the tag using -HeaderTag . You can also optionally return a Scope property alongside the User . If you specify any scopes with New-PodeAuthScheme then it will be validated in the Bearer's post validator - a 403 will be returned if the scope is invalid. Start-PodeServer { New-PodeAuthScheme -Bearer -Scope 'write' | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $token ) # check if the token is valid, and get user return @{ User = $user ; Scope = 'read' } } } Middleware Once configured you can start using Bearer authentication to validate incoming requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Bearer authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Authenticate' } Whereas the following example will use Bearer authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Authenticate' -ScriptBlock { # logic } } JWT You can supply a JWT using Bearer authentication, for more details see here . Full Example The following full example of Bearer authentication will setup and configure authentication, validate the token, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # setup bearer authentication to validate a user New-PodeAuthScheme -Bearer | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $token ) # here you'd check a real storage, this is just for example if ( $token -eq 'test-token' ) { return @{ User = @{ 'ID' = 'M0R7Y302' 'Name' = 'Morty' 'Type' = 'Human' } # Scope = 'read' } } # authentication failed return $null } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Authenticate' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } }","title":"Bearer"},{"location":"Tutorials/Authentication/Methods/Bearer/#bearer","text":"Bearer authentication lets you authenticate a user based on a token, with optional support for scopes: Authorization: Bearer <token>","title":"Bearer"},{"location":"Tutorials/Authentication/Methods/Bearer/#setup","text":"To start using Bearer authentication in Pode you can use New-PodeAuthScheme -Bearer , and then pipe the returned object into Add-PodeAuth . The parameter supplied to the Add-PodeAuth function's ScriptBlock is the $token from the Authorization token: Start-PodeServer { New-PodeAuthScheme -Bearer | Add-PodeAuth -Name 'Authenticate' -ScriptBlock { param ( $token ) # check if the token is valid, and get user return @{ User = $user } } } By default, Pode will check if the request's header contains an Authorization key, and whether the value of that key starts with Bearer tag. The New-PodeAuthScheme -Bearer function can be supplied parameters to customise the tag using -HeaderTag . You can also optionally return a Scope property alongside the User . If you specify any scopes with New-PodeAuthScheme then it will be validated in the Bearer's post validator - a 403 will be returned if the scope is invalid. Start-PodeServer { New-PodeAuthScheme -Bearer -Scope 'write' | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $token ) # check if the token is valid, and get user return @{ User = $user ; Scope = 'read' } } }","title":"Setup"},{"location":"Tutorials/Authentication/Methods/Bearer/#middleware","text":"Once configured you can start using Bearer authentication to validate incoming requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Bearer authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Authenticate' } Whereas the following example will use Bearer authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Authenticate' -ScriptBlock { # logic } }","title":"Middleware"},{"location":"Tutorials/Authentication/Methods/Bearer/#jwt","text":"You can supply a JWT using Bearer authentication, for more details see here .","title":"JWT"},{"location":"Tutorials/Authentication/Methods/Bearer/#full-example","text":"The following full example of Bearer authentication will setup and configure authentication, validate the token, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # setup bearer authentication to validate a user New-PodeAuthScheme -Bearer | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $token ) # here you'd check a real storage, this is just for example if ( $token -eq 'test-token' ) { return @{ User = @{ 'ID' = 'M0R7Y302' 'Name' = 'Morty' 'Type' = 'Human' } # Scope = 'read' } } # authentication failed return $null } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Authenticate' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } }","title":"Full Example"},{"location":"Tutorials/Authentication/Methods/ClientCertificate/","text":"Client Certificate Client Certificate authentication is when the server requires the client to supply a certificate on the request, to verify themselves with the server. This only works over HTTPS connections. If at any point to you need to access the client's certificate outside of this validator, then it can be found on the web event object at Request.ClientCertificate . Setup To setup and start using Client Certificate authentication in Pode you use the New-PodeAuthScheme -ClientCertificate function, and then pipe this into the Add-PodeAuth function. The Add-PodeAuth function's ScriptBlock is supplied the client's certificate, and any SSL errors that may have occurred (like chain issues, etc). You will also need to supply -AllowClientCertificate to Add-PodeEndpoint , and ensure the -Protocol is HTTPS: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -SelfSigned -AllowClientCertificate New-PodeAuthScheme -ClientCertificate | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $cert , $errors ) # check if the client's cert is valid return @{ User = $user } } } By default, Pode will ensure a certificate was supplied, and also ensure the certificate's Before/After dates are valid - if not, a 401 response will be returned. Middleware Once configured you can start using Client Certificate authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Client Certificate authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Client Certificate authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { # logic } } Full Example The following full example of Basic authentication will setup and configure authentication, validate that a users username/password is valid, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -SelfSigned -AllowClientCertificate # setup client cert authentication to validate a user New-PodeAuthScheme -ClientCertificate | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $cert , $errors ) # validate the thumbprint - here you would check a real cert store, or database if ( $cert . Thumbprint -ieq '3571B3BE3CA202FA56F73691FC258E653D0874C1' ) { return @{ User = @{ ID = 'M0R7Y302' Name = 'Morty' Type = 'Human' } } } # an invalid cert return @{ Message = 'Invalid certificate supplied' } } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Login' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } }","title":"Client Certificate"},{"location":"Tutorials/Authentication/Methods/ClientCertificate/#client-certificate","text":"Client Certificate authentication is when the server requires the client to supply a certificate on the request, to verify themselves with the server. This only works over HTTPS connections. If at any point to you need to access the client's certificate outside of this validator, then it can be found on the web event object at Request.ClientCertificate .","title":"Client Certificate"},{"location":"Tutorials/Authentication/Methods/ClientCertificate/#setup","text":"To setup and start using Client Certificate authentication in Pode you use the New-PodeAuthScheme -ClientCertificate function, and then pipe this into the Add-PodeAuth function. The Add-PodeAuth function's ScriptBlock is supplied the client's certificate, and any SSL errors that may have occurred (like chain issues, etc). You will also need to supply -AllowClientCertificate to Add-PodeEndpoint , and ensure the -Protocol is HTTPS: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -SelfSigned -AllowClientCertificate New-PodeAuthScheme -ClientCertificate | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $cert , $errors ) # check if the client's cert is valid return @{ User = $user } } } By default, Pode will ensure a certificate was supplied, and also ensure the certificate's Before/After dates are valid - if not, a 401 response will be returned.","title":"Setup"},{"location":"Tutorials/Authentication/Methods/ClientCertificate/#middleware","text":"Once configured you can start using Client Certificate authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Client Certificate authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Client Certificate authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { # logic } }","title":"Middleware"},{"location":"Tutorials/Authentication/Methods/ClientCertificate/#full-example","text":"The following full example of Basic authentication will setup and configure authentication, validate that a users username/password is valid, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -SelfSigned -AllowClientCertificate # setup client cert authentication to validate a user New-PodeAuthScheme -ClientCertificate | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $cert , $errors ) # validate the thumbprint - here you would check a real cert store, or database if ( $cert . Thumbprint -ieq '3571B3BE3CA202FA56F73691FC258E653D0874C1' ) { return @{ User = @{ ID = 'M0R7Y302' Name = 'Morty' Type = 'Human' } } } # an invalid cert return @{ Message = 'Invalid certificate supplied' } } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Login' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } }","title":"Full Example"},{"location":"Tutorials/Authentication/Methods/Custom/","text":"Custom Custom authentication works much like the inbuilt schemes (Basic/Form/etc), but allows you to specify your own parsing logic, as well as any custom options that might be required. Setup and Parsing To setup and start using Custom authentication in Pode you use the New-PodeAuthScheme -Custom function, and then pipe this into the Add-PodeAuth function. Let's say we wanted something similar to Form Authentication, but it requires a third piece of information: ClientName . To setup Custom authentication for this method, you'll need to specify the parsing logic within the -ScriptBlock of the New-PodeAuthScheme function. The -ScriptBlock on New-PodeAuthScheme will have access to the current web event variable: $WebEvent . In this script you can parse the Request payload/headers for any credential information that needs validating. Once sourced the data returned from the script should be an array , which will then splatted onto the -ScriptBlock from your Add-PodeAuth function: Start-PodeServer { # define a new custom authentication scheme $custom_scheme = New-PodeAuthScheme -Custom -ScriptBlock { param ( $opts ) # get client/user/password field names $clientField = ( Protect-PodeValue -Value $opts . ClientField -Default 'client' ) $userField = ( Protect-PodeValue -Value $opts . UsernameField -Default 'username' ) $passField = ( Protect-PodeValue -Value $opts . PasswordField -Default 'password' ) # get the client/user/password from the request's post data $client = $WebEvent . Data . $clientField $username = $WebEvent . Data . $userField $password = $WebEvent . Data . $passField # return the data in a array, which will be passed to the validator script return @( $client , $username , $password ) } # now, add a new custom authentication validator using the scheme you created above $custom_scheme | Add-PodeAuth -Name 'Login' -ScriptBlock { param ( $client , $username , $password ) # check if the client is valid in some database # return a user object (return $null if validation failed) return @{ User = $user } } } Note The $opts parameter in the New-PodeAuthScheme ScriptBlock come from the -ArgumentList HashTable. Post Validation The typical setup of authentication is that you create some scheme to parse the request ( New-PodeAuthScheme ), and then you pipe this into a validator to validate the parsed user's credentials ( Add-PodeAuth ). There is however also an optional -PostValidator ScriptBlock that can be passed to your Custom authentication scheme on the New-PodeAuthScheme function. This -PostValidator script runs after normal user validation, and also has access to the current web event . The original splatted array returned from the New-PodeAuthScheme ScriptBlock, the result HashTable from the user validator from Add-PodeAuth , and the -ArgumentList HashTable from New-PodeAuthScheme are supplied as parameters. You can use this script to re-generate any hashes for further validation, but if successful you must return the User object again (ie: re-return the last parameter which is the original validation result). For example, if you have a post validator script for the above Client Custom authentication, then it would be supplied the following parameters: ClientName Username Password Validation Result Scheme ArgumentsList For example: Start-PodeServer { # define a new custom authentication scheme $custom_scheme = New-PodeAuthScheme -Custom -ScriptBlock { param ( $opts ) # get client/user/password field names $clientField = ( Protect-PodeValue -Value $opts . ClientField -Default 'client' ) $userField = ( Protect-PodeValue -Value $opts . UsernameField -Default 'username' ) $passField = ( Protect-PodeValue -Value $opts . PasswordField -Default 'password' ) # get the client/user/password from the request's post data $client = $WebEvent . Data . $clientField $username = $WebEvent . Data . $userField $password = $WebEvent . Data . $passField # return the data in a array, which will be passed to the validator script return @( $client , $username , $password ) } ` -PostValidator { param ( $client , $username , $password , $result , $opts ) # run any extra post-validation logic # the result is the object returned from the below scriptblock return $result } # now, add a new custom authentication method using the scheme you created above $custom_scheme | Add-PodeAuth -Name 'Login' -ScriptBlock { param ( $client , $username , $password ) # check if the client is valid in some database # return a user object (return $null if validation failed) return @{ User = $user } } } Middleware Once configured you can start using the Custom authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Custom authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Custom authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { # logic } } Full Example The following full example of Custom authentication will setup and configure authentication, validate that a users client/username/password is valid, and then validate on a specific route : Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # define a new custom authentication scheme $custom_scheme = New-PodeAuthScheme -Custom -ScriptBlock { param ( $opts ) # get client/user/pass field names to get from payload $clientField = ( Protect-PodeValue -Value $opts . ClientField -Default 'client' ) $userField = ( Protect-PodeValue -Value $opts . UsernameField -Default 'username' ) $passField = ( Protect-PodeValue -Value $opts . PasswordField -Default 'password' ) # get the client/user/pass from the post data $client = $WebEvent . Data . $clientField $username = $WebEvent . Data . $userField $password = $WebEvent . Data . $passField # return the data, to be passed to the validator script return @( $client , $username , $password ) } # now, add a new custom authentication method $custom_scheme | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $client , $username , $password ) # check if the client is valid # return a user object (return $null if validation failed) return @{ User = $user } } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Login' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } } Below is an example HTML page that would POST the client/username/password to the server above: < form action = \"/login\" method = \"post\" > < div > < label > Client: </ label > < input type = \"text\" name = \"client\" /> </ div > < div > < label > Username: </ label > < input type = \"text\" name = \"username\" /> </ div > < div > < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ div > < div > < input type = \"submit\" value = \"Login\" /> </ div > </ form >","title":"Custom"},{"location":"Tutorials/Authentication/Methods/Custom/#custom","text":"Custom authentication works much like the inbuilt schemes (Basic/Form/etc), but allows you to specify your own parsing logic, as well as any custom options that might be required.","title":"Custom"},{"location":"Tutorials/Authentication/Methods/Custom/#setup-and-parsing","text":"To setup and start using Custom authentication in Pode you use the New-PodeAuthScheme -Custom function, and then pipe this into the Add-PodeAuth function. Let's say we wanted something similar to Form Authentication, but it requires a third piece of information: ClientName . To setup Custom authentication for this method, you'll need to specify the parsing logic within the -ScriptBlock of the New-PodeAuthScheme function. The -ScriptBlock on New-PodeAuthScheme will have access to the current web event variable: $WebEvent . In this script you can parse the Request payload/headers for any credential information that needs validating. Once sourced the data returned from the script should be an array , which will then splatted onto the -ScriptBlock from your Add-PodeAuth function: Start-PodeServer { # define a new custom authentication scheme $custom_scheme = New-PodeAuthScheme -Custom -ScriptBlock { param ( $opts ) # get client/user/password field names $clientField = ( Protect-PodeValue -Value $opts . ClientField -Default 'client' ) $userField = ( Protect-PodeValue -Value $opts . UsernameField -Default 'username' ) $passField = ( Protect-PodeValue -Value $opts . PasswordField -Default 'password' ) # get the client/user/password from the request's post data $client = $WebEvent . Data . $clientField $username = $WebEvent . Data . $userField $password = $WebEvent . Data . $passField # return the data in a array, which will be passed to the validator script return @( $client , $username , $password ) } # now, add a new custom authentication validator using the scheme you created above $custom_scheme | Add-PodeAuth -Name 'Login' -ScriptBlock { param ( $client , $username , $password ) # check if the client is valid in some database # return a user object (return $null if validation failed) return @{ User = $user } } } Note The $opts parameter in the New-PodeAuthScheme ScriptBlock come from the -ArgumentList HashTable.","title":"Setup and Parsing"},{"location":"Tutorials/Authentication/Methods/Custom/#post-validation","text":"The typical setup of authentication is that you create some scheme to parse the request ( New-PodeAuthScheme ), and then you pipe this into a validator to validate the parsed user's credentials ( Add-PodeAuth ). There is however also an optional -PostValidator ScriptBlock that can be passed to your Custom authentication scheme on the New-PodeAuthScheme function. This -PostValidator script runs after normal user validation, and also has access to the current web event . The original splatted array returned from the New-PodeAuthScheme ScriptBlock, the result HashTable from the user validator from Add-PodeAuth , and the -ArgumentList HashTable from New-PodeAuthScheme are supplied as parameters. You can use this script to re-generate any hashes for further validation, but if successful you must return the User object again (ie: re-return the last parameter which is the original validation result). For example, if you have a post validator script for the above Client Custom authentication, then it would be supplied the following parameters: ClientName Username Password Validation Result Scheme ArgumentsList For example: Start-PodeServer { # define a new custom authentication scheme $custom_scheme = New-PodeAuthScheme -Custom -ScriptBlock { param ( $opts ) # get client/user/password field names $clientField = ( Protect-PodeValue -Value $opts . ClientField -Default 'client' ) $userField = ( Protect-PodeValue -Value $opts . UsernameField -Default 'username' ) $passField = ( Protect-PodeValue -Value $opts . PasswordField -Default 'password' ) # get the client/user/password from the request's post data $client = $WebEvent . Data . $clientField $username = $WebEvent . Data . $userField $password = $WebEvent . Data . $passField # return the data in a array, which will be passed to the validator script return @( $client , $username , $password ) } ` -PostValidator { param ( $client , $username , $password , $result , $opts ) # run any extra post-validation logic # the result is the object returned from the below scriptblock return $result } # now, add a new custom authentication method using the scheme you created above $custom_scheme | Add-PodeAuth -Name 'Login' -ScriptBlock { param ( $client , $username , $password ) # check if the client is valid in some database # return a user object (return $null if validation failed) return @{ User = $user } } }","title":"Post Validation"},{"location":"Tutorials/Authentication/Methods/Custom/#middleware","text":"Once configured you can start using the Custom authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Custom authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Custom authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { # logic } }","title":"Middleware"},{"location":"Tutorials/Authentication/Methods/Custom/#full-example","text":"The following full example of Custom authentication will setup and configure authentication, validate that a users client/username/password is valid, and then validate on a specific route : Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # define a new custom authentication scheme $custom_scheme = New-PodeAuthScheme -Custom -ScriptBlock { param ( $opts ) # get client/user/pass field names to get from payload $clientField = ( Protect-PodeValue -Value $opts . ClientField -Default 'client' ) $userField = ( Protect-PodeValue -Value $opts . UsernameField -Default 'username' ) $passField = ( Protect-PodeValue -Value $opts . PasswordField -Default 'password' ) # get the client/user/pass from the post data $client = $WebEvent . Data . $clientField $username = $WebEvent . Data . $userField $password = $WebEvent . Data . $passField # return the data, to be passed to the validator script return @( $client , $username , $password ) } # now, add a new custom authentication method $custom_scheme | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $client , $username , $password ) # check if the client is valid # return a user object (return $null if validation failed) return @{ User = $user } } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Login' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } } Below is an example HTML page that would POST the client/username/password to the server above: < form action = \"/login\" method = \"post\" > < div > < label > Client: </ label > < input type = \"text\" name = \"client\" /> </ div > < div > < label > Username: </ label > < input type = \"text\" name = \"username\" /> </ div > < div > < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ div > < div > < input type = \"submit\" value = \"Login\" /> </ div > </ form >","title":"Full Example"},{"location":"Tutorials/Authentication/Methods/Digest/","text":"Digest Digest authentication lets you authenticate a user without actually sending the password to the server. Instead the a request is made to the server, and a challenge issued back for credentials. The authentication is then done by comparing hashes generated by the client and server using the user's password as a secret key. Setup To setup and start using Digest authentication in Pode you use the New-PodeAuthScheme -Digest function, and then pipe this into the Add-PodeAuth function. The parameters supplied to the Add-PodeAuth function's ScriptBlock are the $username , and a HashTable containing the parameters from the Authorization header: Start-PodeServer { New-PodeAuthScheme -Digest | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $username , $params ) # check if the user is valid return @{ User = $user ; Password = $password } } } Unlike other forms of authentication where you only need return the User on success. Digest requires you to also return the Password of the user as a separate property. This password is what is used as the secret key to generate the client's response hash, and allows the server to re-generate the hash for validation. (Not returning the password will result in an HTTP 401 challenge response). By default, Pode will check if the Request's header contains an Authorization key, and whether the value of that key starts with Digest tag. The New-PodeAuthScheme -Digest function can be supplied parameters to customise the tag using -HeaderTag . Pode will also gather the rest of the parameters in the header such as the Nonce, NonceCount, etc. An HTTP 401 challenge will be sent back if the Authorization header is invalid. The HashTable of parameters sent to the Add-PodeAuth function's ScriptBlock are the following: Parameter Description cnonce A nonce value generated by the client nc The count of time the client has used the server nonce nonce A nonce value generated by the server qop Fixed to 'auth' realm The realm description from the server's HTTP 401 challenge response The generated hash value of all these parameters from the client uri The URI path that needs authentication username The username of the user that needs authenticating Middleware Once configured you can start using Digest authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Digest authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Authenticate' } Whereas the following example will use Digest authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Authenticate' -ScriptBlock { # logic } } Full Example The following full example of Digest authentication will setup and configure authentication, validate that a user's username is valid, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # setup digest authentication to validate a user New-PodeAuthScheme -Digest | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $username , $params ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' ) { return @{ User = @{ 'ID' = 'M0R7Y302' 'Name' = 'Morty' ; 'Type' = 'Human' ; } Password = 'pickle' } } # authentication failed return $null } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Authenticate' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } }","title":"Digest"},{"location":"Tutorials/Authentication/Methods/Digest/#digest","text":"Digest authentication lets you authenticate a user without actually sending the password to the server. Instead the a request is made to the server, and a challenge issued back for credentials. The authentication is then done by comparing hashes generated by the client and server using the user's password as a secret key.","title":"Digest"},{"location":"Tutorials/Authentication/Methods/Digest/#setup","text":"To setup and start using Digest authentication in Pode you use the New-PodeAuthScheme -Digest function, and then pipe this into the Add-PodeAuth function. The parameters supplied to the Add-PodeAuth function's ScriptBlock are the $username , and a HashTable containing the parameters from the Authorization header: Start-PodeServer { New-PodeAuthScheme -Digest | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $username , $params ) # check if the user is valid return @{ User = $user ; Password = $password } } } Unlike other forms of authentication where you only need return the User on success. Digest requires you to also return the Password of the user as a separate property. This password is what is used as the secret key to generate the client's response hash, and allows the server to re-generate the hash for validation. (Not returning the password will result in an HTTP 401 challenge response). By default, Pode will check if the Request's header contains an Authorization key, and whether the value of that key starts with Digest tag. The New-PodeAuthScheme -Digest function can be supplied parameters to customise the tag using -HeaderTag . Pode will also gather the rest of the parameters in the header such as the Nonce, NonceCount, etc. An HTTP 401 challenge will be sent back if the Authorization header is invalid. The HashTable of parameters sent to the Add-PodeAuth function's ScriptBlock are the following: Parameter Description cnonce A nonce value generated by the client nc The count of time the client has used the server nonce nonce A nonce value generated by the server qop Fixed to 'auth' realm The realm description from the server's HTTP 401 challenge response The generated hash value of all these parameters from the client uri The URI path that needs authentication username The username of the user that needs authenticating","title":"Setup"},{"location":"Tutorials/Authentication/Methods/Digest/#middleware","text":"Once configured you can start using Digest authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Digest authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Authenticate' } Whereas the following example will use Digest authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Authenticate' -ScriptBlock { # logic } }","title":"Middleware"},{"location":"Tutorials/Authentication/Methods/Digest/#full-example","text":"The following full example of Digest authentication will setup and configure authentication, validate that a user's username is valid, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # setup digest authentication to validate a user New-PodeAuthScheme -Digest | Add-PodeAuth -Name 'Authenticate' -Sessionless -ScriptBlock { param ( $username , $params ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' ) { return @{ User = @{ 'ID' = 'M0R7Y302' 'Name' = 'Morty' ; 'Type' = 'Human' ; } Password = 'pickle' } } # authentication failed return $null } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Authenticate' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } }","title":"Full Example"},{"location":"Tutorials/Authentication/Methods/Form/","text":"Form Form authentication is for when you're using a <form> on your webpage, and it gets submitted. This authentication method expects a username and password to be passed from the form's input fields, via POST request. Setup To start using Form authentication in Pode you can use New-PodeAuthScheme -Form , and then pipe the object returned into Add-PodeAuth . The Add-PodeAuth function's ScriptBlock is supplied the username and password parsed from the request's payload: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Login' -ScriptBlock { param ( $username , $password ) # check if the user is valid return @{ User = $user } } } By default, Pode will check if the request's payload contains a username and password fields. The New-PodeAuthScheme -Form function can be supplied parameters to allow for custom names of these fields. For example, to look for the field email rather than the default username you could do: Start-PodeServer { New-PodeAuthScheme -Form -UsernameField 'email' | Add-PodeAuth -Name 'Login' -ScriptBlock {} } The credentials supplied to Add-PodeAuth 's scriptblock are, by default, the username and password. This can be changed to a pscredential object instead by suppling -AsCredential on New-PodeAuthScheme : Start-PodeServer { New-PodeAuthScheme -Form -AsCredential | Add-PodeAuth -Name 'Login' -ScriptBlock { param ( $creds ) # check if the user is valid return @{ User = $user } } } Middleware Once configured you can start using Form authentication to validate incoming requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Form authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Form authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { # logic } } Full Example The following full example of Form authentication will setup and configure authentication, validate that a users username/password is valid, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # setup form authentication to validate a user New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ 'user' = @{ 'ID' = 'M0R7Y302' 'Name' = 'Morty' ; 'Type' = 'Human' ; } } } return $null } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Login' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } } Below is an example HTML page that would POST the username/password to the server above: < form action = \"/login\" method = \"post\" > < div > < label > Username: </ label > < input type = \"text\" name = \"username\" /> </ div > < div > < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ div > < div > < input type = \"submit\" value = \"Login\" /> </ div > </ form >","title":"Form"},{"location":"Tutorials/Authentication/Methods/Form/#form","text":"Form authentication is for when you're using a <form> on your webpage, and it gets submitted. This authentication method expects a username and password to be passed from the form's input fields, via POST request.","title":"Form"},{"location":"Tutorials/Authentication/Methods/Form/#setup","text":"To start using Form authentication in Pode you can use New-PodeAuthScheme -Form , and then pipe the object returned into Add-PodeAuth . The Add-PodeAuth function's ScriptBlock is supplied the username and password parsed from the request's payload: Start-PodeServer { New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Login' -ScriptBlock { param ( $username , $password ) # check if the user is valid return @{ User = $user } } } By default, Pode will check if the request's payload contains a username and password fields. The New-PodeAuthScheme -Form function can be supplied parameters to allow for custom names of these fields. For example, to look for the field email rather than the default username you could do: Start-PodeServer { New-PodeAuthScheme -Form -UsernameField 'email' | Add-PodeAuth -Name 'Login' -ScriptBlock {} } The credentials supplied to Add-PodeAuth 's scriptblock are, by default, the username and password. This can be changed to a pscredential object instead by suppling -AsCredential on New-PodeAuthScheme : Start-PodeServer { New-PodeAuthScheme -Form -AsCredential | Add-PodeAuth -Name 'Login' -ScriptBlock { param ( $creds ) # check if the user is valid return @{ User = $user } } }","title":"Setup"},{"location":"Tutorials/Authentication/Methods/Form/#middleware","text":"Once configured you can start using Form authentication to validate incoming requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Form authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Form authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/info' -Authentication 'Login' -ScriptBlock { # logic } }","title":"Middleware"},{"location":"Tutorials/Authentication/Methods/Form/#full-example","text":"The following full example of Form authentication will setup and configure authentication, validate that a users username/password is valid, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # setup form authentication to validate a user New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Login' -Sessionless -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ 'user' = @{ 'ID' = 'M0R7Y302' 'Name' = 'Morty' ; 'Type' = 'Human' ; } } } return $null } # check the request on this route against the authentication Add-PodeRoute -Method Get -Path '/cpu' -Authentication 'Login' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'cpu' = 82 } } # this route will not be validated against the authentication Add-PodeRoute -Method Get -Path '/memory' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'memory' = 14 } } } Below is an example HTML page that would POST the username/password to the server above: < form action = \"/login\" method = \"post\" > < div > < label > Username: </ label > < input type = \"text\" name = \"username\" /> </ div > < div > < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ div > < div > < input type = \"submit\" value = \"Login\" /> </ div > </ form >","title":"Full Example"},{"location":"Tutorials/Authentication/Methods/JWT/","text":"JWT Pode has inbuilt JWT parsing for either Bearer or API Key authentications. Pode will attempt to validate and parse the token/key as a JWT, and if successful the JWT's payload will be passed as the parameter to Add-PodeAuth , instead of the token/key. For more information on JWTs, see the official website . Setup To start using JWT authentication, you can supply the -AsJWT switch with either the -Bearer or -ApiKey switch on New-PodeAuthScheme . You can also supply an optional -Secret that the JWT signature uses so Pode can validate the JWT: # jwt with no signature: New-PodeAuthScheme -Bearer -AsJWT | Add-PodeAuth -Name 'Example' -Sessionless -ScriptBlock { param ( $payload ) } # jwt with signature, signed with secret \"abc\": New-PodeAuthScheme -ApiKey -AsJWT -Secret 'abc' | Add-PodeAuth -Name 'Example' -Sessionless -ScriptBlock { param ( $payload ) } The $payload will be a PSCustomObject of the converted JSON payload. For example, sending the following unsigned JWT in a request: eyJhbGciOiJub25lIn0.eyJ1c2VybmFtZSI6Im1vcnR5Iiwic3ViIjoiMTIzIn0. would produce a payload of: sub: 123 username: morty Algorithms Pode supports the following algorithms for JWT signatures: None HS256 HS384 HS512 For none , Pode expects there to be no signature with the JWT. For other algorithms, a -Secret is required, and a signature must be supplied with the JWT in requests. Payload If the payload of the JWT contains a expiry ( exp ) or a not before ( nbf ) timestamp, Pode will validate it and return a 400 if the JWT is expired/not started. Usage To send the JWT in a request, the JWT should be sent in place of where the usual bearer token/API key would have been. For example, for bearer it would be in the Authorization header: Authorization: Bearer <jwt> and for API keys, it would be in the location defined (header, cookie, or query string). For example, in the X-API-KEY header: X-API-KEY: <jwt> Create JWT Pode has a simple ConvertTo-PodeJwt that will build a JWT for you. It accepts a hashtable for -Header and -Payload , as well as an optional -Secret . The function will run some simple validation, and them build the JWT for you. For example: $header = @{ alg = 'hs256' typ = 'JWT' } $payload = @{ sub = '123' name = 'John Doe' exp = ( [System.DateTimeOffset] :: Now . AddDays ( 1 ). ToUnixTimeSeconds ()) } ConvertTo-PodeJwt -Header $header -Payload $payload -Secret 'abc' This return the following JWT: eyJ0eXAiOiJKV1QiLCJhbGciOiJoczI1NiJ9.eyJleHAiOjE2MjI1NTMyMTQsIm5hbWUiOiJKb2huIERvZSIsInN1YiI6IjEyMyJ9.LP-O8OKwix91a-SZwVK35gEClLZQmsORbW0un2Z4RkY Parse JWT Pode has a ConvertFrom-PodeJwt that can be used to parse a valid JWT. Only the algorithms at the top of this page are supported for verifying the signature. You can skip signature verification by passing -IgnoreSignature . On success, the payload of the JWT is returned. For example, if the created JWT was supplied: ConvertFrom-PodeJwt -Token 'eyJ0eXAiOiJKV1QiLCJhbGciOiJoczI1NiJ9.eyJleHAiOjE2MjI1NTMyMTQsIm5hbWUiOiJKb2huIERvZSIsInN1YiI6IjEyMyJ9.LP-O8OKwix91a-SZwVK35gEClLZQmsORbW0un2Z4RkY' -Secret 'abc' then the following would be returned: @{ sub = '123' name = 'John Doe' exp = 1636657408 }","title":"JWT"},{"location":"Tutorials/Authentication/Methods/JWT/#jwt","text":"Pode has inbuilt JWT parsing for either Bearer or API Key authentications. Pode will attempt to validate and parse the token/key as a JWT, and if successful the JWT's payload will be passed as the parameter to Add-PodeAuth , instead of the token/key. For more information on JWTs, see the official website .","title":"JWT"},{"location":"Tutorials/Authentication/Methods/JWT/#setup","text":"To start using JWT authentication, you can supply the -AsJWT switch with either the -Bearer or -ApiKey switch on New-PodeAuthScheme . You can also supply an optional -Secret that the JWT signature uses so Pode can validate the JWT: # jwt with no signature: New-PodeAuthScheme -Bearer -AsJWT | Add-PodeAuth -Name 'Example' -Sessionless -ScriptBlock { param ( $payload ) } # jwt with signature, signed with secret \"abc\": New-PodeAuthScheme -ApiKey -AsJWT -Secret 'abc' | Add-PodeAuth -Name 'Example' -Sessionless -ScriptBlock { param ( $payload ) } The $payload will be a PSCustomObject of the converted JSON payload. For example, sending the following unsigned JWT in a request: eyJhbGciOiJub25lIn0.eyJ1c2VybmFtZSI6Im1vcnR5Iiwic3ViIjoiMTIzIn0. would produce a payload of: sub: 123 username: morty","title":"Setup"},{"location":"Tutorials/Authentication/Methods/JWT/#algorithms","text":"Pode supports the following algorithms for JWT signatures: None HS256 HS384 HS512 For none , Pode expects there to be no signature with the JWT. For other algorithms, a -Secret is required, and a signature must be supplied with the JWT in requests.","title":"Algorithms"},{"location":"Tutorials/Authentication/Methods/JWT/#payload","text":"If the payload of the JWT contains a expiry ( exp ) or a not before ( nbf ) timestamp, Pode will validate it and return a 400 if the JWT is expired/not started.","title":"Payload"},{"location":"Tutorials/Authentication/Methods/JWT/#usage","text":"To send the JWT in a request, the JWT should be sent in place of where the usual bearer token/API key would have been. For example, for bearer it would be in the Authorization header: Authorization: Bearer <jwt> and for API keys, it would be in the location defined (header, cookie, or query string). For example, in the X-API-KEY header: X-API-KEY: <jwt>","title":"Usage"},{"location":"Tutorials/Authentication/Methods/JWT/#create-jwt","text":"Pode has a simple ConvertTo-PodeJwt that will build a JWT for you. It accepts a hashtable for -Header and -Payload , as well as an optional -Secret . The function will run some simple validation, and them build the JWT for you. For example: $header = @{ alg = 'hs256' typ = 'JWT' } $payload = @{ sub = '123' name = 'John Doe' exp = ( [System.DateTimeOffset] :: Now . AddDays ( 1 ). ToUnixTimeSeconds ()) } ConvertTo-PodeJwt -Header $header -Payload $payload -Secret 'abc' This return the following JWT: eyJ0eXAiOiJKV1QiLCJhbGciOiJoczI1NiJ9.eyJleHAiOjE2MjI1NTMyMTQsIm5hbWUiOiJKb2huIERvZSIsInN1YiI6IjEyMyJ9.LP-O8OKwix91a-SZwVK35gEClLZQmsORbW0un2Z4RkY","title":"Create JWT"},{"location":"Tutorials/Authentication/Methods/JWT/#parse-jwt","text":"Pode has a ConvertFrom-PodeJwt that can be used to parse a valid JWT. Only the algorithms at the top of this page are supported for verifying the signature. You can skip signature verification by passing -IgnoreSignature . On success, the payload of the JWT is returned. For example, if the created JWT was supplied: ConvertFrom-PodeJwt -Token 'eyJ0eXAiOiJKV1QiLCJhbGciOiJoczI1NiJ9.eyJleHAiOjE2MjI1NTMyMTQsIm5hbWUiOiJKb2huIERvZSIsInN1YiI6IjEyMyJ9.LP-O8OKwix91a-SZwVK35gEClLZQmsORbW0un2Z4RkY' -Secret 'abc' then the following would be returned: @{ sub = '123' name = 'John Doe' exp = 1636657408 }","title":"Parse JWT"},{"location":"Tutorials/Authentication/Methods/OAuth2/","text":"OAuth 2.0 & OIDC The OAuth2 authentication lets you setup authentication with services that support OAuth 2.0. To use this scheme, you'll need to supply an Authorise/Token URL, as well as setup a app registration to acquire a Client ID and Secret. There is also support for converting an OpenID Connect Discovery URL to a Pode OAuth2 scheme. Setup Before using the OAuth2 authentication in Pode, you first need to register a new app within your service of choice. This registration will supply you with the required Client ID and Secret (if you're using PKCE then the Client Secret is optional). To setup and start using OAuth2 authentication in Pode you use New-PodeAuthScheme -OAuth2 , and then pipe this into the Add-PodeAuth function. Grant Types Pode supports the grant types of authorization_code and password . By default OAuth2 will use the authorization_code grant type, which will require an -AuthoriseUrl and -RedirectUrl . If you want to use the password grant type, and have users enter their credentials via a form or Basic authentication, then you'll need to supply an -InnerScheme type to New-PodeAuthScheme -OAuth2 . These types are described below. Authorisation Code This is the default grant type, and requires an -AuthoriseUrl to be supplied. A -RedirectUrl is also required, but if not supplied an default one will be setup internally. You will need to supply the service's Authorise and Token URLs to New-PodeAuthScheme as below: Start-PodeServer { $scheme = New-PodeAuthScheme ` -OAuth2 ` -ClientID '<clientId>' ` -ClientSecret '<clientSecret>' ` -AuthoriseUrl 'https://some-service.com/oauth2/authorize' ` -TokenUrl 'https://some-service.com/oauth2/token' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } } If you don't specify a -RedirectUrl , then an internal default one is created as /oauth2/callback on the first endpoint. When a user accesses your site unauthenticated, they will be redirected to the service to login, and then redirected back to your site. Pode will supply to your Add-PodeAuth the user object (if available), and the access/refresh tokens, and the raw token response object. You can optional specify a -UserUrl endpoint, if the service supports it, and Pode will use this to acquire user details. If one is not supplied then Pode will attempt to parse the id_token from the -AuthoriseUrl for the user details, otherwise the $user object supplied to Add-PodeAuth 's ScriptBlock will be an basic hashtable: @{ Provider = 'OAuth2' } If you define a Login route, you don't need to set the -Login switch, due to the redirecting of OAuth2. A login route can be a simple route with no view defined: Add-PodeRoute -Method Get -Path '/login' -Authentication Login Password Important This flow will not work if 2FA is setup on accounts. In most cases, for some providers, you also need to explicitly enable this grant type. Using this grant type allows you to support authentication in flows where redirecting is impossible - such as REST APIs using Basic authentication. To use this grant type, you need to define another Scheme - such as Basic or Form - and then supply that Scheme to the -InnerScheme parameter of New-PodeAuthScheme -OAuth2 . Pode will automatically switch to the password grant type. Start-PodeServer { $form = New-PodeAuthScheme -Form $scheme = New-PodeAuthScheme ` -OAuth2 ` -ClientID '<clientId>' ` -ClientSecret '<clientSecret>' ` -TokenUrl 'https://some-service.com/oauth2/token' ` -InnerScheme $form $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } } When using the password grant, an -AuthoriseUrl and -RedirectUrl are not required. If you define a Login route, you define it in the usual way using the -Login switch, as OAuth2 won't be redirecting to the service to authenticate the user: Add-PodeRoute -Method Get -Path '/login' -Authentication Login -Login -ScriptBlock { Write-PodeViewResponse -Path 'login' -FlashMessages } Add-PodeRoute -Method Post -Path '/login' -Authentication Login -Login PKCE Important When using PKCE, you will need to enable the use of sessions in Pode. If your app is setup as a \"Single Page Application\" then you'll be able to use PKCE in your OAuth2 requests. To enable Pode's OAuth2 authentication to use PKCE, supply the -UsePKCE switch: Start-PodeServer { $scheme = New-PodeAuthScheme ` -OAuth2 ` -ClientID '<clientId>' ` -AuthoriseUrl 'https://some-service.com/oauth2/authorize' ` -TokenUrl 'https://some-service.com/oauth2/token' ` -UsePKCE $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } } When using PKCE the -ClientSecret is optional, and doesn't need to be supplied. Middleware Once configured you can start using the OAuth2 Authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Oauth2 Authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Oauth2 Authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/about' -Authentication 'Login' -ScriptBlock { # logic } } OIDC Discovery If the provider you're wanting to use OAuth2 for supports OpenID Connect Discovery, and has an appropriate /.well-known/openid-configuration endpoint, then you can use this with ConvertFrom-PodeOIDCDiscovery to automatically build a Pode OAuth2 scheme. For example, if you were using Google OAuth2 with PKCE, then the following example would build an OAuth2 scheme: $scheme = ConvertFrom-PodeOIDCDiscovery -Url 'https://accounts.google.com' -ClientId '<client_id>' -UsePKCE $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } If the -Url supplied doesn't end with /.well-known/openid-configuration , then Pode will append it to the URL automatically. Full Example The following is an example of OAuth2 authentication usin the authorization_code grant type. This will setup and configure authentication, redirect a user to some service for validation, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Set-PodeViewEngine -Type Pode # setup authentication to validate a user $scheme = New-PodeAuthScheme ` -OAuth2 ` -ClientID '<clientId>' ` -ClientSecret '<clientSecret>' ` -AuthoriseUrl 'https://some-service.com/oauth2/authorize' ` -TokenUrl 'https://some-service.com/oauth2/token' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } # home page: # redirects to login page if not authenticated Add-PodeRoute -Method Get -Path '/' -Authentication Login -ScriptBlock { Write-PodeViewResponse -Path 'home' -Data @{ Username = $WebEvent . Auth . User . name } } # login - this will just redirect to the service # NOTE: you do not need the -Login switch Add-PodeRoute -Method Get -Path '/login' -Authentication Login # logout Add-PodeRoute -Method Post -Path '/logout' -Authentication Login -Logout }","title":"OAuth 2.0 & OIDC"},{"location":"Tutorials/Authentication/Methods/OAuth2/#oauth-20-oidc","text":"The OAuth2 authentication lets you setup authentication with services that support OAuth 2.0. To use this scheme, you'll need to supply an Authorise/Token URL, as well as setup a app registration to acquire a Client ID and Secret. There is also support for converting an OpenID Connect Discovery URL to a Pode OAuth2 scheme.","title":"OAuth 2.0 &amp; OIDC"},{"location":"Tutorials/Authentication/Methods/OAuth2/#setup","text":"Before using the OAuth2 authentication in Pode, you first need to register a new app within your service of choice. This registration will supply you with the required Client ID and Secret (if you're using PKCE then the Client Secret is optional). To setup and start using OAuth2 authentication in Pode you use New-PodeAuthScheme -OAuth2 , and then pipe this into the Add-PodeAuth function.","title":"Setup"},{"location":"Tutorials/Authentication/Methods/OAuth2/#grant-types","text":"Pode supports the grant types of authorization_code and password . By default OAuth2 will use the authorization_code grant type, which will require an -AuthoriseUrl and -RedirectUrl . If you want to use the password grant type, and have users enter their credentials via a form or Basic authentication, then you'll need to supply an -InnerScheme type to New-PodeAuthScheme -OAuth2 . These types are described below.","title":"Grant Types"},{"location":"Tutorials/Authentication/Methods/OAuth2/#authorisation-code","text":"This is the default grant type, and requires an -AuthoriseUrl to be supplied. A -RedirectUrl is also required, but if not supplied an default one will be setup internally. You will need to supply the service's Authorise and Token URLs to New-PodeAuthScheme as below: Start-PodeServer { $scheme = New-PodeAuthScheme ` -OAuth2 ` -ClientID '<clientId>' ` -ClientSecret '<clientSecret>' ` -AuthoriseUrl 'https://some-service.com/oauth2/authorize' ` -TokenUrl 'https://some-service.com/oauth2/token' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } } If you don't specify a -RedirectUrl , then an internal default one is created as /oauth2/callback on the first endpoint. When a user accesses your site unauthenticated, they will be redirected to the service to login, and then redirected back to your site. Pode will supply to your Add-PodeAuth the user object (if available), and the access/refresh tokens, and the raw token response object. You can optional specify a -UserUrl endpoint, if the service supports it, and Pode will use this to acquire user details. If one is not supplied then Pode will attempt to parse the id_token from the -AuthoriseUrl for the user details, otherwise the $user object supplied to Add-PodeAuth 's ScriptBlock will be an basic hashtable: @{ Provider = 'OAuth2' } If you define a Login route, you don't need to set the -Login switch, due to the redirecting of OAuth2. A login route can be a simple route with no view defined: Add-PodeRoute -Method Get -Path '/login' -Authentication Login","title":"Authorisation Code"},{"location":"Tutorials/Authentication/Methods/OAuth2/#password","text":"Important This flow will not work if 2FA is setup on accounts. In most cases, for some providers, you also need to explicitly enable this grant type. Using this grant type allows you to support authentication in flows where redirecting is impossible - such as REST APIs using Basic authentication. To use this grant type, you need to define another Scheme - such as Basic or Form - and then supply that Scheme to the -InnerScheme parameter of New-PodeAuthScheme -OAuth2 . Pode will automatically switch to the password grant type. Start-PodeServer { $form = New-PodeAuthScheme -Form $scheme = New-PodeAuthScheme ` -OAuth2 ` -ClientID '<clientId>' ` -ClientSecret '<clientSecret>' ` -TokenUrl 'https://some-service.com/oauth2/token' ` -InnerScheme $form $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } } When using the password grant, an -AuthoriseUrl and -RedirectUrl are not required. If you define a Login route, you define it in the usual way using the -Login switch, as OAuth2 won't be redirecting to the service to authenticate the user: Add-PodeRoute -Method Get -Path '/login' -Authentication Login -Login -ScriptBlock { Write-PodeViewResponse -Path 'login' -FlashMessages } Add-PodeRoute -Method Post -Path '/login' -Authentication Login -Login","title":"Password"},{"location":"Tutorials/Authentication/Methods/OAuth2/#pkce","text":"Important When using PKCE, you will need to enable the use of sessions in Pode. If your app is setup as a \"Single Page Application\" then you'll be able to use PKCE in your OAuth2 requests. To enable Pode's OAuth2 authentication to use PKCE, supply the -UsePKCE switch: Start-PodeServer { $scheme = New-PodeAuthScheme ` -OAuth2 ` -ClientID '<clientId>' ` -AuthoriseUrl 'https://some-service.com/oauth2/authorize' ` -TokenUrl 'https://some-service.com/oauth2/token' ` -UsePKCE $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } } When using PKCE the -ClientSecret is optional, and doesn't need to be supplied.","title":"PKCE"},{"location":"Tutorials/Authentication/Methods/OAuth2/#middleware","text":"Once configured you can start using the OAuth2 Authentication to validate incoming Requests. You can either configure the validation to happen on every Route as global Middleware, or as custom Route Middleware. The following will use Oauth2 Authentication to validate every request on every Route: Start-PodeServer { Add-PodeAuthMiddleware -Name 'GlobalAuthValidation' -Authentication 'Login' } Whereas the following example will use Oauth2 Authentication to only validate requests on specific a Route: Start-PodeServer { Add-PodeRoute -Method Get -Path '/about' -Authentication 'Login' -ScriptBlock { # logic } }","title":"Middleware"},{"location":"Tutorials/Authentication/Methods/OAuth2/#oidc-discovery","text":"If the provider you're wanting to use OAuth2 for supports OpenID Connect Discovery, and has an appropriate /.well-known/openid-configuration endpoint, then you can use this with ConvertFrom-PodeOIDCDiscovery to automatically build a Pode OAuth2 scheme. For example, if you were using Google OAuth2 with PKCE, then the following example would build an OAuth2 scheme: $scheme = ConvertFrom-PodeOIDCDiscovery -Url 'https://accounts.google.com' -ClientId '<client_id>' -UsePKCE $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } If the -Url supplied doesn't end with /.well-known/openid-configuration , then Pode will append it to the URL automatically.","title":"OIDC Discovery"},{"location":"Tutorials/Authentication/Methods/OAuth2/#full-example","text":"The following is an example of OAuth2 authentication usin the authorization_code grant type. This will setup and configure authentication, redirect a user to some service for validation, and then validate on a specific Route: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Set-PodeViewEngine -Type Pode # setup authentication to validate a user $scheme = New-PodeAuthScheme ` -OAuth2 ` -ClientID '<clientId>' ` -ClientSecret '<clientSecret>' ` -AuthoriseUrl 'https://some-service.com/oauth2/authorize' ` -TokenUrl 'https://some-service.com/oauth2/token' $scheme | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $user , $accessToken , $refreshToken , $response ) # check if the user is valid return @{ User = $user } } # home page: # redirects to login page if not authenticated Add-PodeRoute -Method Get -Path '/' -Authentication Login -ScriptBlock { Write-PodeViewResponse -Path 'home' -Data @{ Username = $WebEvent . Auth . User . name } } # login - this will just redirect to the service # NOTE: you do not need the -Login switch Add-PodeRoute -Method Get -Path '/login' -Authentication Login # logout Add-PodeRoute -Method Post -Path '/logout' -Authentication Login -Logout }","title":"Full Example"},{"location":"Tutorials/Compression/Requests/","text":"Requests You can send Requests to your Pode server that use compression on the payload, such as a JSON payload compressed via GZip. Pode supports the following compression methods: gzip deflate There are a number of ways you can specify the compression type, and these are defined below. When your request uses compression, Pode will first decompress the payload, and then attempt to parse it if needed. Request The most common way is to define the a request's compression type in the request's Transfer-Endocing header. An example of the header in the request is as follows: Transfer-Encoding: gzip Transfer-Encoding: deflate // or: Transfer-Encoding: gzip,chunked Route Like content types, you can force a Route to use a specific transfer encoding by using the -TransferEncoding parameter on Add-PodeRoute . If specified, Pode will use this compression type to decompress the payload regardless if the header is present or not. Add-PodeRoute -Method Get -Path '/' -TransferEncoding gzip -ScriptBlock { # logic } Configuration Using the server.psd1 configuration file, you can define a default transfer encoding to use for every route, or you can define patterns to match multiple route paths to set transfer encodings on mass. Default To define a default transfer encoding for everything, you can use the following configuration: @{ Web = @{ TransferEncoding = @{ Default = \"gzip\" } } } Route Patterns You can define patterns to match multiple route paths, and any route that matches (when created) will have the appropriate transfer encoding set. For example, the following configuration in your server.psd1 would bind all /api routes to gzip , and then all /status routes to deflate : @{ Web = @{ TransferEncoding = @{ Routes = @{ \"/api/*\" = \"gzip\" \"/status/*\" = \"deflate\" } } } } Precedence The transfer encoding that will be used is determined by the following order: Being defined on the Route. The Route matches a pattern defined in the configuration file. A default transfer encoding is defined in the configuration file. The transfer encoding is supplied on the web request. Example The following is an example of sending a gzip encoded payload to some /ping route: # get the JSON message in bytes $data = @{ Name = \"Deepthought\" Age = 42 } $message = ( $data | ConvertTo-Json ) $bytes = [System.Text.Encoding] :: UTF8 . GetBytes ( $message ) # compress the message using gzip $ms = New-Object -TypeName System . IO . MemoryStream $gzip = New-Object System . IO . Compression . GZipStream ( $ms , [IO.Compression.CompressionMode] :: Compress , $true ) $gzip . Write ( $bytes , 0 , $bytes . Length ) $gzip . Close () $ms . Position = 0 # send request Invoke-RestMethod ` -Method Post ` -Uri 'http://localhost:8080/ping' ` -Body $ms . ToArray () ` -TransferEncoding gzip ` -ContentType application / json","title":"Requests"},{"location":"Tutorials/Compression/Requests/#requests","text":"You can send Requests to your Pode server that use compression on the payload, such as a JSON payload compressed via GZip. Pode supports the following compression methods: gzip deflate There are a number of ways you can specify the compression type, and these are defined below. When your request uses compression, Pode will first decompress the payload, and then attempt to parse it if needed.","title":"Requests"},{"location":"Tutorials/Compression/Requests/#request","text":"The most common way is to define the a request's compression type in the request's Transfer-Endocing header. An example of the header in the request is as follows: Transfer-Encoding: gzip Transfer-Encoding: deflate // or: Transfer-Encoding: gzip,chunked","title":"Request"},{"location":"Tutorials/Compression/Requests/#route","text":"Like content types, you can force a Route to use a specific transfer encoding by using the -TransferEncoding parameter on Add-PodeRoute . If specified, Pode will use this compression type to decompress the payload regardless if the header is present or not. Add-PodeRoute -Method Get -Path '/' -TransferEncoding gzip -ScriptBlock { # logic }","title":"Route"},{"location":"Tutorials/Compression/Requests/#configuration","text":"Using the server.psd1 configuration file, you can define a default transfer encoding to use for every route, or you can define patterns to match multiple route paths to set transfer encodings on mass.","title":"Configuration"},{"location":"Tutorials/Compression/Requests/#default","text":"To define a default transfer encoding for everything, you can use the following configuration: @{ Web = @{ TransferEncoding = @{ Default = \"gzip\" } } }","title":"Default"},{"location":"Tutorials/Compression/Requests/#route-patterns","text":"You can define patterns to match multiple route paths, and any route that matches (when created) will have the appropriate transfer encoding set. For example, the following configuration in your server.psd1 would bind all /api routes to gzip , and then all /status routes to deflate : @{ Web = @{ TransferEncoding = @{ Routes = @{ \"/api/*\" = \"gzip\" \"/status/*\" = \"deflate\" } } } }","title":"Route Patterns"},{"location":"Tutorials/Compression/Requests/#precedence","text":"The transfer encoding that will be used is determined by the following order: Being defined on the Route. The Route matches a pattern defined in the configuration file. A default transfer encoding is defined in the configuration file. The transfer encoding is supplied on the web request.","title":"Precedence"},{"location":"Tutorials/Compression/Requests/#example","text":"The following is an example of sending a gzip encoded payload to some /ping route: # get the JSON message in bytes $data = @{ Name = \"Deepthought\" Age = 42 } $message = ( $data | ConvertTo-Json ) $bytes = [System.Text.Encoding] :: UTF8 . GetBytes ( $message ) # compress the message using gzip $ms = New-Object -TypeName System . IO . MemoryStream $gzip = New-Object System . IO . Compression . GZipStream ( $ms , [IO.Compression.CompressionMode] :: Compress , $true ) $gzip . Write ( $bytes , 0 , $bytes . Length ) $gzip . Close () $ms . Position = 0 # send request Invoke-RestMethod ` -Method Post ` -Uri 'http://localhost:8080/ping' ` -Body $ms . ToArray () ` -TransferEncoding gzip ` -ContentType application / json","title":"Example"},{"location":"Tutorials/Compression/Responses/","text":"Responses Pode has support for sending back compressed Responses, if enabled, and if a client sends an appropriate Accept-Encoding header. The followings compression methods are supported: gzip deflate When enabled, Pode will compress the response's bytes prior to sending the response; the Content-Encoding header will also be sent appropriately on the response. Enable By default response compression is disabled in Pode. To enable compression you can set the following value in your server's server.psd1 configuration file: @{ Web = @{ Compression = @{ Enable = $true } } } Once enabled, compression will be used if a valid Accept-Encoding header is sent in the request. Headers For your Pode server to compress the response, the client must send an Accept-Encoding header for with gzip or deflate : Accept-Encoding: gzip Accept-Encoding: deflate Accept-Encoding: identity Accept-Encoding: * Or any valid combination: Accept-Encoding: gzip,deflate If multiple encodings are sent, then Pode will use the first supported value. There is also support for quality values as well, so you can weight encodings or fully disable non-compression (if no q-value is on an encoding it is assumed to be 1) Accept-Encoding: gzip,deflate,identity;q=0 In a scenario where no encodings are supported, and identity (no-compression) is disabled, then Pode will respond with a 406. If an encoding is used to compress the response, then Pode will set the Content-Encoding on the response.","title":"Responses"},{"location":"Tutorials/Compression/Responses/#responses","text":"Pode has support for sending back compressed Responses, if enabled, and if a client sends an appropriate Accept-Encoding header. The followings compression methods are supported: gzip deflate When enabled, Pode will compress the response's bytes prior to sending the response; the Content-Encoding header will also be sent appropriately on the response.","title":"Responses"},{"location":"Tutorials/Compression/Responses/#enable","text":"By default response compression is disabled in Pode. To enable compression you can set the following value in your server's server.psd1 configuration file: @{ Web = @{ Compression = @{ Enable = $true } } } Once enabled, compression will be used if a valid Accept-Encoding header is sent in the request.","title":"Enable"},{"location":"Tutorials/Compression/Responses/#headers","text":"For your Pode server to compress the response, the client must send an Accept-Encoding header for with gzip or deflate : Accept-Encoding: gzip Accept-Encoding: deflate Accept-Encoding: identity Accept-Encoding: * Or any valid combination: Accept-Encoding: gzip,deflate If multiple encodings are sent, then Pode will use the first supported value. There is also support for quality values as well, so you can weight encodings or fully disable non-compression (if no q-value is on an encoding it is assumed to be 1) Accept-Encoding: gzip,deflate,identity;q=0 In a scenario where no encodings are supported, and identity (no-compression) is disabled, then Pode will respond with a 406. If an encoding is used to compress the response, then Pode will set the Content-Encoding on the response.","title":"Headers"},{"location":"Tutorials/Endpoints/Basics/","text":"Basics Endpoints in Pode are used to bind your server to specific IPs, Hostnames and ports, over specific protocols (such as HTTP or HTTPS). Endpoints can have unique names, so you can bind Routes to certain endpoints only. Usage To add new endpoints to your server, you can use Add-PodeEndpoint . A quick and simple example is the following, which will bind your server to http://localhost:8080 : Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http } The -Address can be local or private IP address. The -Port is any valid port number, and the -Protocol defines which protocol the endpoint will use: HTTP, HTTPS, SMTP, TCP, WS and WSS. You can also supply an optional unique -Name to your endpoint. This name will allow you to bind routes to certain endpoints; so if you have endpoint A and B, and you bind some route to endpoint A, then it won't be accessible over endpoint B. Hostnames You can specify a -Hostname for an endpoint, in doing so you can only access routes via the specified hostname. Using a hostname will allow you to have multiple endpoints all using the same IP/Port, but with different hostnames. The following will create an endpoint with hostname example.pode.com , bound to 127.0.0.1:8080 : Add-PodeEndpoint -Hostname example . pode . com -Port 8080 -Protocol Http To bind a hostname to a specific IP you can use -Address : Add-PodeEndpoint -Address 127 . 0 . 0 . 2 -Hostname example . pode . com -Port 8080 -Protocol Http or, lookup the hostnames IP from host file or DNS: Add-PodeEndpoint -Hostname example . pode . com -Port 8080 -Protocol Http -LookupHostname Finally, you can bind multiple hostnames to one IP/Port: Add-PodeEndpoint -Address 127 . 0 . 0 . 3 -Hostname one . pode . com -Port 8080 -Protocol Http Add-PodeEndpoint -Address 127 . 0 . 0 . 3 -Hostname two . pode . com -Port 8080 -Protocol Http Certificates If you add an HTTPS or WSS endpoint, then you'll be required to also supply certificate details. To configure a certificate you can use one of the following parameters: Name Description Certificate The path to a .pfx or .cer certificate CertificatePassword The password for the above .pfx certificate CertificateThumbprint The thumbprint of a certificate to find (Windows only) CertificateName The subject name of a certificate to find (Windows only) CertificateStoreName The name of the certificate store (Default: My) (Windows only) CertificateStoreLocation The location of the certificate store (Default: CurrentUser) (Windows only) X509Certificate A raw X509Certificate object SelfSigned If supplied, Pode will automatically generate a self-signed certificate as an X509Certificate object The below example will create an endpoint using a .pfx certificate: Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -Certificate './certs/example.pfx' -CertificatePassword 'hunter2' Whereas the following will instead create an X509Certificate, and pass that to the endpoint instead: $cert = [System.Security.Cryptography.X509Certificates.X509Certificate2] :: new ( './certs/example.cer' ) Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -X509Certificate $cert The below example will create a local self-signed HTTPS endpoint: Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -SelfSigned Endpoint Names You can give endpoints unique names by supplying the -EndpointName parameter. This name can then be passed to Add-PodeRoute or Add-PodeStaticRoute to bind these routes to that endpoint only. For example: Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http -EndpointName Example Add-PodeRoute -Method Get -Path '/about' -EndpointName Example -ScriptBlock { # ... } Getting Endpoints The Get-PodeEndpoint helper function will allow you to retrieve a list of endpoints configured within Pode. You can use it to retrieve all of the endpoints, or supply filters to retrieve specific endpoints. To retrieve all of the endpoints, you can call the function will no parameters. To filter, here are some examples: # all endpoints using port 80 Get-PodeEndpoint -Port 80 # all endpoints using HTTP Get-PodeEndpoint -Protocol Http # retrieve specific named endpoints Get-PodeEndpoint -Name Admin , User Endpoint Object Warning Be careful if you choose to edit these objects, as they will affect the server. The following is the structure of the Endpoint object internally, as well as the object that is returned from Get-PodeEndpoint : Name Type Description Name string The name of the Endpoint, if a name was supplied Description string A description of the Endpoint, usually used for OpenAPI Address IPAddress The IP address that will be used for the Endpoint RawAddress string The address/host and port of the Endpoint Port int The port the Endpoint will use IsIPAddress bool Whether or not the listener will bind using Hostname or IP address Hostname string The hostname of the Endpoint FriendlyName string A user friendly hostname to use when generating internal URLs Url string The full base URL of the Endpoint Ssl bool Whether or not this Endpoint support support SSL Protocol string The protocol of the Endpoint. Such as: HTTP, HTTPS, WS, etc. Type string The type of the Endpoint. Such as: HTTP, WS, SMTP, TCP Certificate hashtable Details about the certificate that will be used for SSL Endpoints","title":"Basics"},{"location":"Tutorials/Endpoints/Basics/#basics","text":"Endpoints in Pode are used to bind your server to specific IPs, Hostnames and ports, over specific protocols (such as HTTP or HTTPS). Endpoints can have unique names, so you can bind Routes to certain endpoints only.","title":"Basics"},{"location":"Tutorials/Endpoints/Basics/#usage","text":"To add new endpoints to your server, you can use Add-PodeEndpoint . A quick and simple example is the following, which will bind your server to http://localhost:8080 : Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http } The -Address can be local or private IP address. The -Port is any valid port number, and the -Protocol defines which protocol the endpoint will use: HTTP, HTTPS, SMTP, TCP, WS and WSS. You can also supply an optional unique -Name to your endpoint. This name will allow you to bind routes to certain endpoints; so if you have endpoint A and B, and you bind some route to endpoint A, then it won't be accessible over endpoint B.","title":"Usage"},{"location":"Tutorials/Endpoints/Basics/#hostnames","text":"You can specify a -Hostname for an endpoint, in doing so you can only access routes via the specified hostname. Using a hostname will allow you to have multiple endpoints all using the same IP/Port, but with different hostnames. The following will create an endpoint with hostname example.pode.com , bound to 127.0.0.1:8080 : Add-PodeEndpoint -Hostname example . pode . com -Port 8080 -Protocol Http To bind a hostname to a specific IP you can use -Address : Add-PodeEndpoint -Address 127 . 0 . 0 . 2 -Hostname example . pode . com -Port 8080 -Protocol Http or, lookup the hostnames IP from host file or DNS: Add-PodeEndpoint -Hostname example . pode . com -Port 8080 -Protocol Http -LookupHostname Finally, you can bind multiple hostnames to one IP/Port: Add-PodeEndpoint -Address 127 . 0 . 0 . 3 -Hostname one . pode . com -Port 8080 -Protocol Http Add-PodeEndpoint -Address 127 . 0 . 0 . 3 -Hostname two . pode . com -Port 8080 -Protocol Http","title":"Hostnames"},{"location":"Tutorials/Endpoints/Basics/#certificates","text":"If you add an HTTPS or WSS endpoint, then you'll be required to also supply certificate details. To configure a certificate you can use one of the following parameters: Name Description Certificate The path to a .pfx or .cer certificate CertificatePassword The password for the above .pfx certificate CertificateThumbprint The thumbprint of a certificate to find (Windows only) CertificateName The subject name of a certificate to find (Windows only) CertificateStoreName The name of the certificate store (Default: My) (Windows only) CertificateStoreLocation The location of the certificate store (Default: CurrentUser) (Windows only) X509Certificate A raw X509Certificate object SelfSigned If supplied, Pode will automatically generate a self-signed certificate as an X509Certificate object The below example will create an endpoint using a .pfx certificate: Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -Certificate './certs/example.pfx' -CertificatePassword 'hunter2' Whereas the following will instead create an X509Certificate, and pass that to the endpoint instead: $cert = [System.Security.Cryptography.X509Certificates.X509Certificate2] :: new ( './certs/example.cer' ) Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -X509Certificate $cert The below example will create a local self-signed HTTPS endpoint: Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -SelfSigned","title":"Certificates"},{"location":"Tutorials/Endpoints/Basics/#endpoint-names","text":"You can give endpoints unique names by supplying the -EndpointName parameter. This name can then be passed to Add-PodeRoute or Add-PodeStaticRoute to bind these routes to that endpoint only. For example: Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http -EndpointName Example Add-PodeRoute -Method Get -Path '/about' -EndpointName Example -ScriptBlock { # ... }","title":"Endpoint Names"},{"location":"Tutorials/Endpoints/Basics/#getting-endpoints","text":"The Get-PodeEndpoint helper function will allow you to retrieve a list of endpoints configured within Pode. You can use it to retrieve all of the endpoints, or supply filters to retrieve specific endpoints. To retrieve all of the endpoints, you can call the function will no parameters. To filter, here are some examples: # all endpoints using port 80 Get-PodeEndpoint -Port 80 # all endpoints using HTTP Get-PodeEndpoint -Protocol Http # retrieve specific named endpoints Get-PodeEndpoint -Name Admin , User","title":"Getting Endpoints"},{"location":"Tutorials/Endpoints/Basics/#endpoint-object","text":"Warning Be careful if you choose to edit these objects, as they will affect the server. The following is the structure of the Endpoint object internally, as well as the object that is returned from Get-PodeEndpoint : Name Type Description Name string The name of the Endpoint, if a name was supplied Description string A description of the Endpoint, usually used for OpenAPI Address IPAddress The IP address that will be used for the Endpoint RawAddress string The address/host and port of the Endpoint Port int The port the Endpoint will use IsIPAddress bool Whether or not the listener will bind using Hostname or IP address Hostname string The hostname of the Endpoint FriendlyName string A user friendly hostname to use when generating internal URLs Url string The full base URL of the Endpoint Ssl bool Whether or not this Endpoint support support SSL Protocol string The protocol of the Endpoint. Such as: HTTP, HTTPS, WS, etc. Type string The type of the Endpoint. Such as: HTTP, WS, SMTP, TCP Certificate hashtable Details about the certificate that will be used for SSL Endpoints","title":"Endpoint Object"},{"location":"Tutorials/Endpoints/External/","text":"External At most times you'll possibly be accessing your Pode server locally. However, you can access your server externally if you setup the endpoints appropriately using the Add-PodeEndpoint function. These will work on a your VMs, or in a Container. Tip In each case, ensure any Firewalls or Network Security Groups are configured to allow access to the port. All Addresses The default and common approach is to set your Pode server to listen on all IP addresses; this approach does require administrator privileges: Add-PodeEndpoint -Address * -Port 8080 -Protocol Http With this set, you can access your endpoint using the server's Public, Private IP address or VM name - plus the port number: Invoke-RestMethod -Uri 'http://<ip-address|vm-name>:8080' IP Address The other way to expose your server externally is to create an endpoint using the server's Private/Public IP address; this approach does require administrator privileges. For example, assuming the the server's IP is 10.10.1.5 : Add-PodeEndpoint -Address 10 . 10 . 1 . 5 -Port 8080 -Protocol Http With this set, you can access your endpoint using the server's Private IP address or VM name only - plus the port number: Invoke-RestMethod -Uri 'http://10.10.1.5:8080' Hostnames Another way to expose your server externally is to allow only specific hostnames bound to the server's Private/Public IP address - something like SNI in IIS. This approach does require administrator privileges. To do this, let's say you want to allow only one.pode.com and two.pode.com on a server with IP 10.10.1.5 . There are two way of doing this: Specify the hostname/address directly on Add-PodeEndpoint : Add-PodeEndpoint -Address 10 . 10 . 1 . 5 -Hostname 'one.pode.com' -Port 8080 -Protocol Http Add-PodeEndpoint -Address 10 . 10 . 1 . 5 -Hostname 'two.pode.com' -Port 8080 -Protocol Http Add the hostnames to the server's hosts file (or dns): 10.10.1.5 one.pode.com 10.10.1.5 two.pode.com Then, create the endpoints within your server using the -LookupHostname switch: Add-PodeEndpoint -Hostname 'one.pode.com' -Port 8080 -Protocol Http -LookupHostname Add-PodeEndpoint -Hostname 'two.pode.com' -Port 8080 -Protocol Http -LookupHostname Next, make sure to add the hostnames into your hosts file, or into DNS. With these set, you can access your endpoint using only the one.pode.com and two.pode.com hostnames - plus the port number: Invoke-RestMethod -Uri 'http://one.pode.com:8080' Invoke-RestMethod -Uri 'http://two.pode.com:8080' Netsh This next way allows you to access your server external, but be able to run the server without administrator privileges. The initial setup does require administrator privileges, but running the server does not. To do this, let's say you want to access your server on 10.10.1.5 , you can use the following steps: You server should be listening on localhost and then any port you wish: Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Next, you can run the following command as an administrator where the <external-port> can be any port that's not the port in your Add-PodeEndpoint (such as port+1): netsh interface portproxy add v4tov4 listenport = <external-port> connectaddress = 127 .0.0.1 connectport = <pode-port> For example, the above endpoint could be: netsh interface portproxy add v4tov4 listenport = 8081 connectaddress = 127 .0.0.1 connectport = 8080 Run your Pode server as a non-admin user. With this done, you can access your endpoint on 10.10.1.5:8081 : Invoke-RestMethod -Uri 'http://10.10.1.5:8081' This works by having netsh interface portproxy redirect traffic to the local port which your Pode server is listening on.","title":"External"},{"location":"Tutorials/Endpoints/External/#external","text":"At most times you'll possibly be accessing your Pode server locally. However, you can access your server externally if you setup the endpoints appropriately using the Add-PodeEndpoint function. These will work on a your VMs, or in a Container. Tip In each case, ensure any Firewalls or Network Security Groups are configured to allow access to the port.","title":"External"},{"location":"Tutorials/Endpoints/External/#all-addresses","text":"The default and common approach is to set your Pode server to listen on all IP addresses; this approach does require administrator privileges: Add-PodeEndpoint -Address * -Port 8080 -Protocol Http With this set, you can access your endpoint using the server's Public, Private IP address or VM name - plus the port number: Invoke-RestMethod -Uri 'http://<ip-address|vm-name>:8080'","title":"All Addresses"},{"location":"Tutorials/Endpoints/External/#ip-address","text":"The other way to expose your server externally is to create an endpoint using the server's Private/Public IP address; this approach does require administrator privileges. For example, assuming the the server's IP is 10.10.1.5 : Add-PodeEndpoint -Address 10 . 10 . 1 . 5 -Port 8080 -Protocol Http With this set, you can access your endpoint using the server's Private IP address or VM name only - plus the port number: Invoke-RestMethod -Uri 'http://10.10.1.5:8080'","title":"IP Address"},{"location":"Tutorials/Endpoints/External/#hostnames","text":"Another way to expose your server externally is to allow only specific hostnames bound to the server's Private/Public IP address - something like SNI in IIS. This approach does require administrator privileges. To do this, let's say you want to allow only one.pode.com and two.pode.com on a server with IP 10.10.1.5 . There are two way of doing this: Specify the hostname/address directly on Add-PodeEndpoint : Add-PodeEndpoint -Address 10 . 10 . 1 . 5 -Hostname 'one.pode.com' -Port 8080 -Protocol Http Add-PodeEndpoint -Address 10 . 10 . 1 . 5 -Hostname 'two.pode.com' -Port 8080 -Protocol Http Add the hostnames to the server's hosts file (or dns): 10.10.1.5 one.pode.com 10.10.1.5 two.pode.com Then, create the endpoints within your server using the -LookupHostname switch: Add-PodeEndpoint -Hostname 'one.pode.com' -Port 8080 -Protocol Http -LookupHostname Add-PodeEndpoint -Hostname 'two.pode.com' -Port 8080 -Protocol Http -LookupHostname Next, make sure to add the hostnames into your hosts file, or into DNS. With these set, you can access your endpoint using only the one.pode.com and two.pode.com hostnames - plus the port number: Invoke-RestMethod -Uri 'http://one.pode.com:8080' Invoke-RestMethod -Uri 'http://two.pode.com:8080'","title":"Hostnames"},{"location":"Tutorials/Endpoints/External/#netsh","text":"This next way allows you to access your server external, but be able to run the server without administrator privileges. The initial setup does require administrator privileges, but running the server does not. To do this, let's say you want to access your server on 10.10.1.5 , you can use the following steps: You server should be listening on localhost and then any port you wish: Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Next, you can run the following command as an administrator where the <external-port> can be any port that's not the port in your Add-PodeEndpoint (such as port+1): netsh interface portproxy add v4tov4 listenport = <external-port> connectaddress = 127 .0.0.1 connectport = <pode-port> For example, the above endpoint could be: netsh interface portproxy add v4tov4 listenport = 8081 connectaddress = 127 .0.0.1 connectport = 8080 Run your Pode server as a non-admin user. With this done, you can access your endpoint on 10.10.1.5:8081 : Invoke-RestMethod -Uri 'http://10.10.1.5:8081' This works by having netsh interface portproxy redirect traffic to the local port which your Pode server is listening on.","title":"Netsh"},{"location":"Tutorials/Logging/Overview/","text":"Overview There are two aspects to logging in Pode: Methods and Types. Methods define how log items should be recorded, such as to a file, terminal, or event viewer. Types define how items to log are transformed, and what should be supplied to the Method. For example when you supply an Exception to Write-PodeErrorLog , this Exception is first supplied to Pode's inbuilt Error logging type. This type transforms any Exception (or Error Record) into a string which can then be supplied to the File logging method. In Pode you can use File, Terminal, Event Viewer, or a Custom method. As well as Request, Error, or a Custom type. This means you could write a logging method to output to an S3 bucket, Splunk, or any other logging platform. Masking Values When logging items Pode has support to mask sensitive information. This is supported in File and Terminal methods by default, but can also be supported in Custom methods via the Protect-PodeLogItem function. Information to mask is determined using RegEx defined within the server.psd1 configuration file. You can supply multiple patterns, and even define what the mask is - the default being ******** . Note Patterns are case-insensitive. For example, to mask all password fields that could be logged you could use the following: @{ Server = @{ Logging = @{ Masking = @{ Patterns = @( 'Password=\\w+' ) } } } } This would turn: Username, Password=Hunter, Email into Username, ********, Email Instead of masking the whole value that matches, there is support for two RegEx groups: keep_before keep_after Specifying either of these groups in your pattern will keep the original value in place rather than masking it. For example, expanding on the above, to keep the Password= text you could use the following: @{ Server = @{ Logging = @{ Masking = @{ Patterns = @( '(?<keep_before>Password=)\\w+' ) } } } } This would turn: Username, Password=Hunter, Email into Username, Password=********, Email To specify a custom mask, you can do this in the configuration file: @{ Server = @{ Logging = @{ Masking = @{ Patterns = @( '(?<keep_before>Password=)\\w+' ) Mask = '--MASKED--' } } } } Batches By default all log items are recorded one-by-one, but this can obviously become very slow if a lot of log items are being processed. To help speed this up, you can specify a batch size on your logging method: New-PodeLoggingMethod -Terminal -Batch 10 | Enable-PodeRequestLogging Instead of writing logs one-by-one, the above will keep transformed log items in an array. Once the array matches the batch size of 10, all items will be sent to the method at once. This means that the method's scriptblock will receive an array of items, rather than a single item. You can also sent a -BatchTimeout value, in seconds, so that if your batch size it 10 but only 5 log items are added, then after the timeout value the logs items will be sent to your method.","title":"Overview"},{"location":"Tutorials/Logging/Overview/#overview","text":"There are two aspects to logging in Pode: Methods and Types. Methods define how log items should be recorded, such as to a file, terminal, or event viewer. Types define how items to log are transformed, and what should be supplied to the Method. For example when you supply an Exception to Write-PodeErrorLog , this Exception is first supplied to Pode's inbuilt Error logging type. This type transforms any Exception (or Error Record) into a string which can then be supplied to the File logging method. In Pode you can use File, Terminal, Event Viewer, or a Custom method. As well as Request, Error, or a Custom type. This means you could write a logging method to output to an S3 bucket, Splunk, or any other logging platform.","title":"Overview"},{"location":"Tutorials/Logging/Overview/#masking-values","text":"When logging items Pode has support to mask sensitive information. This is supported in File and Terminal methods by default, but can also be supported in Custom methods via the Protect-PodeLogItem function. Information to mask is determined using RegEx defined within the server.psd1 configuration file. You can supply multiple patterns, and even define what the mask is - the default being ******** . Note Patterns are case-insensitive. For example, to mask all password fields that could be logged you could use the following: @{ Server = @{ Logging = @{ Masking = @{ Patterns = @( 'Password=\\w+' ) } } } } This would turn: Username, Password=Hunter, Email into Username, ********, Email Instead of masking the whole value that matches, there is support for two RegEx groups: keep_before keep_after Specifying either of these groups in your pattern will keep the original value in place rather than masking it. For example, expanding on the above, to keep the Password= text you could use the following: @{ Server = @{ Logging = @{ Masking = @{ Patterns = @( '(?<keep_before>Password=)\\w+' ) } } } } This would turn: Username, Password=Hunter, Email into Username, Password=********, Email To specify a custom mask, you can do this in the configuration file: @{ Server = @{ Logging = @{ Masking = @{ Patterns = @( '(?<keep_before>Password=)\\w+' ) Mask = '--MASKED--' } } } }","title":"Masking Values"},{"location":"Tutorials/Logging/Overview/#batches","text":"By default all log items are recorded one-by-one, but this can obviously become very slow if a lot of log items are being processed. To help speed this up, you can specify a batch size on your logging method: New-PodeLoggingMethod -Terminal -Batch 10 | Enable-PodeRequestLogging Instead of writing logs one-by-one, the above will keep transformed log items in an array. Once the array matches the batch size of 10, all items will be sent to the method at once. This means that the method's scriptblock will receive an array of items, rather than a single item. You can also sent a -BatchTimeout value, in seconds, so that if your batch size it 10 but only 5 log items are added, then after the timeout value the logs items will be sent to your method.","title":"Batches"},{"location":"Tutorials/Logging/Methods/Custom/","text":"Custom Sometimes you don't want to log to a file, or the terminal; instead you want to log to something better, like LogStash, Splunk, Athena, or any other central logging platform. Although Pode doesn't have these inbuilt (yet!) it is possible to create a custom logging method, where you define a ScriptBlock with logic to send logs to these platforms. These custom method can be used for any log type - Requests, Error, or Custom. The ScriptBlock you create will be supplied two arguments: The item to be logged. This could be a string (from Requests/Errors), or any custom type. The options you supplied on New-PodeLoggingMethod . Examples Send to S3 Bucket This example will take whatever item is supplied to it, convert it to a string, and then send it off to some S3 bucket in AWS. In this case, it will be logging Requests: $s3_options = @{ AccessKey = $AccessKey SecretKey = $SecretKey } $s3_logging = New-PodeLoggingType -Custom -ArgumentList $s3_options -ScriptBlock { param ( $item , $s3_opts ) Write-S3Object ` -BucketName '<name>' ` -Content $item . ToString () ` -AccessKey $s3_opts . AccessKey ` -SecretKey $s3_opts . SecretKey } $s3_logging | Enable-PodeRequestLogging","title":"Custom"},{"location":"Tutorials/Logging/Methods/Custom/#custom","text":"Sometimes you don't want to log to a file, or the terminal; instead you want to log to something better, like LogStash, Splunk, Athena, or any other central logging platform. Although Pode doesn't have these inbuilt (yet!) it is possible to create a custom logging method, where you define a ScriptBlock with logic to send logs to these platforms. These custom method can be used for any log type - Requests, Error, or Custom. The ScriptBlock you create will be supplied two arguments: The item to be logged. This could be a string (from Requests/Errors), or any custom type. The options you supplied on New-PodeLoggingMethod .","title":"Custom"},{"location":"Tutorials/Logging/Methods/Custom/#examples","text":"","title":"Examples"},{"location":"Tutorials/Logging/Methods/Custom/#send-to-s3-bucket","text":"This example will take whatever item is supplied to it, convert it to a string, and then send it off to some S3 bucket in AWS. In this case, it will be logging Requests: $s3_options = @{ AccessKey = $AccessKey SecretKey = $SecretKey } $s3_logging = New-PodeLoggingType -Custom -ArgumentList $s3_options -ScriptBlock { param ( $item , $s3_opts ) Write-S3Object ` -BucketName '<name>' ` -Content $item . ToString () ` -AccessKey $s3_opts . AccessKey ` -SecretKey $s3_opts . SecretKey } $s3_logging | Enable-PodeRequestLogging","title":"Send to S3 Bucket"},{"location":"Tutorials/Logging/Methods/EventViewer/","text":"Event Viewer You can log items to the Windows Event Viewer, using Pode's unbuilt Event Viewer logging logic. You can log anything, but it's best to use this in conjunction with Enable-PodeErrorLogging and Write-PodeErrorLog . Errors will be logged using an appropriate error level, but other log items will be logged as Informational by default. By default, Pode will log to the Application log with a source of Pode, and an Event ID of 0. Usage When using this log method, Pode will first check if the source exists, and will then attempt to create it. To do this, you will need to be running Pode as an administrator. If however you're running Pode locally, or in a situation where you can't run Pode as a full admin - like in IIS - then you will first have to create the source yourself manually. Assuming a source of Pode and in the Application log, you can use the following: [System.Diagnostics.EventLog] :: CreateEventSource ( 'Pode' , 'Application' ) Once the source is created, Pode can log to the Event Viewer without being an admin! To enable and log errors to the Event Viewer, the following will work: New-PodeLoggingMethod -EventViewer | Enable-PodeErrorLogging This will log to the Application log using Pode as the source. Event Log To log to a different event log, other than Application, you can specify the log via -EventLogName : New-PodeLoggingMethod -EventViewer -EventLogName SomeLogName | Enable-PodeErrorLogging Event Source To log using a different source, other than Pode, you can specify the source via -Source : New-PodeLoggingMethod -EventViewer -Source WebsiteName | Enable-PodeErrorLogging","title":"Event Viewer"},{"location":"Tutorials/Logging/Methods/EventViewer/#event-viewer","text":"You can log items to the Windows Event Viewer, using Pode's unbuilt Event Viewer logging logic. You can log anything, but it's best to use this in conjunction with Enable-PodeErrorLogging and Write-PodeErrorLog . Errors will be logged using an appropriate error level, but other log items will be logged as Informational by default. By default, Pode will log to the Application log with a source of Pode, and an Event ID of 0.","title":"Event Viewer"},{"location":"Tutorials/Logging/Methods/EventViewer/#usage","text":"When using this log method, Pode will first check if the source exists, and will then attempt to create it. To do this, you will need to be running Pode as an administrator. If however you're running Pode locally, or in a situation where you can't run Pode as a full admin - like in IIS - then you will first have to create the source yourself manually. Assuming a source of Pode and in the Application log, you can use the following: [System.Diagnostics.EventLog] :: CreateEventSource ( 'Pode' , 'Application' ) Once the source is created, Pode can log to the Event Viewer without being an admin! To enable and log errors to the Event Viewer, the following will work: New-PodeLoggingMethod -EventViewer | Enable-PodeErrorLogging This will log to the Application log using Pode as the source.","title":"Usage"},{"location":"Tutorials/Logging/Methods/EventViewer/#event-log","text":"To log to a different event log, other than Application, you can specify the log via -EventLogName : New-PodeLoggingMethod -EventViewer -EventLogName SomeLogName | Enable-PodeErrorLogging","title":"Event Log"},{"location":"Tutorials/Logging/Methods/EventViewer/#event-source","text":"To log using a different source, other than Pode, you can specify the source via -Source : New-PodeLoggingMethod -EventViewer -Source WebsiteName | Enable-PodeErrorLogging","title":"Event Source"},{"location":"Tutorials/Logging/Methods/File/","text":"File You can log items to a file using Pode's inbuilt file logging logic. The inbuilt logic allows you to define a maximum number of days to keep files, as well as a maximum file size. The logic will convert any item to a string, and then write it to file. By default, Pode will create all log files in a ./logs directory at the root of your server. Each log file will be stored by day, eg: <name>_2019-08-02_001.log . The last 001 number specifies the log number for that day - if files are be limited by size. Examples Basic The following example will setup the file logging method for logging Requests: New-PodeLoggingMethod -File -Name 'requests' | Enable-PodeRequestLogging Maximum Days The following example will configure file logging to only keep a maximum number of days of logs. Ie, if you set -MaxDays to 4, then Pode will only store the last 4 days worth of logs. New-PodeLoggingMethod -File -Name 'requests' -MaxDays 4 | Enable-PodeRequestLogging Maximum Size The following example will configure file logging to keep logging to a file until it reaches a maximum size. Once the size is reach, Pode will start logging to a new file; in this case, you'll see the last 3 digits increment: 001 > 002 . In this example, the maximum size it limited to 10MB: New-PodeLoggingMethod -File -Name 'requests' -MaxSize 10MB | Enable-PodeRequestLogging Custom Path By default Pode puts all logs in the ./logs directory. You can use a custom path by using -Path : New-PodeLoggingMethod -File -Name 'requests' -Path 'E:/logs' | Enable-PodeRequestLogging","title":"File"},{"location":"Tutorials/Logging/Methods/File/#file","text":"You can log items to a file using Pode's inbuilt file logging logic. The inbuilt logic allows you to define a maximum number of days to keep files, as well as a maximum file size. The logic will convert any item to a string, and then write it to file. By default, Pode will create all log files in a ./logs directory at the root of your server. Each log file will be stored by day, eg: <name>_2019-08-02_001.log . The last 001 number specifies the log number for that day - if files are be limited by size.","title":"File"},{"location":"Tutorials/Logging/Methods/File/#examples","text":"","title":"Examples"},{"location":"Tutorials/Logging/Methods/File/#basic","text":"The following example will setup the file logging method for logging Requests: New-PodeLoggingMethod -File -Name 'requests' | Enable-PodeRequestLogging","title":"Basic"},{"location":"Tutorials/Logging/Methods/File/#maximum-days","text":"The following example will configure file logging to only keep a maximum number of days of logs. Ie, if you set -MaxDays to 4, then Pode will only store the last 4 days worth of logs. New-PodeLoggingMethod -File -Name 'requests' -MaxDays 4 | Enable-PodeRequestLogging","title":"Maximum Days"},{"location":"Tutorials/Logging/Methods/File/#maximum-size","text":"The following example will configure file logging to keep logging to a file until it reaches a maximum size. Once the size is reach, Pode will start logging to a new file; in this case, you'll see the last 3 digits increment: 001 > 002 . In this example, the maximum size it limited to 10MB: New-PodeLoggingMethod -File -Name 'requests' -MaxSize 10MB | Enable-PodeRequestLogging","title":"Maximum Size"},{"location":"Tutorials/Logging/Methods/File/#custom-path","text":"By default Pode puts all logs in the ./logs directory. You can use a custom path by using -Path : New-PodeLoggingMethod -File -Name 'requests' -Path 'E:/logs' | Enable-PodeRequestLogging","title":"Custom Path"},{"location":"Tutorials/Logging/Methods/Terminal/","text":"Terminal You can log items to the terminal using Pode's inbuilt terminal logic. The inbuilt logic will convert any item to a string, and output it to the terminal. Examples Basic The following example will setup the terminal logging method for logging Requests: New-PodeLoggingMethod -Terminal | Enable-PodeRequestLogging","title":"Terminal"},{"location":"Tutorials/Logging/Methods/Terminal/#terminal","text":"You can log items to the terminal using Pode's inbuilt terminal logic. The inbuilt logic will convert any item to a string, and output it to the terminal.","title":"Terminal"},{"location":"Tutorials/Logging/Methods/Terminal/#examples","text":"","title":"Examples"},{"location":"Tutorials/Logging/Methods/Terminal/#basic","text":"The following example will setup the terminal logging method for logging Requests: New-PodeLoggingMethod -Terminal | Enable-PodeRequestLogging","title":"Basic"},{"location":"Tutorials/Logging/Types/Custom/","text":"Custom You can define Custom logging types in Pode by using the Add-PodeLogger function. Much like Requests and Errors, this function too accepts any logging method from New-PodeLoggingMethod . When adding a Custom logger, you supply a -ScriptBlock plus an array of optional arguments in -ArgumentList . The function also requires a unique -Name , so that it can be referenced from the Write-PodeLog function. The ScriptBlock will be supplied with the following arguments: The item to log that was supplied via Write-PodeLog . The arguments that were supplied from Add-PodeLogger 's -ArgumentList parameter. Examples Write to File This example will create a Custom logging method that will take some custom hashtable, transform it into a string, and then return the string. That string will then be passed to the inbuilt File logging method: New-PodeLoggingMethod -File -Name 'Custom' | Add-PodeLogger -Name 'Main' -ScriptBlock { param ( $item , $arg1 , $arg2 ) return \" $( $item . Key1 ) , $( $item . Key2 ) , $( $item . Key3 ) \" } -ArgumentList $arg1 , $arg2 Write-PodeLog -Name 'Main' -InputObject @{ Key1 = 'Value1' Key2 = 'Value2' Key3 = 'Value3' }","title":"Custom"},{"location":"Tutorials/Logging/Types/Custom/#custom","text":"You can define Custom logging types in Pode by using the Add-PodeLogger function. Much like Requests and Errors, this function too accepts any logging method from New-PodeLoggingMethod . When adding a Custom logger, you supply a -ScriptBlock plus an array of optional arguments in -ArgumentList . The function also requires a unique -Name , so that it can be referenced from the Write-PodeLog function. The ScriptBlock will be supplied with the following arguments: The item to log that was supplied via Write-PodeLog . The arguments that were supplied from Add-PodeLogger 's -ArgumentList parameter.","title":"Custom"},{"location":"Tutorials/Logging/Types/Custom/#examples","text":"","title":"Examples"},{"location":"Tutorials/Logging/Types/Custom/#write-to-file","text":"This example will create a Custom logging method that will take some custom hashtable, transform it into a string, and then return the string. That string will then be passed to the inbuilt File logging method: New-PodeLoggingMethod -File -Name 'Custom' | Add-PodeLogger -Name 'Main' -ScriptBlock { param ( $item , $arg1 , $arg2 ) return \" $( $item . Key1 ) , $( $item . Key2 ) , $( $item . Key3 ) \" } -ArgumentList $arg1 , $arg2 Write-PodeLog -Name 'Main' -InputObject @{ Key1 = 'Value1' Key2 = 'Value2' Key3 = 'Value3' }","title":"Write to File"},{"location":"Tutorials/Logging/Types/Errors/","text":"Errors Pode has inbuilt Error logging logic, that parses Exceptions and ErrorRecords, and will return a valid log item for whatever method of logging you supply. It also has support for error levels (such as Error, Warning, Verbose), with support for only allowing certain levels to be logged. By default, Error is always logged if no levels are supplied. Enabling To enable and use Error logging you use Enable-PodeErrorLogging , supplying a logging method from New-PodeLoggingMethod . You can supply your own errors to be logged by using New-PodeLoggingMethod . When Pode logs an error, the information being logged is as follows: Date - The date/time the error occurred. Level - The level of the error, such as Error or verbose. Server - The name of the machine from where the error occurred. Category - The category/type of error that was thrown. Message - The error message. StackTrace - The error StackTrace. Error Levels The Error logging logic uses the following Error levels: Error Warning Informational Verbose Debug Writing Errors You can log additional errors by using Write-PodeErrorLog , which takes an Exception or an ErrorRecord (both of which can be piped). If you log an Exception you can optionally pass -CheckInnerException , which will also log the inner exception. For example, to log an error: try { # ... } catch { $_ | Write-PodeErrorLog } To log an error at a different level, you can also supply a -Level . Internal Logging When error logging is enabled, you'll start to also see inbuilt logging from Pode. Pode at present has internal Error logging, as well as Debug and Verbose logging from its Listener. The internal error logging will show you unhandled exceptions from routes, middleware, etc. Examples Log to Terminal The following example simply enables Error logging, and will output all items to the terminal - by default, only Error level items are logged: New-PodeLoggingMethod -Terminal | Enable-PodeErrorLogging Log Verbose The following example will enable Error logging, and it will log all errors levels except Debug: New-PodeLoggingMethod -Terminal | Enable-PodeErrorLogging -Levels Error , Warning , Information , Verbose Using Raw Item The following example uses a Custom logging method, and sets Error logging to return and supply the raw hashtable to the Custom method's scriptblock. The Custom method simply logs the Server and Message to the terminal (but could be to something like an S3 bucket): $method = New-PodeLoggingMethod -Custom -ScriptBlock { param ( $item ) \" $( $item . Server ) - $( $item . Message ) \" | Out-Default } $method | Enable-PodeErrorLogging -Raw Raw Error The raw Error hashtable that will be supplied to any Custom logging methods will look as follows: @{ Date = [datetime] :: Now Level = 'Error' Server = 'ComputerName' Category = 'InvalidOperation: (:) [], RuntimeException' Message = 'You cannot call a method on a null-valued expression.' StackTrace = 'at <ScriptBlock>, <No file>: line 45' }","title":"Errors"},{"location":"Tutorials/Logging/Types/Errors/#errors","text":"Pode has inbuilt Error logging logic, that parses Exceptions and ErrorRecords, and will return a valid log item for whatever method of logging you supply. It also has support for error levels (such as Error, Warning, Verbose), with support for only allowing certain levels to be logged. By default, Error is always logged if no levels are supplied.","title":"Errors"},{"location":"Tutorials/Logging/Types/Errors/#enabling","text":"To enable and use Error logging you use Enable-PodeErrorLogging , supplying a logging method from New-PodeLoggingMethod . You can supply your own errors to be logged by using New-PodeLoggingMethod . When Pode logs an error, the information being logged is as follows: Date - The date/time the error occurred. Level - The level of the error, such as Error or verbose. Server - The name of the machine from where the error occurred. Category - The category/type of error that was thrown. Message - The error message. StackTrace - The error StackTrace.","title":"Enabling"},{"location":"Tutorials/Logging/Types/Errors/#error-levels","text":"The Error logging logic uses the following Error levels: Error Warning Informational Verbose Debug","title":"Error Levels"},{"location":"Tutorials/Logging/Types/Errors/#writing-errors","text":"You can log additional errors by using Write-PodeErrorLog , which takes an Exception or an ErrorRecord (both of which can be piped). If you log an Exception you can optionally pass -CheckInnerException , which will also log the inner exception. For example, to log an error: try { # ... } catch { $_ | Write-PodeErrorLog } To log an error at a different level, you can also supply a -Level .","title":"Writing Errors"},{"location":"Tutorials/Logging/Types/Errors/#internal-logging","text":"When error logging is enabled, you'll start to also see inbuilt logging from Pode. Pode at present has internal Error logging, as well as Debug and Verbose logging from its Listener. The internal error logging will show you unhandled exceptions from routes, middleware, etc.","title":"Internal Logging"},{"location":"Tutorials/Logging/Types/Errors/#examples","text":"","title":"Examples"},{"location":"Tutorials/Logging/Types/Errors/#log-to-terminal","text":"The following example simply enables Error logging, and will output all items to the terminal - by default, only Error level items are logged: New-PodeLoggingMethod -Terminal | Enable-PodeErrorLogging","title":"Log to Terminal"},{"location":"Tutorials/Logging/Types/Errors/#log-verbose","text":"The following example will enable Error logging, and it will log all errors levels except Debug: New-PodeLoggingMethod -Terminal | Enable-PodeErrorLogging -Levels Error , Warning , Information , Verbose","title":"Log Verbose"},{"location":"Tutorials/Logging/Types/Errors/#using-raw-item","text":"The following example uses a Custom logging method, and sets Error logging to return and supply the raw hashtable to the Custom method's scriptblock. The Custom method simply logs the Server and Message to the terminal (but could be to something like an S3 bucket): $method = New-PodeLoggingMethod -Custom -ScriptBlock { param ( $item ) \" $( $item . Server ) - $( $item . Message ) \" | Out-Default } $method | Enable-PodeErrorLogging -Raw","title":"Using Raw Item"},{"location":"Tutorials/Logging/Types/Errors/#raw-error","text":"The raw Error hashtable that will be supplied to any Custom logging methods will look as follows: @{ Date = [datetime] :: Now Level = 'Error' Server = 'ComputerName' Category = 'InvalidOperation: (:) [], RuntimeException' Message = 'You cannot call a method on a null-valued expression.' StackTrace = 'at <ScriptBlock>, <No file>: line 45' }","title":"Raw Error"},{"location":"Tutorials/Logging/Types/Requests/","text":"Requests Pode has inbuilt Request logging logic, that will parse and return a valid log item for whatever method of logging you supply. Enabling To enable and use the Request logging you use the Enable-PodeRequestLogging function, supplying a logging method from New-PodeLoggingMethod . The Request type logic will format a string using Combined Log Format . This string is then supplied to the logging method's scriptblock. If you're using a Custom logging method and want the raw hashtable instead, you can supply -Raw to Enable-PodeRequestLogging . Examples Log to Terminal The following example simply enables Request logging, and will output all items to the terminal: New-PodeLoggingMethod -Terminal | Enable-PodeRequestLogging Using Raw Item The following example uses a Custom logging method, and sets Request logging to return and supply the raw hashtable to the Custom method's scriptblock. The Custom method simply logs the Host an StatusCode to the terminal (but could be to something like an S3 bucket): $method = New-PodeLoggingMethod -Custom -ScriptBlock { param ( $item ) \" $( $item . Host ) - $( $item . Response . StatusCode ) \" | Out-Default } $method | Enable-PodeRequestLogging -Raw Raw Request The raw Request hashtable that will be supplied to any Custom logging methods will look as follows: @{ Host = '10.10.0.3' RfcUserIdentity = '-' User = '-' Date = '14/Jun/2018:20:23:52 +01:00' Request = @{ Method = 'GET' Resource = '/api/users' Protocol = \"HTTP/1.1\" Referrer = '-' Agent = '<user-agent>' } Response = @{ StatusCode = '200' StautsDescription = 'OK' Size = '9001' } }","title":"Requests"},{"location":"Tutorials/Logging/Types/Requests/#requests","text":"Pode has inbuilt Request logging logic, that will parse and return a valid log item for whatever method of logging you supply.","title":"Requests"},{"location":"Tutorials/Logging/Types/Requests/#enabling","text":"To enable and use the Request logging you use the Enable-PodeRequestLogging function, supplying a logging method from New-PodeLoggingMethod . The Request type logic will format a string using Combined Log Format . This string is then supplied to the logging method's scriptblock. If you're using a Custom logging method and want the raw hashtable instead, you can supply -Raw to Enable-PodeRequestLogging .","title":"Enabling"},{"location":"Tutorials/Logging/Types/Requests/#examples","text":"","title":"Examples"},{"location":"Tutorials/Logging/Types/Requests/#log-to-terminal","text":"The following example simply enables Request logging, and will output all items to the terminal: New-PodeLoggingMethod -Terminal | Enable-PodeRequestLogging","title":"Log to Terminal"},{"location":"Tutorials/Logging/Types/Requests/#using-raw-item","text":"The following example uses a Custom logging method, and sets Request logging to return and supply the raw hashtable to the Custom method's scriptblock. The Custom method simply logs the Host an StatusCode to the terminal (but could be to something like an S3 bucket): $method = New-PodeLoggingMethod -Custom -ScriptBlock { param ( $item ) \" $( $item . Host ) - $( $item . Response . StatusCode ) \" | Out-Default } $method | Enable-PodeRequestLogging -Raw","title":"Using Raw Item"},{"location":"Tutorials/Logging/Types/Requests/#raw-request","text":"The raw Request hashtable that will be supplied to any Custom logging methods will look as follows: @{ Host = '10.10.0.3' RfcUserIdentity = '-' User = '-' Date = '14/Jun/2018:20:23:52 +01:00' Request = @{ Method = 'GET' Resource = '/api/users' Protocol = \"HTTP/1.1\" Referrer = '-' Agent = '<user-agent>' } Response = @{ StatusCode = '200' StautsDescription = 'OK' Size = '9001' } }","title":"Raw Request"},{"location":"Tutorials/Metrics/Requests/","text":"Requests Pode keeps a count of the total number of Requests processed by the server. This count is kept both server-wide, and against each individual Route; the counts are also split into two: one for the total number of requests, and one for the total number of requests per status code. These counts are preserved through internal Pode server restarts. The current count of active requests are also available. Server The server wide counts contain the total number of requests in general, and per status code, regardless of the Route. To retrieve these counts you can use the Get-PodeServerRequestMetric function. This function lets you get the Total number of requests, all Status Code counts, and a count for a specific Status Code. To get the total number of requests: $total = Get-PodeServerRequestMetric -Total To get the total counts for all status codes: $codes = Get-PodeServerRequestMetric And to get the total count for a specific status code: $code = Get-PodeServerRequestMetric -StatusCode 200 Routes The request counts for a specific Route can be retrieved via the Get-PodeRoute function. The request metrics stored against a Route are identical to the server wide ones, but are the total counts specific to that Route. To get the total number of requests for a Route: $total = ( Get-PodeRoute -Method Get -Path '/about' ). Metrics . Requests . Total To get the total counts for all status codes for a Route: $codes = ( Get-PodeRoute -Method Get -Path '/about' ). Metrics . Requests . StatusCodes And to get the total count for a specific status code for a Route: $code = ( Get-PodeRoute -Method Get -Path '/about' ). Metrics . Requests . StatusCodes [ '200' ] Active You can retrieve the current count of active requests by using Get-PodeServerActiveRequestMetric . Active requests are ones that are queued, or are currently being processed: $activeReqs = Get-PodeServerActiveRequestMetric The default is to return the count of all requests, but you can filter a count of queued or processing via -CountType : $queuedReqs = Get-PodeServerActiveRequestMetric -CountType Queued","title":"Requests"},{"location":"Tutorials/Metrics/Requests/#requests","text":"Pode keeps a count of the total number of Requests processed by the server. This count is kept both server-wide, and against each individual Route; the counts are also split into two: one for the total number of requests, and one for the total number of requests per status code. These counts are preserved through internal Pode server restarts. The current count of active requests are also available.","title":"Requests"},{"location":"Tutorials/Metrics/Requests/#server","text":"The server wide counts contain the total number of requests in general, and per status code, regardless of the Route. To retrieve these counts you can use the Get-PodeServerRequestMetric function. This function lets you get the Total number of requests, all Status Code counts, and a count for a specific Status Code. To get the total number of requests: $total = Get-PodeServerRequestMetric -Total To get the total counts for all status codes: $codes = Get-PodeServerRequestMetric And to get the total count for a specific status code: $code = Get-PodeServerRequestMetric -StatusCode 200","title":"Server"},{"location":"Tutorials/Metrics/Requests/#routes","text":"The request counts for a specific Route can be retrieved via the Get-PodeRoute function. The request metrics stored against a Route are identical to the server wide ones, but are the total counts specific to that Route. To get the total number of requests for a Route: $total = ( Get-PodeRoute -Method Get -Path '/about' ). Metrics . Requests . Total To get the total counts for all status codes for a Route: $codes = ( Get-PodeRoute -Method Get -Path '/about' ). Metrics . Requests . StatusCodes And to get the total count for a specific status code for a Route: $code = ( Get-PodeRoute -Method Get -Path '/about' ). Metrics . Requests . StatusCodes [ '200' ]","title":"Routes"},{"location":"Tutorials/Metrics/Requests/#active","text":"You can retrieve the current count of active requests by using Get-PodeServerActiveRequestMetric . Active requests are ones that are queued, or are currently being processed: $activeReqs = Get-PodeServerActiveRequestMetric The default is to return the count of all requests, but you can filter a count of queued or processing via -CountType : $queuedReqs = Get-PodeServerActiveRequestMetric -CountType Queued","title":"Active"},{"location":"Tutorials/Metrics/Uptime/","text":"Uptime and Restarts Pode internally keeps track of the uptime of the server, as well as the number of times the server has been restarted. Uptime There are two uptime stats in Pode, and both will be returned to you in milliseconds: The uptime for the server since the last restart The total uptime of the server regardless of restarts To get either, you can use the Get-PodeServerUptime function. For the total uptime, just supply the -Total switch: $current = Get-PodeServerUptime $total = Get-PodeServerUptime -Total Restart Count Pode keeps track of how many time your server restarts, you can get this count by using the Get-PodeServerRestartCount function: $count = Get-PodeServerRestartCount","title":"Uptime and Restarts"},{"location":"Tutorials/Metrics/Uptime/#uptime-and-restarts","text":"Pode internally keeps track of the uptime of the server, as well as the number of times the server has been restarted.","title":"Uptime and Restarts"},{"location":"Tutorials/Metrics/Uptime/#uptime","text":"There are two uptime stats in Pode, and both will be returned to you in milliseconds: The uptime for the server since the last restart The total uptime of the server regardless of restarts To get either, you can use the Get-PodeServerUptime function. For the total uptime, just supply the -Total switch: $current = Get-PodeServerUptime $total = Get-PodeServerUptime -Total","title":"Uptime"},{"location":"Tutorials/Metrics/Uptime/#restart-count","text":"Pode keeps track of how many time your server restarts, you can get this count by using the Get-PodeServerRestartCount function: $count = Get-PodeServerRestartCount","title":"Restart Count"},{"location":"Tutorials/Middleware/Overview/","text":"Overview Middleware in Pode allows you to observe and edit the request/response objects for a current web event - you can alter the response, add custom objects to the web event for later use, or terminate the response without processing the main Route logic. Middleware is supported in both a global scope, using Add-PodeMiddleware , as well as at the Route level using the -Middleware parameter on Add-PodeMiddleware , Pode itself has some inbuilt Middleware, which is overridable, so you can use your own custom middleware. For example, Pode has inbuilt Middleware for rate limiting, but you can override this with Add-PodeMiddleware and the Name __pode_mw_rate_limit__ (more on the Access Rules and Rate Limiting page). Global Middleware To setup and use middleware in Pode you use the Middleware function: Add-PodeMiddleware . This will setup global middleware that will run, in the order created, on every request prior to any Route logic being invoked. The function takes a ScriptBlock, which has access to the current web event variable: $WebEvent . The event object contains the current Request and Response objects - you can also add more custom objects to it, as the event is just a hashtable . If you want to keep processing and proceed to the next Middleware/Route then return $true from the ScriptBlock, otherwise return $false and the response will be closed immediately. The following example is middleware that observes the user agent of the request. If the request comes from a PowerShell session then stop processing and return forbidden, otherwise create a new Agent key on the session for later Middleware/Route logic: Start-PodeServer { Add-PodeMiddleware -Name 'BlockPowershell' -ScriptBlock { # if the user agent is powershell, deny access if ( $WebEvent . Request . UserAgent -ilike '*powershell*' ) { # forbidden Set-PodeResponseStatus -Code 403 # stop processing return $false } # create a new key on the event for the next middleware/route $WebEvent . Agent = $WebEvent . Request . UserAgent # continue processing other middleware return $true } } Where as the following example is Middleware that will only be run on requests against the /api route. Here, we're just going to do something simple, which is to write a message to the console for all /api requests: Start-PodeServer { Add-PodeMiddleware -Name 'GlobalApiAuthCheck' -Route '/api' -ScriptBlock { 'Hello!' | Out-PodeHost return $true } } Route Middleware Custom middleware on a Route is basically the same as above however, you don't use the main Middleware functions and instead insert it straight on the Route. To do this, you can use the -Middleware parameter on the Add-PodeRoute function. The middleware on a route can either be a single scriptblock or an an array of scriptblocks . Middleware defined on routes will be run before the route itself, but after any global middleware that may have been configured. The following example defines a scriptblock to reject calls that come from a specific IP address on a specific Route: Start-PodeServer { # custom middleware to reject access to a specific IP address $reject_ip = { # forbid access to the stated IP address if ( $WebEvent . Request . RemoteEndPoint . Address . IPAddressToString -ieq '10.10.1.8' ) { Set-PodeResponseStatus -Code 403 return $false } # allow the next custom middleware or the route itself to run return $true } # the middleware above is linked to this route, and checked before running the route logic Add-PodeRoute -Method Get -Path '/users' -Middleware $reject_ip -ScriptBlock { # route logic } # this route has no custom middleware, and just runs the route logic Add-PodeRoute -Method Get -Path '/alive' -ScriptBlock { # route logic } } Order of Running Although you can define your own custom middleware, Pode does have some inbuilt middleware with a predefined run order. This order of running is as follows: Order Middleware Description 1 Security Headers Add any defined security headers onto the response 2 Access Rules Allowing/Denying IP addresses (if access rules have been defined) 3 Rate Limiting Limiting access to IP addresses (if rate limiting rules have been defined) 4 Static Content Static Content, such as images/css/js/html, in the /public directory 5 Body Parsing Parsing request payload as JSON, XML, or other types 6 Query String Getting any query string parameters currently on the request URL 7 Cookie Parsing Parse the cookies from the request's header (this only applies to serverless) 8 Custom Middleware Runs any defined user defined global Middleware in the order it was created 9 Route Middleware Runs any Route level Middleware for the current Route being processed 10 Route Then, the route itself is processed 11 Endware Finally, any Endware configured is run Overriding Inbuilt Pode has inbuilt Middleware as defined in the order of running above. Sometimes you probably don't want to use the inbuilt rate limiting, and use a custom rate limiting library that utilises REDIS instead. Each of the inbuilt Middleware have a defined name, that you can pass to the Add-PodeMiddleware function via the -Name parameter: Access Control - __pode_mw_access__ Rate Limiting - __pode_mw_rate_limit__ Public Content - __pode_mw_static_content__ Body Parsing - __pode_mw_body_parsing__ Query String - __pode_mw_query_parsing__ Cookie Parsing - __pode_mw_cookie_parsing__ Security Headers - __pode_mw_security__ The following example uses rate limiting, and defines Middleware that will override the inbuilt rate limiting logic: Start-PodeServer { # attach to port 8080 Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # assign rate limiting to localhost, and allow 8 request per 5 seconds Add-PodeLimitRule -Type IP -Values @( '127.0.0.1' , '[::1]' ) -Limit 8 -Seconds 5 # create middleware to override the inbuilt rate limiting (to stop the limiting) Add-PodeMiddleware -Name '__pode_mw_rate_limit__' -ScriptBlock { return $true } # basic route Add-PodeRoute -Method Get -Path '/' -ScriptBlock { # logic } }","title":"Overview"},{"location":"Tutorials/Middleware/Overview/#overview","text":"Middleware in Pode allows you to observe and edit the request/response objects for a current web event - you can alter the response, add custom objects to the web event for later use, or terminate the response without processing the main Route logic. Middleware is supported in both a global scope, using Add-PodeMiddleware , as well as at the Route level using the -Middleware parameter on Add-PodeMiddleware , Pode itself has some inbuilt Middleware, which is overridable, so you can use your own custom middleware. For example, Pode has inbuilt Middleware for rate limiting, but you can override this with Add-PodeMiddleware and the Name __pode_mw_rate_limit__ (more on the Access Rules and Rate Limiting page).","title":"Overview"},{"location":"Tutorials/Middleware/Overview/#global-middleware","text":"To setup and use middleware in Pode you use the Middleware function: Add-PodeMiddleware . This will setup global middleware that will run, in the order created, on every request prior to any Route logic being invoked. The function takes a ScriptBlock, which has access to the current web event variable: $WebEvent . The event object contains the current Request and Response objects - you can also add more custom objects to it, as the event is just a hashtable . If you want to keep processing and proceed to the next Middleware/Route then return $true from the ScriptBlock, otherwise return $false and the response will be closed immediately. The following example is middleware that observes the user agent of the request. If the request comes from a PowerShell session then stop processing and return forbidden, otherwise create a new Agent key on the session for later Middleware/Route logic: Start-PodeServer { Add-PodeMiddleware -Name 'BlockPowershell' -ScriptBlock { # if the user agent is powershell, deny access if ( $WebEvent . Request . UserAgent -ilike '*powershell*' ) { # forbidden Set-PodeResponseStatus -Code 403 # stop processing return $false } # create a new key on the event for the next middleware/route $WebEvent . Agent = $WebEvent . Request . UserAgent # continue processing other middleware return $true } } Where as the following example is Middleware that will only be run on requests against the /api route. Here, we're just going to do something simple, which is to write a message to the console for all /api requests: Start-PodeServer { Add-PodeMiddleware -Name 'GlobalApiAuthCheck' -Route '/api' -ScriptBlock { 'Hello!' | Out-PodeHost return $true } }","title":"Global Middleware"},{"location":"Tutorials/Middleware/Overview/#route-middleware","text":"Custom middleware on a Route is basically the same as above however, you don't use the main Middleware functions and instead insert it straight on the Route. To do this, you can use the -Middleware parameter on the Add-PodeRoute function. The middleware on a route can either be a single scriptblock or an an array of scriptblocks . Middleware defined on routes will be run before the route itself, but after any global middleware that may have been configured. The following example defines a scriptblock to reject calls that come from a specific IP address on a specific Route: Start-PodeServer { # custom middleware to reject access to a specific IP address $reject_ip = { # forbid access to the stated IP address if ( $WebEvent . Request . RemoteEndPoint . Address . IPAddressToString -ieq '10.10.1.8' ) { Set-PodeResponseStatus -Code 403 return $false } # allow the next custom middleware or the route itself to run return $true } # the middleware above is linked to this route, and checked before running the route logic Add-PodeRoute -Method Get -Path '/users' -Middleware $reject_ip -ScriptBlock { # route logic } # this route has no custom middleware, and just runs the route logic Add-PodeRoute -Method Get -Path '/alive' -ScriptBlock { # route logic } }","title":"Route Middleware"},{"location":"Tutorials/Middleware/Overview/#order-of-running","text":"Although you can define your own custom middleware, Pode does have some inbuilt middleware with a predefined run order. This order of running is as follows: Order Middleware Description 1 Security Headers Add any defined security headers onto the response 2 Access Rules Allowing/Denying IP addresses (if access rules have been defined) 3 Rate Limiting Limiting access to IP addresses (if rate limiting rules have been defined) 4 Static Content Static Content, such as images/css/js/html, in the /public directory 5 Body Parsing Parsing request payload as JSON, XML, or other types 6 Query String Getting any query string parameters currently on the request URL 7 Cookie Parsing Parse the cookies from the request's header (this only applies to serverless) 8 Custom Middleware Runs any defined user defined global Middleware in the order it was created 9 Route Middleware Runs any Route level Middleware for the current Route being processed 10 Route Then, the route itself is processed 11 Endware Finally, any Endware configured is run","title":"Order of Running"},{"location":"Tutorials/Middleware/Overview/#overriding-inbuilt","text":"Pode has inbuilt Middleware as defined in the order of running above. Sometimes you probably don't want to use the inbuilt rate limiting, and use a custom rate limiting library that utilises REDIS instead. Each of the inbuilt Middleware have a defined name, that you can pass to the Add-PodeMiddleware function via the -Name parameter: Access Control - __pode_mw_access__ Rate Limiting - __pode_mw_rate_limit__ Public Content - __pode_mw_static_content__ Body Parsing - __pode_mw_body_parsing__ Query String - __pode_mw_query_parsing__ Cookie Parsing - __pode_mw_cookie_parsing__ Security Headers - __pode_mw_security__ The following example uses rate limiting, and defines Middleware that will override the inbuilt rate limiting logic: Start-PodeServer { # attach to port 8080 Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # assign rate limiting to localhost, and allow 8 request per 5 seconds Add-PodeLimitRule -Type IP -Values @( '127.0.0.1' , '[::1]' ) -Limit 8 -Seconds 5 # create middleware to override the inbuilt rate limiting (to stop the limiting) Add-PodeMiddleware -Name '__pode_mw_rate_limit__' -ScriptBlock { return $true } # basic route Add-PodeRoute -Method Get -Path '/' -ScriptBlock { # logic } }","title":"Overriding Inbuilt"},{"location":"Tutorials/Middleware/Types/AccessRules/","text":"Access Rules Access rules in Pode are inbuilt Middleware that allow you to specify allow/deny rules for IP addresses and subnet masks. This means you can deny certain IPs from accessing the server, and vice-versa by allowing them. Usage To setup access rules in Pode you use the Add-PodeAccessRule function. You can either put a rule in for a specific IP address/subnet mask, or for every address (using all ). You can also supply an array of addresses/subnets as well, rather than one at a time. Info If a requests hits your server from an address that you've denied access, then a 403 response is returned and the connection immediately closed. For SMTP/TCP servers the connection is just closed with no response. The following example will allow access for requests from localhost: Add-PodeAccessRule -Access Allow -Type IP -Values 127 . 0 . 0 . 1 Whereas the following example will deny access to requests from a subnet: Add-PodeAccessRule -Access Deny -Type IP -Values 10 . 10 . 0 . 0 / 24 To allow access to requests from multiple addresses in one line, the following example will work: Add-PodeAccessRule -Access Allow -Type IP -Values @( '192.168.1.1' , '192.168.1.2' ) Finally, to allow or deny access to requests from every address you can use the all keyword: Add-PodeAccessRule -Access Deny -Type IP -Values 'all' Overriding Since access rules are an inbuilt Middleware in Pode, then when you setup rules the point at which the rules are checked on the request lifecycle is fixed (see here ). This means you can override the inbuilt access rule logic with your own custom logic, using the Add-PodeMiddleware function. To override the access rule logic you can pass __pode_mw_access__ to the -Name parameter of the Add-PodeMiddleware function. The following example uses access rules, and defines Middleware that will override the inbuilt access logic: Start-PodeServer { # attach to port 8080 Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # assign access rule to deny localhost Add-PodeAccessRule -Access Deny -Type IP -Values @( '127.0.0.1' , '[::1]' ) # create middleware to override the inbuilt access rule logic. # this will ignore the 'deny' part, and just allow the request Add-PodeMiddleware -Name '__pode_mw_access__' -ScriptBlock { return $true } # basic route Add-PodeRoute -Method Get -Path '/' -ScriptBlock { # logic } }","title":"Access Rules"},{"location":"Tutorials/Middleware/Types/AccessRules/#access-rules","text":"Access rules in Pode are inbuilt Middleware that allow you to specify allow/deny rules for IP addresses and subnet masks. This means you can deny certain IPs from accessing the server, and vice-versa by allowing them.","title":"Access Rules"},{"location":"Tutorials/Middleware/Types/AccessRules/#usage","text":"To setup access rules in Pode you use the Add-PodeAccessRule function. You can either put a rule in for a specific IP address/subnet mask, or for every address (using all ). You can also supply an array of addresses/subnets as well, rather than one at a time. Info If a requests hits your server from an address that you've denied access, then a 403 response is returned and the connection immediately closed. For SMTP/TCP servers the connection is just closed with no response. The following example will allow access for requests from localhost: Add-PodeAccessRule -Access Allow -Type IP -Values 127 . 0 . 0 . 1 Whereas the following example will deny access to requests from a subnet: Add-PodeAccessRule -Access Deny -Type IP -Values 10 . 10 . 0 . 0 / 24 To allow access to requests from multiple addresses in one line, the following example will work: Add-PodeAccessRule -Access Allow -Type IP -Values @( '192.168.1.1' , '192.168.1.2' ) Finally, to allow or deny access to requests from every address you can use the all keyword: Add-PodeAccessRule -Access Deny -Type IP -Values 'all'","title":"Usage"},{"location":"Tutorials/Middleware/Types/AccessRules/#overriding","text":"Since access rules are an inbuilt Middleware in Pode, then when you setup rules the point at which the rules are checked on the request lifecycle is fixed (see here ). This means you can override the inbuilt access rule logic with your own custom logic, using the Add-PodeMiddleware function. To override the access rule logic you can pass __pode_mw_access__ to the -Name parameter of the Add-PodeMiddleware function. The following example uses access rules, and defines Middleware that will override the inbuilt access logic: Start-PodeServer { # attach to port 8080 Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # assign access rule to deny localhost Add-PodeAccessRule -Access Deny -Type IP -Values @( '127.0.0.1' , '[::1]' ) # create middleware to override the inbuilt access rule logic. # this will ignore the 'deny' part, and just allow the request Add-PodeMiddleware -Name '__pode_mw_access__' -ScriptBlock { return $true } # basic route Add-PodeRoute -Method Get -Path '/' -ScriptBlock { # logic } }","title":"Overriding"},{"location":"Tutorials/Middleware/Types/BodyParsing/","text":"Body Parsing Pode has inbuilt body/payload parsing on Requests, which by default can parse the following content types: */json */xml */csv */x-www-form-urlencoded multipart/form-data This is useful however, there can be times when you might want to use a different JSON parsing library - or parse a completely different content type altogether! This is possible using the Add-PodeBodyParser function. Adding a Parser You can use the Add-PodeBodyParser function to define a scriptblock that can parse the Request body for a specific content type. Any set parsers have a higher priority than the inbuilt ones, meaning if you define a parser for application/json then this will be used instead of the inbuilt one. The scriptblock you supply will be supplied a single argument, which will be the Body of the Request. For example, to set your own JSON parser that will simply return the body unmodified you could do the following: Add-PodeBodyParser -ContentType 'application/json' -ScriptBlock { param ( $body ) return $body } This can then be accessed the normal way within a Route from the .Data property on the accessible $WebEvent : Add-PodeRoute -Method Post -Path '/' -ScriptBlock { # if using the above parser, .Data here will just be a plain string Write-PodeTextResponse -Value $WebEvent . Data } This is great if you want to be able to parse other content types like YAML, HCL, or many others! Removing a Parser To remove a defined parser you can use the Remove-PodeBodyParser function: Remove-PodeBodyParser -ContentType 'application/json' Note This will only remove defined custom parsers, and will not affect the inbuilt parsers.","title":"Body Parsing"},{"location":"Tutorials/Middleware/Types/BodyParsing/#body-parsing","text":"Pode has inbuilt body/payload parsing on Requests, which by default can parse the following content types: */json */xml */csv */x-www-form-urlencoded multipart/form-data This is useful however, there can be times when you might want to use a different JSON parsing library - or parse a completely different content type altogether! This is possible using the Add-PodeBodyParser function.","title":"Body Parsing"},{"location":"Tutorials/Middleware/Types/BodyParsing/#adding-a-parser","text":"You can use the Add-PodeBodyParser function to define a scriptblock that can parse the Request body for a specific content type. Any set parsers have a higher priority than the inbuilt ones, meaning if you define a parser for application/json then this will be used instead of the inbuilt one. The scriptblock you supply will be supplied a single argument, which will be the Body of the Request. For example, to set your own JSON parser that will simply return the body unmodified you could do the following: Add-PodeBodyParser -ContentType 'application/json' -ScriptBlock { param ( $body ) return $body } This can then be accessed the normal way within a Route from the .Data property on the accessible $WebEvent : Add-PodeRoute -Method Post -Path '/' -ScriptBlock { # if using the above parser, .Data here will just be a plain string Write-PodeTextResponse -Value $WebEvent . Data } This is great if you want to be able to parse other content types like YAML, HCL, or many others!","title":"Adding a Parser"},{"location":"Tutorials/Middleware/Types/BodyParsing/#removing-a-parser","text":"To remove a defined parser you can use the Remove-PodeBodyParser function: Remove-PodeBodyParser -ContentType 'application/json' Note This will only remove defined custom parsers, and will not affect the inbuilt parsers.","title":"Removing a Parser"},{"location":"Tutorials/Middleware/Types/CSRF/","text":"CSRF Pode has inbuilt support for CSRF validation using tokens on web requests. The secret used to generate/validate the tokens can be stored in either sessions or signed cookies. When configured, the middleware will check for, and validate, a CSRF token the on a web request for valid routes - with support to ignore specific HTTP methods. If a route fails CSRF validation, then Pode will return a 403 status code. Usage In Pode you can either validate CSRF using global middleware, or you can assign local Route middleware for specifc routes instead. The tokens needed for validation can be generated in a route and returned in the response as a hidden input element, or other payload options. By default Pode's CSRF middleware will validate on every route, except for GET, HEAD, OPTIONS, and TRACE routes. The random secret used to generate tokens can be stored using either sessions or cookies. During the verification process, the middleware will attempt to extract the CSRF token from either of the query string, payload or header. In all scenarios the name of the of the token should always be pode.csrf . Middleware To setup global CSRF middleware in Pode you can use the Enable-PodeCsrfMiddleware function. This will let you configure how CSRF works, as well as add the middleware to Pode for you. You can use the -IgnoreMethods parameter to supply a custom array of HTTP methods that validation should skip. If you supply this an empty array ( -IgnoreMethods @() ) then CSRF will run on all routes - even GET, HEAD, OPTIONS, and TRACE. The secret used to generate a token is, by default, stored using sessions (so you'll need session middleware enabled). You can use cookies by supplying the -Cookie switch and the -Secret parameter to sign the cookies (this secret is different to the internal random secret CSRF uses to make tokens). The below code will setup default CSRF middleware, which will store the random secret using sessions (so session middleware is required), and will ignore the default HTTP methods of GET, HEAD, OPTIONS, TRACE: Enable-PodeSessionMiddleware -Duration 120 Enable-PodeCsrfMiddleware Once enabled, you can then use the New-PodeCsrfToken function to generate CSRF tokens (see below ). Routes If you only wish to have CSRF checks on specific routes, then you can use the Get-PodeCsrfMiddleware function. The function will return CSRF middleware that you can assign to the -Middleware on routes. However, if you use this approach you will first need to initialise CSRF - so you can generate tokens, and specify where the random secrets are stored. To do this, you can use the Initialize-PodeCsrf function. The below code will intialise CSRF to work using cookies. it will then create a route and pass the CSRF middleware to it explicitly: Start-PodeServer { Initialize-PodeCsrf -Secret 'to-your-witcher' -UseCookies Add-PodeRoute -Method Post -Path '/users' -Middleware ( Get-PodeCsrfMiddleware ) -ScriptBlock { Write-PodeJsonResponse -Value @{ Users = @() } } } Once initialised, you can then use the New-PodeCsrfToken function to generate CSRF tokens (see below ). Tokens The New-PodeCsrfToken function allows you to generate tokens. It will randomly generate a token that you can use in your web-pages, such as in hidden form inputs or meta elements for AJAX requests. The token itself is formed using a secure random secret key, and a random salt. To generate the token, you could use the following example: Start-PodeServer { Enable-PodeSessionMiddleware -Duration 120 Enable-PodeCsrfMiddleware Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'login' -Data @{ 'token' = ( New-PodeCsrfToken ) } } } This will return a token as a string value. When you set this token in a hidden form input, the name of the input must be pode.csrf . The same applies to when sending the token via AJAX requests - in the query string, payload or header, the token should be named as pode.csrf . Example The following example will configure CSRF as global middleware, and supply a token for the <form> in the index page. The POST route will require the token to be supplied, otherwise a 403 status code will be returned. server.ps1 Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Set-PodeViewEngine -Type Pode # setup session and csrf middleware Enable-PodeSessionMiddleware -Duration 120 Enable-PodeCsrfMiddleware # this route will work, as GET methods are ignored by CSRF by default Add-PodeRoute -Method Get -Path '/' -ScriptBlock { $token = ( New-PodeCsrfToken ) Write-PodeViewResponse -Path 'index' -Data @{ 'csrfToken' = $token } -FlashMessages } # POST route for form which will require the csrf token from above Add-PodeRoute -Method Post -Path '/token' -ScriptBlock { Add-PodeFlashMessage -Name 'message' -Message $WebEvent . Data [ 'message' ] Move-PodeResponseUrl -Url '/' } } views/index.pode < html > < head > < title > CSRF Example Page </ title > </ head > < body > < h1 > Example form using a CSRF token </ h1 > < p > Clicking submit will just reload the page with your message </ p > < form action = '/token' method = 'POST' > <!-- the hidden input for the CSRF token needs to have the name 'pode.csrf' --> < input type = 'hidden' name = 'pode.csrf' value = '$($data.csrfToken)' /> < input type = 'text' name = 'message' placeholder = 'Enter any random text' /> < input type = 'submit' value = 'Submit' /> </ form > <!-- on the page reload, display your message --> $(if ($data.flash['message']) { \" < p > $($data.flash['message']) </ p > \" }) </ body > </ html >","title":"CSRF"},{"location":"Tutorials/Middleware/Types/CSRF/#csrf","text":"Pode has inbuilt support for CSRF validation using tokens on web requests. The secret used to generate/validate the tokens can be stored in either sessions or signed cookies. When configured, the middleware will check for, and validate, a CSRF token the on a web request for valid routes - with support to ignore specific HTTP methods. If a route fails CSRF validation, then Pode will return a 403 status code.","title":"CSRF"},{"location":"Tutorials/Middleware/Types/CSRF/#usage","text":"In Pode you can either validate CSRF using global middleware, or you can assign local Route middleware for specifc routes instead. The tokens needed for validation can be generated in a route and returned in the response as a hidden input element, or other payload options. By default Pode's CSRF middleware will validate on every route, except for GET, HEAD, OPTIONS, and TRACE routes. The random secret used to generate tokens can be stored using either sessions or cookies. During the verification process, the middleware will attempt to extract the CSRF token from either of the query string, payload or header. In all scenarios the name of the of the token should always be pode.csrf .","title":"Usage"},{"location":"Tutorials/Middleware/Types/CSRF/#middleware","text":"To setup global CSRF middleware in Pode you can use the Enable-PodeCsrfMiddleware function. This will let you configure how CSRF works, as well as add the middleware to Pode for you. You can use the -IgnoreMethods parameter to supply a custom array of HTTP methods that validation should skip. If you supply this an empty array ( -IgnoreMethods @() ) then CSRF will run on all routes - even GET, HEAD, OPTIONS, and TRACE. The secret used to generate a token is, by default, stored using sessions (so you'll need session middleware enabled). You can use cookies by supplying the -Cookie switch and the -Secret parameter to sign the cookies (this secret is different to the internal random secret CSRF uses to make tokens). The below code will setup default CSRF middleware, which will store the random secret using sessions (so session middleware is required), and will ignore the default HTTP methods of GET, HEAD, OPTIONS, TRACE: Enable-PodeSessionMiddleware -Duration 120 Enable-PodeCsrfMiddleware Once enabled, you can then use the New-PodeCsrfToken function to generate CSRF tokens (see below ).","title":"Middleware"},{"location":"Tutorials/Middleware/Types/CSRF/#routes","text":"If you only wish to have CSRF checks on specific routes, then you can use the Get-PodeCsrfMiddleware function. The function will return CSRF middleware that you can assign to the -Middleware on routes. However, if you use this approach you will first need to initialise CSRF - so you can generate tokens, and specify where the random secrets are stored. To do this, you can use the Initialize-PodeCsrf function. The below code will intialise CSRF to work using cookies. it will then create a route and pass the CSRF middleware to it explicitly: Start-PodeServer { Initialize-PodeCsrf -Secret 'to-your-witcher' -UseCookies Add-PodeRoute -Method Post -Path '/users' -Middleware ( Get-PodeCsrfMiddleware ) -ScriptBlock { Write-PodeJsonResponse -Value @{ Users = @() } } } Once initialised, you can then use the New-PodeCsrfToken function to generate CSRF tokens (see below ).","title":"Routes"},{"location":"Tutorials/Middleware/Types/CSRF/#tokens","text":"The New-PodeCsrfToken function allows you to generate tokens. It will randomly generate a token that you can use in your web-pages, such as in hidden form inputs or meta elements for AJAX requests. The token itself is formed using a secure random secret key, and a random salt. To generate the token, you could use the following example: Start-PodeServer { Enable-PodeSessionMiddleware -Duration 120 Enable-PodeCsrfMiddleware Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'login' -Data @{ 'token' = ( New-PodeCsrfToken ) } } } This will return a token as a string value. When you set this token in a hidden form input, the name of the input must be pode.csrf . The same applies to when sending the token via AJAX requests - in the query string, payload or header, the token should be named as pode.csrf .","title":"Tokens"},{"location":"Tutorials/Middleware/Types/CSRF/#example","text":"The following example will configure CSRF as global middleware, and supply a token for the <form> in the index page. The POST route will require the token to be supplied, otherwise a 403 status code will be returned. server.ps1 Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Set-PodeViewEngine -Type Pode # setup session and csrf middleware Enable-PodeSessionMiddleware -Duration 120 Enable-PodeCsrfMiddleware # this route will work, as GET methods are ignored by CSRF by default Add-PodeRoute -Method Get -Path '/' -ScriptBlock { $token = ( New-PodeCsrfToken ) Write-PodeViewResponse -Path 'index' -Data @{ 'csrfToken' = $token } -FlashMessages } # POST route for form which will require the csrf token from above Add-PodeRoute -Method Post -Path '/token' -ScriptBlock { Add-PodeFlashMessage -Name 'message' -Message $WebEvent . Data [ 'message' ] Move-PodeResponseUrl -Url '/' } } views/index.pode < html > < head > < title > CSRF Example Page </ title > </ head > < body > < h1 > Example form using a CSRF token </ h1 > < p > Clicking submit will just reload the page with your message </ p > < form action = '/token' method = 'POST' > <!-- the hidden input for the CSRF token needs to have the name 'pode.csrf' --> < input type = 'hidden' name = 'pode.csrf' value = '$($data.csrfToken)' /> < input type = 'text' name = 'message' placeholder = 'Enter any random text' /> < input type = 'submit' value = 'Submit' /> </ form > <!-- on the page reload, display your message --> $(if ($data.flash['message']) { \" < p > $($data.flash['message']) </ p > \" }) </ body > </ html >","title":"Example"},{"location":"Tutorials/Middleware/Types/RateLimiting/","text":"Rate Limiting Rate limiting in Pode is inbuilt Middleware, that allows you to specify a maximum number of requests, per second, for an IP, Route, or Endpoint. When rate limiting a subnet you can choose to either individually limit each IP address in a subnet, or you can group all IPs in a subnet together under a single limit. Usage To setup rate limiting in Pode you use the Add-PodeLimitRule function. IP Address You can either rate limit a specific IP address, a subnet mask, or every address using all . You can also supply an array of addresses/subnets as well, rather than one at a time. Info If an IP address or subnet hits the limit within a second, then a 429 response is returned and the connection immediately closed. For SMTP/TCP servers the connection is just closed with no response. The following example will limit requests from localhost to 5 requests per second: Add-PodeLimitRule -Type IP -Values 127 . 0 . 0 . 1 -Limit 5 -Seconds 1 Whereas the following example will rate limit requests from a subnet. By default each IP address within the subnet are limited to 5 requests per second: Add-PodeLimitRule -Type IP -Values 10 . 10 . 0 . 0 / 24 -Limit 5 -Seconds 1 To treat all IP addresses within by a subnet as one, using a shared limit, you can supply the -Group switch: Add-PodeLimitRule -Type IP -Values 10 . 10 . 0 . 0 / 24 -Limit 5 -Seconds 1 -Group To rate limit requests from multiple addresses in one line, the following example will work: Add-PodeLimitRule -Type IP -Values @( '192.168.1.1' , '192.168.1.2' ) -Limit 5 -Seconds 1 Finally, to rate limit requests from every address you can use the all keyword: Add-PodeLimitRule -Type IP -Values all -Limit 5 -Seconds 1 Routes To assign rate limiting to a specific route, you can pass its path to Add-PodeLimitRule . The following with limit the /downloads route to 5 requests every second: Add-PodeLimitRule -Type Route -Values '/downloads' -Limit 5 -Seconds 1 Endpoints To assign rate limiting to a specific endpoint, you can pass an enpoint's name to Add-PodeLimitRule . The following with limit the User endpoint to 5 requests every second: Add-PodeEndpoint -Address 127 . 0 . 0 . 2 -Port 8090 -Protocol Http -Name 'Admin' Add-PodeEndpoint -Address 127 . 0 . 0 . 3 -Port 8090 -Protocol Http -Name 'User' Add-PodeLimitRule -Type Endpoint -Values 'User' -Limit 5 -Seconds 1 Overriding Since rate limiting is an inbuilt Middleware, then when you setup rules via the Add-PodeLimitRule function the point at which the limit is checked on the request lifecycle is fixed (see here ). This means you can override the inbuilt rate limiting logic, with your own custom logic, using the Add-PodeMiddleware function. To override the rate limiting logic you can pass __pode_mw_rate_limit__ to the -Name parameter of the Add-PodeMiddleware function. The following example uses rate limiting, and defines Middleware that will override the inbuilt limiting logic: Start-PodeServer { # attach to port 8080 Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # assign limiting to localhost Add-PodeLimitRule -Type IP -Values @( '127.0.0.1' , '[::1]' ) -Limit 10 -Seconds 2 # create middleware to override the inbuilt rate limiting logic. # this will ignore the limiting part, and just allow the request Add-PodeMiddleware -Name '__pode_mw_rate_limit__' -ScriptBlock { return $true } # basic route Add-PodeRoute -Method Get -Path '/' -ScriptBlock { # logic } }","title":"Rate Limiting"},{"location":"Tutorials/Middleware/Types/RateLimiting/#rate-limiting","text":"Rate limiting in Pode is inbuilt Middleware, that allows you to specify a maximum number of requests, per second, for an IP, Route, or Endpoint. When rate limiting a subnet you can choose to either individually limit each IP address in a subnet, or you can group all IPs in a subnet together under a single limit.","title":"Rate Limiting"},{"location":"Tutorials/Middleware/Types/RateLimiting/#usage","text":"To setup rate limiting in Pode you use the Add-PodeLimitRule function.","title":"Usage"},{"location":"Tutorials/Middleware/Types/RateLimiting/#ip-address","text":"You can either rate limit a specific IP address, a subnet mask, or every address using all . You can also supply an array of addresses/subnets as well, rather than one at a time. Info If an IP address or subnet hits the limit within a second, then a 429 response is returned and the connection immediately closed. For SMTP/TCP servers the connection is just closed with no response. The following example will limit requests from localhost to 5 requests per second: Add-PodeLimitRule -Type IP -Values 127 . 0 . 0 . 1 -Limit 5 -Seconds 1 Whereas the following example will rate limit requests from a subnet. By default each IP address within the subnet are limited to 5 requests per second: Add-PodeLimitRule -Type IP -Values 10 . 10 . 0 . 0 / 24 -Limit 5 -Seconds 1 To treat all IP addresses within by a subnet as one, using a shared limit, you can supply the -Group switch: Add-PodeLimitRule -Type IP -Values 10 . 10 . 0 . 0 / 24 -Limit 5 -Seconds 1 -Group To rate limit requests from multiple addresses in one line, the following example will work: Add-PodeLimitRule -Type IP -Values @( '192.168.1.1' , '192.168.1.2' ) -Limit 5 -Seconds 1 Finally, to rate limit requests from every address you can use the all keyword: Add-PodeLimitRule -Type IP -Values all -Limit 5 -Seconds 1","title":"IP Address"},{"location":"Tutorials/Middleware/Types/RateLimiting/#routes","text":"To assign rate limiting to a specific route, you can pass its path to Add-PodeLimitRule . The following with limit the /downloads route to 5 requests every second: Add-PodeLimitRule -Type Route -Values '/downloads' -Limit 5 -Seconds 1","title":"Routes"},{"location":"Tutorials/Middleware/Types/RateLimiting/#endpoints","text":"To assign rate limiting to a specific endpoint, you can pass an enpoint's name to Add-PodeLimitRule . The following with limit the User endpoint to 5 requests every second: Add-PodeEndpoint -Address 127 . 0 . 0 . 2 -Port 8090 -Protocol Http -Name 'Admin' Add-PodeEndpoint -Address 127 . 0 . 0 . 3 -Port 8090 -Protocol Http -Name 'User' Add-PodeLimitRule -Type Endpoint -Values 'User' -Limit 5 -Seconds 1","title":"Endpoints"},{"location":"Tutorials/Middleware/Types/RateLimiting/#overriding","text":"Since rate limiting is an inbuilt Middleware, then when you setup rules via the Add-PodeLimitRule function the point at which the limit is checked on the request lifecycle is fixed (see here ). This means you can override the inbuilt rate limiting logic, with your own custom logic, using the Add-PodeMiddleware function. To override the rate limiting logic you can pass __pode_mw_rate_limit__ to the -Name parameter of the Add-PodeMiddleware function. The following example uses rate limiting, and defines Middleware that will override the inbuilt limiting logic: Start-PodeServer { # attach to port 8080 Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # assign limiting to localhost Add-PodeLimitRule -Type IP -Values @( '127.0.0.1' , '[::1]' ) -Limit 10 -Seconds 2 # create middleware to override the inbuilt rate limiting logic. # this will ignore the limiting part, and just allow the request Add-PodeMiddleware -Name '__pode_mw_rate_limit__' -ScriptBlock { return $true } # basic route Add-PodeRoute -Method Get -Path '/' -ScriptBlock { # logic } }","title":"Overriding"},{"location":"Tutorials/Middleware/Types/Security/","text":"Security Headers The security headers middleware runs at the beginning of every request, and if any security headers are defined they will be added onto the response. The following headers are currently supported, but you can add custom header values: Access-Control-Max-Age Access-Control-Allow-Methods Access-Control-Allow-Origin Access-Control-Allow-Headers Cross-Origin-Embedder-Policy Cross-Origin-Resource-Policy Cross-Origin-Opener-Policy Strict-Transport-Security Content-Security-Policy X-XSS-Protection Permissions-Policy X-Frame-Options X-Content-Type-Options Referrer-Policy Types Pode has an inbuilt wrapper to easily toggle all headers with default values: Set-PodeSecurity . This function lets you specify a -Type of either Simple or Strict . The specified value will setup the headers with the default values defined below. You can also force X-XSS-Protection to use blocking mode if you want to support older browsers, or enable Strict-Transport-Security via -UseHsts . For example, to configure Simple security with Strict Transport: Set-PodeSecurity -Type Simple -UseHsts To remove all configured values, use Remove-PodeSecurity . Simple The following values are used for each header when the Simple type is supplied: Name Value Access-Control-Max-Age 7200 Access-Control-Allow-Origin * Access-Control-Allow-Methods * Access-Control-Allow-Headers * Cross-Origin-Embedder-Policy require-corp Cross-Origin-Resource-Policy same-origin Cross-Origin-Opener-Policy same-origin Content-Security-Policy default-src 'self' X-XSS-Protection 0 Permissions-Policy accelerometer=(), autoplay=(self), camera=(), display-capture=(self), fullscreen=(self), geolocation=(self), gyroscope=(self), magnetometer=(self), microphone=(), payment=(), picture-in-picture=(self), sync-xhr=(), usb=() X-Frame-Options SAMEORIGIN X-Content-Type-Options nosniff Referred-Policy strict-origin Strict The following values are used for each header when the Strict type is supplied: Name Value Access-Control-Max-Age 7200 Access-Control-Allow-Methods * Access-Control-Allow-Origin * Access-Control-Allow-Headers * Cross-Origin-Embedder-Policy require-corp Cross-Origin-Resource-Policy same-origin Cross-Origin-Opener-Policy same-origin Strict-Transport-Security max-age=31536000; includeSubDomains Content-Security-Policy default-src 'self' X-XSS-Protection 0 Permissions-Policy accelerometer=(), autoplay=(self), camera=(), display-capture=(self), fullscreen=(self), geolocation=(self), gyroscope=(self), magnetometer=(self), microphone=(), payment=(), picture-in-picture=(self), sync-xhr=(), usb=() X-Frame-Options DENY X-Content-Type-Options nosniff Referred-Policy no-referrer Headers You can setup the values of headers individually by using their relevant functions. You can also use Set-PodeSecurity to configure all the defaults, and then set/add custom values for a single header. For example, you can configure Simple values, and then add *.twitter.com to the default-src of the Content-Security-Policy header using Add-PodeSecurityContentSecurityPolicy : Set-PodeSecurity -Type Simple Add-PodeSecurityContentSecurityPolicy -Default '*.twitter.com' This will make the 'default-src' value: 'self' *.twitter.com . Conversely, you could remove the header completely using Remove-PodeSecurityContentSecurityPolicy , or override the whole value using Set-PodeSecurityContentSecurityPolicy . Access Control The following functions exist: Set-PodeSecurityAccessControl Remove-PodeSecurityAccessControl Specifies the values for the following headers: Access-Control-Max-Age Access-Control-Allow-Methods Access-Control-Allow-Origin Access-Control-Allow-Headers For example: Set-PodeSecurityAccessControl -Origin '*' -Methods '*' -Headers '*' -Duration 7200 Cross Origin The following functions exist: Set-PodeSecurityCrossOrigin Remove-PodeSecurityCrossOrigin Specifies the values for the following headers: Cross-Origin-Embedder-Policy Cross-Origin-Resource-Policy Cross-Origin-Opener-Policy For example: Set-PodeSecurityCrossOrigin -Embed Require-Corp -Open Same-Origin -Resource Same-Origin Strict Transport The following functions exist: Set-PodeSecurityStrictTransportSecurity Remove-PodeSecurityStrictTransportSecurity The Strict-Transport-Security header enforces the use of HTTPS from the browser. For example: Set-PodeSecurityStrictTransportSecurity -Duration 31536000 -IncludeSubDomains Content Security The following functions exist: Add-PodeSecurityContentSecurityPolicy Set-PodeSecurityContentSecurityPolicy Remove-PodeSecurityContentSecurityPolicy The Content-Security-Policy header controls a whitelist of approved sourced from which the browser can load resoures. For example: Set-PodeSecurityContentSecurityPolicy -Default 'self' -Image 'self' , 'data' Permissions Policy The following functions exist: Set-PodeSecurityPermissionsPolicy Remove-PodeSecurityPermissionsPolicy The Permissions-Policy header controls which features/APIs a site can use in the browser. For example: Set-PodeSecurityPermissionsPolicy -SyncXhr 'none' -Camera 'none' -Geolocation 'self' Frame Options The following functions exist: Set-PodeSecurityFrameOptions Remove-PodeSecurityFrameOptions The X-Frame-Options header tells the browser whether your site support framing or not. For example: Set-PodeSecurityFrameOptions -Type SameOrigin ContentType Options The following functions exist: Set-PodeSecurityContentTypeOptions Remove-PodeSecurityContentTypeOptions The Content-Type-Options header only has one value: nosniff . So you enable, you just need to call the Set function, for example: Set-PodeSecurityContentTypeOptions Referrer Policy The following functions exist: Set-PodeSecurityReferrerPolicy Remove-PodeSecurityReferrerPolicy The Referrer-Policy header tells the browser how much information to include in the Referer header. For example: Set-PodeSecurityReferrerPolicy -Type Strict-Origin Custom There could be some headers for security that Pode doesn't support, but that you need. In this case you can use Add-PodeSecurityHeader to specify a custom header and value that will be added: Add-PodeSecurityHeader -Name 'X-Security-Header' -Value 'Value'","title":"Security Headers"},{"location":"Tutorials/Middleware/Types/Security/#security-headers","text":"The security headers middleware runs at the beginning of every request, and if any security headers are defined they will be added onto the response. The following headers are currently supported, but you can add custom header values: Access-Control-Max-Age Access-Control-Allow-Methods Access-Control-Allow-Origin Access-Control-Allow-Headers Cross-Origin-Embedder-Policy Cross-Origin-Resource-Policy Cross-Origin-Opener-Policy Strict-Transport-Security Content-Security-Policy X-XSS-Protection Permissions-Policy X-Frame-Options X-Content-Type-Options Referrer-Policy","title":"Security Headers"},{"location":"Tutorials/Middleware/Types/Security/#types","text":"Pode has an inbuilt wrapper to easily toggle all headers with default values: Set-PodeSecurity . This function lets you specify a -Type of either Simple or Strict . The specified value will setup the headers with the default values defined below. You can also force X-XSS-Protection to use blocking mode if you want to support older browsers, or enable Strict-Transport-Security via -UseHsts . For example, to configure Simple security with Strict Transport: Set-PodeSecurity -Type Simple -UseHsts To remove all configured values, use Remove-PodeSecurity .","title":"Types"},{"location":"Tutorials/Middleware/Types/Security/#simple","text":"The following values are used for each header when the Simple type is supplied: Name Value Access-Control-Max-Age 7200 Access-Control-Allow-Origin * Access-Control-Allow-Methods * Access-Control-Allow-Headers * Cross-Origin-Embedder-Policy require-corp Cross-Origin-Resource-Policy same-origin Cross-Origin-Opener-Policy same-origin Content-Security-Policy default-src 'self' X-XSS-Protection 0 Permissions-Policy accelerometer=(), autoplay=(self), camera=(), display-capture=(self), fullscreen=(self), geolocation=(self), gyroscope=(self), magnetometer=(self), microphone=(), payment=(), picture-in-picture=(self), sync-xhr=(), usb=() X-Frame-Options SAMEORIGIN X-Content-Type-Options nosniff Referred-Policy strict-origin","title":"Simple"},{"location":"Tutorials/Middleware/Types/Security/#strict","text":"The following values are used for each header when the Strict type is supplied: Name Value Access-Control-Max-Age 7200 Access-Control-Allow-Methods * Access-Control-Allow-Origin * Access-Control-Allow-Headers * Cross-Origin-Embedder-Policy require-corp Cross-Origin-Resource-Policy same-origin Cross-Origin-Opener-Policy same-origin Strict-Transport-Security max-age=31536000; includeSubDomains Content-Security-Policy default-src 'self' X-XSS-Protection 0 Permissions-Policy accelerometer=(), autoplay=(self), camera=(), display-capture=(self), fullscreen=(self), geolocation=(self), gyroscope=(self), magnetometer=(self), microphone=(), payment=(), picture-in-picture=(self), sync-xhr=(), usb=() X-Frame-Options DENY X-Content-Type-Options nosniff Referred-Policy no-referrer","title":"Strict"},{"location":"Tutorials/Middleware/Types/Security/#headers","text":"You can setup the values of headers individually by using their relevant functions. You can also use Set-PodeSecurity to configure all the defaults, and then set/add custom values for a single header. For example, you can configure Simple values, and then add *.twitter.com to the default-src of the Content-Security-Policy header using Add-PodeSecurityContentSecurityPolicy : Set-PodeSecurity -Type Simple Add-PodeSecurityContentSecurityPolicy -Default '*.twitter.com' This will make the 'default-src' value: 'self' *.twitter.com . Conversely, you could remove the header completely using Remove-PodeSecurityContentSecurityPolicy , or override the whole value using Set-PodeSecurityContentSecurityPolicy .","title":"Headers"},{"location":"Tutorials/Middleware/Types/Security/#access-control","text":"The following functions exist: Set-PodeSecurityAccessControl Remove-PodeSecurityAccessControl Specifies the values for the following headers: Access-Control-Max-Age Access-Control-Allow-Methods Access-Control-Allow-Origin Access-Control-Allow-Headers For example: Set-PodeSecurityAccessControl -Origin '*' -Methods '*' -Headers '*' -Duration 7200","title":"Access Control"},{"location":"Tutorials/Middleware/Types/Security/#cross-origin","text":"The following functions exist: Set-PodeSecurityCrossOrigin Remove-PodeSecurityCrossOrigin Specifies the values for the following headers: Cross-Origin-Embedder-Policy Cross-Origin-Resource-Policy Cross-Origin-Opener-Policy For example: Set-PodeSecurityCrossOrigin -Embed Require-Corp -Open Same-Origin -Resource Same-Origin","title":"Cross Origin"},{"location":"Tutorials/Middleware/Types/Security/#strict-transport","text":"The following functions exist: Set-PodeSecurityStrictTransportSecurity Remove-PodeSecurityStrictTransportSecurity The Strict-Transport-Security header enforces the use of HTTPS from the browser. For example: Set-PodeSecurityStrictTransportSecurity -Duration 31536000 -IncludeSubDomains","title":"Strict Transport"},{"location":"Tutorials/Middleware/Types/Security/#content-security","text":"The following functions exist: Add-PodeSecurityContentSecurityPolicy Set-PodeSecurityContentSecurityPolicy Remove-PodeSecurityContentSecurityPolicy The Content-Security-Policy header controls a whitelist of approved sourced from which the browser can load resoures. For example: Set-PodeSecurityContentSecurityPolicy -Default 'self' -Image 'self' , 'data'","title":"Content Security"},{"location":"Tutorials/Middleware/Types/Security/#permissions-policy","text":"The following functions exist: Set-PodeSecurityPermissionsPolicy Remove-PodeSecurityPermissionsPolicy The Permissions-Policy header controls which features/APIs a site can use in the browser. For example: Set-PodeSecurityPermissionsPolicy -SyncXhr 'none' -Camera 'none' -Geolocation 'self'","title":"Permissions Policy"},{"location":"Tutorials/Middleware/Types/Security/#frame-options","text":"The following functions exist: Set-PodeSecurityFrameOptions Remove-PodeSecurityFrameOptions The X-Frame-Options header tells the browser whether your site support framing or not. For example: Set-PodeSecurityFrameOptions -Type SameOrigin","title":"Frame Options"},{"location":"Tutorials/Middleware/Types/Security/#contenttype-options","text":"The following functions exist: Set-PodeSecurityContentTypeOptions Remove-PodeSecurityContentTypeOptions The Content-Type-Options header only has one value: nosniff . So you enable, you just need to call the Set function, for example: Set-PodeSecurityContentTypeOptions","title":"ContentType Options"},{"location":"Tutorials/Middleware/Types/Security/#referrer-policy","text":"The following functions exist: Set-PodeSecurityReferrerPolicy Remove-PodeSecurityReferrerPolicy The Referrer-Policy header tells the browser how much information to include in the Referer header. For example: Set-PodeSecurityReferrerPolicy -Type Strict-Origin","title":"Referrer Policy"},{"location":"Tutorials/Middleware/Types/Security/#custom","text":"There could be some headers for security that Pode doesn't support, but that you need. In this case you can use Add-PodeSecurityHeader to specify a custom header and value that will be added: Add-PodeSecurityHeader -Name 'X-Security-Header' -Value 'Value'","title":"Custom"},{"location":"Tutorials/Middleware/Types/Sessions/","text":"Sessions Session Middleware is supported on web requests and responses in the form of signed-cookies/headers and server-side data storage. When configured, the middleware will check for a session-cookie/header on the request; if a cookie/header is not found on the request, or the session is not in storage, then a new session is created and attached to the response. If there is a session, then the appropriate data for that session is loaded from storage. The duration of the session-cookie/header can be specified, as well as whether to extend the duration each time on each request. A secret-key to sign sessions can be supplied (default is a random GUID), as well as the ability to specify custom data stores - the default is in-memory, but custom storage could be anything like Redis/MongoDB/etc. Note Using sessions via headers is best used with REST APIs and the CLI. It's not advised to use them for normal websites, as browsers don't send back response headers in new requests - unlike cookies. Usage To initialise sessions in Pode use Enable-PodeSessionMiddleware . This function will configure and automatically create the Middleware needed to enable sessions. By default sessions are set to use cookies, but support is also available for headers. Sessions are automatically signed using a random GUID. For Pode running on a single server using the default in-memory storage this is OK, however if you're running Pode on multiple servers, or if you're defining a custom storage then a -Secret is required - this is so that sessions from different servers, or after a server restart, don't become corrupt and unusable. Cookies The following is an example of how to setup session middleware using cookies. Each session created will expire after 2mins, but the expiry time will be extended each time the session is used: Start-PodeServer { Enable-PodeSessionMiddleware -Duration 120 -Extend } The default name of the session cookie is pode.sid , but this can be customised using the -Name parameter. Headers Sessions are also supported using headers - useful for CLI requests. The following example will enable sessions use headers instead of cookies: Start-PodeServer { Enable-PodeSessionMiddleware -Duration 120 -Extend -UseHeaders } When using headers, the default name of the session header in the request/response is pode.sid - this can be customised using the -Name parameter. When you make an initial request to authenticate some user, the pode.sid header will be returned in the response. You can then use the value of this header in subsequent requests for the authenticated user, and then make a call using the session one last time against some route to expire the session - or just let it automatically expire. SessionIds The inbuilt SessionId generator used for sessions is a GUID, but you can supply a custom generator using the -Generator parameter. If supplied, the -Generator is a scriptblock that must return a valid string. The string itself should be a random unique value, that can be used as a unique session identifier. Within a route, or middleware, you can get the current authenticated sessionId using Get-PodeSessionId . If there is no session, or the session is not authenticated, then $null is returned. This function can also returned the fully signed sessionId as well. If you want the sessionId even if it's not authenticated, then you can supply -Force to get the sessionId back. Strict You can flag sessions as being strict using the -Strict switch. Strict sessions will extend the signing process by also using the client's UserAgent and RemoteIPAddress, to help prevent session sharing on different browsers/consoles. Pode will automatically extend the Secret for signing for you, whether you're using the default GUID, or supplying a specific -Secret value. Storage The inbuilt storage for sessions is a simple in-memory store - with auto-cleanup for expired sessions. You can define a custom storage by supplying a psobject to the -Storage parameter, and also note that a -Secret will be required. The psobject supplied should have the following NoteProperty scriptblock members: [hashtable] Get ( [string] $sessionId ) [void] Set ( [string] $sessionId , [hashtable] $data , [datetime] $expiry ) [void] Delete ( [string] $sessionId ) For example, the following is a mock up of a Storage for Redis (note that the functions are fake): # create the object $store = New-Object -TypeName psobject # add a Get property for retreiving a session's data by SessionId $store | Add-Member -MemberType NoteProperty -Name Get -Value { param ( $sessionId ) return ( Get-RedisKey -Key $sessionId ) } # add a Set property to save a session's data $store | Add-Member -MemberType NoteProperty -Name Set -Value { param ( $sessionId , $data , $expiry ) Set-RedisKey -Key $sessionId -Value $data -TimeToLive $expiry } # add a Delete property to delete a session's data by SessionId $store | Add-Member -MemberType NoteProperty -Name Delete -Value { param ( $sessionId ) Remove-RedisKey -Key $sessionId } # enable session middleware - a secret is required Enable-PodeSessionMiddleware -Duration 120 -Storage $store -Secret 'schwifty' Session Data To add data to a session you can utilise the .Session.Data property within the web event object accessible in a Route - or other Middleware. The data will be saved at the end of the route automatically using Endware. When a request is made using the same sessionId, the data is loaded from the store. For example, incrementing some view counter: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { $WebEvent . Session . Data . Views ++ } You can also use the $session: variable scope, which will get/set data on the current session for the name supplied. You can use $session: anywhere a $WebEvent is available - such as routes, middleware, authentication and endware. The same view counter example above: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { $session : Views ++ } $session: can only be used in the main scriptblocks of routes, etc. If you attempt to use it in a function of a custom module, it will fail; even if you're using the function in a route. Pode remaps $session: on server start, and can only do this to the main scriptblocks supplied to functions such as Add-PodeRoute . Example An example of using sessions in a Route to increment a views counter could be done as follows (the counter will continue to increment on each call to the route until the session expires after 2mins): Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Enable-PodeSessionMiddleware -Duration 120 Add-PodeRoute -Method Get -Path '/' -ScriptBlock { $WebEvent . Session . Data . Views ++ Write-PodeJsonResponse -Value @{ 'Views' = $WebEvent . Session . Data . Views } } }","title":"Sessions"},{"location":"Tutorials/Middleware/Types/Sessions/#sessions","text":"Session Middleware is supported on web requests and responses in the form of signed-cookies/headers and server-side data storage. When configured, the middleware will check for a session-cookie/header on the request; if a cookie/header is not found on the request, or the session is not in storage, then a new session is created and attached to the response. If there is a session, then the appropriate data for that session is loaded from storage. The duration of the session-cookie/header can be specified, as well as whether to extend the duration each time on each request. A secret-key to sign sessions can be supplied (default is a random GUID), as well as the ability to specify custom data stores - the default is in-memory, but custom storage could be anything like Redis/MongoDB/etc. Note Using sessions via headers is best used with REST APIs and the CLI. It's not advised to use them for normal websites, as browsers don't send back response headers in new requests - unlike cookies.","title":"Sessions"},{"location":"Tutorials/Middleware/Types/Sessions/#usage","text":"To initialise sessions in Pode use Enable-PodeSessionMiddleware . This function will configure and automatically create the Middleware needed to enable sessions. By default sessions are set to use cookies, but support is also available for headers. Sessions are automatically signed using a random GUID. For Pode running on a single server using the default in-memory storage this is OK, however if you're running Pode on multiple servers, or if you're defining a custom storage then a -Secret is required - this is so that sessions from different servers, or after a server restart, don't become corrupt and unusable.","title":"Usage"},{"location":"Tutorials/Middleware/Types/Sessions/#cookies","text":"The following is an example of how to setup session middleware using cookies. Each session created will expire after 2mins, but the expiry time will be extended each time the session is used: Start-PodeServer { Enable-PodeSessionMiddleware -Duration 120 -Extend } The default name of the session cookie is pode.sid , but this can be customised using the -Name parameter.","title":"Cookies"},{"location":"Tutorials/Middleware/Types/Sessions/#headers","text":"Sessions are also supported using headers - useful for CLI requests. The following example will enable sessions use headers instead of cookies: Start-PodeServer { Enable-PodeSessionMiddleware -Duration 120 -Extend -UseHeaders } When using headers, the default name of the session header in the request/response is pode.sid - this can be customised using the -Name parameter. When you make an initial request to authenticate some user, the pode.sid header will be returned in the response. You can then use the value of this header in subsequent requests for the authenticated user, and then make a call using the session one last time against some route to expire the session - or just let it automatically expire.","title":"Headers"},{"location":"Tutorials/Middleware/Types/Sessions/#sessionids","text":"The inbuilt SessionId generator used for sessions is a GUID, but you can supply a custom generator using the -Generator parameter. If supplied, the -Generator is a scriptblock that must return a valid string. The string itself should be a random unique value, that can be used as a unique session identifier. Within a route, or middleware, you can get the current authenticated sessionId using Get-PodeSessionId . If there is no session, or the session is not authenticated, then $null is returned. This function can also returned the fully signed sessionId as well. If you want the sessionId even if it's not authenticated, then you can supply -Force to get the sessionId back.","title":"SessionIds"},{"location":"Tutorials/Middleware/Types/Sessions/#strict","text":"You can flag sessions as being strict using the -Strict switch. Strict sessions will extend the signing process by also using the client's UserAgent and RemoteIPAddress, to help prevent session sharing on different browsers/consoles. Pode will automatically extend the Secret for signing for you, whether you're using the default GUID, or supplying a specific -Secret value.","title":"Strict"},{"location":"Tutorials/Middleware/Types/Sessions/#storage","text":"The inbuilt storage for sessions is a simple in-memory store - with auto-cleanup for expired sessions. You can define a custom storage by supplying a psobject to the -Storage parameter, and also note that a -Secret will be required. The psobject supplied should have the following NoteProperty scriptblock members: [hashtable] Get ( [string] $sessionId ) [void] Set ( [string] $sessionId , [hashtable] $data , [datetime] $expiry ) [void] Delete ( [string] $sessionId ) For example, the following is a mock up of a Storage for Redis (note that the functions are fake): # create the object $store = New-Object -TypeName psobject # add a Get property for retreiving a session's data by SessionId $store | Add-Member -MemberType NoteProperty -Name Get -Value { param ( $sessionId ) return ( Get-RedisKey -Key $sessionId ) } # add a Set property to save a session's data $store | Add-Member -MemberType NoteProperty -Name Set -Value { param ( $sessionId , $data , $expiry ) Set-RedisKey -Key $sessionId -Value $data -TimeToLive $expiry } # add a Delete property to delete a session's data by SessionId $store | Add-Member -MemberType NoteProperty -Name Delete -Value { param ( $sessionId ) Remove-RedisKey -Key $sessionId } # enable session middleware - a secret is required Enable-PodeSessionMiddleware -Duration 120 -Storage $store -Secret 'schwifty'","title":"Storage"},{"location":"Tutorials/Middleware/Types/Sessions/#session-data","text":"To add data to a session you can utilise the .Session.Data property within the web event object accessible in a Route - or other Middleware. The data will be saved at the end of the route automatically using Endware. When a request is made using the same sessionId, the data is loaded from the store. For example, incrementing some view counter: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { $WebEvent . Session . Data . Views ++ } You can also use the $session: variable scope, which will get/set data on the current session for the name supplied. You can use $session: anywhere a $WebEvent is available - such as routes, middleware, authentication and endware. The same view counter example above: Add-PodeRoute -Method Get -Path '/' -ScriptBlock { $session : Views ++ } $session: can only be used in the main scriptblocks of routes, etc. If you attempt to use it in a function of a custom module, it will fail; even if you're using the function in a route. Pode remaps $session: on server start, and can only do this to the main scriptblocks supplied to functions such as Add-PodeRoute .","title":"Session Data"},{"location":"Tutorials/Middleware/Types/Sessions/#example","text":"An example of using sessions in a Route to increment a views counter could be done as follows (the counter will continue to increment on each call to the route until the session expires after 2mins): Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Enable-PodeSessionMiddleware -Duration 120 Add-PodeRoute -Method Get -Path '/' -ScriptBlock { $WebEvent . Session . Data . Views ++ Write-PodeJsonResponse -Value @{ 'Views' = $WebEvent . Session . Data . Views } } }","title":"Example"},{"location":"Tutorials/Misc/CronExpressions/","text":"Cron Expressions Schedules and Auto Server Restarting in Pode use cron expressions to define when they trigger. This page is a brief overview of the expressions supported by Pode. Basic Pode supports all basic features of cron expressions in the following format: <min> <hour> <day-of-month> <month> <day-of-week> For example, if you wanted to run a schedule that triggers every midnight on a Tuesday, the following would work: 0 0 * * TUE Whereas if you wanted a schedule to trigger on the 15th of each month, at 1am: 0 1 15 * * Predefined The following table outlines some of the predefined cron expressions supported by Pode; you can use these in place of normal cron expressions: Predefined Expression @minutely * * * * * @hourly 0 * * * * @daily 0 0 * * * @weekly 0 0 * * 0 @monthly 0 0 1 * * @quarterly 0 0 1 1,4,8,7,10 * @yearly 0 0 1 1 * @annually 0 0 1 1 * @twice-hourly 0,30 * * * * @twice-daily 0 0,12 * * * @twice-weekly 0 0 * * 0,4 @twice-monthly 0 0 1,15 * * @twice-yearly 0 0 1 1,6 * @twice-annually 0 0 1 1,6 * Advanced Pode does have some support for advanced cron features, including its own placeholder: R . R : using this on an atom will use a random value between that atom's constraints, and when the expression is triggered the atom is re-randomised - you can force an initial trigger value using /R . For example: 30/R * * * * will trigger on 30mins, then a random minute afterwards; whereas using R * * * * will always trigger on a random minute between 0-59.","title":"Cron Expressions"},{"location":"Tutorials/Misc/CronExpressions/#cron-expressions","text":"Schedules and Auto Server Restarting in Pode use cron expressions to define when they trigger. This page is a brief overview of the expressions supported by Pode.","title":"Cron Expressions"},{"location":"Tutorials/Misc/CronExpressions/#basic","text":"Pode supports all basic features of cron expressions in the following format: <min> <hour> <day-of-month> <month> <day-of-week> For example, if you wanted to run a schedule that triggers every midnight on a Tuesday, the following would work: 0 0 * * TUE Whereas if you wanted a schedule to trigger on the 15th of each month, at 1am: 0 1 15 * *","title":"Basic"},{"location":"Tutorials/Misc/CronExpressions/#predefined","text":"The following table outlines some of the predefined cron expressions supported by Pode; you can use these in place of normal cron expressions: Predefined Expression @minutely * * * * * @hourly 0 * * * * @daily 0 0 * * * @weekly 0 0 * * 0 @monthly 0 0 1 * * @quarterly 0 0 1 1,4,8,7,10 * @yearly 0 0 1 1 * @annually 0 0 1 1 * @twice-hourly 0,30 * * * * @twice-daily 0 0,12 * * * @twice-weekly 0 0 * * 0,4 @twice-monthly 0 0 1,15 * * @twice-yearly 0 0 1 1,6 * @twice-annually 0 0 1 1,6 *","title":"Predefined"},{"location":"Tutorials/Misc/CronExpressions/#advanced","text":"Pode does have some support for advanced cron features, including its own placeholder: R . R : using this on an atom will use a random value between that atom's constraints, and when the expression is triggered the atom is re-randomised - you can force an initial trigger value using /R . For example: 30/R * * * * will trigger on 30mins, then a random minute afterwards; whereas using R * * * * will always trigger on a random minute between 0-59.","title":"Advanced"},{"location":"Tutorials/Misc/DesktopApp/","text":"Desktop Application Normally in Pode you define a server and run it, however if you use the Show-PodeGui function Pode will serve the server up as a desktop application. Warning Currently only supported in Windows PowerShell, and PowerShell 7 on Windows due to using WPF. Setting Server to run as Application To serve up you server as a desktop application you can just write you Pode server script as normal. The only difference is you can use the Show-PodeGui function to display the application. The Show-PodeGui function must have a Title supplied - this is the title of the application's window. The following will create a basic web server with a single page, but when the server is run it will pop up as a desktop application: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Show-PodeGui -Title 'Basic Server' Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } The page used is as follows: < html > < head > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" /> </ head > < body > < h1 > Hello, world! </ h1 > < p > Welcome to a very simple desktop app! </ p > </ body > </ html > Simple script to load Application When you run the server from your terminal, the application will open and the terminal will remain visible. However, you could have a script which opens PowerShell as hidden and launches the server. The following is a basic example of a .bat file which could be double-clicked to open the application, and then hide the terminal: powershell.exe -noprofile -windowstyle hidden -command .\\you-server-script.ps1 exit Using Chromium instead of Internet Explorer The default WPF Browser Element used by Pode is based on the system internal Internet Explorer API, which is also bound to the same Javascript and Webbrowser Limitations as Internet Explorer itself. To utilize Chromium in WPF, Pode offers support for CefSharp which adds a Chromium Web Element to WPF. In order to switch to CefSharp , either compile or download its precompiled binaries. Pode will automatically switch to CefSharp, if the binaries are loaded into the Powershell Session before the Pode Module itself gets initialized. The required packages are the following and can be compiled from scratch or downloaded from the Nuget Repository: - cef.redist.x64 - cefsharp.common - cefsharp.wpf This example shows how to load them: Import-Module -Name \"$PSScriptRoot\\lib\\cefsharp\\CefSharp.dll\" Import-Module -Name \"$PSScriptRoot\\lib\\cefsharp\\CefSharp.Wpf.dll\"","title":"Desktop Application"},{"location":"Tutorials/Misc/DesktopApp/#desktop-application","text":"Normally in Pode you define a server and run it, however if you use the Show-PodeGui function Pode will serve the server up as a desktop application. Warning Currently only supported in Windows PowerShell, and PowerShell 7 on Windows due to using WPF.","title":"Desktop Application"},{"location":"Tutorials/Misc/DesktopApp/#setting-server-to-run-as-application","text":"To serve up you server as a desktop application you can just write you Pode server script as normal. The only difference is you can use the Show-PodeGui function to display the application. The Show-PodeGui function must have a Title supplied - this is the title of the application's window. The following will create a basic web server with a single page, but when the server is run it will pop up as a desktop application: Start-PodeServer { Add-PodeEndpoint -Address localhost -Port 8080 -Protocol Http Show-PodeGui -Title 'Basic Server' Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } The page used is as follows: < html > < head > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" /> </ head > < body > < h1 > Hello, world! </ h1 > < p > Welcome to a very simple desktop app! </ p > </ body > </ html >","title":"Setting Server to run as Application"},{"location":"Tutorials/Misc/DesktopApp/#simple-script-to-load-application","text":"When you run the server from your terminal, the application will open and the terminal will remain visible. However, you could have a script which opens PowerShell as hidden and launches the server. The following is a basic example of a .bat file which could be double-clicked to open the application, and then hide the terminal: powershell.exe -noprofile -windowstyle hidden -command .\\you-server-script.ps1 exit","title":"Simple script to load Application"},{"location":"Tutorials/Misc/DesktopApp/#using-chromium-instead-of-internet-explorer","text":"The default WPF Browser Element used by Pode is based on the system internal Internet Explorer API, which is also bound to the same Javascript and Webbrowser Limitations as Internet Explorer itself. To utilize Chromium in WPF, Pode offers support for CefSharp which adds a Chromium Web Element to WPF. In order to switch to CefSharp , either compile or download its precompiled binaries. Pode will automatically switch to CefSharp, if the binaries are loaded into the Powershell Session before the Pode Module itself gets initialized. The required packages are the following and can be compiled from scratch or downloaded from the Nuget Repository: - cef.redist.x64 - cefsharp.common - cefsharp.wpf This example shows how to load them: Import-Module -Name \"$PSScriptRoot\\lib\\cefsharp\\CefSharp.dll\" Import-Module -Name \"$PSScriptRoot\\lib\\cefsharp\\CefSharp.Wpf.dll\"","title":"Using Chromium instead of Internet Explorer"},{"location":"Tutorials/Misc/Outputs/","text":"Outputs Variables You can tell Pode to create variables with values when the server stops by using Out-PodeVariable , for example: Out-PodeVariable -Name VariableName -Value 'Some_Variable_Value' The -Value of the variable can be any object type, and when the server is stopped these variables will be created and available in the command line. If you were to run the able example, this means that when the server is stopped, you will have access to a $VariableName variable on the CLI.","title":"Outputs"},{"location":"Tutorials/Misc/Outputs/#outputs","text":"","title":"Outputs"},{"location":"Tutorials/Misc/Outputs/#variables","text":"You can tell Pode to create variables with values when the server stops by using Out-PodeVariable , for example: Out-PodeVariable -Name VariableName -Value 'Some_Variable_Value' The -Value of the variable can be any object type, and when the server is stopped these variables will be created and available in the command line. If you were to run the able example, this means that when the server is stopped, you will have access to a $VariableName variable on the CLI.","title":"Variables"},{"location":"Tutorials/Misc/ServerRoot/","text":"Server Root The root path for your server, by default, is always defined by $MyInvocation.PSScriptRoot . Normally this is enough, and you'll likely never need to change it however, if you should want to change your server's root path, you can alter it in the following ways. Note The path you supply in both cases can be literal, or relative to $MyInvocation.PSScriptRoot . If you supply a literal path it will be used instead of the invocation path. Code The main way to alter the root path of you server is to use the -RootPath parameter on the server function: Start-PodeServer -RootPath '../server' { # logic } With this, everything from your server.psd1 , /views , /public , etc will need to be within the ../server directory. Configuration The other way to alter the root path is via the server.psd1 file: @{ Server = @{ Root = \"../server\" } } In this case, the server.psd1 file will need to be located at $MyInvocation.PSScriptRoot . Everything else will need to be located in ../server .","title":"Server Root"},{"location":"Tutorials/Misc/ServerRoot/#server-root","text":"The root path for your server, by default, is always defined by $MyInvocation.PSScriptRoot . Normally this is enough, and you'll likely never need to change it however, if you should want to change your server's root path, you can alter it in the following ways. Note The path you supply in both cases can be literal, or relative to $MyInvocation.PSScriptRoot . If you supply a literal path it will be used instead of the invocation path.","title":"Server Root"},{"location":"Tutorials/Misc/ServerRoot/#code","text":"The main way to alter the root path of you server is to use the -RootPath parameter on the server function: Start-PodeServer -RootPath '../server' { # logic } With this, everything from your server.psd1 , /views , /public , etc will need to be within the ../server directory.","title":"Code"},{"location":"Tutorials/Misc/ServerRoot/#configuration","text":"The other way to alter the root path is via the server.psd1 file: @{ Server = @{ Root = \"../server\" } } In this case, the server.psd1 file will need to be located at $MyInvocation.PSScriptRoot . Everything else will need to be located in ../server .","title":"Configuration"},{"location":"Tutorials/Misc/UploadFiles/","text":"Uploading Files Pode's inbuilt middleware supports parsing a request's body/payload and query string, and this also extends to uploading files via a <form> . Like how POST data can be accessed in a Route via the web event as $WebEvent.Data[<name>] , uploaded files can be accessed via $WebEvent.Files[<filename>] . Important In order for uploaded files to work, your <form> must contain enctype=\"multipart/form-data\" Web Form The following HTML is an example of a <form> for a simple sign-up flow. Here the form will POST the username, password, and an avatar (our file to upload). < html > < head > < title > Sign Up </ title > </ head > < body > < form action = \"/signup\" method = \"post\" enctype = \"multipart/form-data\" > < div > < label > Username: </ label > < input type = \"text\" name = \"username\" /> </ div > < div > < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ div > < div > < label > Avatar: </ label > < input type = \"file\" name = \"avatar\" /> </ div > < div > < input type = \"submit\" value = \"Submit\" /> </ div > </ form > </ body > </ html > You can upload multiple files from one <form> The inputs will be POSTed to the server, and accessible via the web event 's .Data and .Files . For the .Data : $WebEvent . Data [ 'username' ] # the username entered $WebEvent . Data [ 'password' ] # the password entered $WebEvent . Data [ 'avatar' ] # the name of the file (assume image.png) For the .Files : $WebEvent . Files [ 'image.png' ] # the bytes of the uploaded file Script Inbuilt Save The following script is an example Pode server that will save the uploaded file, from the above <form> : Start-PodeServer { # listen on localhost:8085 Add-PodeEndpoint -Address * -Port 8085 -Protocol Http Set-PodeViewEngine -Type HTML # GET request for web page on \"localhost:8085/\" Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'signup' } # POST request to save the avatar and create user Add-PodeRoute -Method Post -Path '/signup' -ScriptBlock { # do some logic here to create user New-User -Username $WebEvent . Data [ 'username' ] -Password $WebEvent . Data [ 'password' ] # upload the avatar - this will retrieve the filename from $WebEvent.Data, # and the bytes from $WebEvent.Files, saving to the server's root path Save-PodeRequestFile -Key 'avatar' } } Custom Save If you need to save the uploaded file elsewhere, then you can retrieve the raw bytes of the avatar file as follows: Add-PodeRoute -Method Post -Path '/upload' -ScriptBlock { # using .Data will get you the file's name $filename = $WebEvent . Data [ 'avatar' ] # with the filename, you can get the file's bytes from .File # as well as the Bytes, you can also get the ContentType $bytes = $WebEvent . Files [ $filename ]. Bytes # with the bytes, you can upload the file where ever you want }","title":"Uploading Files"},{"location":"Tutorials/Misc/UploadFiles/#uploading-files","text":"Pode's inbuilt middleware supports parsing a request's body/payload and query string, and this also extends to uploading files via a <form> . Like how POST data can be accessed in a Route via the web event as $WebEvent.Data[<name>] , uploaded files can be accessed via $WebEvent.Files[<filename>] . Important In order for uploaded files to work, your <form> must contain enctype=\"multipart/form-data\"","title":"Uploading Files"},{"location":"Tutorials/Misc/UploadFiles/#web-form","text":"The following HTML is an example of a <form> for a simple sign-up flow. Here the form will POST the username, password, and an avatar (our file to upload). < html > < head > < title > Sign Up </ title > </ head > < body > < form action = \"/signup\" method = \"post\" enctype = \"multipart/form-data\" > < div > < label > Username: </ label > < input type = \"text\" name = \"username\" /> </ div > < div > < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ div > < div > < label > Avatar: </ label > < input type = \"file\" name = \"avatar\" /> </ div > < div > < input type = \"submit\" value = \"Submit\" /> </ div > </ form > </ body > </ html > You can upload multiple files from one <form> The inputs will be POSTed to the server, and accessible via the web event 's .Data and .Files . For the .Data : $WebEvent . Data [ 'username' ] # the username entered $WebEvent . Data [ 'password' ] # the password entered $WebEvent . Data [ 'avatar' ] # the name of the file (assume image.png) For the .Files : $WebEvent . Files [ 'image.png' ] # the bytes of the uploaded file","title":"Web Form"},{"location":"Tutorials/Misc/UploadFiles/#script","text":"","title":"Script"},{"location":"Tutorials/Misc/UploadFiles/#inbuilt-save","text":"The following script is an example Pode server that will save the uploaded file, from the above <form> : Start-PodeServer { # listen on localhost:8085 Add-PodeEndpoint -Address * -Port 8085 -Protocol Http Set-PodeViewEngine -Type HTML # GET request for web page on \"localhost:8085/\" Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'signup' } # POST request to save the avatar and create user Add-PodeRoute -Method Post -Path '/signup' -ScriptBlock { # do some logic here to create user New-User -Username $WebEvent . Data [ 'username' ] -Password $WebEvent . Data [ 'password' ] # upload the avatar - this will retrieve the filename from $WebEvent.Data, # and the bytes from $WebEvent.Files, saving to the server's root path Save-PodeRequestFile -Key 'avatar' } }","title":"Inbuilt Save"},{"location":"Tutorials/Misc/UploadFiles/#custom-save","text":"If you need to save the uploaded file elsewhere, then you can retrieve the raw bytes of the avatar file as follows: Add-PodeRoute -Method Post -Path '/upload' -ScriptBlock { # using .Data will get you the file's name $filename = $WebEvent . Data [ 'avatar' ] # with the filename, you can get the file's bytes from .File # as well as the Bytes, you can also get the ContentType $bytes = $WebEvent . Files [ $filename ]. Bytes # with the bytes, you can upload the file where ever you want }","title":"Custom Save"},{"location":"Tutorials/Restarting/Overview/","text":"Overview There are 4 ways to restart a running Pode server: Ctrl+R : If you press Ctrl+R on a running server, it will trigger a restart to take place. 1a. On Unix you can use Shift+R . File Monitoring : This will watch for file changes, and if enabled will trigger the server to restart. Auto-Restarting : Defined within the server.psd1 configuration file, you can set schedules for the server to automatically restart. Restart-PodeServer : This function lets you manually restart Pode from within the server. When the server restarts, it will re-invoke the -ScriptBlock supplied to the Start-PodeServer function. This means the best approach to reload new modules/scripts it to dot-source/ Use-PodeScript your scripts into your server, as any changes to the main scriptblock will not take place.","title":"Overview"},{"location":"Tutorials/Restarting/Overview/#overview","text":"There are 4 ways to restart a running Pode server: Ctrl+R : If you press Ctrl+R on a running server, it will trigger a restart to take place. 1a. On Unix you can use Shift+R . File Monitoring : This will watch for file changes, and if enabled will trigger the server to restart. Auto-Restarting : Defined within the server.psd1 configuration file, you can set schedules for the server to automatically restart. Restart-PodeServer : This function lets you manually restart Pode from within the server. When the server restarts, it will re-invoke the -ScriptBlock supplied to the Start-PodeServer function. This means the best approach to reload new modules/scripts it to dot-source/ Use-PodeScript your scripts into your server, as any changes to the main scriptblock will not take place.","title":"Overview"},{"location":"Tutorials/Restarting/Types/AutoRestarting/","text":"Auto-Restarting You can schedule automatic server restarts by using the Server.Restart section within your server.psd1 configuration file. You can schedule server restarts in 3 ways: Periodic : A single value that defines after how many minutes the server should restart. Times : An array of times that define at which times each day the server should restart. Cron Expressions : An array of cron expression that define when the server should restart. The section in your server.psd1 file could look as follows (you can define 1 or all): @{ Server = @{ Restart = @{ Period = 180 Times = @( \"09:00\" , \"21:00\" ) Crons = @( \"@hourly\" , \"30 14 * * TUE\" ) } } } Periodic Periodic server restarts are defined using a single value, which is the number of minutes to wait before triggering a server restart. For example, if you wanted to restart your server every 6hrs, then you could add the following to your server.psd1 file: @{ Server = @{ Restart = @{ Period = 360 } } } Note The period starts from the moment the server is started. Times Server restarts can be fined by the time of day, this is an array of times each day to restart your server. For example, if you wanted to restart your server at 09:45 and 21:15 every day, then you could add the following to your server.psd1 file: @{ Server = @{ Restart = @{ Times = @( \"09:45\" , \"21:15\" ) } } } Cron Expressions To further advance timed and periodic server restarts, you can also define when a restart should occur by using an array of cron expressions . For example, should you want to restart your server on every Tuesday and Friday at 12:00, then you could add the following to your server.psd1 file: @{ Server = @{ Restart = @{ Crons = @( \"0 12 * * TUE,FRI\" ) } } }","title":"Auto-Restarting"},{"location":"Tutorials/Restarting/Types/AutoRestarting/#auto-restarting","text":"You can schedule automatic server restarts by using the Server.Restart section within your server.psd1 configuration file. You can schedule server restarts in 3 ways: Periodic : A single value that defines after how many minutes the server should restart. Times : An array of times that define at which times each day the server should restart. Cron Expressions : An array of cron expression that define when the server should restart. The section in your server.psd1 file could look as follows (you can define 1 or all): @{ Server = @{ Restart = @{ Period = 180 Times = @( \"09:00\" , \"21:00\" ) Crons = @( \"@hourly\" , \"30 14 * * TUE\" ) } } }","title":"Auto-Restarting"},{"location":"Tutorials/Restarting/Types/AutoRestarting/#periodic","text":"Periodic server restarts are defined using a single value, which is the number of minutes to wait before triggering a server restart. For example, if you wanted to restart your server every 6hrs, then you could add the following to your server.psd1 file: @{ Server = @{ Restart = @{ Period = 360 } } } Note The period starts from the moment the server is started.","title":"Periodic"},{"location":"Tutorials/Restarting/Types/AutoRestarting/#times","text":"Server restarts can be fined by the time of day, this is an array of times each day to restart your server. For example, if you wanted to restart your server at 09:45 and 21:15 every day, then you could add the following to your server.psd1 file: @{ Server = @{ Restart = @{ Times = @( \"09:45\" , \"21:15\" ) } } }","title":"Times"},{"location":"Tutorials/Restarting/Types/AutoRestarting/#cron-expressions","text":"To further advance timed and periodic server restarts, you can also define when a restart should occur by using an array of cron expressions . For example, should you want to restart your server on every Tuesday and Friday at 12:00, then you could add the following to your server.psd1 file: @{ Server = @{ Restart = @{ Crons = @( \"0 12 * * TUE,FRI\" ) } } }","title":"Cron Expressions"},{"location":"Tutorials/Restarting/Types/FileMonitoring/","text":"File Monitoring Pode has support for file monitoring which can trigger the server to restart, this occurs if Pode detects any file changes within the root directory of your server. To enable file monitoring you can enable it through the server.psd1 configuration file as follows: @{ Server = @{ FileMonitor = @{ Enable = $true } } } Once enabled, Pode will actively monitor all file changes made within the root directory of your server. For example, if your server was at C:/Apps/Pode/server.ps1 , then Pode will monitor the C:/Apps/Pode directory and all sub-directories/files for changes (exclusions can be configured, see below). When a change is detected, Pode will wait 2 seconds before initiating the restart - this is so multiple rapid file changes don't trigger multiple restarts. The file changes which are being monitored by Pode are: Updates Creation Deletion Important If you change the main server script itself, the changes will not be picked up. It's best to import/dot-source other modules/scripts into your server script, as the internal restart re-invokes this scriptblock . If you do make changes to the main server script, you'll need to terminate the server first and then restart it. Include/Exclude You can include/exclude paths/files/extensions from triggering a server restart. To include/exclude specific paths/files you can configure them within the server.psd1 configuration file. Both of the settings are arrays, and the values should be patterns for paths/files/extensions - for paths, they should always be from the root directory of your server. For example, to state that all txt and ps1 files should only trigger restarts, you would do: @{ Server = @{ FileMonitor = @{ Enable = $true Include = @( \"*.txt\" , \"*.ps1\" ) } } } And to state that changes within the public directory should not trigger a restart, you would do: @{ Server = @{ FileMonitor = @{ Enable = $true Exclude = @( \"public/*\" ) } } } Note It's recommended to exclude directories like logs , to prevent the server constantly restarting. Show Files You can enable the showing of what file changes triggered the server to restart. To do this, you can set the ShowFiles property in your server.psd1 file: @{ Server = @{ FileMonitor = @{ Enable = $true ShowFiles = $true } } } Once enabled, just before a restart occurs, the following is an example of what will be visible above the Restarting... output in the terminal: The following files have changed: > [Changed] server.psd1 > [Created] views/about.pode > [Deleted] public/styles/main.css","title":"File Monitoring"},{"location":"Tutorials/Restarting/Types/FileMonitoring/#file-monitoring","text":"Pode has support for file monitoring which can trigger the server to restart, this occurs if Pode detects any file changes within the root directory of your server. To enable file monitoring you can enable it through the server.psd1 configuration file as follows: @{ Server = @{ FileMonitor = @{ Enable = $true } } } Once enabled, Pode will actively monitor all file changes made within the root directory of your server. For example, if your server was at C:/Apps/Pode/server.ps1 , then Pode will monitor the C:/Apps/Pode directory and all sub-directories/files for changes (exclusions can be configured, see below). When a change is detected, Pode will wait 2 seconds before initiating the restart - this is so multiple rapid file changes don't trigger multiple restarts. The file changes which are being monitored by Pode are: Updates Creation Deletion Important If you change the main server script itself, the changes will not be picked up. It's best to import/dot-source other modules/scripts into your server script, as the internal restart re-invokes this scriptblock . If you do make changes to the main server script, you'll need to terminate the server first and then restart it.","title":"File Monitoring"},{"location":"Tutorials/Restarting/Types/FileMonitoring/#includeexclude","text":"You can include/exclude paths/files/extensions from triggering a server restart. To include/exclude specific paths/files you can configure them within the server.psd1 configuration file. Both of the settings are arrays, and the values should be patterns for paths/files/extensions - for paths, they should always be from the root directory of your server. For example, to state that all txt and ps1 files should only trigger restarts, you would do: @{ Server = @{ FileMonitor = @{ Enable = $true Include = @( \"*.txt\" , \"*.ps1\" ) } } } And to state that changes within the public directory should not trigger a restart, you would do: @{ Server = @{ FileMonitor = @{ Enable = $true Exclude = @( \"public/*\" ) } } } Note It's recommended to exclude directories like logs , to prevent the server constantly restarting.","title":"Include/Exclude"},{"location":"Tutorials/Restarting/Types/FileMonitoring/#show-files","text":"You can enable the showing of what file changes triggered the server to restart. To do this, you can set the ShowFiles property in your server.psd1 file: @{ Server = @{ FileMonitor = @{ Enable = $true ShowFiles = $true } } } Once enabled, just before a restart occurs, the following is an example of what will be visible above the Restarting... output in the terminal: The following files have changed: > [Changed] server.psd1 > [Created] views/about.pode > [Deleted] public/styles/main.css","title":"Show Files"},{"location":"Tutorials/Routes/Overview/","text":"Overview Routes in Pode allow you to bind logic that should be invoked when a users call certain paths on a URL, for a specific HTTP method, against your server. Routes allow you to host REST APIs and Web Pages, as well as using custom Middleware for logic such as authentication. You can also create static routes, that redirect requests for static content to internal directories. Routes can also be bound against a specific protocol or endpoint. This allows you to bind multiple root ( / ) routes against different endpoints - if you're listening to multiple endpoints. Info The following HTTP methods are supported by routes in Pode: DELETE, GET, HEAD, MERGE, OPTIONS, PATCH, POST, PUT, and TRACE. Usage To setup and use Routes in Pode you should use the Routing functions. For example, let's say you want a basic GET /ping endpoint to just return pong as a JSON response: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/ping' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'value' = 'pong' ; } } } Here, anyone who calls http://localhost:8080/ping will receive the following response: { \"value\" : \"pong\" } The scriptblock for the route will have access to the $WebEvent variable which contains information about the current web event . This argument will contain the Request and Response objects, Data (from POST), and the Query (from the query string of the URL), as well as any Parameters from the route itself (eg: /:accountId ). You can add your routes straight into the Start-PodeServer scriptblock, or separate them into different files. These files can then be dot-sourced, or you can use Use-PodeRoutes to automatically load all ps1 files within a /routes directory at the root of your server. Payloads The following is an example of using data from a request's payload - ie, the data in the body of POST request. To retrieve values from the payload you can use the .Data property on the $WebEvent variable to a route's logic. Depending the the Content-Type supplied, Pode has inbuilt body-parsing logic for JSON, XML, CSV, and Form data. This example will get the userId and \"find\" user, returning the users data: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Post -Path '/users' -ScriptBlock { # get the user $user = Get-DummyUser -UserId $WebEvent . Data . userId # return the user Write-PodeJsonResponse -Value @{ Username = $user . username Age = $user . age } } } The following request will invoke the above route: Invoke-WebRequest -Uri 'http://localhost:8080/users' -Method Post -Body '{ \"userId\": 12345 }' -ContentType 'application/json' Important The ContentType is required as it informs Pode on how to parse the requests payload. For example, if the content type were application/json , then Pode will attempt to parse the body of the request as JSON - converting it to a hashtable. Important On PowerShell 5 referencing JSON data on $WebEvent.Data must be done as $WebEvent.Data.userId . This also works in PowerShell 6+, but you can also use $WebEvent.Data['userId'] on PowerShell 6+. Query Strings The following is an example of using data from a request's query string. To retrieve values from the query string you can use the .Query property from the $WebEvent variable. This example will return a user based on the userId supplied: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/users' -ScriptBlock { # get the user $user = Get-DummyUser -UserId $WebEvent . Query [ 'userId' ] # return the user Write-PodeJsonResponse -Value @{ Username = $user . username Age = $user . age } } } The following request will invoke the above route: Invoke-WebRequest -Uri 'http://localhost:8080/users?userId=12345' -Method Get Parameters The following is an example of using values supplied on a request's URL using parameters. To retrieve values that match a request's URL parameters you can use the .Parameters property from the $WebEvent variable. This example will get the :userId and \"find\" user, returning the users data: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/users/:userId' -ScriptBlock { # get the user $user = Get-DummyUser -UserId $WebEvent . Parameters [ 'userId' ] # return the user Write-PodeJsonResponse -Value @{ Username = $user . username Age = $user . age } } } The following request will invoke the above route: Invoke-WebRequest -Uri 'http://localhost:8080/users/12345' -Method Get Script from File You normally define a route's script using the -ScriptBlock parameter however, you can also reference a file with the required scriptblock using -FilePath . Using the -FilePath parameter will dot-source a scriptblock from the file, and set it as the route's script. For example, to create a route from a file that will write a simple JSON response on a route: File.ps1 { Write-PodeJsonResponse -Value @{ 'value' = 'pong' ; } } Route Add-PodeRoute -Method Get -Path '/ping' -FilePath './Routes/File.ps1' Getting Routes There are two helper function that allow you get retrieve a list of routes, and filter routes as well: Get-PodeRoute and Get-PodeStaticRoute . You can use these functions to retrieve all routes, or routes for a specific HTTP method, path, endpoint, etc. To retrieve all routes, you can call the functions with no parameters. To filter, here are some examples: # all routes for method Get-PodeRoute -Method Get # all routes for a Path Get-PodeRoute -Path '/users' # all routes for an Endpoint by name Get-PodeRoute -EndpointName Admin The Get-PodeStaticRoute function works in the same way as above - but with no -Method parameter. Grouping If you have a number of Routes that all share the same base path, middleware, authentication, or other parameters, then you can add these Routes within a Route Group (via Add-PodeRouteGroup ) to share the parameter values: Add-PodeRouteGroup -Path '/api' -Authentication Basic -Routes { Add-PodeRoute -Method Get -Path '/route1' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 1 } } Add-PodeRoute -Method Get -Path '/route2' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 2 } } Add-PodeRoute -Method Get -Path '/route3' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 3 } } } In the above example, this will create 3 Routes: /api/route1 , /api/route2 , and /api/route3 . Each of the Routes will also all require some Basic authentication. You can also do the same with Static and Signal Routes via Add-PodeStaticRouteGroup and Add-PodeSignalRouteGroup . More information on Route grouping can be found here . Route Object Warning Be careful if you choose to edit these objects, as they will affect the server. The following is the structure of the Route object internally, as well as the object that is returned from Add-PodeRoute -PassThru or Get-PodeRoute : Name Type Description Arguments object[] Array of arguments that are splatted onto the route's scriptblock ContentType string The content type to use when parsing the payload in the request Endpoint hashtable Contains the Address, Protocol, and Name of the Endpoint the route is bound to ErrorType string Content type of the error page to use for the route IsStatic bool Fixed to false for normal routes Logic scriptblock The main scriptblock logic of the route Method string HTTP method of the route Metrics hashtable Metrics for the route, such as Request counts Middleware hashtable[] Array of middleware that runs prior to the route's scriptblock OpenApi hashtable[] The OpenAPI definition/settings for the route Path string The path of the route - this path will have regex in place of route parameters TransferEncoding string The transfer encoding to use when parsing the payload in the request Static routes have a slightly different format: Name Type Description ContentType string Content type to use when parsing the payload a request to the route Defaults string[] Array of default file names to render if path in request is a folder Download bool Specifies whether files are rendered in the response, or downloaded Endpoint hashtable Contains the Address, Protocol, and Name of the Endpoint the route is bound to ErrorType string Content type of the error page to use for the route IsStatic bool Fixed to true for static routes Method string HTTP method of the route Metrics hashtable Metrics for the route, such as Request counts Middleware hashtable[] Array of middleware that runs prior to the route's scriptblock OpenApi hashtable[] The OpenAPI definition/settings for the route Path string The path of the route - this path will have regex in place of dynamic file names Source string The source path within the server that is used for the route TransferEncoding string The transfer encoding to use when parsing the payload in the request","title":"Overview"},{"location":"Tutorials/Routes/Overview/#overview","text":"Routes in Pode allow you to bind logic that should be invoked when a users call certain paths on a URL, for a specific HTTP method, against your server. Routes allow you to host REST APIs and Web Pages, as well as using custom Middleware for logic such as authentication. You can also create static routes, that redirect requests for static content to internal directories. Routes can also be bound against a specific protocol or endpoint. This allows you to bind multiple root ( / ) routes against different endpoints - if you're listening to multiple endpoints. Info The following HTTP methods are supported by routes in Pode: DELETE, GET, HEAD, MERGE, OPTIONS, PATCH, POST, PUT, and TRACE.","title":"Overview"},{"location":"Tutorials/Routes/Overview/#usage","text":"To setup and use Routes in Pode you should use the Routing functions. For example, let's say you want a basic GET /ping endpoint to just return pong as a JSON response: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/ping' -ScriptBlock { Write-PodeJsonResponse -Value @{ 'value' = 'pong' ; } } } Here, anyone who calls http://localhost:8080/ping will receive the following response: { \"value\" : \"pong\" } The scriptblock for the route will have access to the $WebEvent variable which contains information about the current web event . This argument will contain the Request and Response objects, Data (from POST), and the Query (from the query string of the URL), as well as any Parameters from the route itself (eg: /:accountId ). You can add your routes straight into the Start-PodeServer scriptblock, or separate them into different files. These files can then be dot-sourced, or you can use Use-PodeRoutes to automatically load all ps1 files within a /routes directory at the root of your server.","title":"Usage"},{"location":"Tutorials/Routes/Overview/#payloads","text":"The following is an example of using data from a request's payload - ie, the data in the body of POST request. To retrieve values from the payload you can use the .Data property on the $WebEvent variable to a route's logic. Depending the the Content-Type supplied, Pode has inbuilt body-parsing logic for JSON, XML, CSV, and Form data. This example will get the userId and \"find\" user, returning the users data: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Post -Path '/users' -ScriptBlock { # get the user $user = Get-DummyUser -UserId $WebEvent . Data . userId # return the user Write-PodeJsonResponse -Value @{ Username = $user . username Age = $user . age } } } The following request will invoke the above route: Invoke-WebRequest -Uri 'http://localhost:8080/users' -Method Post -Body '{ \"userId\": 12345 }' -ContentType 'application/json' Important The ContentType is required as it informs Pode on how to parse the requests payload. For example, if the content type were application/json , then Pode will attempt to parse the body of the request as JSON - converting it to a hashtable. Important On PowerShell 5 referencing JSON data on $WebEvent.Data must be done as $WebEvent.Data.userId . This also works in PowerShell 6+, but you can also use $WebEvent.Data['userId'] on PowerShell 6+.","title":"Payloads"},{"location":"Tutorials/Routes/Overview/#query-strings","text":"The following is an example of using data from a request's query string. To retrieve values from the query string you can use the .Query property from the $WebEvent variable. This example will return a user based on the userId supplied: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/users' -ScriptBlock { # get the user $user = Get-DummyUser -UserId $WebEvent . Query [ 'userId' ] # return the user Write-PodeJsonResponse -Value @{ Username = $user . username Age = $user . age } } } The following request will invoke the above route: Invoke-WebRequest -Uri 'http://localhost:8080/users?userId=12345' -Method Get","title":"Query Strings"},{"location":"Tutorials/Routes/Overview/#parameters","text":"The following is an example of using values supplied on a request's URL using parameters. To retrieve values that match a request's URL parameters you can use the .Parameters property from the $WebEvent variable. This example will get the :userId and \"find\" user, returning the users data: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/users/:userId' -ScriptBlock { # get the user $user = Get-DummyUser -UserId $WebEvent . Parameters [ 'userId' ] # return the user Write-PodeJsonResponse -Value @{ Username = $user . username Age = $user . age } } } The following request will invoke the above route: Invoke-WebRequest -Uri 'http://localhost:8080/users/12345' -Method Get","title":"Parameters"},{"location":"Tutorials/Routes/Overview/#script-from-file","text":"You normally define a route's script using the -ScriptBlock parameter however, you can also reference a file with the required scriptblock using -FilePath . Using the -FilePath parameter will dot-source a scriptblock from the file, and set it as the route's script. For example, to create a route from a file that will write a simple JSON response on a route: File.ps1 { Write-PodeJsonResponse -Value @{ 'value' = 'pong' ; } } Route Add-PodeRoute -Method Get -Path '/ping' -FilePath './Routes/File.ps1'","title":"Script from File"},{"location":"Tutorials/Routes/Overview/#getting-routes","text":"There are two helper function that allow you get retrieve a list of routes, and filter routes as well: Get-PodeRoute and Get-PodeStaticRoute . You can use these functions to retrieve all routes, or routes for a specific HTTP method, path, endpoint, etc. To retrieve all routes, you can call the functions with no parameters. To filter, here are some examples: # all routes for method Get-PodeRoute -Method Get # all routes for a Path Get-PodeRoute -Path '/users' # all routes for an Endpoint by name Get-PodeRoute -EndpointName Admin The Get-PodeStaticRoute function works in the same way as above - but with no -Method parameter.","title":"Getting Routes"},{"location":"Tutorials/Routes/Overview/#grouping","text":"If you have a number of Routes that all share the same base path, middleware, authentication, or other parameters, then you can add these Routes within a Route Group (via Add-PodeRouteGroup ) to share the parameter values: Add-PodeRouteGroup -Path '/api' -Authentication Basic -Routes { Add-PodeRoute -Method Get -Path '/route1' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 1 } } Add-PodeRoute -Method Get -Path '/route2' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 2 } } Add-PodeRoute -Method Get -Path '/route3' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 3 } } } In the above example, this will create 3 Routes: /api/route1 , /api/route2 , and /api/route3 . Each of the Routes will also all require some Basic authentication. You can also do the same with Static and Signal Routes via Add-PodeStaticRouteGroup and Add-PodeSignalRouteGroup . More information on Route grouping can be found here .","title":"Grouping"},{"location":"Tutorials/Routes/Overview/#route-object","text":"Warning Be careful if you choose to edit these objects, as they will affect the server. The following is the structure of the Route object internally, as well as the object that is returned from Add-PodeRoute -PassThru or Get-PodeRoute : Name Type Description Arguments object[] Array of arguments that are splatted onto the route's scriptblock ContentType string The content type to use when parsing the payload in the request Endpoint hashtable Contains the Address, Protocol, and Name of the Endpoint the route is bound to ErrorType string Content type of the error page to use for the route IsStatic bool Fixed to false for normal routes Logic scriptblock The main scriptblock logic of the route Method string HTTP method of the route Metrics hashtable Metrics for the route, such as Request counts Middleware hashtable[] Array of middleware that runs prior to the route's scriptblock OpenApi hashtable[] The OpenAPI definition/settings for the route Path string The path of the route - this path will have regex in place of route parameters TransferEncoding string The transfer encoding to use when parsing the payload in the request Static routes have a slightly different format: Name Type Description ContentType string Content type to use when parsing the payload a request to the route Defaults string[] Array of default file names to render if path in request is a folder Download bool Specifies whether files are rendered in the response, or downloaded Endpoint hashtable Contains the Address, Protocol, and Name of the Endpoint the route is bound to ErrorType string Content type of the error page to use for the route IsStatic bool Fixed to true for static routes Method string HTTP method of the route Metrics hashtable Metrics for the route, such as Request counts Middleware hashtable[] Array of middleware that runs prior to the route's scriptblock OpenApi hashtable[] The OpenAPI definition/settings for the route Path string The path of the route - this path will have regex in place of dynamic file names Source string The source path within the server that is used for the route TransferEncoding string The transfer encoding to use when parsing the payload in the request","title":"Route Object"},{"location":"Tutorials/Routes/Examples/AnonymousAccess/","text":"Anonymous Access This example builds on top of the Login Page example. This time instead of having a user navigate to the home page, and then be immediately redirected to the login page, this time we'll allow an unauthenticated user to access the home page. When this unauthenticated user accesses the home page, they'll be a switch in logic to show different content and a login button - rather than a greeting and a logout button. Allow Anon The first thing we need to do is specify that the home page route should allow anonymous access. To achieve this we can use the -AllowAnon switch on Add-PodeRoute . With this switch, if the user isn't authenticated - even if the -Authentication parameter supplied - then the home page will still load anyway. Below is the home page route from the Login Page example, but now with anonymous access allowed: Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -AllowAnon -ScriptBlock { $WebEvent . Session . Data . Views ++ Write-PodeViewResponse -Path 'auth-home' -Data @{ Username = $WebEvent . Auth . User . Name ; Views = $WebEvent . Session . Data . Views ; } } Now when a user navigates to http://localhost:8080/ they won't be redirected to http://localhost:8080/login . Is there a User? However, now we have an issue: if an authenticated or an unauthenticated user access the home page, they'll both be greeted with the same content! This is hardly desirable, so we need a way to test if whether we have an authenticated user or not. To achieve this we can use Test-PodeAuthUser . This function will return whether or not the current request (or $WebEvent ) has an authenticated user, if it does then we can show the original content and if not we can show different content: Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -AllowAnon -ScriptBlock { if ( Test-PodeAuthUser ) { $session : Views ++ Write-PodeViewResponse -Path 'auth-home' -Data @{ Username = $WebEvent . Auth . User . Name Views = $session : Views } } else { Write-PodeViewResponse -Path 'auth-home-anon' } } Now, when an authenticated user hits the page, they're shown the original personal greeting page with view counter. However, when an unauthenticated user hits the page they are shown a generic greeting with a login button. Example Code This is the full code for the server above: Start-PodeServer -Thread 2 { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # use pode template engine Set-PodeViewEngine -Type Pode # setup session middleware Enable-PodeSessionMiddleware -Duration 120 -Extend # setup form authentication New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ User = @{ ID = 'M0R7Y302' Name = 'Morty' Type = 'Human' } } } # aww geez! no user was found return @{ Message = 'Invalid details supplied' } } # the \"GET /\" endpoint for the homepage Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -AllowAnon -ScriptBlock { if ( Test-PodeAuthUser ) { $session : Views ++ Write-PodeViewResponse -Path 'auth-home' -Data @{ Username = $WebEvent . Auth . User . Name Views = $session : Views } } else { Write-PodeViewResponse -Path 'auth-home-anon' } } # the \"GET /login\" endpoint for the login page Add-PodeRoute -Method Get -Path '/login' -Authentication 'Login' -Login -ScriptBlock { Write-PodeViewResponse -Path 'auth-login' -FlashMessages } # the \"POST /login\" endpoint for user authentication Add-PodeRoute -Method Post -Path '/login' -Authentication 'Login' -Login # the \"POST /logout\" endpoint for ending the session Add-PodeRoute -Method Post -Path '/logout' -Authentication 'Login' -Logout } Pages The following are the web pages used above, as well as the CSS style. The web pages have been created using .pode files, which allows you to embed PowerShell into the files. auth-home.pode < html > < head > < title > Auth Home </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > Hello, $($data.Username)! You have view this page $($data.Views) times! < form action = \"/logout\" method = \"post\" > < div > < input type = \"submit\" value = \"Logout\" /> </ div > </ form > </ body > </ html > auth-home-anon.pode < html > < head > < title > Auth Home </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/simple.css\" > </ head > < body > Hello, there! Welcome to the home page, please login below. < form action = \"/login\" method = \"get\" > < div > < input type = \"submit\" value = \"Login\" /> </ div > </ form > </ body > </ html > auth-login.pode < html > < head > < title > Auth Login </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > Please Login: < form action = \"/login\" method = \"post\" > < div > < label > Username: </ label > < input type = \"text\" name = \"username\" /> </ div > < div > < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ div > < div > < input type = \"submit\" value = \"Login\" /> </ div > </ form > </ body > </ html > styles/main.css body { background-color : rebeccapurple ; }","title":"Anonymous Access"},{"location":"Tutorials/Routes/Examples/AnonymousAccess/#anonymous-access","text":"This example builds on top of the Login Page example. This time instead of having a user navigate to the home page, and then be immediately redirected to the login page, this time we'll allow an unauthenticated user to access the home page. When this unauthenticated user accesses the home page, they'll be a switch in logic to show different content and a login button - rather than a greeting and a logout button.","title":"Anonymous Access"},{"location":"Tutorials/Routes/Examples/AnonymousAccess/#allow-anon","text":"The first thing we need to do is specify that the home page route should allow anonymous access. To achieve this we can use the -AllowAnon switch on Add-PodeRoute . With this switch, if the user isn't authenticated - even if the -Authentication parameter supplied - then the home page will still load anyway. Below is the home page route from the Login Page example, but now with anonymous access allowed: Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -AllowAnon -ScriptBlock { $WebEvent . Session . Data . Views ++ Write-PodeViewResponse -Path 'auth-home' -Data @{ Username = $WebEvent . Auth . User . Name ; Views = $WebEvent . Session . Data . Views ; } } Now when a user navigates to http://localhost:8080/ they won't be redirected to http://localhost:8080/login .","title":"Allow Anon"},{"location":"Tutorials/Routes/Examples/AnonymousAccess/#is-there-a-user","text":"However, now we have an issue: if an authenticated or an unauthenticated user access the home page, they'll both be greeted with the same content! This is hardly desirable, so we need a way to test if whether we have an authenticated user or not. To achieve this we can use Test-PodeAuthUser . This function will return whether or not the current request (or $WebEvent ) has an authenticated user, if it does then we can show the original content and if not we can show different content: Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -AllowAnon -ScriptBlock { if ( Test-PodeAuthUser ) { $session : Views ++ Write-PodeViewResponse -Path 'auth-home' -Data @{ Username = $WebEvent . Auth . User . Name Views = $session : Views } } else { Write-PodeViewResponse -Path 'auth-home-anon' } } Now, when an authenticated user hits the page, they're shown the original personal greeting page with view counter. However, when an unauthenticated user hits the page they are shown a generic greeting with a login button.","title":"Is there a User?"},{"location":"Tutorials/Routes/Examples/AnonymousAccess/#example-code","text":"This is the full code for the server above: Start-PodeServer -Thread 2 { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # use pode template engine Set-PodeViewEngine -Type Pode # setup session middleware Enable-PodeSessionMiddleware -Duration 120 -Extend # setup form authentication New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ User = @{ ID = 'M0R7Y302' Name = 'Morty' Type = 'Human' } } } # aww geez! no user was found return @{ Message = 'Invalid details supplied' } } # the \"GET /\" endpoint for the homepage Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -AllowAnon -ScriptBlock { if ( Test-PodeAuthUser ) { $session : Views ++ Write-PodeViewResponse -Path 'auth-home' -Data @{ Username = $WebEvent . Auth . User . Name Views = $session : Views } } else { Write-PodeViewResponse -Path 'auth-home-anon' } } # the \"GET /login\" endpoint for the login page Add-PodeRoute -Method Get -Path '/login' -Authentication 'Login' -Login -ScriptBlock { Write-PodeViewResponse -Path 'auth-login' -FlashMessages } # the \"POST /login\" endpoint for user authentication Add-PodeRoute -Method Post -Path '/login' -Authentication 'Login' -Login # the \"POST /logout\" endpoint for ending the session Add-PodeRoute -Method Post -Path '/logout' -Authentication 'Login' -Logout }","title":"Example Code"},{"location":"Tutorials/Routes/Examples/AnonymousAccess/#pages","text":"The following are the web pages used above, as well as the CSS style. The web pages have been created using .pode files, which allows you to embed PowerShell into the files. auth-home.pode < html > < head > < title > Auth Home </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > Hello, $($data.Username)! You have view this page $($data.Views) times! < form action = \"/logout\" method = \"post\" > < div > < input type = \"submit\" value = \"Logout\" /> </ div > </ form > </ body > </ html > auth-home-anon.pode < html > < head > < title > Auth Home </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/simple.css\" > </ head > < body > Hello, there! Welcome to the home page, please login below. < form action = \"/login\" method = \"get\" > < div > < input type = \"submit\" value = \"Login\" /> </ div > </ form > </ body > </ html > auth-login.pode < html > < head > < title > Auth Login </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > Please Login: < form action = \"/login\" method = \"post\" > < div > < label > Username: </ label > < input type = \"text\" name = \"username\" /> </ div > < div > < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ div > < div > < input type = \"submit\" value = \"Login\" /> </ div > </ form > </ body > </ html > styles/main.css body { background-color : rebeccapurple ; }","title":"Pages"},{"location":"Tutorials/Routes/Examples/LoginPage/","text":"Creating a Login Page This is an example of having a website with a login and home page - with a logout button. The pages will all be done using .pode files, and authentication will be done using Form authentication with Sessions . Info The full example can be seen on GitHub in examples/web-auth-form.ps1 . File Structure Firstly, the file structure of this example will look as follows: server.ps1 /views auth-home.pode auth-login.pode /public styles/main.css Server To start off this script, you'll need to have the main Start-PodeServer function; here we'll use 2 threads to handle requests: Start-PodeServer -Thread 2 { # the rest of the logic goes here! } Next, we'll need to use the Add-PodeEndpoint function to listen on an endpoint and then specify the View Engine as using .pode files: Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Set-PodeViewEngine -Type Pode To use sessions for our authentication (so we can stay logged in), we need to setup Session Middleware using the Enable-PodeSessionMiddleware function. Here our sessions will last for 2 minutes, and will be extended on each request: Enable-PodeSessionMiddleware -Duration 120 -Extend Once we have the Session Middleware initialised, we need to setup Form authentication - the username/password here are hard-coded, but normally you would validate against some database. We also specify a -FailureUrl , which is the URL to redirect a user to if they try to access a page un-authenticated. The -SuccessUrl is the URL to redirect to on successful authentication. New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ User = @{ ID = 'M0R7Y302' Name = 'Morty' Type = 'Human' } } } # aww geez! no user was found return @{ Message = 'Invalid details supplied' } } Below is the Route for the root ( / ) endpoint. This will check the cookies in the request for a signed session cookie, if one is found then the index.pode page is displayed - after incrementing a page-view counter. However, if there is no session, or authentication fails, the user is redirected to the login page: Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -ScriptBlock { $WebEvent . Session . Data . Views ++ Write-PodeViewResponse -Path 'auth-home' -Data @{ Username = $WebEvent . Auth . User . Name ; Views = $WebEvent . Session . Data . Views ; } } Next we have the login Route, which is actually two routes. The GET /login is the page itself, whereas the POST /login is the authentication part (the endpoint the <form> element's action will hit). For the POST Route, if authentication passes the user is logged in and redirected to the home page, but if it failed they're taken back to the login page. For the GET and POST login Route we supply the -Login switch, this flags that if the user navigates to the login page with an already verified session then they're automatically redirected to the home page (the -SuccessUrl ). However, if they have no session or authentication fails then instead of a 403 being displayed, the login page is displayed instead (to prevent continuously trying to redirect to the /login page). # the login page itself Add-PodeRoute -Method Get -Path '/login' -Authentication 'Login' -Login -ScriptBlock { Write-PodeViewResponse -Path 'auth-login' -FlashMessages } # the POST action for the <form> Add-PodeRoute -Method Post -Path '/login' -Authentication 'Login' -Login Finally, we have the logout Route. Here we have another switch of -Logout , which just means to kill the session and redirect the user to the login page: Add-PodeRoute -Method Post -Path '/logout' -Authentication 'Login' -Logout Example Code This is the full code for the server above: Start-PodeServer -Thread 2 { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # use pode template engine Set-PodeViewEngine -Type Pode # setup session middleware Enable-PodeSessionMiddleware -Duration 120 -Extend # setup form authentication New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ User = @{ ID = 'M0R7Y302' Name = 'Morty' Type = 'Human' } } } # aww geez! no user was found return @{ Message = 'Invalid details supplied' } } # the \"GET /\" endpoint for the homepage Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -ScriptBlock { $WebEvent . Session . Data . Views ++ Write-PodeViewResponse -Path 'auth-home' -Data @{ Username = $WebEvent . Auth . User . Name ; Views = $WebEvent . Session . Data . Views ; } } # the \"GET /login\" endpoint for the login page Add-PodeRoute -Method Get -Path '/login' -Authentication 'Login' -Login -ScriptBlock { Write-PodeViewResponse -Path 'auth-login' -FlashMessages } # the \"POST /login\" endpoint for user authentication Add-PodeRoute -Method Post -Path '/login' -Authentication 'Login' -Login # the \"POST /logout\" endpoint for ending the session Add-PodeRoute -Method Post -Path '/logout' -Authentication 'Login' -Logout } Pages The following are the web pages used above, as well as the CSS style. The web pages have been created using .pode files, which allows you to embed PowerShell into the files. auth-home.pode < html > < head > < title > Auth Home </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > Hello, $($data.Username)! You have view this page $($data.Views) times! < form action = \"/logout\" method = \"post\" > < div > < input type = \"submit\" value = \"Logout\" /> </ div > </ form > </ body > </ html > auth-login.pode < html > < head > < title > Auth Login </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > Please Login: < form action = \"/login\" method = \"post\" > < div > < label > Username: </ label > < input type = \"text\" name = \"username\" /> </ div > < div > < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ div > < div > < input type = \"submit\" value = \"Login\" /> </ div > </ form > </ body > </ html > styles/main.css body { background-color : rebeccapurple ; }","title":"Creating a Login Page"},{"location":"Tutorials/Routes/Examples/LoginPage/#creating-a-login-page","text":"This is an example of having a website with a login and home page - with a logout button. The pages will all be done using .pode files, and authentication will be done using Form authentication with Sessions . Info The full example can be seen on GitHub in examples/web-auth-form.ps1 .","title":"Creating a Login Page"},{"location":"Tutorials/Routes/Examples/LoginPage/#file-structure","text":"Firstly, the file structure of this example will look as follows: server.ps1 /views auth-home.pode auth-login.pode /public styles/main.css","title":"File Structure"},{"location":"Tutorials/Routes/Examples/LoginPage/#server","text":"To start off this script, you'll need to have the main Start-PodeServer function; here we'll use 2 threads to handle requests: Start-PodeServer -Thread 2 { # the rest of the logic goes here! } Next, we'll need to use the Add-PodeEndpoint function to listen on an endpoint and then specify the View Engine as using .pode files: Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Set-PodeViewEngine -Type Pode To use sessions for our authentication (so we can stay logged in), we need to setup Session Middleware using the Enable-PodeSessionMiddleware function. Here our sessions will last for 2 minutes, and will be extended on each request: Enable-PodeSessionMiddleware -Duration 120 -Extend Once we have the Session Middleware initialised, we need to setup Form authentication - the username/password here are hard-coded, but normally you would validate against some database. We also specify a -FailureUrl , which is the URL to redirect a user to if they try to access a page un-authenticated. The -SuccessUrl is the URL to redirect to on successful authentication. New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ User = @{ ID = 'M0R7Y302' Name = 'Morty' Type = 'Human' } } } # aww geez! no user was found return @{ Message = 'Invalid details supplied' } } Below is the Route for the root ( / ) endpoint. This will check the cookies in the request for a signed session cookie, if one is found then the index.pode page is displayed - after incrementing a page-view counter. However, if there is no session, or authentication fails, the user is redirected to the login page: Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -ScriptBlock { $WebEvent . Session . Data . Views ++ Write-PodeViewResponse -Path 'auth-home' -Data @{ Username = $WebEvent . Auth . User . Name ; Views = $WebEvent . Session . Data . Views ; } } Next we have the login Route, which is actually two routes. The GET /login is the page itself, whereas the POST /login is the authentication part (the endpoint the <form> element's action will hit). For the POST Route, if authentication passes the user is logged in and redirected to the home page, but if it failed they're taken back to the login page. For the GET and POST login Route we supply the -Login switch, this flags that if the user navigates to the login page with an already verified session then they're automatically redirected to the home page (the -SuccessUrl ). However, if they have no session or authentication fails then instead of a 403 being displayed, the login page is displayed instead (to prevent continuously trying to redirect to the /login page). # the login page itself Add-PodeRoute -Method Get -Path '/login' -Authentication 'Login' -Login -ScriptBlock { Write-PodeViewResponse -Path 'auth-login' -FlashMessages } # the POST action for the <form> Add-PodeRoute -Method Post -Path '/login' -Authentication 'Login' -Login Finally, we have the logout Route. Here we have another switch of -Logout , which just means to kill the session and redirect the user to the login page: Add-PodeRoute -Method Post -Path '/logout' -Authentication 'Login' -Logout","title":"Server"},{"location":"Tutorials/Routes/Examples/LoginPage/#example-code","text":"This is the full code for the server above: Start-PodeServer -Thread 2 { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # use pode template engine Set-PodeViewEngine -Type Pode # setup session middleware Enable-PodeSessionMiddleware -Duration 120 -Extend # setup form authentication New-PodeAuthScheme -Form | Add-PodeAuth -Name 'Login' -FailureUrl '/login' -SuccessUrl '/' -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ User = @{ ID = 'M0R7Y302' Name = 'Morty' Type = 'Human' } } } # aww geez! no user was found return @{ Message = 'Invalid details supplied' } } # the \"GET /\" endpoint for the homepage Add-PodeRoute -Method Get -Path '/' -Authentication 'Login' -ScriptBlock { $WebEvent . Session . Data . Views ++ Write-PodeViewResponse -Path 'auth-home' -Data @{ Username = $WebEvent . Auth . User . Name ; Views = $WebEvent . Session . Data . Views ; } } # the \"GET /login\" endpoint for the login page Add-PodeRoute -Method Get -Path '/login' -Authentication 'Login' -Login -ScriptBlock { Write-PodeViewResponse -Path 'auth-login' -FlashMessages } # the \"POST /login\" endpoint for user authentication Add-PodeRoute -Method Post -Path '/login' -Authentication 'Login' -Login # the \"POST /logout\" endpoint for ending the session Add-PodeRoute -Method Post -Path '/logout' -Authentication 'Login' -Logout }","title":"Example Code"},{"location":"Tutorials/Routes/Examples/LoginPage/#pages","text":"The following are the web pages used above, as well as the CSS style. The web pages have been created using .pode files, which allows you to embed PowerShell into the files. auth-home.pode < html > < head > < title > Auth Home </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > Hello, $($data.Username)! You have view this page $($data.Views) times! < form action = \"/logout\" method = \"post\" > < div > < input type = \"submit\" value = \"Logout\" /> </ div > </ form > </ body > </ html > auth-login.pode < html > < head > < title > Auth Login </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > Please Login: < form action = \"/login\" method = \"post\" > < div > < label > Username: </ label > < input type = \"text\" name = \"username\" /> </ div > < div > < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ div > < div > < input type = \"submit\" value = \"Login\" /> </ div > </ form > </ body > </ html > styles/main.css body { background-color : rebeccapurple ; }","title":"Pages"},{"location":"Tutorials/Routes/Examples/RestApiSessions/","text":"REST APIs and Sessions Sessions in Pode are normally done using cookies, but you can also use them via headers as well. This way you can have two endpoints for authentication login/logout, and the rest of your routes depend on a valid SessionId. Info The full example can be seen on GitHub in examples/web-auth-basic-header.ps1 . Server To start off, you'll need the main Start-PodeServer function; here we'll use 2 threads to handle requests: Start-PodeServer -Thread 2 { # the rest of the logic goes here! } Next, we'll need an endpoint to listen on. Using the Add-PodeEndpoint function will let you specify and endpoint for your server to listen on, such as http://localhost:8080 : Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Enabling Sessions To use sessions with headers for our authentication, we need to setup Session Middleware using the Enable-PodeSessionMiddleware function. Here our sessions will last for 2 minutes, and will be extended on each request: Enable-PodeSessionMiddleware -Duration 120 -Extend -UseHeaders Authentication Once we have the Sessions enabled, we need to setup Basic authentication - the username/password here are hard-coded, but normally you would validate against some database: New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ User = @{ ID = 'M0R7Y302' Name = 'Morty' Type = 'Human' } } } # aww geez! no user was found return @{ Message = 'Invalid details supplied' } } Login and Logout The first two routes will be two POST routes to login/logout a user. This first route will authenticate the user, and then respond back with a session in the response's pode.sid header: Add-PodeRoute -Method Post -Path '/login' -Authentication 'Login' For the login endpoint, you would the request and supply the normal Authorization header. The second route will require the session to be sent in the request's pode.sid header, and will expire and destroy the session: Add-PodeRoute -Method Post -Path '/logout' -Authentication 'Login' -Logout The first route on success will return with a 200 response, the logout route will respond with a 401 since the session no longer exists. And other routes called using the same session will also return with a 401. Routes This is a very basic POST route, but it will return a list of users if a valid pode.sid header has been supplied on the request: Add-PodeRoute -Method Post -Path '/users' -Authentication 'Login' -ScriptBlock { Write-PodeJsonResponse -Value @{ Users = @( @{ Name = 'Deep Thought' Age = 42 }, @{ Name = 'Leeroy Jenkins' Age = 1337 } ) } } If you don't supply a session, or supply an invalid one, then a 401 in returned. You could also just straight-up supply the Authorization header on the request instead. Web Requests If you use the exact endpoint and dummy credentials above, then the follow are calls you can do on the PowerShell CLI. Login This call will authenticate and create a session: $session = ( Invoke-WebRequest -Uri http :// localhost : 8080 / login -Method Post -Headers @{ Authorization = 'Basic bW9ydHk6cGlja2xl' }). Headers [ 'pode.sid' ][ 0 ] Users This call will use the above session from logging in, and return a list of users: Invoke-RestMethod -Uri http :// localhost : 8080 / users -Method Post -Headers @{ 'pode.sid' = \"$session\" } Logout This call will use the same session, but will time it out: Invoke-WebRequest -Uri http :// localhost : 8085 / logout -Method Post -Headers @{ 'pode.sid' = \"$session\" }","title":"REST APIs and Sessions"},{"location":"Tutorials/Routes/Examples/RestApiSessions/#rest-apis-and-sessions","text":"Sessions in Pode are normally done using cookies, but you can also use them via headers as well. This way you can have two endpoints for authentication login/logout, and the rest of your routes depend on a valid SessionId. Info The full example can be seen on GitHub in examples/web-auth-basic-header.ps1 .","title":"REST APIs and Sessions"},{"location":"Tutorials/Routes/Examples/RestApiSessions/#server","text":"To start off, you'll need the main Start-PodeServer function; here we'll use 2 threads to handle requests: Start-PodeServer -Thread 2 { # the rest of the logic goes here! } Next, we'll need an endpoint to listen on. Using the Add-PodeEndpoint function will let you specify and endpoint for your server to listen on, such as http://localhost:8080 : Add-PodeEndpoint -Address * -Port 8080 -Protocol Http","title":"Server"},{"location":"Tutorials/Routes/Examples/RestApiSessions/#enabling-sessions","text":"To use sessions with headers for our authentication, we need to setup Session Middleware using the Enable-PodeSessionMiddleware function. Here our sessions will last for 2 minutes, and will be extended on each request: Enable-PodeSessionMiddleware -Duration 120 -Extend -UseHeaders","title":"Enabling Sessions"},{"location":"Tutorials/Routes/Examples/RestApiSessions/#authentication","text":"Once we have the Sessions enabled, we need to setup Basic authentication - the username/password here are hard-coded, but normally you would validate against some database: New-PodeAuthScheme -Basic | Add-PodeAuth -Name 'Login' -ScriptBlock { param ( $username , $password ) # here you'd check a real user storage, this is just for example if ( $username -eq 'morty' -and $password -eq 'pickle' ) { return @{ User = @{ ID = 'M0R7Y302' Name = 'Morty' Type = 'Human' } } } # aww geez! no user was found return @{ Message = 'Invalid details supplied' } }","title":"Authentication"},{"location":"Tutorials/Routes/Examples/RestApiSessions/#login-and-logout","text":"The first two routes will be two POST routes to login/logout a user. This first route will authenticate the user, and then respond back with a session in the response's pode.sid header: Add-PodeRoute -Method Post -Path '/login' -Authentication 'Login' For the login endpoint, you would the request and supply the normal Authorization header. The second route will require the session to be sent in the request's pode.sid header, and will expire and destroy the session: Add-PodeRoute -Method Post -Path '/logout' -Authentication 'Login' -Logout The first route on success will return with a 200 response, the logout route will respond with a 401 since the session no longer exists. And other routes called using the same session will also return with a 401.","title":"Login and Logout"},{"location":"Tutorials/Routes/Examples/RestApiSessions/#routes","text":"This is a very basic POST route, but it will return a list of users if a valid pode.sid header has been supplied on the request: Add-PodeRoute -Method Post -Path '/users' -Authentication 'Login' -ScriptBlock { Write-PodeJsonResponse -Value @{ Users = @( @{ Name = 'Deep Thought' Age = 42 }, @{ Name = 'Leeroy Jenkins' Age = 1337 } ) } } If you don't supply a session, or supply an invalid one, then a 401 in returned. You could also just straight-up supply the Authorization header on the request instead.","title":"Routes"},{"location":"Tutorials/Routes/Examples/RestApiSessions/#web-requests","text":"If you use the exact endpoint and dummy credentials above, then the follow are calls you can do on the PowerShell CLI.","title":"Web Requests"},{"location":"Tutorials/Routes/Examples/RestApiSessions/#login","text":"This call will authenticate and create a session: $session = ( Invoke-WebRequest -Uri http :// localhost : 8080 / login -Method Post -Headers @{ Authorization = 'Basic bW9ydHk6cGlja2xl' }). Headers [ 'pode.sid' ][ 0 ]","title":"Login"},{"location":"Tutorials/Routes/Examples/RestApiSessions/#users","text":"This call will use the above session from logging in, and return a list of users: Invoke-RestMethod -Uri http :// localhost : 8080 / users -Method Post -Headers @{ 'pode.sid' = \"$session\" }","title":"Users"},{"location":"Tutorials/Routes/Examples/RestApiSessions/#logout","text":"This call will use the same session, but will time it out: Invoke-WebRequest -Uri http :// localhost : 8085 / logout -Method Post -Headers @{ 'pode.sid' = \"$session\" }","title":"Logout"},{"location":"Tutorials/Routes/Examples/WebPages/","text":"Creating a Web Page Serving up web pages via Pode is simple, you can either write your pages in HTML, Pode, another template engine; then place those files within the /views directory. You can also use CSS, JavaScript, Images, etc. and place those files within the /public directory. Basics To serve up a web page you use the Write-PodeViewResponse function, and if you're using a dynamic template (like .pode files) to render your views use the Write-PodeViewResponse function. When you use the Write-PodeViewResponse function to serve a web page, the path to the view must be relative to the /views directory. For example, the following will display the /views/index.html page: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } Info If your web page references any CSS, JavaScript, etc. files, then Pode will automatically find them within the /public directory - or any relative static routes you may have defined. For example, if you reference <link rel=\"stylesheet\" type=\"text/css\" href=\"/styles/simple.css\"> in your HTML file, then Pode will look for /public/styles/simple.css . Example Code Here we'll have two simple HTML pages, with a CSS file and a simple server script. The directory structure is as follows: server.ps1 /views index.html about.html /public /stylyes main.css server.ps1 Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } Add-PodeRoute -Method Get -Path '/about' -ScriptBlock { Write-PodeViewResponse -Path 'about' } } index.html < html > < head > < title > Home Page </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > < h1 > Hello, world! </ h1 > < p > Welcome to my very simple home page! </ p > < p > To know more about me, < a href = \"/about\" > click here </ a > ! </ p > </ body > </ html > about.html < html > < head > < title > About Me </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > < h1 > About Me </ h1 > < p > My name is Rick Sanchez </ p > < p > Wubba lubba dub dub!! </ p > < p > To go back home, < a href = \"/\" > click here </ a > . </ p > </ body > </ html > styles/main.css body { background-color : rebeccapurple ; }","title":"Creating a Web Page"},{"location":"Tutorials/Routes/Examples/WebPages/#creating-a-web-page","text":"Serving up web pages via Pode is simple, you can either write your pages in HTML, Pode, another template engine; then place those files within the /views directory. You can also use CSS, JavaScript, Images, etc. and place those files within the /public directory.","title":"Creating a Web Page"},{"location":"Tutorials/Routes/Examples/WebPages/#basics","text":"To serve up a web page you use the Write-PodeViewResponse function, and if you're using a dynamic template (like .pode files) to render your views use the Write-PodeViewResponse function. When you use the Write-PodeViewResponse function to serve a web page, the path to the view must be relative to the /views directory. For example, the following will display the /views/index.html page: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } Info If your web page references any CSS, JavaScript, etc. files, then Pode will automatically find them within the /public directory - or any relative static routes you may have defined. For example, if you reference <link rel=\"stylesheet\" type=\"text/css\" href=\"/styles/simple.css\"> in your HTML file, then Pode will look for /public/styles/simple.css .","title":"Basics"},{"location":"Tutorials/Routes/Examples/WebPages/#example-code","text":"Here we'll have two simple HTML pages, with a CSS file and a simple server script. The directory structure is as follows: server.ps1 /views index.html about.html /public /stylyes main.css server.ps1 Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } Add-PodeRoute -Method Get -Path '/about' -ScriptBlock { Write-PodeViewResponse -Path 'about' } } index.html < html > < head > < title > Home Page </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > < h1 > Hello, world! </ h1 > < p > Welcome to my very simple home page! </ p > < p > To know more about me, < a href = \"/about\" > click here </ a > ! </ p > </ body > </ html > about.html < html > < head > < title > About Me </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/styles/main.css\" > </ head > < body > < h1 > About Me </ h1 > < p > My name is Rick Sanchez </ p > < p > Wubba lubba dub dub!! </ p > < p > To go back home, < a href = \"/\" > click here </ a > . </ p > </ body > </ html > styles/main.css body { background-color : rebeccapurple ; }","title":"Example Code"},{"location":"Tutorials/Routes/Utilities/AutomaticFunctionsAndModules/","text":"Automatic Route Creation for Functions and Modules Pode has support for converting commands (functions/aliases) into Routes. This could be from an array of defined commands, or by using a Module's exported commands. To do this, you use the ConvertTo-PodeRoute function. This function also allows you to specify a Path and Middleware for all the Routes generated. Commands You can convert an array of commands into Routes by supplying them to the ConvertTo-PodeRoute function. For example, to convert the Get-ChildItem and Invoke-Expression functions you can use the following: ConvertTo-PodeRoute -Commands @( 'Get-ChildItem' , 'Invoke-Expression' ) This will generate two Routes, similar to as if you did the below: Add-PodeRoute -Method Get -Path '/Get-ChildItem' -ScriptBlock { $parameters = $WebEvent . Query $result = ( Get-ChildItem @parameters ) Write-PodeJsonResponse -Value $result -Depth 1 } Add-PodeRoute -Method Post -Path '/Invoke-Expression' -ScriptBlock { $parameters = $WebEvent . Data $result = ( Invoke-Expression @parameters ) Write-PodeJsonResponse -Value $result -Depth 1 } Example Route invocation: Invoke-Restmethod http :// localhost : 8080 / Invoke-Expression -Body @{ Command = \"Get-Date\" } -Method POST In a POST request, function parameters become hashtable key/value pairs passed in the body. Accessible by $WebEvent.Data #Direct Query Parameters Invoke-RestMethod -Uri 'http://localhost:8080/Get-ChildItem?Path=/some/path' #Powershell Hashtable to Query Parameter Conversion Invoke-Restmethod http :// localhost : 8080 / Get-ChildItem -Body @{ Path = \"/some/path\" } -Method GET In a GET request, function parameters become URI query parameters. This can be supplied directly to the URI or by passing a hashtable in the body parameter field. Accessible by $WebEvent.Query Tip You can stop the function verbs being used in the Route's path by supplying the -NoVerb switch. Modules If you have a Module whose exported commands you want to convert into Routes, then you can supply the Module's name to ConvertTo-PodeRoute . Supplying a Module will cause it to be automatically imported using Import-PodeModule . This means the Module can be referenced by name, or by path, and it supports modules within the ps_modules directory. For example, if you wanted to import all commands from Pester you could do the following: ConvertTo-PodeRoute -Module Pester Or, you can convert specific commands from Pester: ConvertTo-PodeRoute -Module Pester -Commands @( 'Invoke-Pester' ) Route Path The Routes created will all have automatically generated paths. There are 3 components to the path: The first is if you supplied a path via -Path . The second is if you're using a Module. The final part is the name of the Command itself. In general, the path will look as follows: /<path>/<module>/<command> HTTP Methods The Routes created will also have an automatic HTTP method assigned. This method is determined by the verb of the command; if it's Get-ChildItem then it's a GET route, or if it's Invoke-Expression then it's a POST route. If you want to use one HTTP method for everything, then you can supply the -Method parameter on ConvertTo-PodeRoute . The table below defines how verbs are mapped. Method Verbs POST Default - All other verbs GET Find, Format, Get, Join, Search, Select, Split, Measure, Ping, Test, Trace PUT Set PATCH Rename, Edit, Update DELETE Clear, Close, Exit, Hide, Remove, Undo, Dismount, Unpublish, Disable, Uninstall, Unregister","title":"Automatic Route Creation for Functions and Modules"},{"location":"Tutorials/Routes/Utilities/AutomaticFunctionsAndModules/#automatic-route-creation-for-functions-and-modules","text":"Pode has support for converting commands (functions/aliases) into Routes. This could be from an array of defined commands, or by using a Module's exported commands. To do this, you use the ConvertTo-PodeRoute function. This function also allows you to specify a Path and Middleware for all the Routes generated.","title":"Automatic Route Creation for Functions and Modules"},{"location":"Tutorials/Routes/Utilities/AutomaticFunctionsAndModules/#commands","text":"You can convert an array of commands into Routes by supplying them to the ConvertTo-PodeRoute function. For example, to convert the Get-ChildItem and Invoke-Expression functions you can use the following: ConvertTo-PodeRoute -Commands @( 'Get-ChildItem' , 'Invoke-Expression' ) This will generate two Routes, similar to as if you did the below: Add-PodeRoute -Method Get -Path '/Get-ChildItem' -ScriptBlock { $parameters = $WebEvent . Query $result = ( Get-ChildItem @parameters ) Write-PodeJsonResponse -Value $result -Depth 1 } Add-PodeRoute -Method Post -Path '/Invoke-Expression' -ScriptBlock { $parameters = $WebEvent . Data $result = ( Invoke-Expression @parameters ) Write-PodeJsonResponse -Value $result -Depth 1 } Example Route invocation: Invoke-Restmethod http :// localhost : 8080 / Invoke-Expression -Body @{ Command = \"Get-Date\" } -Method POST In a POST request, function parameters become hashtable key/value pairs passed in the body. Accessible by $WebEvent.Data #Direct Query Parameters Invoke-RestMethod -Uri 'http://localhost:8080/Get-ChildItem?Path=/some/path' #Powershell Hashtable to Query Parameter Conversion Invoke-Restmethod http :// localhost : 8080 / Get-ChildItem -Body @{ Path = \"/some/path\" } -Method GET In a GET request, function parameters become URI query parameters. This can be supplied directly to the URI or by passing a hashtable in the body parameter field. Accessible by $WebEvent.Query Tip You can stop the function verbs being used in the Route's path by supplying the -NoVerb switch.","title":"Commands"},{"location":"Tutorials/Routes/Utilities/AutomaticFunctionsAndModules/#modules","text":"If you have a Module whose exported commands you want to convert into Routes, then you can supply the Module's name to ConvertTo-PodeRoute . Supplying a Module will cause it to be automatically imported using Import-PodeModule . This means the Module can be referenced by name, or by path, and it supports modules within the ps_modules directory. For example, if you wanted to import all commands from Pester you could do the following: ConvertTo-PodeRoute -Module Pester Or, you can convert specific commands from Pester: ConvertTo-PodeRoute -Module Pester -Commands @( 'Invoke-Pester' )","title":"Modules"},{"location":"Tutorials/Routes/Utilities/AutomaticFunctionsAndModules/#route-path","text":"The Routes created will all have automatically generated paths. There are 3 components to the path: The first is if you supplied a path via -Path . The second is if you're using a Module. The final part is the name of the Command itself. In general, the path will look as follows: /<path>/<module>/<command>","title":"Route Path"},{"location":"Tutorials/Routes/Utilities/AutomaticFunctionsAndModules/#http-methods","text":"The Routes created will also have an automatic HTTP method assigned. This method is determined by the verb of the command; if it's Get-ChildItem then it's a GET route, or if it's Invoke-Expression then it's a POST route. If you want to use one HTTP method for everything, then you can supply the -Method parameter on ConvertTo-PodeRoute . The table below defines how verbs are mapped. Method Verbs POST Default - All other verbs GET Find, Format, Get, Join, Search, Select, Split, Measure, Ping, Test, Trace PUT Set PATCH Rename, Edit, Update DELETE Clear, Close, Exit, Hide, Remove, Undo, Dismount, Unpublish, Disable, Uninstall, Unregister","title":"HTTP Methods"},{"location":"Tutorials/Routes/Utilities/ContentTypes/","text":"Content Types Any payload supplied in a web request is normally parsed using the content type on the request's headers. However, it's possible to override - or force - a specific content type on routes when parsing the payload. This can be achieved by either using the -ContentType parameter on the Add-PodeRoute function, or using the server.psd1 configuration file. When a specific content type is supplied then any payload will be parsed as that content type only - even if the content type is supplied on the web request's header. This way, you can force a route to only accept a certain content type. Routes You can specify a content type to use per route by using the -ContentType parameter. For example, if you have two routes you can force one to only parse JSON and the other XML as follows: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/api/json' -ContentType 'application/json' -ScriptBlock { Write-PodeJsonResponse -Value @{} } Add-PodeRoute -Method Get -Path '/api/xml' -ContentType 'text/xml' -ScriptBlock { Write-PodeXmlResponse -Value @{} } } If the /api/json endpoint is supplied an XML payload then the parsing will fail. Configuration Using the server.psd1 configuration file, you can define a default content type to use for every route, or you can define patterns to match multiple route paths to set content types on mass. Default To define a default content type for everything, you can use the following configuration: @{ Web = @{ ContentType = @{ Default = \"text/plain\" } } } Route Patterns You can define patterns to match multiple route paths, and any route that matches (when created) will have the appropriate content type set. For example, the following configuration in your server.psd1 would bind all /api routes to application/json , and then all /status routes to text/xml : @{ Web = @{ ContentType = @{ Routes = @{ \"/api/*\" = \"application/json\" \"/status/*\" = \"text/xml\" } } } } Precedence The content type that will be used is determined by the following order: Being defined on the Route. The Route matches a pattern defined in the configuration file. A default content type is defined in the configuration file. The content type supplied on the web request.","title":"Content Types"},{"location":"Tutorials/Routes/Utilities/ContentTypes/#content-types","text":"Any payload supplied in a web request is normally parsed using the content type on the request's headers. However, it's possible to override - or force - a specific content type on routes when parsing the payload. This can be achieved by either using the -ContentType parameter on the Add-PodeRoute function, or using the server.psd1 configuration file. When a specific content type is supplied then any payload will be parsed as that content type only - even if the content type is supplied on the web request's header. This way, you can force a route to only accept a certain content type.","title":"Content Types"},{"location":"Tutorials/Routes/Utilities/ContentTypes/#routes","text":"You can specify a content type to use per route by using the -ContentType parameter. For example, if you have two routes you can force one to only parse JSON and the other XML as follows: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/api/json' -ContentType 'application/json' -ScriptBlock { Write-PodeJsonResponse -Value @{} } Add-PodeRoute -Method Get -Path '/api/xml' -ContentType 'text/xml' -ScriptBlock { Write-PodeXmlResponse -Value @{} } } If the /api/json endpoint is supplied an XML payload then the parsing will fail.","title":"Routes"},{"location":"Tutorials/Routes/Utilities/ContentTypes/#configuration","text":"Using the server.psd1 configuration file, you can define a default content type to use for every route, or you can define patterns to match multiple route paths to set content types on mass.","title":"Configuration"},{"location":"Tutorials/Routes/Utilities/ContentTypes/#default","text":"To define a default content type for everything, you can use the following configuration: @{ Web = @{ ContentType = @{ Default = \"text/plain\" } } }","title":"Default"},{"location":"Tutorials/Routes/Utilities/ContentTypes/#route-patterns","text":"You can define patterns to match multiple route paths, and any route that matches (when created) will have the appropriate content type set. For example, the following configuration in your server.psd1 would bind all /api routes to application/json , and then all /status routes to text/xml : @{ Web = @{ ContentType = @{ Routes = @{ \"/api/*\" = \"application/json\" \"/status/*\" = \"text/xml\" } } } }","title":"Route Patterns"},{"location":"Tutorials/Routes/Utilities/ContentTypes/#precedence","text":"The content type that will be used is determined by the following order: Being defined on the Route. The Route matches a pattern defined in the configuration file. A default content type is defined in the configuration file. The content type supplied on the web request.","title":"Precedence"},{"location":"Tutorials/Routes/Utilities/ErrorPages/","text":"Error Pages / Status Codes During web requests, Pode has some default status codes that can be returned throughout a request's lifecycle: 200 on success 400 when the query string or payload are invalid 403 when access to the server is unauthorised 404 if the route can't be found 429 if the rate limit is reached 500 for a complete failure Status codes that are 400+ will be rendered as an error page, unless the -NoErrorPage switch is passed to the Set-PodeResponseStatus function. Pode itself has inbuilt error pages (HTML, JSON, and XML), but you can override these pages using custom error pages ( described below ). If the error page being generated is dynamic, then the following $data is supplied and can be used the same as in views: The HTTP status code A description for the status The URL that threw the error The content-type of the error page being generated They're also supplied details of any exception passed to the Set-PodeResponseStatus function, which can be rendered if enabled via the server.psd1 configuration file. Status Codes The Set-PodeResponseStatus function allows you to set your own status code on the response, as well as a custom description. If the status code was triggered by an exception being thrown, then you can also supply this so it can be rendered on any error pages . The following example will set the status code of the response to be 418 : Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/teapot' -ScriptBlock { Set-PodeResponseStatus -Code 418 } } Where as this example will set the status code to 500 with a custom description, and the exception that caused the error: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/eek' -ScriptBlock { try { # logic } catch { Set-PodeResponseStatus -Code 500 -Description 'oh no! something went wrong!' -Exception $_ } } } Error Pages When a response is returned with a status code of 400+, then Pode will attempt to render these as styled error pages. By default, Pode has inbuilt error pages that will be used (these show the status code, description, the URL, and if enabled the exception message/stacktrace). The inbuilt error pages are of types HTML, JSON, and XML. By default Pode will always attempt to use the HTML error pages however, if you set, say strict content typing , then Pode will also attempt to use the JSON/XML error pages if the request's content type header is set appropriately. Custom In Pode you can use custom error pages, so you can stylise your own rather than using the inbuilt ones that come with Pode. To use your own custom error pages you have to place them within an /errors directory, at the root of your server (similar to /views and /public ). These pages should be called the name of a status code, the content type of the page, and an optional view engine extension: <code>.<type>[.<engine>] # ie: 400.html, or 404.json.pode Or, you can use a default error page which will be used for any status codes that doesn't have a specific page define: default.<type>[.<engine>] # ie: default.html, or default.json.pode An example file structure for /errors is as follows: /errors default.html 404.html 404.json 500.html.pode By default Pode will always generate error pages as HTML, unless you enable strict content typing or routes patterns ( detailed later ). Important To use error pages with a view engine (such as .pode ), you need to use the Set-PodeViewEngine function in your server. Dynamic Data If you're using a dynamic view engine to render the error pages, then like views , there will be a $data variable that you can use within the error page file. The $data variable will have the following structure: @{ Url = [string] Status = @{ Code = [int] Description = [string] } Exception = @{ Message = [string] StackTrace = [string] Line = [string] Category = [string] } ContentType = [string] } Note If you've disabled the showing of exceptions, then the Exception property will be $null . Exceptions Above you'll see that the exception supplied to status will also be supplied to any dynamic error pages. By default this is disabled, but you can enable the viewing of exceptions on the error page by using the server.psd1 configuration file: @{ Web = @{ ErrorPages = @{ ShowExceptions = $true } } } Once set to true , any available exception details for status codes will be available to error pages - a useful setting to have in a server.dev.psd1 file. Content Types Using the server.psd1 configuration file, you can define which file content types to attempt when generating error pages for routes. You can either: Define a default content type that will apply to every route, or Enable strict content typing to use a route/request's content type, or Define patterns to match multiple route paths to set content types on mass Default To define a default content type for everything, you can use the following configuration. With this, any error thrown in any route will attempt to render an HTML error page: @{ Web = @{ ErrorPages = @{ Default = \"text/html\" } } } Route Patterns You can define patterns to match multiple route paths, and any route that matches, when an error page is being generated, will attempt to generate an error page for the content type set. For example, the following configuration in your server.psd1 file would bind all /api routes to application/json error pages, and then all /status routes to text/xml error pages: @{ Web = @{ ErrorPages = @{ Routes = @{ \"/api/*\" = \"application/json\" \"/status/*\" = \"text/xml\" } } } } Strict Typing You can enable strict content typing in the server.psd1 file. When enabled, Pode will attempt to generate an error page that matches the route/request's content type. For example: if the request's Content-Type header is set to application/json (or you're using route content types ), and you have strict content typing enabled, then Pode will attempt to use a JSON error page. To enable strict content typing, you can use the following: @{ Web = @{ ErrorPages = @{ StrictContentTyping = $true } } } Type Precedence The content type that will used, when attempting to generate an error page, will be determined by the following order: A content type is supplied directly to the status function (via -ContentType ). An error page content type is supplied directly to the route function (via -ErrorType ). The route matches a pattern defined in the configuration file. Strict content typing is enabled in the configuration file. A default error page content type is defined in the configuration file. use the default of HTML. File Precedence The error page file that will used will be determined by the following order. This order will be done for each step that matches in the above type precedence : <code>.<type> - ie: 404.json <code>.<type>.<engine> - ie: 404.json.pode <code>.<engine> - ie: 404.pode default.<type> - ie: default.json default.<type>.<engine> - ie: default.json.pode default.<engine> - ie: default.pode Inbuilt pages Example Page The following is a simple default.html.pode dynamic error page example, which will render the status code and description - and if available, the exception message and stacktrace: < html > < head > < title > $($data.status.code) Error </ title > </ head > < body > < h1 > $($data.status.code) Error </ h1 > < p > Description: $($data.status.description) </ p > $(if ($data.exception) { \" < pre > $($data.exception.message) $($data.exception.stacktrace) </ pre > \" }) </ body > </ html >","title":"Error Pages / Status Codes"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#error-pages-status-codes","text":"During web requests, Pode has some default status codes that can be returned throughout a request's lifecycle: 200 on success 400 when the query string or payload are invalid 403 when access to the server is unauthorised 404 if the route can't be found 429 if the rate limit is reached 500 for a complete failure Status codes that are 400+ will be rendered as an error page, unless the -NoErrorPage switch is passed to the Set-PodeResponseStatus function. Pode itself has inbuilt error pages (HTML, JSON, and XML), but you can override these pages using custom error pages ( described below ). If the error page being generated is dynamic, then the following $data is supplied and can be used the same as in views: The HTTP status code A description for the status The URL that threw the error The content-type of the error page being generated They're also supplied details of any exception passed to the Set-PodeResponseStatus function, which can be rendered if enabled via the server.psd1 configuration file.","title":"Error Pages / Status Codes"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#status-codes","text":"The Set-PodeResponseStatus function allows you to set your own status code on the response, as well as a custom description. If the status code was triggered by an exception being thrown, then you can also supply this so it can be rendered on any error pages . The following example will set the status code of the response to be 418 : Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/teapot' -ScriptBlock { Set-PodeResponseStatus -Code 418 } } Where as this example will set the status code to 500 with a custom description, and the exception that caused the error: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/eek' -ScriptBlock { try { # logic } catch { Set-PodeResponseStatus -Code 500 -Description 'oh no! something went wrong!' -Exception $_ } } }","title":"Status Codes"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#error-pages","text":"When a response is returned with a status code of 400+, then Pode will attempt to render these as styled error pages. By default, Pode has inbuilt error pages that will be used (these show the status code, description, the URL, and if enabled the exception message/stacktrace). The inbuilt error pages are of types HTML, JSON, and XML. By default Pode will always attempt to use the HTML error pages however, if you set, say strict content typing , then Pode will also attempt to use the JSON/XML error pages if the request's content type header is set appropriately.","title":"Error Pages"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#custom","text":"In Pode you can use custom error pages, so you can stylise your own rather than using the inbuilt ones that come with Pode. To use your own custom error pages you have to place them within an /errors directory, at the root of your server (similar to /views and /public ). These pages should be called the name of a status code, the content type of the page, and an optional view engine extension: <code>.<type>[.<engine>] # ie: 400.html, or 404.json.pode Or, you can use a default error page which will be used for any status codes that doesn't have a specific page define: default.<type>[.<engine>] # ie: default.html, or default.json.pode An example file structure for /errors is as follows: /errors default.html 404.html 404.json 500.html.pode By default Pode will always generate error pages as HTML, unless you enable strict content typing or routes patterns ( detailed later ). Important To use error pages with a view engine (such as .pode ), you need to use the Set-PodeViewEngine function in your server.","title":"Custom"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#dynamic-data","text":"If you're using a dynamic view engine to render the error pages, then like views , there will be a $data variable that you can use within the error page file. The $data variable will have the following structure: @{ Url = [string] Status = @{ Code = [int] Description = [string] } Exception = @{ Message = [string] StackTrace = [string] Line = [string] Category = [string] } ContentType = [string] } Note If you've disabled the showing of exceptions, then the Exception property will be $null .","title":"Dynamic Data"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#exceptions","text":"Above you'll see that the exception supplied to status will also be supplied to any dynamic error pages. By default this is disabled, but you can enable the viewing of exceptions on the error page by using the server.psd1 configuration file: @{ Web = @{ ErrorPages = @{ ShowExceptions = $true } } } Once set to true , any available exception details for status codes will be available to error pages - a useful setting to have in a server.dev.psd1 file.","title":"Exceptions"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#content-types","text":"Using the server.psd1 configuration file, you can define which file content types to attempt when generating error pages for routes. You can either: Define a default content type that will apply to every route, or Enable strict content typing to use a route/request's content type, or Define patterns to match multiple route paths to set content types on mass","title":"Content Types"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#default","text":"To define a default content type for everything, you can use the following configuration. With this, any error thrown in any route will attempt to render an HTML error page: @{ Web = @{ ErrorPages = @{ Default = \"text/html\" } } }","title":"Default"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#route-patterns","text":"You can define patterns to match multiple route paths, and any route that matches, when an error page is being generated, will attempt to generate an error page for the content type set. For example, the following configuration in your server.psd1 file would bind all /api routes to application/json error pages, and then all /status routes to text/xml error pages: @{ Web = @{ ErrorPages = @{ Routes = @{ \"/api/*\" = \"application/json\" \"/status/*\" = \"text/xml\" } } } }","title":"Route Patterns"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#strict-typing","text":"You can enable strict content typing in the server.psd1 file. When enabled, Pode will attempt to generate an error page that matches the route/request's content type. For example: if the request's Content-Type header is set to application/json (or you're using route content types ), and you have strict content typing enabled, then Pode will attempt to use a JSON error page. To enable strict content typing, you can use the following: @{ Web = @{ ErrorPages = @{ StrictContentTyping = $true } } }","title":"Strict Typing"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#type-precedence","text":"The content type that will used, when attempting to generate an error page, will be determined by the following order: A content type is supplied directly to the status function (via -ContentType ). An error page content type is supplied directly to the route function (via -ErrorType ). The route matches a pattern defined in the configuration file. Strict content typing is enabled in the configuration file. A default error page content type is defined in the configuration file. use the default of HTML.","title":"Type Precedence"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#file-precedence","text":"The error page file that will used will be determined by the following order. This order will be done for each step that matches in the above type precedence : <code>.<type> - ie: 404.json <code>.<type>.<engine> - ie: 404.json.pode <code>.<engine> - ie: 404.pode default.<type> - ie: default.json default.<type>.<engine> - ie: default.json.pode default.<engine> - ie: default.pode Inbuilt pages","title":"File Precedence"},{"location":"Tutorials/Routes/Utilities/ErrorPages/#example-page","text":"The following is a simple default.html.pode dynamic error page example, which will render the status code and description - and if available, the exception message and stacktrace: < html > < head > < title > $($data.status.code) Error </ title > </ head > < body > < h1 > $($data.status.code) Error </ h1 > < p > Description: $($data.status.description) </ p > $(if ($data.exception) { \" < pre > $($data.exception.message) $($data.exception.stacktrace) </ pre > \" }) </ body > </ html >","title":"Example Page"},{"location":"Tutorials/Routes/Utilities/FlashMessages/","text":"Flash Messages Flash messages allow you to pass temporary messages - info/error or otherwise - across multiple web requests via a user's current session. For example, in sign-up logic you could set a flash error message for an invalid email address; retrieving the message from the session on a redirect for the view, allowing the view to render error messages. Important To use flash messages you need to have Session Middleware enabled. Usage The flash functions allow you to add, get, and remove messages on a user's session. If you call Add-PodeFlashMessage using the same Name multiple times, then the messages will be appended as an array. Calling Add-PodeFlashMessage for a Name will remove all messages from the current session for the Name supplied. The following is an example of adding a flash message to a session, this will add a message under the email-error key: Add-PodeFlashMessage -Name 'email-error' -Message 'Invalid email address' Then to retrieve the message, you can do this in a Route for a View: Add-PodeRoute -Method Get -Path '/signup' -ScriptBlock { Write-PodeViewResponse -Path 'signup' -Data @{ Errors = @{ Email = ( Get-PodeFlashMessage -Name 'email-error' ) } } } Views The Write-PodeViewResponse function has a helper switch ( -FlashMessages ) to load all current flash messages in the session, into the views data - to save time writing lots of Write-PodeViewResponse calls. When used, all messages will be loaded into the $data argument supplied to dynamic views, and accessible under $data.flash . For example, somewhere we could have a sign-up flow which fails validation and adds two messages to the session: Add-PodeFlashMessage -Name 'email-error' -Message 'Invalid email address' Add-PodeFlashMessage -Name 'name-error' -Message 'No first/last name supplied' Then, within your route to load the sign-up view, you can use the switch to automatically load all current flash messages: Add-PodeRoute -Method Get -Path '/signup' -ScriptBlock { Write-PodeViewResponse 'signup' -FlashMessages } With this, the two flash messages for email-error and name-error are automatically added to a dynamic view's $data.flash property. You could get these back in the view, such as the snippet of a possible signup.pode : < html > < head > ... </ head > < body > < form action = \"/signup\" method = \"post\" > <!-- The email input control --> < label > Email Address: </ label > < input type = \"text\" id = \"email\" name = \"email\" /> <!-- Check if there's a flash error, and display it --> $(if ($data.flash['email-error']) { \" < p class = 'error' > $($data.flash['email-error']) </ p > \" }) </ form > </ body > </ html > Authentication When doing authentication checks, normally if the check fails Pode will throw an error and return with a 401 status code. These errors are also stored in the current Session's Flash messages under an auth-error key - if sessions are enabled. For example, here we have a login page, with the POST login check. Any authentication errors will be loaded into the session's flash messages: Add-PodeRoute -Method Get -Path '/login' -Authentication Login -Login -ScriptBlock { Write-PodeViewResponse -Path 'auth-login' -FlashMessages } Add-PodeRoute -Method Post -Path '/login' -Authentication Login -Login Then, to load the authentication back for the user: < html > < head > ... </ head > < body > < form action = \"/login\" method = \"post\" > <!-- The username control --> < label > Username: </ label > < input type = \"text\" name = \"username\" /> <!-- The password control --> < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ form > <!-- Check if there's a flash error, and display it --> $(if ($Data.flash['auth-error']) { \" < p class = 'error' > $($data.flash['auth-error']) </ p > \" }) </ body > </ html >","title":"Flash Messages"},{"location":"Tutorials/Routes/Utilities/FlashMessages/#flash-messages","text":"Flash messages allow you to pass temporary messages - info/error or otherwise - across multiple web requests via a user's current session. For example, in sign-up logic you could set a flash error message for an invalid email address; retrieving the message from the session on a redirect for the view, allowing the view to render error messages. Important To use flash messages you need to have Session Middleware enabled.","title":"Flash Messages"},{"location":"Tutorials/Routes/Utilities/FlashMessages/#usage","text":"The flash functions allow you to add, get, and remove messages on a user's session. If you call Add-PodeFlashMessage using the same Name multiple times, then the messages will be appended as an array. Calling Add-PodeFlashMessage for a Name will remove all messages from the current session for the Name supplied. The following is an example of adding a flash message to a session, this will add a message under the email-error key: Add-PodeFlashMessage -Name 'email-error' -Message 'Invalid email address' Then to retrieve the message, you can do this in a Route for a View: Add-PodeRoute -Method Get -Path '/signup' -ScriptBlock { Write-PodeViewResponse -Path 'signup' -Data @{ Errors = @{ Email = ( Get-PodeFlashMessage -Name 'email-error' ) } } }","title":"Usage"},{"location":"Tutorials/Routes/Utilities/FlashMessages/#views","text":"The Write-PodeViewResponse function has a helper switch ( -FlashMessages ) to load all current flash messages in the session, into the views data - to save time writing lots of Write-PodeViewResponse calls. When used, all messages will be loaded into the $data argument supplied to dynamic views, and accessible under $data.flash . For example, somewhere we could have a sign-up flow which fails validation and adds two messages to the session: Add-PodeFlashMessage -Name 'email-error' -Message 'Invalid email address' Add-PodeFlashMessage -Name 'name-error' -Message 'No first/last name supplied' Then, within your route to load the sign-up view, you can use the switch to automatically load all current flash messages: Add-PodeRoute -Method Get -Path '/signup' -ScriptBlock { Write-PodeViewResponse 'signup' -FlashMessages } With this, the two flash messages for email-error and name-error are automatically added to a dynamic view's $data.flash property. You could get these back in the view, such as the snippet of a possible signup.pode : < html > < head > ... </ head > < body > < form action = \"/signup\" method = \"post\" > <!-- The email input control --> < label > Email Address: </ label > < input type = \"text\" id = \"email\" name = \"email\" /> <!-- Check if there's a flash error, and display it --> $(if ($data.flash['email-error']) { \" < p class = 'error' > $($data.flash['email-error']) </ p > \" }) </ form > </ body > </ html >","title":"Views"},{"location":"Tutorials/Routes/Utilities/FlashMessages/#authentication","text":"When doing authentication checks, normally if the check fails Pode will throw an error and return with a 401 status code. These errors are also stored in the current Session's Flash messages under an auth-error key - if sessions are enabled. For example, here we have a login page, with the POST login check. Any authentication errors will be loaded into the session's flash messages: Add-PodeRoute -Method Get -Path '/login' -Authentication Login -Login -ScriptBlock { Write-PodeViewResponse -Path 'auth-login' -FlashMessages } Add-PodeRoute -Method Post -Path '/login' -Authentication Login -Login Then, to load the authentication back for the user: < html > < head > ... </ head > < body > < form action = \"/login\" method = \"post\" > <!-- The username control --> < label > Username: </ label > < input type = \"text\" name = \"username\" /> <!-- The password control --> < label > Password: </ label > < input type = \"password\" name = \"password\" /> </ form > <!-- Check if there's a flash error, and display it --> $(if ($Data.flash['auth-error']) { \" < p class = 'error' > $($data.flash['auth-error']) </ p > \" }) </ body > </ html >","title":"Authentication"},{"location":"Tutorials/Routes/Utilities/Redirecting/","text":"Redirecting Sometimes you just want a Route to redirect the user else where, be it to another URL or to the same Route just a different port/protocol. Usage When in a Route, to inform the client to redirect to a different endpoint you can use the Move-PodeResponseUrl function. Supplying -Url will redirect the user to that URL, or you can supply a relative path o the server for the user to be redirected to. The -Port and -Protocol can be used separately or together, but not with -Url . Using -Port / -Protocol will use the URI of the current web request to generate the redirect URL. By default the redirecting will return a 302 response, but supplying -Moved will return a 301 response instead. The following example will redirect the user to Google: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/redirect' -ScriptBlock { Move-PodeResponseUrl -Url 'https://google.com' } } The below example will redirect the user to the same host/server, but with a different protocol and port: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeEndpoint -Address * -Port 8086 -Protocol HTTPS Add-PodeRoute -Method Get -Path '/redirect' -ScriptBlock { Move-PodeResponseUrl -Port 8086 -Protocol Https } } This final example will redirect every HTTP request, on every action and route, to HTTPS: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http -Name EndpointHttp Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -Name EndpointHttps Add-PodeRoute -Method * -Path * -EndpointName EndpointHttp -ScriptBlock { Move-PodeResponseUrl -Port 8443 -Protocol Https } }","title":"Redirecting"},{"location":"Tutorials/Routes/Utilities/Redirecting/#redirecting","text":"Sometimes you just want a Route to redirect the user else where, be it to another URL or to the same Route just a different port/protocol.","title":"Redirecting"},{"location":"Tutorials/Routes/Utilities/Redirecting/#usage","text":"When in a Route, to inform the client to redirect to a different endpoint you can use the Move-PodeResponseUrl function. Supplying -Url will redirect the user to that URL, or you can supply a relative path o the server for the user to be redirected to. The -Port and -Protocol can be used separately or together, but not with -Url . Using -Port / -Protocol will use the URI of the current web request to generate the redirect URL. By default the redirecting will return a 302 response, but supplying -Moved will return a 301 response instead. The following example will redirect the user to Google: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeRoute -Method Get -Path '/redirect' -ScriptBlock { Move-PodeResponseUrl -Url 'https://google.com' } } The below example will redirect the user to the same host/server, but with a different protocol and port: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeEndpoint -Address * -Port 8086 -Protocol HTTPS Add-PodeRoute -Method Get -Path '/redirect' -ScriptBlock { Move-PodeResponseUrl -Port 8086 -Protocol Https } } This final example will redirect every HTTP request, on every action and route, to HTTPS: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http -Name EndpointHttp Add-PodeEndpoint -Address * -Port 8443 -Protocol Https -Name EndpointHttps Add-PodeRoute -Method * -Path * -EndpointName EndpointHttp -ScriptBlock { Move-PodeResponseUrl -Port 8443 -Protocol Https } }","title":"Usage"},{"location":"Tutorials/Routes/Utilities/RouteGrouping/","text":"Route Grouping Instead of adding multiple Routes all with the same path, middleware, authentication and other values; you can instead create these Routes in a Route Group. This will let you specify a shared base path, middleware, authentication, etc. for multiple Routes. There are Route groupings for normal Routes, Static Routes, and Signal Routes. Routes You can add a new Route Group using Add-PodeRouteGroup , and passing a any shared details, plus a -Routes scriptblock for the routes to be created within the grouping's scope. For example, the below will add 3 Routes which all share a /api base path; some Basic authentication, and some other middleware: $mid = New-PodeMiddleware -ScriptBlock { 'some middleware being run' | Out-Default } Add-PodeRouteGroup -Path '/api' -Authentication Basic -Middleware $mid -Routes { Add-PodeRoute -Method Get -Path '/route1' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 1 } } Add-PodeRoute -Method Get -Path '/route2' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 2 } } Add-PodeRoute -Method Get -Path '/route3' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 3 } } } When run, you'll have 3 Routes that all need some Basic authentication at /api/route1 , /api/route2 , and /api/route3 . You can still add custom -Middleware on the Routes, and they'll be appended to the shared Middleware from the Group. Other parameters, such as -ContentType and -EndpointName , if supplied, will override the values passed into the Group. You can also embed groups within groups. The following is the same as the above, except this time the last 2 Routes will be at /api/inner/route2 , and /api/inner/route3 : $mid = New-PodeMiddleware -ScriptBlock { 'some middleware being run' | Out-Default } Add-PodeRouteGroup -Path '/api' -Authentication Basic -Middleware $mid -Routes { Add-PodeRoute -Method Get -Path '/route1' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 1 } } Add-PodeRouteGroup -Path '/inner' -Routes { Add-PodeRoute -Method Get -Path '/route2' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 2 } } Add-PodeRoute -Method Get -Path '/route3' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 3 } } } } Static Routes The Groups for Static Routes work in the same manor as normal Routes, but you'll need to use Add-PodeStaticRouteGroup instead: Add-PodeStaticRouteGroup -Path '/assets' -Source './content/assets' -Routes { Add-PodeStaticRoute -Path '/images' -Source '/images' Add-PodeStaticRoute -Path '/videos' -Source '/videos' } This will create 2 Static Routes at /assets/images and /assets/videos , referencing files from the directories ./content/assets/images and ./content/assets/videos respectively. Signal Routes Groupings for Signal Routes also work in the same manor as normal Routes, but you'll need to use Add-PodeSignalRouteGroup instead: Add-PodeSignalRoute -Path '/ws' -Routes { Add-PodeSignalRoute -Path '/messages1' -ScriptBlock { Send-PodeSignal -Value $SignalEvent . Data . Message } Add-PodeSignalRoute -Path '/messages2' -ScriptBlock { Send-PodeSignal -Value $SignalEvent . Data . Message } } This will create 2 Signal Routes at /ws/messages1 and /ws/messages2 .","title":"Route Grouping"},{"location":"Tutorials/Routes/Utilities/RouteGrouping/#route-grouping","text":"Instead of adding multiple Routes all with the same path, middleware, authentication and other values; you can instead create these Routes in a Route Group. This will let you specify a shared base path, middleware, authentication, etc. for multiple Routes. There are Route groupings for normal Routes, Static Routes, and Signal Routes.","title":"Route Grouping"},{"location":"Tutorials/Routes/Utilities/RouteGrouping/#routes","text":"You can add a new Route Group using Add-PodeRouteGroup , and passing a any shared details, plus a -Routes scriptblock for the routes to be created within the grouping's scope. For example, the below will add 3 Routes which all share a /api base path; some Basic authentication, and some other middleware: $mid = New-PodeMiddleware -ScriptBlock { 'some middleware being run' | Out-Default } Add-PodeRouteGroup -Path '/api' -Authentication Basic -Middleware $mid -Routes { Add-PodeRoute -Method Get -Path '/route1' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 1 } } Add-PodeRoute -Method Get -Path '/route2' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 2 } } Add-PodeRoute -Method Get -Path '/route3' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 3 } } } When run, you'll have 3 Routes that all need some Basic authentication at /api/route1 , /api/route2 , and /api/route3 . You can still add custom -Middleware on the Routes, and they'll be appended to the shared Middleware from the Group. Other parameters, such as -ContentType and -EndpointName , if supplied, will override the values passed into the Group. You can also embed groups within groups. The following is the same as the above, except this time the last 2 Routes will be at /api/inner/route2 , and /api/inner/route3 : $mid = New-PodeMiddleware -ScriptBlock { 'some middleware being run' | Out-Default } Add-PodeRouteGroup -Path '/api' -Authentication Basic -Middleware $mid -Routes { Add-PodeRoute -Method Get -Path '/route1' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 1 } } Add-PodeRouteGroup -Path '/inner' -Routes { Add-PodeRoute -Method Get -Path '/route2' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 2 } } Add-PodeRoute -Method Get -Path '/route3' -ScriptBlock { Write-PodeJsonResponse -Value @{ ID = 3 } } } }","title":"Routes"},{"location":"Tutorials/Routes/Utilities/RouteGrouping/#static-routes","text":"The Groups for Static Routes work in the same manor as normal Routes, but you'll need to use Add-PodeStaticRouteGroup instead: Add-PodeStaticRouteGroup -Path '/assets' -Source './content/assets' -Routes { Add-PodeStaticRoute -Path '/images' -Source '/images' Add-PodeStaticRoute -Path '/videos' -Source '/videos' } This will create 2 Static Routes at /assets/images and /assets/videos , referencing files from the directories ./content/assets/images and ./content/assets/videos respectively.","title":"Static Routes"},{"location":"Tutorials/Routes/Utilities/RouteGrouping/#signal-routes","text":"Groupings for Signal Routes also work in the same manor as normal Routes, but you'll need to use Add-PodeSignalRouteGroup instead: Add-PodeSignalRoute -Path '/ws' -Routes { Add-PodeSignalRoute -Path '/messages1' -ScriptBlock { Send-PodeSignal -Value $SignalEvent . Data . Message } Add-PodeSignalRoute -Path '/messages2' -ScriptBlock { Send-PodeSignal -Value $SignalEvent . Data . Message } } This will create 2 Signal Routes at /ws/messages1 and /ws/messages2 .","title":"Signal Routes"},{"location":"Tutorials/Routes/Utilities/SimplePages/","text":"Simple Pages Pode has support for generating simple GET Routes from Files, Views and ScriptBlocks. To do this, you use the Add-PodePage function, which will automatically generate a GET Route for you. Any content to be returned will be done so as HTML. ScriptBlocks You can create a simple Page using a ScriptBlock. The generated route will invoke the ScriptBlock and return any result back as HTML. This following example generates a GET /Services route: Add-PodePage -Name 'Services' -ScriptBlock { Get-Service } This would be the same as if you did the below: Add-PodeRoute -Method Get -Path '/Services' -ScriptBlock { Write-PodeHtmlResponse -Value ( Get-Service ) } Files You can create a simple Page using a file, the path of which can be literal or relative to the server. The generated route will call Write-PodeFileResponse using the file and return the content back as HTML. This following example generates a GET /About route: Add-PodePage -Name 'About' -FilePath './views/about.html' This would be the same as if you did the below: Add-PodeRoute -Method Get -Path '/About' -ScriptBlock { Write-PodeFileResponse -Path './views/about.html' -ContentType 'text/html' } Tip The file doesn't have to be static HTML, you can also use .pode files or other template engine files! Views You can create a simple Page using a View from within the server's /views directory. This following example generates a GET /Index route: Add-PodePage -Name 'Index' -View 'index' This would be the same as if you did the below: Add-PodeRoute -Method Get -Path '/Index' -ScriptBlock { Write-PodeViewResponse -Path 'index' } Tip The file doesn't have to be static HTML, you can also use .pode files or other template engine files! Route Path The Routes created will all have automatically generated paths. There are 2 components to the path: The first is if you supplied a path via -Path . The second is the -Name parameter. In general, the path will look as follows: /<path>/<name>","title":"Simple Pages"},{"location":"Tutorials/Routes/Utilities/SimplePages/#simple-pages","text":"Pode has support for generating simple GET Routes from Files, Views and ScriptBlocks. To do this, you use the Add-PodePage function, which will automatically generate a GET Route for you. Any content to be returned will be done so as HTML.","title":"Simple Pages"},{"location":"Tutorials/Routes/Utilities/SimplePages/#scriptblocks","text":"You can create a simple Page using a ScriptBlock. The generated route will invoke the ScriptBlock and return any result back as HTML. This following example generates a GET /Services route: Add-PodePage -Name 'Services' -ScriptBlock { Get-Service } This would be the same as if you did the below: Add-PodeRoute -Method Get -Path '/Services' -ScriptBlock { Write-PodeHtmlResponse -Value ( Get-Service ) }","title":"ScriptBlocks"},{"location":"Tutorials/Routes/Utilities/SimplePages/#files","text":"You can create a simple Page using a file, the path of which can be literal or relative to the server. The generated route will call Write-PodeFileResponse using the file and return the content back as HTML. This following example generates a GET /About route: Add-PodePage -Name 'About' -FilePath './views/about.html' This would be the same as if you did the below: Add-PodeRoute -Method Get -Path '/About' -ScriptBlock { Write-PodeFileResponse -Path './views/about.html' -ContentType 'text/html' } Tip The file doesn't have to be static HTML, you can also use .pode files or other template engine files!","title":"Files"},{"location":"Tutorials/Routes/Utilities/SimplePages/#views","text":"You can create a simple Page using a View from within the server's /views directory. This following example generates a GET /Index route: Add-PodePage -Name 'Index' -View 'index' This would be the same as if you did the below: Add-PodeRoute -Method Get -Path '/Index' -ScriptBlock { Write-PodeViewResponse -Path 'index' } Tip The file doesn't have to be static HTML, you can also use .pode files or other template engine files!","title":"Views"},{"location":"Tutorials/Routes/Utilities/SimplePages/#route-path","text":"The Routes created will all have automatically generated paths. There are 2 components to the path: The first is if you supplied a path via -Path . The second is the -Name parameter. In general, the path will look as follows: /<path>/<name>","title":"Route Path"},{"location":"Tutorials/Routes/Utilities/StaticContent/","text":"Static Content Static content in Pode can be used by either placing your static files within the /public directory, or by defining custom static routes. You can also specify default pages, such as index.html , for when users navigate to root folders. Caching is supported on static content. Public Directory You can place static files within the /public directory, at the root of your server. If a request is made for a file, then Pode will automatically check the public directory first, and if found will return the back. For example, if you have a logic.js at /public/scripts/logic.js . The the following request would return the file's content: Invoke-WebRequest -Uri http://localhost:8080/scripts/logic.js Or, you can reference the file in a view like: < script type = \"text/javascript\" src = \"/scripts/logic.js\" ></ script > Static Routes The following is an example of using the Add-PodeStaticRoute function to define a route to some static content directory; this tells Pode where to get static files from for certain routes. This example will define a static route for /assets , and will point the route at the internal directory path of ./content/assets : Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeStaticRoute -Path '/assets' -Source './content/assets' } The following request will retrieve an image from the ./content/assets/images directory: Invoke-WebRequest -Uri 'http://localhost:8080/assets/images/icon.png' -Method Get Middleware Anything placed within your server's /public directory will always be public static content. However, if you define custom static routes via Add-PodeStaticRoute , then you can also supply middleware - including authentication. Custom static routes follow a similar flow to normal routes, and any query string; payloads; cookies; etc, will all be parsed - allowing you to run any route specific middleware before the static content is actually returned. Middleware works the same as on normal Routes, so there's nothing extra you need to do. Any global middleware that you've defined will also work on static routes as well. Default Pages For static content, Pode also supports returning default pages when a root static content directory is requested. The inbuilt default pages are: index.html index.htm default.html default.htm These pages are checked in order, and if one is found then its content is returned. Using the above static route, if the ./content/assets/home directory contained an index.html page, then the following request would return the content for the index.html page: Invoke-WebRequest -Uri 'http://localhost:8080/assets/images/home' -Method Get The default pages can be configured in two ways; either by using the -Defaults parameter on the Add-PodeStaticRoute function, or by setting them in the server.psd1 configuration file . To set the defaults to be only a home.html page, both ways would work as follows: Defaults Parameter Add-PodeStaticRoute -Path '/assets' -Source './content/assets' -Defaults @( 'index.html' ) Configuration File @{ Web = @{ Static = @{ Defaults = @( 'home.html' ) } } } The only difference being, if you have multiple static routes, setting any default pages in the server.psd1 file will apply to all static routes. Any default pages set using the -Default parameter will have a higher precedence than the server.psd1 file. Caching Having web pages send requests to your Pode server for all static content every time can be quite a strain on the server. To help the server, you can enable static content caching, which will inform users' browsers to cache files (ie *.css and *.js ) for so many seconds - stopping the browser from re-requesting it from your server each time. By default, caching is disabled and can be enabled and controlled using the server.psd1 configuration file. To enable caching, with a default cache time of 1hr, you do: @{ Web = @{ Static = @{ Cache = @{ Enable = $true } } } } If you wish to set a max cache time of 30mins, then you would use the MaxAge property - setting it to 1800secs : @{ Web = @{ Static = @{ Cache = @{ Enable = $true MaxAge = 1800 } } } } Include/Exclude Sometimes you don't want all static content to be cached, maybe you want *.exe files to always be re-requested? This is possible using the Include and Exclude properties in the server.psd1 . Let's say you do want to exclude all *.exe files from being cached: @{ Web = @{ Static = @{ Cache = @{ Enable = $true Exclude = @( \"*.exe\" ) } } } } Or, you could setup some static routes called /assets and /images , and you want everything on /images to be cached, but only *.js files to be cached on /assets : @{ Web = @{ Static = @{ Cache = @{ Enable = $true Include = @( \"/images/*\" , \"/assets/*.js\" ) } } } } Downloadable Normally content accessed on a static route is rendered on the browser, but you can set the route to flag the files for downloading instead. If you set the -DownloadOnly switch on the Add-PodeStaticRoute` function, then accessing files on this route in a browser will cause them to be downloaded instead of rendered: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeStaticRoute -Path '/assets' -Source './content/assets' -DownloadOnly } When a static route is set as downloadable, then -Defaults and caching are not used.","title":"Static Content"},{"location":"Tutorials/Routes/Utilities/StaticContent/#static-content","text":"Static content in Pode can be used by either placing your static files within the /public directory, or by defining custom static routes. You can also specify default pages, such as index.html , for when users navigate to root folders. Caching is supported on static content.","title":"Static Content"},{"location":"Tutorials/Routes/Utilities/StaticContent/#public-directory","text":"You can place static files within the /public directory, at the root of your server. If a request is made for a file, then Pode will automatically check the public directory first, and if found will return the back. For example, if you have a logic.js at /public/scripts/logic.js . The the following request would return the file's content: Invoke-WebRequest -Uri http://localhost:8080/scripts/logic.js Or, you can reference the file in a view like: < script type = \"text/javascript\" src = \"/scripts/logic.js\" ></ script >","title":"Public Directory"},{"location":"Tutorials/Routes/Utilities/StaticContent/#static-routes","text":"The following is an example of using the Add-PodeStaticRoute function to define a route to some static content directory; this tells Pode where to get static files from for certain routes. This example will define a static route for /assets , and will point the route at the internal directory path of ./content/assets : Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeStaticRoute -Path '/assets' -Source './content/assets' } The following request will retrieve an image from the ./content/assets/images directory: Invoke-WebRequest -Uri 'http://localhost:8080/assets/images/icon.png' -Method Get","title":"Static Routes"},{"location":"Tutorials/Routes/Utilities/StaticContent/#middleware","text":"Anything placed within your server's /public directory will always be public static content. However, if you define custom static routes via Add-PodeStaticRoute , then you can also supply middleware - including authentication. Custom static routes follow a similar flow to normal routes, and any query string; payloads; cookies; etc, will all be parsed - allowing you to run any route specific middleware before the static content is actually returned. Middleware works the same as on normal Routes, so there's nothing extra you need to do. Any global middleware that you've defined will also work on static routes as well.","title":"Middleware"},{"location":"Tutorials/Routes/Utilities/StaticContent/#default-pages","text":"For static content, Pode also supports returning default pages when a root static content directory is requested. The inbuilt default pages are: index.html index.htm default.html default.htm These pages are checked in order, and if one is found then its content is returned. Using the above static route, if the ./content/assets/home directory contained an index.html page, then the following request would return the content for the index.html page: Invoke-WebRequest -Uri 'http://localhost:8080/assets/images/home' -Method Get The default pages can be configured in two ways; either by using the -Defaults parameter on the Add-PodeStaticRoute function, or by setting them in the server.psd1 configuration file . To set the defaults to be only a home.html page, both ways would work as follows: Defaults Parameter Add-PodeStaticRoute -Path '/assets' -Source './content/assets' -Defaults @( 'index.html' ) Configuration File @{ Web = @{ Static = @{ Defaults = @( 'home.html' ) } } } The only difference being, if you have multiple static routes, setting any default pages in the server.psd1 file will apply to all static routes. Any default pages set using the -Default parameter will have a higher precedence than the server.psd1 file.","title":"Default Pages"},{"location":"Tutorials/Routes/Utilities/StaticContent/#caching","text":"Having web pages send requests to your Pode server for all static content every time can be quite a strain on the server. To help the server, you can enable static content caching, which will inform users' browsers to cache files (ie *.css and *.js ) for so many seconds - stopping the browser from re-requesting it from your server each time. By default, caching is disabled and can be enabled and controlled using the server.psd1 configuration file. To enable caching, with a default cache time of 1hr, you do: @{ Web = @{ Static = @{ Cache = @{ Enable = $true } } } } If you wish to set a max cache time of 30mins, then you would use the MaxAge property - setting it to 1800secs : @{ Web = @{ Static = @{ Cache = @{ Enable = $true MaxAge = 1800 } } } }","title":"Caching"},{"location":"Tutorials/Routes/Utilities/StaticContent/#includeexclude","text":"Sometimes you don't want all static content to be cached, maybe you want *.exe files to always be re-requested? This is possible using the Include and Exclude properties in the server.psd1 . Let's say you do want to exclude all *.exe files from being cached: @{ Web = @{ Static = @{ Cache = @{ Enable = $true Exclude = @( \"*.exe\" ) } } } } Or, you could setup some static routes called /assets and /images , and you want everything on /images to be cached, but only *.js files to be cached on /assets : @{ Web = @{ Static = @{ Cache = @{ Enable = $true Include = @( \"/images/*\" , \"/assets/*.js\" ) } } } }","title":"Include/Exclude"},{"location":"Tutorials/Routes/Utilities/StaticContent/#downloadable","text":"Normally content accessed on a static route is rendered on the browser, but you can set the route to flag the files for downloading instead. If you set the -DownloadOnly switch on the Add-PodeStaticRoute` function, then accessing files on this route in a browser will cause them to be downloaded instead of rendered: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http Add-PodeStaticRoute -Path '/assets' -Source './content/assets' -DownloadOnly } When a static route is set as downloadable, then -Defaults and caching are not used.","title":"Downloadable"},{"location":"Tutorials/Views/Pode/","text":"Pode Files Pode has an inbuilt dynamic file type of .pode , which allow you to write normal file but use PowerShell within them. For view files the naming convention is just index.pode or about.pode . However for non-view files in the /public directory the convention is style.css.pode - which includes the files base file type. Views Using Pode to render dynamic view files is mostly just using normal HTML, but with the insertion of PowerShell - in fact, you could write pure HTML in a .pode file and it will still work. The difference is that you're able to embed PowerShell logic into the file, which allows you to dynamically generate HTML. To use .pode files for views, you will need to place them within the /views directory; then you'll need to set the View Engine to be Pode. Once set, you can just write view responses as per normal: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # set the engine to use and render Pode files Set-PodeViewEngine -Type Pode # render the index.pode in the /views directory Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } Info Any PowerShell in a .pode files will need to be wrapped in $(...) and each line must end with a semi-colon. Below is a basic example of a .pode view file, which just writes the current date to the browser: <!-- /views/index.pode --> < html > < head > < title > Current Date </ title > </ head > < body > < span > $([DateTime]::Now.ToString('yyyy-MM-dd HH:mm:ss');) </ span > </ body > </ html > Any data supplied to the view function when rendering .pode files will make them far more dynamic. The data supplied to view must be a hashtable , and can be referenced from within the file by using the $data argument. For example, say you need to render a search page which is a list of accounts filtered by some query; then your basic server script could look like the following: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # set the engine to use and render .pode files Set-PodeViewEngine -Type Pode # render the search.pode view Add-PodeRoute -Method Get -Path '/' -ScriptBlock { # some logic to get accounts $query = $WebEvent . Query [ 'query' ] $accounts = Find-Account -Query $query # render the file Write-PodeViewResponse -Path 'search' -Data @{ 'query' = $query ; 'accounts' = $accounts ; } } } You can see that we're supplying the found accounts to the view function as a hashtable . Next, we see the search.pode view file which generates the HTML: <!-- /views/search.pode --> < html > < head > < title > Search </ title > </ head > < body > < h1 > Search </ h1 > Query: $($data.query;) < div > $(foreach ($account in $data.accounts) { \" < div > Name: $($account.Name) </ div >< hr /> \"; }) </ div > </ body > </ html > Remember, you can access supplied data by using $data This next quick example allows you to include content from another view: <!-- /views/index.pode --> < html > $(Use-PodePartialView -Path 'shared/head' -data @{ 'Title' = 'Include Example'}) < body > < span > $([DateTime]::Now.ToString('yyyy-MM-dd HH:mm:ss');) </ span > </ body > </ html > <!-- /views/shared/head.pode --> < head > < title > $($data.Title) </ title > </ head > Non-Views The rules for using .pode files for other non-view file types, like css/js files, work exactly like the above view files but they're placed within the /public directory instead of the /views directory. You also need to specify the actual file type in the extension, for example: /public/styles/main.css.pode /public/scripts/main.js.pode Here you'll see the main extension is .pode , but you need to specify a sub-extension of the main file type such as .css - this helps Pode work out the main content type when writing to the response. Below is a .css.pode file that will render the page in purple on even seconds, or red on odd seconds: /* /public/styles/main.css.pode */ body { $( $date = [DateTime]::UtcNow ; if ($date.Second % 2 -eq 0) { \" background-color : rebeccapurple ; \" ; } else { \" background-color : red ; \" ; } ) } To load the above .css.pode file in a view file: <!-- /views/index.pode --> < html > < head > < link rel = \"stylesheet\" href = \"/styles/main.css.pode\" > </ head > < body > < span > $([DateTime]::Now.ToString('yyyy-MM-dd HH:mm:ss');) </ span > </ body > </ html > Escaping Because .pode files are interpreted as PowerShell files, there will be times - especially for JavaScript/jQuery - when you'll run into parsing errors. The bulk of the time it will likely be jQuery, where in something like the following: $ ( document ). ready (...) the $(document) will try to be run like PowerShell, and fail because document isn't a command. To fix this, you just need to use a back-tick (`) to escape the dollar ($): `$( document ). ready (...) and Pode will now parse the file correctly. Tip If you're embedding JavaScript into a .pode view file, move the JavaScript into a separate .js public static file instead. This will save constantly escaping characters for non-dynamic JavaScript.","title":"Pode Files"},{"location":"Tutorials/Views/Pode/#pode-files","text":"Pode has an inbuilt dynamic file type of .pode , which allow you to write normal file but use PowerShell within them. For view files the naming convention is just index.pode or about.pode . However for non-view files in the /public directory the convention is style.css.pode - which includes the files base file type.","title":"Pode Files"},{"location":"Tutorials/Views/Pode/#views","text":"Using Pode to render dynamic view files is mostly just using normal HTML, but with the insertion of PowerShell - in fact, you could write pure HTML in a .pode file and it will still work. The difference is that you're able to embed PowerShell logic into the file, which allows you to dynamically generate HTML. To use .pode files for views, you will need to place them within the /views directory; then you'll need to set the View Engine to be Pode. Once set, you can just write view responses as per normal: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # set the engine to use and render Pode files Set-PodeViewEngine -Type Pode # render the index.pode in the /views directory Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } Info Any PowerShell in a .pode files will need to be wrapped in $(...) and each line must end with a semi-colon. Below is a basic example of a .pode view file, which just writes the current date to the browser: <!-- /views/index.pode --> < html > < head > < title > Current Date </ title > </ head > < body > < span > $([DateTime]::Now.ToString('yyyy-MM-dd HH:mm:ss');) </ span > </ body > </ html > Any data supplied to the view function when rendering .pode files will make them far more dynamic. The data supplied to view must be a hashtable , and can be referenced from within the file by using the $data argument. For example, say you need to render a search page which is a list of accounts filtered by some query; then your basic server script could look like the following: Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # set the engine to use and render .pode files Set-PodeViewEngine -Type Pode # render the search.pode view Add-PodeRoute -Method Get -Path '/' -ScriptBlock { # some logic to get accounts $query = $WebEvent . Query [ 'query' ] $accounts = Find-Account -Query $query # render the file Write-PodeViewResponse -Path 'search' -Data @{ 'query' = $query ; 'accounts' = $accounts ; } } } You can see that we're supplying the found accounts to the view function as a hashtable . Next, we see the search.pode view file which generates the HTML: <!-- /views/search.pode --> < html > < head > < title > Search </ title > </ head > < body > < h1 > Search </ h1 > Query: $($data.query;) < div > $(foreach ($account in $data.accounts) { \" < div > Name: $($account.Name) </ div >< hr /> \"; }) </ div > </ body > </ html > Remember, you can access supplied data by using $data This next quick example allows you to include content from another view: <!-- /views/index.pode --> < html > $(Use-PodePartialView -Path 'shared/head' -data @{ 'Title' = 'Include Example'}) < body > < span > $([DateTime]::Now.ToString('yyyy-MM-dd HH:mm:ss');) </ span > </ body > </ html > <!-- /views/shared/head.pode --> < head > < title > $($data.Title) </ title > </ head >","title":"Views"},{"location":"Tutorials/Views/Pode/#non-views","text":"The rules for using .pode files for other non-view file types, like css/js files, work exactly like the above view files but they're placed within the /public directory instead of the /views directory. You also need to specify the actual file type in the extension, for example: /public/styles/main.css.pode /public/scripts/main.js.pode Here you'll see the main extension is .pode , but you need to specify a sub-extension of the main file type such as .css - this helps Pode work out the main content type when writing to the response. Below is a .css.pode file that will render the page in purple on even seconds, or red on odd seconds: /* /public/styles/main.css.pode */ body { $( $date = [DateTime]::UtcNow ; if ($date.Second % 2 -eq 0) { \" background-color : rebeccapurple ; \" ; } else { \" background-color : red ; \" ; } ) } To load the above .css.pode file in a view file: <!-- /views/index.pode --> < html > < head > < link rel = \"stylesheet\" href = \"/styles/main.css.pode\" > </ head > < body > < span > $([DateTime]::Now.ToString('yyyy-MM-dd HH:mm:ss');) </ span > </ body > </ html >","title":"Non-Views"},{"location":"Tutorials/Views/Pode/#escaping","text":"Because .pode files are interpreted as PowerShell files, there will be times - especially for JavaScript/jQuery - when you'll run into parsing errors. The bulk of the time it will likely be jQuery, where in something like the following: $ ( document ). ready (...) the $(document) will try to be run like PowerShell, and fail because document isn't a command. To fix this, you just need to use a back-tick (`) to escape the dollar ($): `$( document ). ready (...) and Pode will now parse the file correctly. Tip If you're embedding JavaScript into a .pode view file, move the JavaScript into a separate .js public static file instead. This will save constantly escaping characters for non-dynamic JavaScript.","title":"Escaping"},{"location":"Tutorials/Views/ThirdParty/","text":"Third Party Engines Pode supports the use of third-party view engines, for example you could use the EPS or PSHTML template engines. To do this you'll need to supply a scriptblock to the Set-PodeViewEngine function which tells Pode how use the third-party engine to render views. This custom scriptblock will be supplied with two arguments: $path : The path to the file that needs generating using your chosen template engine $data : Any data that was supplied to the Write-PodeViewResponse function EPS If you were to use the EPS engine, and already have the module installed, then the following server example would work for views and static content: # import the EPS module Import-Module -Name EPS Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # set the engine to use and render EPS files # (could be index.eps, or for content scripts.css.eps) Set-PodeViewEngine -Type EPS -ScriptBlock { param ( $path , $data ) $template = Get-Content -Path $path -Raw -Force if ( $null -eq $data ) { return ( Invoke-EpsTemplate -Template $template ) } else { return ( Invoke-EpsTemplate -Template $template -Binding $data ) } } # render the index.eps view Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } The following example structure could be used for the views and static content: /views index.eps /public styles/main.css.eps scripts/main.js.eps PSHTML If you were to use PSHTML engine, and already have the module installed, then the following server example would work for views and static content: # import the PSHTML module Import-Module -Name PSHTML Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # set the engine to use and render PSHTML (which are just ps1) files # (could be index.ps1, or for content scripts.css.ps1) Set-PodeViewEngine -Type PSHTML -Extension PS1 -ScriptBlock { param ( $path , $data ) return [string] (. $path $data ) } # render the index.eps view Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } The following example structure could be used for the views and static content: /views index.ps1 /public styles/main.css.ps1 scripts/main.js.ps1","title":"Third Party Engines"},{"location":"Tutorials/Views/ThirdParty/#third-party-engines","text":"Pode supports the use of third-party view engines, for example you could use the EPS or PSHTML template engines. To do this you'll need to supply a scriptblock to the Set-PodeViewEngine function which tells Pode how use the third-party engine to render views. This custom scriptblock will be supplied with two arguments: $path : The path to the file that needs generating using your chosen template engine $data : Any data that was supplied to the Write-PodeViewResponse function","title":"Third Party Engines"},{"location":"Tutorials/Views/ThirdParty/#eps","text":"If you were to use the EPS engine, and already have the module installed, then the following server example would work for views and static content: # import the EPS module Import-Module -Name EPS Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # set the engine to use and render EPS files # (could be index.eps, or for content scripts.css.eps) Set-PodeViewEngine -Type EPS -ScriptBlock { param ( $path , $data ) $template = Get-Content -Path $path -Raw -Force if ( $null -eq $data ) { return ( Invoke-EpsTemplate -Template $template ) } else { return ( Invoke-EpsTemplate -Template $template -Binding $data ) } } # render the index.eps view Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } The following example structure could be used for the views and static content: /views index.eps /public styles/main.css.eps scripts/main.js.eps","title":"EPS"},{"location":"Tutorials/Views/ThirdParty/#pshtml","text":"If you were to use PSHTML engine, and already have the module installed, then the following server example would work for views and static content: # import the PSHTML module Import-Module -Name PSHTML Start-PodeServer { Add-PodeEndpoint -Address * -Port 8080 -Protocol Http # set the engine to use and render PSHTML (which are just ps1) files # (could be index.ps1, or for content scripts.css.ps1) Set-PodeViewEngine -Type PSHTML -Extension PS1 -ScriptBlock { param ( $path , $data ) return [string] (. $path $data ) } # render the index.eps view Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } The following example structure could be used for the views and static content: /views index.ps1 /public styles/main.css.ps1 scripts/main.js.ps1","title":"PSHTML"},{"location":"Tutorials/WebSockets/Endpoints/","text":"Endpoints Pode has support for creating WebSocket endpoints, for server-to-client and/or client-to-server communications. WebSockets allow you to broadcast messages directly from your server to connected clients. This allows you to get real-time continuous updates on the frontend without having to constantly refresh the page, or by using async javascript. Server Side Listening On the server side, the first thing to do is register a new endpoint to listen on. To do this you can use Add-PodeEndpoint with a protocol of either Ws or Wss : Add-PodeEndpoint -Address * -Port 8091 -Protocol Ws # or for secure sockets: Add-PodeEndpoint -Address * -Port 8091 -Certificate './path/cert.pfx' -CertificatePassword 'dummy' -Protocol Wss Broadcasting To broadcast a message from the server to all connected clients you can use Send-PodeSignal . You can either send raw JSON data, or you can pass a HashTable/PSObject and it will be converted to JSON for you. To broadcast some data to all clients from a POST route, you could use the following. This will get some message from one of the clients, and then broadcast it back to every client: Add-PodeRoute -Method Post -Path '/broadcast' -ScriptBlock { Send-PodeSignal -Value @{ Message = $WebEvent . Data [ 'message' ] } } Because you can register WebSockets on different paths, you can also broadcast messages to all clients connected using a certain path. For example, the below would send some response time data to all clients connected and listening for response times on the /response-times path: Send-PodeSignal -Value @{ ResponseTimes = @( 123 , 101 , 104 ) } -Path '/response-times' You can also broadcast messages from Timers, or from Schedules. Routes When a client sends a message back to the server on the connected WebSocket, Pode will automatically call Send-PodeSignal to re-broadcast the message back to all clients - or to a specific Path/ClientId if supplied by the sending client. However, you can add custom route logic for WebSocket paths using Add-PodeSignalRoute . This is much like Add-PodeRoute , but allows you to run custom logic on paths for messages sent by clients. When you use a custom route, that route is responsible for calling Send-PodeSignal . Also like Add-PodeRoute there is a $SignalEvent object that you can use, which contains the client's message data, the raw Request/Response objects, etc. For example, the following signal route will broadcast the current date back to all clients, if the main client sends the message [date] on the /messages path: Add-PodeSignalRoute -Path '/messages' -ScriptBlock { $msg = $SignalEvent . Data . Message if ( $msg -ieq '[date]' ) { $msg = [datetime] :: Now . ToString () } Send-PodeSignal -Value $msg } Signal Event When using custom signal routes, the $SignalEvent is a HashTable that is available for you to use - much like the $WebEvent object for normal routes. This $SignalEvent object has the following properties: Name Type Description Data hashtable Contains the Message, an optional Path to broadcast back onto, and an optional ClientId to only broadcast back to Endpoint hashtable Contains the Address and Protocol of the endpoint being hit - such as \"pode.example.com\" or \"127.0.0.2\", or WS or WSS for the Protocol Lockable hashtable A synchronized hashtable that can be used with Lock-PodeObject Path string The path of the WebSocket - such as \"/messages\" Request object The raw Request object Response object The raw Response object Route hashtable The current Signal Route that is being invoked Streamed bool Specifies whether the current server type uses streams for the Request/Response, or raw strings Timestamp datetime The current date and time of the Signal Client Side Receiving On the client side, you need to use javascript to register a WebSocket and then bind the onmessage event to do something when a broadcasted message is received. To create a WebSocket, you can do something like the following which will bind a WebSocket onto the root path '/': $ ( document ). ready (() => { // create the websocket var ws = new WebSocket ( \"ws://localhost:8091/\" ); // event for inbound messages to append them ws . onmessage = function ( evt ) { var data = JSON . parse ( evt . data ) $ ( '#messages' ). append ( `<p> ${ data . Message } </p>` ); } }) Sending To send a message using the WebSocket, you can use the .send function. When you send a message from client-to-server, the data must be a JSON value containing the message , path , and clientId . Only the message is mandatory. For example, if you have a form with input, you can send the message as follows: $ ( '#form' ). submit ( function ( e ) { e . preventDefault (); ws . send ( JSON . stringify ({ message : $ ( '#input' ). val () })); $ ( '#input' ). val ( '' ); }) This will send the message to the server, which will in-turn broadcast it to all other clients. To broadcast the message to just clients connected on a specific path, such as /receive : $ ( '#form' ). submit ( function ( e ) { e . preventDefault (); ws . send ( JSON . stringify ({ message : $ ( '#input' ). val (), path : '/receive' })); $ ( '#input' ). val ( '' ); }) If you just want the server to on respond directlt back to the sending client, and not broadcast to all clients, then set direct to true: $ ( '#form' ). submit ( function ( e ) { e . preventDefault (); ws . send ( JSON . stringify ({ message : $ ( '#input' ). val (), direct : true })); $ ( '#input' ). val ( '' ); }) Full Example This full example is a cut-down version of the one found in /examples/web-signal.ps1 of the main repository. If you open this example on multiple browsers, sending messages will be automatically received by all browsers without using async javascript! The file structure for these files is: server.ps1 /views index.html /public script.js The following is the Pode server code, that will create one route, which will be for some home page, with a button/input for broadcasting messages. Start-PodeServer { # listen Add-PodeEndpoint -Address * -Port 8091 -Protocol Http Add-PodeEndpoint -Address * -Port 8091 -Protocol Ws # request for web page Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } Next we have the HTML web page with a basic button/input for broadcasting messages. There's also a <div> to append received messages: < html > < head > < title > WebSockets </ title > < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\" ></ script > < script type = \"text/javascript\" src = \"/script.js\" ></ script > </ head > < body > < p > Clicking submit will broadcast the message to all connected clients </ p > < form id = 'bc-form' > < input type = 'text' name = 'message' placeholder = 'Enter any random text' /> < input type = 'submit' value = 'Broadcast!' /> </ form > < div id = 'messages' ></ div > </ body > </ html > Finally, the following is the client-side javascript to register a WebSocket for the client. It will also invoke the .send function of the WebSocket when the button is clicked: $ ( document ). ready (() => { // bind submit on the form to send message to the server $ ( '#bc-form' ). submit ( function ( e ) { e . preventDefault (); ws . send ( JSON . stringify ({ message : $ ( 'input[name=message]' ). val () })); $ ( 'input[name=message]' ). val ( '' ); }); // create the websocket var ws = new WebSocket ( \"ws://localhost:8091/\" ); // event for inbound messages to append them ws . onmessage = function ( evt ) { $ ( '#messages' ). append ( `<p> ${ evt . data } </p>` ); } });","title":"Endpoints"},{"location":"Tutorials/WebSockets/Endpoints/#endpoints","text":"Pode has support for creating WebSocket endpoints, for server-to-client and/or client-to-server communications. WebSockets allow you to broadcast messages directly from your server to connected clients. This allows you to get real-time continuous updates on the frontend without having to constantly refresh the page, or by using async javascript.","title":"Endpoints"},{"location":"Tutorials/WebSockets/Endpoints/#server-side","text":"","title":"Server Side"},{"location":"Tutorials/WebSockets/Endpoints/#listening","text":"On the server side, the first thing to do is register a new endpoint to listen on. To do this you can use Add-PodeEndpoint with a protocol of either Ws or Wss : Add-PodeEndpoint -Address * -Port 8091 -Protocol Ws # or for secure sockets: Add-PodeEndpoint -Address * -Port 8091 -Certificate './path/cert.pfx' -CertificatePassword 'dummy' -Protocol Wss","title":"Listening"},{"location":"Tutorials/WebSockets/Endpoints/#broadcasting","text":"To broadcast a message from the server to all connected clients you can use Send-PodeSignal . You can either send raw JSON data, or you can pass a HashTable/PSObject and it will be converted to JSON for you. To broadcast some data to all clients from a POST route, you could use the following. This will get some message from one of the clients, and then broadcast it back to every client: Add-PodeRoute -Method Post -Path '/broadcast' -ScriptBlock { Send-PodeSignal -Value @{ Message = $WebEvent . Data [ 'message' ] } } Because you can register WebSockets on different paths, you can also broadcast messages to all clients connected using a certain path. For example, the below would send some response time data to all clients connected and listening for response times on the /response-times path: Send-PodeSignal -Value @{ ResponseTimes = @( 123 , 101 , 104 ) } -Path '/response-times' You can also broadcast messages from Timers, or from Schedules.","title":"Broadcasting"},{"location":"Tutorials/WebSockets/Endpoints/#routes","text":"When a client sends a message back to the server on the connected WebSocket, Pode will automatically call Send-PodeSignal to re-broadcast the message back to all clients - or to a specific Path/ClientId if supplied by the sending client. However, you can add custom route logic for WebSocket paths using Add-PodeSignalRoute . This is much like Add-PodeRoute , but allows you to run custom logic on paths for messages sent by clients. When you use a custom route, that route is responsible for calling Send-PodeSignal . Also like Add-PodeRoute there is a $SignalEvent object that you can use, which contains the client's message data, the raw Request/Response objects, etc. For example, the following signal route will broadcast the current date back to all clients, if the main client sends the message [date] on the /messages path: Add-PodeSignalRoute -Path '/messages' -ScriptBlock { $msg = $SignalEvent . Data . Message if ( $msg -ieq '[date]' ) { $msg = [datetime] :: Now . ToString () } Send-PodeSignal -Value $msg }","title":"Routes"},{"location":"Tutorials/WebSockets/Endpoints/#signal-event","text":"When using custom signal routes, the $SignalEvent is a HashTable that is available for you to use - much like the $WebEvent object for normal routes. This $SignalEvent object has the following properties: Name Type Description Data hashtable Contains the Message, an optional Path to broadcast back onto, and an optional ClientId to only broadcast back to Endpoint hashtable Contains the Address and Protocol of the endpoint being hit - such as \"pode.example.com\" or \"127.0.0.2\", or WS or WSS for the Protocol Lockable hashtable A synchronized hashtable that can be used with Lock-PodeObject Path string The path of the WebSocket - such as \"/messages\" Request object The raw Request object Response object The raw Response object Route hashtable The current Signal Route that is being invoked Streamed bool Specifies whether the current server type uses streams for the Request/Response, or raw strings Timestamp datetime The current date and time of the Signal","title":"Signal Event"},{"location":"Tutorials/WebSockets/Endpoints/#client-side","text":"","title":"Client Side"},{"location":"Tutorials/WebSockets/Endpoints/#receiving","text":"On the client side, you need to use javascript to register a WebSocket and then bind the onmessage event to do something when a broadcasted message is received. To create a WebSocket, you can do something like the following which will bind a WebSocket onto the root path '/': $ ( document ). ready (() => { // create the websocket var ws = new WebSocket ( \"ws://localhost:8091/\" ); // event for inbound messages to append them ws . onmessage = function ( evt ) { var data = JSON . parse ( evt . data ) $ ( '#messages' ). append ( `<p> ${ data . Message } </p>` ); } })","title":"Receiving"},{"location":"Tutorials/WebSockets/Endpoints/#sending","text":"To send a message using the WebSocket, you can use the .send function. When you send a message from client-to-server, the data must be a JSON value containing the message , path , and clientId . Only the message is mandatory. For example, if you have a form with input, you can send the message as follows: $ ( '#form' ). submit ( function ( e ) { e . preventDefault (); ws . send ( JSON . stringify ({ message : $ ( '#input' ). val () })); $ ( '#input' ). val ( '' ); }) This will send the message to the server, which will in-turn broadcast it to all other clients. To broadcast the message to just clients connected on a specific path, such as /receive : $ ( '#form' ). submit ( function ( e ) { e . preventDefault (); ws . send ( JSON . stringify ({ message : $ ( '#input' ). val (), path : '/receive' })); $ ( '#input' ). val ( '' ); }) If you just want the server to on respond directlt back to the sending client, and not broadcast to all clients, then set direct to true: $ ( '#form' ). submit ( function ( e ) { e . preventDefault (); ws . send ( JSON . stringify ({ message : $ ( '#input' ). val (), direct : true })); $ ( '#input' ). val ( '' ); })","title":"Sending"},{"location":"Tutorials/WebSockets/Endpoints/#full-example","text":"This full example is a cut-down version of the one found in /examples/web-signal.ps1 of the main repository. If you open this example on multiple browsers, sending messages will be automatically received by all browsers without using async javascript! The file structure for these files is: server.ps1 /views index.html /public script.js The following is the Pode server code, that will create one route, which will be for some home page, with a button/input for broadcasting messages. Start-PodeServer { # listen Add-PodeEndpoint -Address * -Port 8091 -Protocol Http Add-PodeEndpoint -Address * -Port 8091 -Protocol Ws # request for web page Add-PodeRoute -Method Get -Path '/' -ScriptBlock { Write-PodeViewResponse -Path 'index' } } Next we have the HTML web page with a basic button/input for broadcasting messages. There's also a <div> to append received messages: < html > < head > < title > WebSockets </ title > < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\" ></ script > < script type = \"text/javascript\" src = \"/script.js\" ></ script > </ head > < body > < p > Clicking submit will broadcast the message to all connected clients </ p > < form id = 'bc-form' > < input type = 'text' name = 'message' placeholder = 'Enter any random text' /> < input type = 'submit' value = 'Broadcast!' /> </ form > < div id = 'messages' ></ div > </ body > </ html > Finally, the following is the client-side javascript to register a WebSocket for the client. It will also invoke the .send function of the WebSocket when the button is clicked: $ ( document ). ready (() => { // bind submit on the form to send message to the server $ ( '#bc-form' ). submit ( function ( e ) { e . preventDefault (); ws . send ( JSON . stringify ({ message : $ ( 'input[name=message]' ). val () })); $ ( 'input[name=message]' ). val ( '' ); }); // create the websocket var ws = new WebSocket ( \"ws://localhost:8091/\" ); // event for inbound messages to append them ws . onmessage = function ( evt ) { $ ( '#messages' ). append ( `<p> ${ evt . data } </p>` ); } });","title":"Full Example"},{"location":"Tutorials/WebSockets/External/","text":"External Note This is still in the early stages, so if you find any issues or have any suggestion, please feel free to raise it over on GitHub ! Pode has support to connect to external WebSocket servers, and has the ability to receive and send messages to/from them. This is useful if you want to connect to external metrics servers to update dashboards; send messages to external WebSockets; or even create a bot. Connecting You can connect to an external WebSocket either in the main Start-PodeServer script, or adhoc in Routes, Timers, etc. If you opt to connect adhoc, then you'll need to pass WebSockets to -EnablePool : Start-PodeServer -EnablePool WebSockets { # ... } The function to use to connect to external WebSockets is Connect-PodeWebSocket , this expects a -Name , -Url , and a -ScriptBlock . The scriptblock is what will be invoked when a message is received from the WebSocket server. Important The -Url should begin with either ws:// or wss:// For example, if you have a WebSocket server running at ws://localhost:8091 (like the web-signal.ps1 example) then you can connect to it like below: Connect-PodeWebSocket -Name 'Example' -Url 'ws://localhost:8091' -ScriptBlock { $WsEvent . Request | Out-Default } This will simply output the message received from the WebSocket to the terminal. You'll notice the $WsEvent variable; this works like $WebEvent and others, and will contain details about the current event - mostly just the Request object and the Data received. By default the data received will be parsed from JSON, but you can customise this using the -ContentType parameter on Connect-PodeWebSocket . Pre-Call Sometimes you might need to make a call to a REST API first to retrieve the WebSocket URL to connect. The best way to achieve this is to just make an Invoke-RestMethod call first, then pass the URL into Connect-PodeWebSocket : $response = Invoke-RestMethod -Url 'https://example.com/websocket/get_url' Connect-PodeWebSocket -Name 'Example' -Url $response . url -ScriptBlock { $WsEvent . Request | Out-Default } Disconnect When you're done with a WebSocket, you can optionally call Disconnect-PodeWebSocket to close the connection. This can be called from within the scriptblock of Connect-PodeWebSocket , or by passing the -Name of the WebSocket to close directly. Reconnect If at any point you need to reset a WebSocket connection, because the connection has/will expire and you have a new URL, then you can call Reset-PodeWebSocket . If called without -Url then it will attempt to reconnect using the existing connection details, or it will attempt to reconnect but use the new URL instead. An example of this could be how Slack's Real Time Messaging works, where a new URL to connect to will be sent as a WebSocket message. You'll need to called Reset-PodeWebSocket using this new URL for the Slack connection to continue. Or, you might have to reset an existing connection on the same details because the connection dropped. Send Message You can also send messages back to a connected WebSocket by using Send-PodeWebSocket . This will need the -Name of the WebSocket to send the message, and naturally the -Message itself. For example, using the connect example above, we can extend this to send back a response instead of outputting to the terminal: Connect-PodeWebSocket -Name 'Example' -Url 'ws://localhost:8091' -ScriptBlock { Send-PodeWebSocket -Message @{ message = $WsEvent . Request . Body } } If the -Message is a hashtable or a psobject then Pode will auto-convert these to JSON (unless a different -ContentType was supplied on Connect-PodeWebSocket ). Or, you can supply a raw string message that will be used instead, with no auto-conversion. Tip In the scope of Connect-PodeWebSocket you don't need to supply the -Name on Send-PodeWebSocket . WebSocket Event When connecting to external WebSocket servers, the $WsEvent is a HashTable that is available for you to use - much like the $WebEvent object for normal routes. This $WsEvent object has the following properties: Name Type Description Data hashtable Contains the message data received from the WebSocket Lockable hashtable A synchronized hashtable that can be used with Lock-PodeObject Request object The raw Request object Timestamp datetime The current date and time of the received data","title":"External"},{"location":"Tutorials/WebSockets/External/#external","text":"Note This is still in the early stages, so if you find any issues or have any suggestion, please feel free to raise it over on GitHub ! Pode has support to connect to external WebSocket servers, and has the ability to receive and send messages to/from them. This is useful if you want to connect to external metrics servers to update dashboards; send messages to external WebSockets; or even create a bot.","title":"External"},{"location":"Tutorials/WebSockets/External/#connecting","text":"You can connect to an external WebSocket either in the main Start-PodeServer script, or adhoc in Routes, Timers, etc. If you opt to connect adhoc, then you'll need to pass WebSockets to -EnablePool : Start-PodeServer -EnablePool WebSockets { # ... } The function to use to connect to external WebSockets is Connect-PodeWebSocket , this expects a -Name , -Url , and a -ScriptBlock . The scriptblock is what will be invoked when a message is received from the WebSocket server. Important The -Url should begin with either ws:// or wss:// For example, if you have a WebSocket server running at ws://localhost:8091 (like the web-signal.ps1 example) then you can connect to it like below: Connect-PodeWebSocket -Name 'Example' -Url 'ws://localhost:8091' -ScriptBlock { $WsEvent . Request | Out-Default } This will simply output the message received from the WebSocket to the terminal. You'll notice the $WsEvent variable; this works like $WebEvent and others, and will contain details about the current event - mostly just the Request object and the Data received. By default the data received will be parsed from JSON, but you can customise this using the -ContentType parameter on Connect-PodeWebSocket .","title":"Connecting"},{"location":"Tutorials/WebSockets/External/#pre-call","text":"Sometimes you might need to make a call to a REST API first to retrieve the WebSocket URL to connect. The best way to achieve this is to just make an Invoke-RestMethod call first, then pass the URL into Connect-PodeWebSocket : $response = Invoke-RestMethod -Url 'https://example.com/websocket/get_url' Connect-PodeWebSocket -Name 'Example' -Url $response . url -ScriptBlock { $WsEvent . Request | Out-Default }","title":"Pre-Call"},{"location":"Tutorials/WebSockets/External/#disconnect","text":"When you're done with a WebSocket, you can optionally call Disconnect-PodeWebSocket to close the connection. This can be called from within the scriptblock of Connect-PodeWebSocket , or by passing the -Name of the WebSocket to close directly.","title":"Disconnect"},{"location":"Tutorials/WebSockets/External/#reconnect","text":"If at any point you need to reset a WebSocket connection, because the connection has/will expire and you have a new URL, then you can call Reset-PodeWebSocket . If called without -Url then it will attempt to reconnect using the existing connection details, or it will attempt to reconnect but use the new URL instead. An example of this could be how Slack's Real Time Messaging works, where a new URL to connect to will be sent as a WebSocket message. You'll need to called Reset-PodeWebSocket using this new URL for the Slack connection to continue. Or, you might have to reset an existing connection on the same details because the connection dropped.","title":"Reconnect"},{"location":"Tutorials/WebSockets/External/#send-message","text":"You can also send messages back to a connected WebSocket by using Send-PodeWebSocket . This will need the -Name of the WebSocket to send the message, and naturally the -Message itself. For example, using the connect example above, we can extend this to send back a response instead of outputting to the terminal: Connect-PodeWebSocket -Name 'Example' -Url 'ws://localhost:8091' -ScriptBlock { Send-PodeWebSocket -Message @{ message = $WsEvent . Request . Body } } If the -Message is a hashtable or a psobject then Pode will auto-convert these to JSON (unless a different -ContentType was supplied on Connect-PodeWebSocket ). Or, you can supply a raw string message that will be used instead, with no auto-conversion. Tip In the scope of Connect-PodeWebSocket you don't need to supply the -Name on Send-PodeWebSocket .","title":"Send Message"},{"location":"Tutorials/WebSockets/External/#websocket-event","text":"When connecting to external WebSocket servers, the $WsEvent is a HashTable that is available for you to use - much like the $WebEvent object for normal routes. This $WsEvent object has the following properties: Name Type Description Data hashtable Contains the message data received from the WebSocket Lockable hashtable A synchronized hashtable that can be used with Lock-PodeObject Request object The raw Request object Timestamp datetime The current date and time of the received data","title":"WebSocket Event"}]}