{
    "openapi": "3.1.0",
    "jsonSchemaDialect": "https://spec.openapis.org/oas/3.1/dialect/base",
    "info": {
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "title": "Swagger Petstore - OpenAPI 3.1",
        "version": "1.0.17",
        "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io).\r\nIn the third iteration of the pet store, we've switched to the design first approach!\r\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\r\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\r\n\r\nSome useful links:\r\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\r\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "apiteam@swagger.io"
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    },
    "servers": [
        {
            "url": "/api/v3",
            "description": "default endpoint"
        }
    ],
    "tags": [
        {
            "name": "user",
            "description": "Operations about user",
            "externalDocs": {
                "description": "Find out more about Swagger",
                "url": "http://swagger.io"
            }
        },
        {
            "name": "store",
            "description": "Access to Petstore orders",
            "externalDocs": {
                "description": "Find out more about Swagger",
                "url": "http://swagger.io"
            }
        },
        {
            "name": "pet",
            "description": "Everything about your Pets",
            "externalDocs": {
                "description": "Find out more about Swagger",
                "url": "http://swagger.io"
            }
        }
    ],
    "paths": {
        "/pet": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Add a new pet to the store",
                "description": "Add a new pet to the store",
                "operationId": "addPet",
                "requestBody": {
                    "$ref": "#/components/requestBodies/PetBodySchema"
                },
                "security": [
                    {
                        "Login-OAuth2": [
                            "write"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Validation exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": [
                                        "object"
                                    ],
                                    "properties": {
                                        "result": {
                                            "type": [
                                                "string"
                                            ]
                                        },
                                        "message": {
                                            "type": [
                                                "string"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing pet",
                "description": "Update an existing pet by Id",
                "operationId": "updatePet",
                "requestBody": {
                    "$ref": "#/components/requestBodies/PetBodySchema"
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": [
                                        "object"
                                    ],
                                    "properties": {
                                        "result": {
                                            "type": [
                                                "string"
                                            ]
                                        },
                                        "message": {
                                            "type": [
                                                "string"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/petcallback": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Add a new pet to the store",
                "description": "Add a new pet to the store",
                "operationId": "addPetcallback",
                "requestBody": {
                    "$ref": "#/components/requestBodies/PetBodySchema"
                },
                "callbacks": {
                    "test": {
                        "'{$request.body#/id}'": {
                            "post": {
                                "requestBody": {
                                    "content": {
                                        "\"*/*\"": {
                                            "schema": {
                                                "type": [
                                                    "string"
                                                ]
                                            }
                                        }
                                    }
                                },
                                "responses": {
                                    "200": {
                                        "description": "Successful operation",
                                        "content": {
                                            "application/json": {
                                                "schema": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Pet"
                                                    }
                                                }
                                            },
                                            "application/xml": {
                                                "schema": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Pet"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "400": {
                                        "description": "Invalid ID supplied"
                                    },
                                    "404": {
                                        "description": "Pet not found"
                                    },
                                    "default": {
                                        "description": "Something is wrong"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Login-OAuth2": [
                            "write"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Validation exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": [
                                        "object"
                                    ],
                                    "properties": {
                                        "result": {
                                            "type": [
                                                "string"
                                            ]
                                        },
                                        "message": {
                                            "type": [
                                                "string"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/petcallbackReference": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Add a new pet to the store",
                "description": "Add a new pet to the store",
                "operationId": "petcallbackReference",
                "requestBody": {
                    "$ref": "#/components/requestBodies/PetBodySchema"
                },
                "callbacks": {
                    "test1": {
                        "$ref": "#/components/callbacks/test"
                    }
                },
                "security": [
                    {
                        "Login-OAuth2": [
                            "write"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Validation exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": [
                                        "object"
                                    ],
                                    "properties": {
                                        "result": {
                                            "type": [
                                                "string"
                                            ]
                                        },
                                        "message": {
                                            "type": [
                                                "string"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/pet/findByStatus": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma separated strings",
                "operationId": "findPetsByStatus",
                "parameters": [
                    {
                        "description": "Status values that need to be considered for filter",
                        "schema": {
                            "type": "string",
                            "default": "available",
                            "enum": [
                                "available",
                                "pending",
                                "sold"
                            ]
                        },
                        "name": "status",
                        "in": "query"
                    }
                ],
                "security": [
                    {},
                    {
                        "Login-OAuth2": [
                            "read"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/pet/findByTag": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by tags",
                "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "parameters": [
                    {
                        "explode": true,
                        "description": "Tags to filter by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "name": "tag",
                        "in": "query"
                    }
                ],
                "security": [
                    {
                        "api_key": []
                    },
                    {
                        "Login-OAuth2": [
                            "read"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/store/inventory": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Returns pet inventories by status",
                "description": "Returns a map of status codes to quantities",
                "operationId": "getInventory",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": [
                                        "object"
                                    ],
                                    "properties": {
                                        "none": {
                                            "type": [
                                                "string"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/store/order": {
            "post": {
                "deprecated": true,
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "description": "Place a new order in the store",
                "operationId": "placeOrder",
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid Input"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create user.",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUser",
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/UserOpSuccess"
                    },
                    "405": {
                        "description": "Invalid Input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": [
                                        "object"
                                    ],
                                    "properties": {
                                        "result": {
                                            "type": [
                                                "string"
                                            ]
                                        },
                                        "message": {
                                            "type": [
                                                "string"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/createWithList": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array.",
                "description": "Creates list of users with given input array.",
                "operationId": "createUsersWithListInput",
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/UserOpSuccess"
                    },
                    "405": {
                        "description": "Invalid Input"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system.",
                "description": "Logs user into the system.",
                "operationId": "loginUser",
                "parameters": [
                    {
                        "description": "The user name for login",
                        "schema": {
                            "type": "string"
                        },
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "description": "The password for login in clear text",
                        "schema": {
                            "type": "string",
                            "format": "password"
                        },
                        "name": "password",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "headers": {
                            "X-Rate-Limit": {
                                "$ref": "#/components/headers/X-Rate-Limit"
                            },
                            "X-Expires-After": {
                                "$ref": "#/components/headers/X-Expires-After"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session.",
                "description": "Logs out current logged in user session.",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/stores/order/{orderId}": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
                "operationId": "getOrderExternalById",
                "parameters": [
                    {
                        "description": "ID of order that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "name": "orderId",
                        "in": "path"
                    }
                ],
                "servers": [
                    {
                        "url": "http://ext.server.com/api/v12",
                        "description": "ext test server"
                    },
                    {
                        "url": "http://ext13.server.com/api/v12",
                        "description": "ext test server 13"
                    },
                    {
                        "url": "http://ext14.server.com/api/v12",
                        "description": "ext test server 14"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            },
                            "application/x-www-form-urlencoded": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        }
    },
    "webhooks": {
        "newPet": {
            "post": {
                "description": "Information about a new pet in the system",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pets"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a 200 status to indicate that the data was received successfully"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Address": {
                "type": [
                    "object"
                ],
                "description": "Shipping Address",
                "xml": {
                    "name": "address"
                },
                "properties": {
                    "street": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "437 Lytton"
                        ]
                    },
                    "city": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "Palo Alto"
                        ]
                    },
                    "state": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "CA"
                        ]
                    },
                    "zip": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "94031"
                        ]
                    }
                },
                "required": [
                    "street",
                    "city",
                    "state",
                    "zip"
                ]
            },
            "Order": {
                "type": [
                    "object"
                ],
                "xml": {
                    "name": "order"
                },
                "properties": {
                    "id": {
                        "type": [
                            "integer"
                        ],
                        "readOnly": true,
                        "examples": [
                            10
                        ],
                        "format": "int64"
                    },
                    "petId": {
                        "type": [
                            "integer"
                        ],
                        "examples": [
                            198772
                        ],
                        "format": "int64"
                    },
                    "quantity": {
                        "type": [
                            "integer"
                        ],
                        "examples": [
                            7
                        ],
                        "format": "int32"
                    },
                    "shipDate": {
                        "type": [
                            "string"
                        ],
                        "format": "date-time"
                    },
                    "status": {
                        "type": [
                            "string"
                        ],
                        "description": "Order Status",
                        "examples": [
                            "approved"
                        ],
                        "enum": [
                            "placed",
                            "approved",
                            "delivered"
                        ]
                    },
                    "complete": {
                        "type": [
                            "boolean"
                        ]
                    },
                    "Address": {
                        "$ref": "#/components/schemas/Address"
                    }
                },
                "additionalProperties": {
                    "type": [
                        "string"
                    ]
                }
            },
            "Category": {
                "type": [
                    "object"
                ],
                "xml": {
                    "name": "category"
                },
                "properties": {
                    "id": {
                        "type": [
                            "integer"
                        ],
                        "examples": [
                            1
                        ],
                        "format": "int64"
                    },
                    "name": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "Dogs"
                        ]
                    }
                }
            },
            "User": {
                "type": [
                    "object"
                ],
                "xml": {
                    "name": "user"
                },
                "properties": {
                    "id": {
                        "type": [
                            "integer"
                        ],
                        "readOnly": true,
                        "examples": [
                            1
                        ],
                        "format": "int64"
                    },
                    "username": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "theUser"
                        ]
                    },
                    "firstName": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "John"
                        ]
                    },
                    "lastName": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "James"
                        ]
                    },
                    "email": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "john@email.com"
                        ],
                        "format": "email"
                    },
                    "password": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "12345"
                        ],
                        "format": "password"
                    },
                    "phone": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "12345"
                        ]
                    },
                    "userStatus": {
                        "type": [
                            "integer"
                        ],
                        "description": "User Status",
                        "examples": [
                            1
                        ],
                        "format": "int32"
                    }
                },
                "required": [
                    "username",
                    "password"
                ]
            },
            "aaaaa": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Address"
                    },
                    {
                        "$ref": "#/components/schemas/User"
                    }
                ]
            },
            "Tag": {
                "type": [
                    "object"
                ],
                "xml": {
                    "name": "tag"
                },
                "properties": {
                    "id": {
                        "type": [
                            "integer"
                        ],
                        "format": "int64"
                    },
                    "name": {
                        "type": [
                            "string"
                        ]
                    }
                }
            },
            "Pet": {
                "type": [
                    "object"
                ],
                "xml": {
                    "name": "pet"
                },
                "properties": {
                    "id": {
                        "type": [
                            "integer"
                        ],
                        "readOnly": true,
                        "examples": [
                            10,
                            2,
                            4
                        ],
                        "format": "int64"
                    },
                    "name": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "doggie"
                        ]
                    },
                    "category": {
                        "$ref": "#/components/schemas/Category"
                    },
                    "petType": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "dog"
                        ]
                    },
                    "photoUrls": {
                        "type": "array",
                        "items": {
                            "type": [
                                "string"
                            ]
                        }
                    },
                    "tags": {
                        "$ref": "#/components/schemas/Tag"
                    },
                    "status": {
                        "type": [
                            "string"
                        ],
                        "description": "pet status in the store",
                        "enum": [
                            "available",
                            "pending",
                            "sold"
                        ]
                    }
                },
                "required": [
                    "name",
                    "petType"
                ]
            },
            "NewCat": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pet"
                    },
                    {
                        "type": [
                            "object"
                        ],
                        "properties": {
                            "huntingSkill": {
                                "type": [
                                    "string"
                                ],
                                "description": "The measured skill for hunting",
                                "enum": [
                                    "clueless",
                                    "lazy",
                                    "adventurous",
                                    "aggressive"
                                ]
                            }
                        }
                    }
                ]
            },
            "XmlPrefixAndNamespace": {
                "type": [
                    "object"
                ],
                "properties": {
                    "id": {
                        "type": [
                            "integer"
                        ],
                        "xml": {
                            "attribute": true
                        },
                        "format": "int32"
                    },
                    "name": {
                        "type": [
                            "string"
                        ],
                        "xml": {
                            "namespace": "http://example.com/schema/sample",
                            "prefix": "sample"
                        }
                    }
                }
            },
            "animals": {
                "type": "array",
                "items": {
                    "type": [
                        "string"
                    ],
                    "xml": {
                        "name": "animal"
                    }
                }
            },
            "AnimalsNoAliens": {
                "type": "array",
                "xml": {
                    "name": "aliens"
                },
                "items": {
                    "type": [
                        "string"
                    ],
                    "xml": {
                        "name": "animal"
                    }
                }
            },
            "WrappedAnimals": {
                "type": "array",
                "xml": {
                    "wrapped": true
                },
                "items": {
                    "type": [
                        "string"
                    ]
                }
            },
            "WrappedAnimal": {
                "type": "array",
                "xml": {
                    "wrapped": true
                },
                "items": {
                    "type": [
                        "string"
                    ],
                    "xml": {
                        "name": "animal"
                    }
                }
            },
            "WrappedAliens": {
                "type": "array",
                "xml": {
                    "name": "aliens",
                    "wrapped": true
                },
                "items": {
                    "type": [
                        "string"
                    ],
                    "xml": {
                        "name": "animal"
                    }
                }
            },
            "WrappedAliensWithItems": {
                "type": "array",
                "xml": {
                    "name": "aliens",
                    "wrapped": true
                },
                "items": {
                    "type": [
                        "string"
                    ]
                }
            },
            "StructPart": {
                "type": [
                    "object"
                ],
                "properties": {
                    "name": {
                        "type": [
                            "string"
                        ]
                    },
                    "type": {
                        "type": [
                            "string"
                        ]
                    },
                    "children": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StructPart"
                        }
                    }
                }
            },
            "Pet2": {
                "type": [
                    "object"
                ],
                "properties": {
                    "name": {
                        "type": [
                            "string"
                        ]
                    },
                    "petType": {
                        "type": [
                            "string"
                        ]
                    }
                },
                "discriminator": {
                    "propertyName": "petType"
                }
            },
            "Cat2": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pet2"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "huntingSkill": {
                                "type": [
                                    "string"
                                ],
                                "description": "The measured skill for hunting",
                                "default": "lazy",
                                "enum": [
                                    "clueless",
                                    "lazy",
                                    "adventurous",
                                    "aggressive"
                                ]
                            }
                        },
                        "required": [
                            "huntingSkill"
                        ]
                    }
                ],
                "description": "A representation of a cat. Note that Cat will be used as the discriminator value."
            },
            "Dog2": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pet2"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "packSize": {
                                "type": [
                                    "integer"
                                ],
                                "description": "the size of the pack the dog is from",
                                "minimum": 0,
                                "format": "int32"
                            }
                        },
                        "required": [
                            "packSize"
                        ]
                    }
                ],
                "description": "A representation of a dog. Note that Dog will be used as the discriminator value."
            },
            "ExtendedErrorModel": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pet"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "rootCause": {
                                "type": [
                                    "string"
                                ]
                            }
                        },
                        "required": [
                            "rootCause"
                        ]
                    }
                ]
            },
            "Cat": {
                "type": [
                    "object"
                ],
                "description": "Type of cat",
                "properties": {
                    "breed": {
                        "type": [
                            "string"
                        ],
                        "description": "Type of Breed",
                        "enum": [
                            "Abyssinian",
                            "Balinese-Javanese",
                            "Burmese",
                            "British Shorthair"
                        ]
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pet"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "huntingSkill": {
                                "type": [
                                    "string"
                                ],
                                "description": "The measured skill for hunting",
                                "enum": [
                                    "clueless",
                                    "lazy",
                                    "adventurous",
                                    "aggressive"
                                ]
                            }
                        }
                    }
                ]
            },
            "Dog": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pet"
                    },
                    {
                        "type": [
                            "object"
                        ],
                        "properties": {
                            "breed": {
                                "type": [
                                    "string"
                                ],
                                "description": "Type of Breed",
                                "enum": [
                                    "Dingo",
                                    "Husky",
                                    "Retriever",
                                    "Shepherd"
                                ]
                            },
                            "bark": {
                                "type": [
                                    "boolean"
                                ]
                            }
                        }
                    }
                ]
            },
            "Pets": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Cat"
                    },
                    {
                        "$ref": "#/components/schemas/Dog"
                    }
                ],
                "discriminator": {
                    "propertyName": "petType"
                }
            },
            "ApiResponse": {
                "type": [
                    "object"
                ],
                "xml": {
                    "name": "##default"
                },
                "properties": {
                    "code": {
                        "type": [
                            "integer"
                        ],
                        "format": "int32"
                    },
                    "type": {
                        "type": [
                            "string"
                        ],
                        "examples": [
                            "doggie"
                        ]
                    },
                    "message": {
                        "type": [
                            "string"
                        ]
                    }
                }
            },
            "ErrorModel": {
                "type": [
                    "object"
                ],
                "properties": {
                    "message": {
                        "type": [
                            "string"
                        ]
                    },
                    "code": {
                        "type": [
                            "integer"
                        ],
                        "format": "int32"
                    }
                }
            }
        },
        "responses": {
            "UserOpSuccess": {
                "description": "Successful operation",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/User"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                }
            }
        },
        "parameters": {
            "PetIdParam": {
                "description": "ID of the pet",
                "required": true,
                "schema": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": "petId",
                "in": "path"
            }
        },
        "requestBodies": {
            "PetBodySchema": {
                "content": {
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/Pets"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/Pets"
                        }
                    },
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Pets"
                        }
                    }
                },
                "required": true,
                "description": "Pet in the store"
            }
        },
        "headers": {
            "X-Rate-Limit": {
                "schema": {
                    "type": [
                        "integer"
                    ],
                    "format": "int32"
                }
            },
            "X-Expires-After": {
                "schema": {
                    "type": [
                        "string"
                    ],
                    "format": "date-time"
                }
            }
        },
        "links": {
            "address": {
                "operationId": "getUserByName",
                "parameters": {
                    "username": "$request.path.username"
                }
            }
        },
        "callbacks": {
            "test": {
                "'{$request.body#/id}'": {
                    "post": {
                        "requestBody": {
                            "content": {
                                "\"*/*\"": {
                                    "schema": {
                                        "type": [
                                            "string"
                                        ]
                                    }
                                }
                            }
                        },
                        "responses": {
                            "200": {
                                "description": "Successful operation",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Pet"
                                            }
                                        }
                                    },
                                    "application/xml": {
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Pet"
                                            }
                                        }
                                    }
                                }
                            },
                            "400": {
                                "description": "Invalid ID supplied"
                            },
                            "404": {
                                "description": "Pet not found"
                            },
                            "default": {
                                "description": "Something is wrong"
                            }
                        }
                    }
                }
            }
        },
        "pathItems": {
            "GetPetByIdWithRef": {
                "get": {
                    "tags": [
                        "pet"
                    ],
                    "summary": "Find pet by ID",
                    "description": "Returns a single pet.",
                    "operationId": "getPetByIdWithRef",
                    "parameters": [
                        {
                            "description": "ID of pet to return",
                            "required": true,
                            "schema": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "name": "petId",
                            "in": "path"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                },
                                "application/xml": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid ID supplied"
                        },
                        "404": {
                            "description": "Pet not found"
                        },
                        "415": {
                            "description": "Unsupported Media Type"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "LoginApiKey": {
                "type": "apiKey",
                "in": "header",
                "name": "X-API-KEY"
            },
            "Login": {
                "type": "http",
                "scheme": "basic"
            },
            "Jwt": {
                "type": "http",
                "scheme": "bearer"
            },
            "api_key": {
                "type": "apiKey",
                "in": "header",
                "name": "api_key"
            },
            "Login-OAuth2": {
                "type": "oauth2",
                "flows": {
                    "authorizationCode": {
                        "tokenUrl": "http://example.org/api/oauth/token",
                        "authorizationUrl": "http://example.org/api/oauth/dialog",
                        "scopes": {
                            "read": "Grant read-only access to all your data except for the account and user info",
                            "write": "Grant write-only access to all your data except for the account and user info"
                        }
                    }
                }
            }
        }
    }
}